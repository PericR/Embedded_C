
022_task_scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000180  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000344  0800034c  0001034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000344  08000344  0001034c  2**0
                  CONTENTS
  4 .ARM          00000000  08000344  08000344  0001034c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000344  0800034c  0001034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000344  08000344  00010344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000348  08000348  00010348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800034c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800034c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0001034c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000097f  00000000  00000000  00010376  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000001df  00000000  00000000  00010cf5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000078  00000000  00000000  00010ed8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000060  00000000  00000000  00010f50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001c6d  00000000  00000000  00010fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000636  00000000  00000000  00012c1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00008035  00000000  00000000  00013253  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0001b288  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000110  00000000  00000000  0001b304  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800032c 	.word	0x0800032c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	0800032c 	.word	0x0800032c

08000204 <main>:
#define TICK_HZ 				1000U
#define HSI_CLOCK				16000000U
#define SYSTICK_TIM_CLK			HSI_CLOCK

int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
	init_systick_timer(TICK_HZ);
 8000208:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800020c:	f000 f802 	bl	8000214 <init_systick_timer>

	for(;;);
 8000210:	e7fe      	b.n	8000210 <main+0xc>
	...

08000214 <init_systick_timer>:
	while(1){
		printf("This is task4\n");
	}
}

void init_systick_timer(uint32_t tick_hz){
 8000214:	b480      	push	{r7}
 8000216:	b087      	sub	sp, #28
 8000218:	af00      	add	r7, sp, #0
 800021a:	6078      	str	r0, [r7, #4]
	uint32_t *pST_RVR = (uint32_t*)0xE000E014;
 800021c:	4b16      	ldr	r3, [pc, #88]	; (8000278 <init_systick_timer+0x64>)
 800021e:	617b      	str	r3, [r7, #20]
	uint32_t *pST_CSR = (uint32_t*)0xE000E010;
 8000220:	4b16      	ldr	r3, [pc, #88]	; (800027c <init_systick_timer+0x68>)
 8000222:	613b      	str	r3, [r7, #16]

	uint32_t count_value = (SYSTICK_TIM_CLK / tick_hz) - 1;
 8000224:	4a16      	ldr	r2, [pc, #88]	; (8000280 <init_systick_timer+0x6c>)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	fbb2 f3f3 	udiv	r3, r2, r3
 800022c:	3b01      	subs	r3, #1
 800022e:	60fb      	str	r3, [r7, #12]

	//clear ST_RVR
	*pST_RVR &= ~(0x00FFFFFF);
 8000230:	697b      	ldr	r3, [r7, #20]
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8000238:	697b      	ldr	r3, [r7, #20]
 800023a:	601a      	str	r2, [r3, #0]
	//load ST_RVR
	*pST_RVR |= count_value;
 800023c:	697b      	ldr	r3, [r7, #20]
 800023e:	681a      	ldr	r2, [r3, #0]
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	431a      	orrs	r2, r3
 8000244:	697b      	ldr	r3, [r7, #20]
 8000246:	601a      	str	r2, [r3, #0]

	//Do some settings
	*pST_CSR |= (1 << 2);//select processor clock source
 8000248:	693b      	ldr	r3, [r7, #16]
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	f043 0204 	orr.w	r2, r3, #4
 8000250:	693b      	ldr	r3, [r7, #16]
 8000252:	601a      	str	r2, [r3, #0]
	*pST_CSR |= (1 << 1);//Enables SysTick exception request
 8000254:	693b      	ldr	r3, [r7, #16]
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	f043 0202 	orr.w	r2, r3, #2
 800025c:	693b      	ldr	r3, [r7, #16]
 800025e:	601a      	str	r2, [r3, #0]

	//enable SYS_TICK
	*pST_CSR |= (1 << 0);//enables the counter
 8000260:	693b      	ldr	r3, [r7, #16]
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	f043 0201 	orr.w	r2, r3, #1
 8000268:	693b      	ldr	r3, [r7, #16]
 800026a:	601a      	str	r2, [r3, #0]
}
 800026c:	bf00      	nop
 800026e:	371c      	adds	r7, #28
 8000270:	46bd      	mov	sp, r7
 8000272:	bc80      	pop	{r7}
 8000274:	4770      	bx	lr
 8000276:	bf00      	nop
 8000278:	e000e014 	.word	0xe000e014
 800027c:	e000e010 	.word	0xe000e010
 8000280:	00f42400 	.word	0x00f42400

08000284 <SysTick_Handler>:

void SysTick_Handler(void){
 8000284:	b480      	push	{r7}
 8000286:	af00      	add	r7, sp, #0

}
 8000288:	bf00      	nop
 800028a:	46bd      	mov	sp, r7
 800028c:	bc80      	pop	{r7}
 800028e:	4770      	bx	lr

08000290 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000290:	480d      	ldr	r0, [pc, #52]	; (80002c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000292:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000294:	480d      	ldr	r0, [pc, #52]	; (80002cc <LoopForever+0x6>)
  ldr r1, =_edata
 8000296:	490e      	ldr	r1, [pc, #56]	; (80002d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000298:	4a0e      	ldr	r2, [pc, #56]	; (80002d4 <LoopForever+0xe>)
  movs r3, #0
 800029a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800029c:	e002      	b.n	80002a4 <LoopCopyDataInit>

0800029e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800029e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002a2:	3304      	adds	r3, #4

080002a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002a8:	d3f9      	bcc.n	800029e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002aa:	4a0b      	ldr	r2, [pc, #44]	; (80002d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002ac:	4c0b      	ldr	r4, [pc, #44]	; (80002dc <LoopForever+0x16>)
  movs r3, #0
 80002ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002b0:	e001      	b.n	80002b6 <LoopFillZerobss>

080002b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002b4:	3204      	adds	r2, #4

080002b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002b8:	d3fb      	bcc.n	80002b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80002ba:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 80002be:	f000 f811 	bl	80002e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002c2:	f7ff ff9f 	bl	8000204 <main>

080002c6 <LoopForever>:

LoopForever:
    b LoopForever
 80002c6:	e7fe      	b.n	80002c6 <LoopForever>
  ldr   r0, =_estack
 80002c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002d0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002d4:	0800034c 	.word	0x0800034c
  ldr r2, =_sbss
 80002d8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002dc:	2000001c 	.word	0x2000001c

080002e0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002e0:	e7fe      	b.n	80002e0 <ADC_IRQHandler>
	...

080002e4 <__libc_init_array>:
 80002e4:	b570      	push	{r4, r5, r6, lr}
 80002e6:	4e0d      	ldr	r6, [pc, #52]	; (800031c <__libc_init_array+0x38>)
 80002e8:	4c0d      	ldr	r4, [pc, #52]	; (8000320 <__libc_init_array+0x3c>)
 80002ea:	1ba4      	subs	r4, r4, r6
 80002ec:	10a4      	asrs	r4, r4, #2
 80002ee:	2500      	movs	r5, #0
 80002f0:	42a5      	cmp	r5, r4
 80002f2:	d109      	bne.n	8000308 <__libc_init_array+0x24>
 80002f4:	4e0b      	ldr	r6, [pc, #44]	; (8000324 <__libc_init_array+0x40>)
 80002f6:	4c0c      	ldr	r4, [pc, #48]	; (8000328 <__libc_init_array+0x44>)
 80002f8:	f000 f818 	bl	800032c <_init>
 80002fc:	1ba4      	subs	r4, r4, r6
 80002fe:	10a4      	asrs	r4, r4, #2
 8000300:	2500      	movs	r5, #0
 8000302:	42a5      	cmp	r5, r4
 8000304:	d105      	bne.n	8000312 <__libc_init_array+0x2e>
 8000306:	bd70      	pop	{r4, r5, r6, pc}
 8000308:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800030c:	4798      	blx	r3
 800030e:	3501      	adds	r5, #1
 8000310:	e7ee      	b.n	80002f0 <__libc_init_array+0xc>
 8000312:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000316:	4798      	blx	r3
 8000318:	3501      	adds	r5, #1
 800031a:	e7f2      	b.n	8000302 <__libc_init_array+0x1e>
 800031c:	08000344 	.word	0x08000344
 8000320:	08000344 	.word	0x08000344
 8000324:	08000344 	.word	0x08000344
 8000328:	08000348 	.word	0x08000348

0800032c <_init>:
 800032c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800032e:	bf00      	nop
 8000330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000332:	bc08      	pop	{r3}
 8000334:	469e      	mov	lr, r3
 8000336:	4770      	bx	lr

08000338 <_fini>:
 8000338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800033a:	bf00      	nop
 800033c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800033e:	bc08      	pop	{r3}
 8000340:	469e      	mov	lr, r3
 8000342:	4770      	bx	lr
