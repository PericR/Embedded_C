
022_task_scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000da8  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08000f6c  08000f6c  00010f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800106c  0800106c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800106c  0800106c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800106c  0800106c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800106c  0800106c  0001106c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001070  08001070  00011070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08001074  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  20000074  080010e8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  080010e8  000200b4  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000022e1  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000656  00000000  00000000  0002237f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000188  00000000  00000000  000229d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000150  00000000  00000000  00022b60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002af3  00000000  00000000  00022cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000137b  00000000  00000000  000257a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000093df  00000000  00000000  00026b1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0002fefd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ac0  00000000  00000000  0002ff78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000074 	.word	0x20000074
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000f54 	.word	0x08000f54

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000078 	.word	0x20000078
 8000200:	08000f54 	.word	0x08000f54

08000204 <main>:
uint32_t psp_of_tasks[MAX_TASKS] ={T1_STACK_START, T2_STACK_START, T3_STACK_START, T4_STACK_START};
uint32_t task_handlers[MAX_TASKS];
uint8_t current_task = 0;

int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
	enable_processor_faults();
 8000208:	f000 f8ca 	bl	80003a0 <enable_processor_faults>

	init_scheduler_stack(SCHEDULER_STACK_START);
 800020c:	480c      	ldr	r0, [pc, #48]	; (8000240 <main+0x3c>)
 800020e:	f000 f87b 	bl	8000308 <init_scheduler_stack>

	task_handlers[0] = (uint32_t)task1_handler;
 8000212:	4a0c      	ldr	r2, [pc, #48]	; (8000244 <main+0x40>)
 8000214:	4b0c      	ldr	r3, [pc, #48]	; (8000248 <main+0x44>)
 8000216:	601a      	str	r2, [r3, #0]
	task_handlers[1] = (uint32_t)task2_handler;
 8000218:	4a0c      	ldr	r2, [pc, #48]	; (800024c <main+0x48>)
 800021a:	4b0b      	ldr	r3, [pc, #44]	; (8000248 <main+0x44>)
 800021c:	605a      	str	r2, [r3, #4]
	task_handlers[2] = (uint32_t)task3_handler;
 800021e:	4a0c      	ldr	r2, [pc, #48]	; (8000250 <main+0x4c>)
 8000220:	4b09      	ldr	r3, [pc, #36]	; (8000248 <main+0x44>)
 8000222:	609a      	str	r2, [r3, #8]
	task_handlers[3] = (uint32_t)task4_handler;
 8000224:	4a0b      	ldr	r2, [pc, #44]	; (8000254 <main+0x50>)
 8000226:	4b08      	ldr	r3, [pc, #32]	; (8000248 <main+0x44>)
 8000228:	60da      	str	r2, [r3, #12]

	init_tasks_stack();
 800022a:	f000 f873 	bl	8000314 <init_tasks_stack>

	init_systick_timer(TICK_HZ);
 800022e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000232:	f000 f831 	bl	8000298 <init_systick_timer>

	switch_sp_to_psp();
 8000236:	f000 f8e1 	bl	80003fc <switch_sp_to_psp>

	task1_handler();
 800023a:	f000 f80d 	bl	8000258 <task1_handler>

	for(;;);
 800023e:	e7fe      	b.n	800023e <main+0x3a>
 8000240:	2001f000 	.word	0x2001f000
 8000244:	08000259 	.word	0x08000259
 8000248:	200000a0 	.word	0x200000a0
 800024c:	08000269 	.word	0x08000269
 8000250:	08000279 	.word	0x08000279
 8000254:	08000289 	.word	0x08000289

08000258 <task1_handler>:
}

void task1_handler(void){
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
	while(1){
		printf("This is task1\n");
 800025c:	4801      	ldr	r0, [pc, #4]	; (8000264 <task1_handler+0xc>)
 800025e:	f000 fa6d 	bl	800073c <puts>
 8000262:	e7fb      	b.n	800025c <task1_handler+0x4>
 8000264:	08000f6c 	.word	0x08000f6c

08000268 <task2_handler>:
	}
}

void task2_handler(void){
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
	while(1){
		printf("This is task2\n");
 800026c:	4801      	ldr	r0, [pc, #4]	; (8000274 <task2_handler+0xc>)
 800026e:	f000 fa65 	bl	800073c <puts>
 8000272:	e7fb      	b.n	800026c <task2_handler+0x4>
 8000274:	08000f7c 	.word	0x08000f7c

08000278 <task3_handler>:
	}
}

void task3_handler(void){
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
	while(1){
		printf("This is task3\n");
 800027c:	4801      	ldr	r0, [pc, #4]	; (8000284 <task3_handler+0xc>)
 800027e:	f000 fa5d 	bl	800073c <puts>
 8000282:	e7fb      	b.n	800027c <task3_handler+0x4>
 8000284:	08000f8c 	.word	0x08000f8c

08000288 <task4_handler>:
	}
}

void task4_handler(void){
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
	while(1){
		printf("This is task4\n");
 800028c:	4801      	ldr	r0, [pc, #4]	; (8000294 <task4_handler+0xc>)
 800028e:	f000 fa55 	bl	800073c <puts>
 8000292:	e7fb      	b.n	800028c <task4_handler+0x4>
 8000294:	08000f9c 	.word	0x08000f9c

08000298 <init_systick_timer>:
	}
}

void init_systick_timer(uint32_t tick_hz){
 8000298:	b480      	push	{r7}
 800029a:	b087      	sub	sp, #28
 800029c:	af00      	add	r7, sp, #0
 800029e:	6078      	str	r0, [r7, #4]
	uint32_t *pST_RVR = (uint32_t*)0xE000E014;
 80002a0:	4b16      	ldr	r3, [pc, #88]	; (80002fc <init_systick_timer+0x64>)
 80002a2:	617b      	str	r3, [r7, #20]
	uint32_t *pST_CSR = (uint32_t*)0xE000E010;
 80002a4:	4b16      	ldr	r3, [pc, #88]	; (8000300 <init_systick_timer+0x68>)
 80002a6:	613b      	str	r3, [r7, #16]

	uint32_t count_value = (SYSTICK_TIM_CLK / tick_hz) - 1;
 80002a8:	4a16      	ldr	r2, [pc, #88]	; (8000304 <init_systick_timer+0x6c>)
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80002b0:	3b01      	subs	r3, #1
 80002b2:	60fb      	str	r3, [r7, #12]

	//clear ST_RVR
	*pST_RVR &= ~(0x00FFFFFF);
 80002b4:	697b      	ldr	r3, [r7, #20]
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 80002bc:	697b      	ldr	r3, [r7, #20]
 80002be:	601a      	str	r2, [r3, #0]
	//load ST_RVR
	*pST_RVR |= count_value;
 80002c0:	697b      	ldr	r3, [r7, #20]
 80002c2:	681a      	ldr	r2, [r3, #0]
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	431a      	orrs	r2, r3
 80002c8:	697b      	ldr	r3, [r7, #20]
 80002ca:	601a      	str	r2, [r3, #0]

	//Do some settings
	*pST_CSR |= (1 << 2);//select processor clock source
 80002cc:	693b      	ldr	r3, [r7, #16]
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	f043 0204 	orr.w	r2, r3, #4
 80002d4:	693b      	ldr	r3, [r7, #16]
 80002d6:	601a      	str	r2, [r3, #0]
	*pST_CSR |= (1 << 1);//Enables SysTick exception request
 80002d8:	693b      	ldr	r3, [r7, #16]
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	f043 0202 	orr.w	r2, r3, #2
 80002e0:	693b      	ldr	r3, [r7, #16]
 80002e2:	601a      	str	r2, [r3, #0]

	//enable SYS_TICK
	*pST_CSR |= (1 << 0);//enables the counter
 80002e4:	693b      	ldr	r3, [r7, #16]
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	f043 0201 	orr.w	r2, r3, #1
 80002ec:	693b      	ldr	r3, [r7, #16]
 80002ee:	601a      	str	r2, [r3, #0]
}
 80002f0:	bf00      	nop
 80002f2:	371c      	adds	r7, #28
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bc80      	pop	{r7}
 80002f8:	4770      	bx	lr
 80002fa:	bf00      	nop
 80002fc:	e000e014 	.word	0xe000e014
 8000300:	e000e010 	.word	0xe000e010
 8000304:	00f42400 	.word	0x00f42400

08000308 <init_scheduler_stack>:

__attribute__((naked)) void init_scheduler_stack(uint32_t scheduler_top_of_stack){
 8000308:	4603      	mov	r3, r0
	__asm volatile("MSR MSP,%0"::"r"(scheduler_top_of_stack));
 800030a:	f383 8808 	msr	MSP, r3
	__asm volatile("BX LR");
 800030e:	4770      	bx	lr
}
 8000310:	bf00      	nop
	...

08000314 <init_tasks_stack>:

void init_tasks_stack(void){
 8000314:	b480      	push	{r7}
 8000316:	b085      	sub	sp, #20
 8000318:	af00      	add	r7, sp, #0
	uint32_t *pPSP;

	for (int i = 0; i < MAX_TASKS; i++) {
 800031a:	2300      	movs	r3, #0
 800031c:	60bb      	str	r3, [r7, #8]
 800031e:	e032      	b.n	8000386 <init_tasks_stack+0x72>
		pPSP = (uint32_t*)psp_of_tasks[i];
 8000320:	4a1d      	ldr	r2, [pc, #116]	; (8000398 <init_tasks_stack+0x84>)
 8000322:	68bb      	ldr	r3, [r7, #8]
 8000324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000328:	60fb      	str	r3, [r7, #12]

		pPSP--;//XPRS
 800032a:	68fb      	ldr	r3, [r7, #12]
 800032c:	3b04      	subs	r3, #4
 800032e:	60fb      	str	r3, [r7, #12]
		*pPSP = DUMMY_XPRS;//0x01000000
 8000330:	68fb      	ldr	r3, [r7, #12]
 8000332:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000336:	601a      	str	r2, [r3, #0]

		pPSP--;//PC
 8000338:	68fb      	ldr	r3, [r7, #12]
 800033a:	3b04      	subs	r3, #4
 800033c:	60fb      	str	r3, [r7, #12]
		*pPSP = task_handlers[i];
 800033e:	4a17      	ldr	r2, [pc, #92]	; (800039c <init_tasks_stack+0x88>)
 8000340:	68bb      	ldr	r3, [r7, #8]
 8000342:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000346:	68fb      	ldr	r3, [r7, #12]
 8000348:	601a      	str	r2, [r3, #0]

		pPSP--;//LR
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	3b04      	subs	r3, #4
 800034e:	60fb      	str	r3, [r7, #12]
		*pPSP = 0xFFFFFFFD;
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	f06f 0202 	mvn.w	r2, #2
 8000356:	601a      	str	r2, [r3, #0]

		//R0 to R12 registers should be zeros
		for(int i = 0; i < 13; i++){
 8000358:	2300      	movs	r3, #0
 800035a:	607b      	str	r3, [r7, #4]
 800035c:	e008      	b.n	8000370 <init_tasks_stack+0x5c>
			pPSP--;
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	3b04      	subs	r3, #4
 8000362:	60fb      	str	r3, [r7, #12]
			*pPSP = 0;
 8000364:	68fb      	ldr	r3, [r7, #12]
 8000366:	2200      	movs	r2, #0
 8000368:	601a      	str	r2, [r3, #0]
		for(int i = 0; i < 13; i++){
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	3301      	adds	r3, #1
 800036e:	607b      	str	r3, [r7, #4]
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	2b0c      	cmp	r3, #12
 8000374:	ddf3      	ble.n	800035e <init_tasks_stack+0x4a>
		}

		psp_of_tasks[i] = (uint32_t)pPSP;
 8000376:	68fa      	ldr	r2, [r7, #12]
 8000378:	4907      	ldr	r1, [pc, #28]	; (8000398 <init_tasks_stack+0x84>)
 800037a:	68bb      	ldr	r3, [r7, #8]
 800037c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < MAX_TASKS; i++) {
 8000380:	68bb      	ldr	r3, [r7, #8]
 8000382:	3301      	adds	r3, #1
 8000384:	60bb      	str	r3, [r7, #8]
 8000386:	68bb      	ldr	r3, [r7, #8]
 8000388:	2b03      	cmp	r3, #3
 800038a:	ddc9      	ble.n	8000320 <init_tasks_stack+0xc>
	}
}
 800038c:	bf00      	nop
 800038e:	3714      	adds	r7, #20
 8000390:	46bd      	mov	sp, r7
 8000392:	bc80      	pop	{r7}
 8000394:	4770      	bx	lr
 8000396:	bf00      	nop
 8000398:	20000000 	.word	0x20000000
 800039c:	200000a0 	.word	0x200000a0

080003a0 <enable_processor_faults>:

void enable_processor_faults(void){
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
	uint32_t *pSHCSR = (uint32_t*)0xE000ED24;
 80003a6:	4b0c      	ldr	r3, [pc, #48]	; (80003d8 <enable_processor_faults+0x38>)
 80003a8:	607b      	str	r3, [r7, #4]

	*pSHCSR |= (1 << 16);//memory manage enable
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	601a      	str	r2, [r3, #0]
	*pSHCSR |= (1 << 17);//bus fault enable
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	601a      	str	r2, [r3, #0]
	*pSHCSR |= (1 << 18);//usage fault enable
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	601a      	str	r2, [r3, #0]
}
 80003ce:	bf00      	nop
 80003d0:	370c      	adds	r7, #12
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bc80      	pop	{r7}
 80003d6:	4770      	bx	lr
 80003d8:	e000ed24 	.word	0xe000ed24

080003dc <get_psp_value>:

uint32_t get_psp_value(void){
 80003dc:	b480      	push	{r7}
 80003de:	af00      	add	r7, sp, #0
	return psp_of_tasks[current_task];
 80003e0:	4b04      	ldr	r3, [pc, #16]	; (80003f4 <get_psp_value+0x18>)
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	461a      	mov	r2, r3
 80003e6:	4b04      	ldr	r3, [pc, #16]	; (80003f8 <get_psp_value+0x1c>)
 80003e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 80003ec:	4618      	mov	r0, r3
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bc80      	pop	{r7}
 80003f2:	4770      	bx	lr
 80003f4:	20000090 	.word	0x20000090
 80003f8:	20000000 	.word	0x20000000

080003fc <switch_sp_to_psp>:

__attribute__((naked)) void switch_sp_to_psp(void){
	//initialize PSP with task1 stack address
	__asm volatile("PUSH {LR}");
 80003fc:	b500      	push	{lr}
	__asm volatile("BL get_psp_value");
 80003fe:	f7ff ffed 	bl	80003dc <get_psp_value>
	__asm volatile("MSR PSP,r0");
 8000402:	f380 8809 	msr	PSP, r0
	__asm volatile("POP {LR}");
 8000406:	f85d eb04 	ldr.w	lr, [sp], #4


	//set SP tp PSP
	__asm volatile("MOV r0,#0x02");
 800040a:	f04f 0002 	mov.w	r0, #2
	__asm volatile("MSR CONTROL, r0");
 800040e:	f380 8814 	msr	CONTROL, r0
	__asm volatile("BX LR");
 8000412:	4770      	bx	lr
}
 8000414:	bf00      	nop

08000416 <SysTick_Handler>:

//exception handlers
void SysTick_Handler(void){
 8000416:	b480      	push	{r7}
 8000418:	af00      	add	r7, sp, #0

}
 800041a:	bf00      	nop
 800041c:	46bd      	mov	sp, r7
 800041e:	bc80      	pop	{r7}
 8000420:	4770      	bx	lr
	...

08000424 <HardFault_Handler>:

void HardFault_Handler(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0
	printf("Exception: HardFault_Handler\n");
 8000428:	4801      	ldr	r0, [pc, #4]	; (8000430 <HardFault_Handler+0xc>)
 800042a:	f000 f987 	bl	800073c <puts>
	while(1);
 800042e:	e7fe      	b.n	800042e <HardFault_Handler+0xa>
 8000430:	08000fac 	.word	0x08000fac

08000434 <MemManage_Handler>:
}

void MemManage_Handler(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
	printf("Exception: MemManage_Handler\n");
 8000438:	4801      	ldr	r0, [pc, #4]	; (8000440 <MemManage_Handler+0xc>)
 800043a:	f000 f97f 	bl	800073c <puts>
	while(1);
 800043e:	e7fe      	b.n	800043e <MemManage_Handler+0xa>
 8000440:	08000fcc 	.word	0x08000fcc

08000444 <BusFault_Handler>:
}

void BusFault_Handler(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
	printf("Exception: BusFault_Handler\n");
 8000448:	4801      	ldr	r0, [pc, #4]	; (8000450 <BusFault_Handler+0xc>)
 800044a:	f000 f977 	bl	800073c <puts>
	while(1);
 800044e:	e7fe      	b.n	800044e <BusFault_Handler+0xa>
 8000450:	08000fec 	.word	0x08000fec

08000454 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000454:	b480      	push	{r7}
 8000456:	b083      	sub	sp, #12
 8000458:	af00      	add	r7, sp, #0
 800045a:	4603      	mov	r3, r0
 800045c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800045e:	4b0e      	ldr	r3, [pc, #56]	; (8000498 <ITM_SendChar+0x44>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	4a0d      	ldr	r2, [pc, #52]	; (8000498 <ITM_SendChar+0x44>)
 8000464:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000468:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800046a:	4b0c      	ldr	r3, [pc, #48]	; (800049c <ITM_SendChar+0x48>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	4a0b      	ldr	r2, [pc, #44]	; (800049c <ITM_SendChar+0x48>)
 8000470:	f043 0301 	orr.w	r3, r3, #1
 8000474:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000476:	bf00      	nop
 8000478:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	f003 0301 	and.w	r3, r3, #1
 8000482:	2b00      	cmp	r3, #0
 8000484:	d0f8      	beq.n	8000478 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000486:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800048a:	79fb      	ldrb	r3, [r7, #7]
 800048c:	6013      	str	r3, [r2, #0]
}
 800048e:	bf00      	nop
 8000490:	370c      	adds	r7, #12
 8000492:	46bd      	mov	sp, r7
 8000494:	bc80      	pop	{r7}
 8000496:	4770      	bx	lr
 8000498:	e000edfc 	.word	0xe000edfc
 800049c:	e0000e00 	.word	0xe0000e00

080004a0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b086      	sub	sp, #24
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	60f8      	str	r0, [r7, #12]
 80004a8:	60b9      	str	r1, [r7, #8]
 80004aa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004ac:	2300      	movs	r3, #0
 80004ae:	617b      	str	r3, [r7, #20]
 80004b0:	e00a      	b.n	80004c8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80004b2:	f3af 8000 	nop.w
 80004b6:	4601      	mov	r1, r0
 80004b8:	68bb      	ldr	r3, [r7, #8]
 80004ba:	1c5a      	adds	r2, r3, #1
 80004bc:	60ba      	str	r2, [r7, #8]
 80004be:	b2ca      	uxtb	r2, r1
 80004c0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004c2:	697b      	ldr	r3, [r7, #20]
 80004c4:	3301      	adds	r3, #1
 80004c6:	617b      	str	r3, [r7, #20]
 80004c8:	697a      	ldr	r2, [r7, #20]
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	429a      	cmp	r2, r3
 80004ce:	dbf0      	blt.n	80004b2 <_read+0x12>
	}

return len;
 80004d0:	687b      	ldr	r3, [r7, #4]
}
 80004d2:	4618      	mov	r0, r3
 80004d4:	3718      	adds	r7, #24
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}

080004da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80004da:	b580      	push	{r7, lr}
 80004dc:	b086      	sub	sp, #24
 80004de:	af00      	add	r7, sp, #0
 80004e0:	60f8      	str	r0, [r7, #12]
 80004e2:	60b9      	str	r1, [r7, #8]
 80004e4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004e6:	2300      	movs	r3, #0
 80004e8:	617b      	str	r3, [r7, #20]
 80004ea:	e009      	b.n	8000500 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80004ec:	68bb      	ldr	r3, [r7, #8]
 80004ee:	1c5a      	adds	r2, r3, #1
 80004f0:	60ba      	str	r2, [r7, #8]
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	4618      	mov	r0, r3
 80004f6:	f7ff ffad 	bl	8000454 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004fa:	697b      	ldr	r3, [r7, #20]
 80004fc:	3301      	adds	r3, #1
 80004fe:	617b      	str	r3, [r7, #20]
 8000500:	697a      	ldr	r2, [r7, #20]
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	429a      	cmp	r2, r3
 8000506:	dbf1      	blt.n	80004ec <_write+0x12>
	}
	return len;
 8000508:	687b      	ldr	r3, [r7, #4]
}
 800050a:	4618      	mov	r0, r3
 800050c:	3718      	adds	r7, #24
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}

08000512 <_close>:

int _close(int file)
{
 8000512:	b480      	push	{r7}
 8000514:	b083      	sub	sp, #12
 8000516:	af00      	add	r7, sp, #0
 8000518:	6078      	str	r0, [r7, #4]
	return -1;
 800051a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800051e:	4618      	mov	r0, r3
 8000520:	370c      	adds	r7, #12
 8000522:	46bd      	mov	sp, r7
 8000524:	bc80      	pop	{r7}
 8000526:	4770      	bx	lr

08000528 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
 8000530:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000532:	683b      	ldr	r3, [r7, #0]
 8000534:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000538:	605a      	str	r2, [r3, #4]
	return 0;
 800053a:	2300      	movs	r3, #0
}
 800053c:	4618      	mov	r0, r3
 800053e:	370c      	adds	r7, #12
 8000540:	46bd      	mov	sp, r7
 8000542:	bc80      	pop	{r7}
 8000544:	4770      	bx	lr

08000546 <_isatty>:

int _isatty(int file)
{
 8000546:	b480      	push	{r7}
 8000548:	b083      	sub	sp, #12
 800054a:	af00      	add	r7, sp, #0
 800054c:	6078      	str	r0, [r7, #4]
	return 1;
 800054e:	2301      	movs	r3, #1
}
 8000550:	4618      	mov	r0, r3
 8000552:	370c      	adds	r7, #12
 8000554:	46bd      	mov	sp, r7
 8000556:	bc80      	pop	{r7}
 8000558:	4770      	bx	lr

0800055a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800055a:	b480      	push	{r7}
 800055c:	b085      	sub	sp, #20
 800055e:	af00      	add	r7, sp, #0
 8000560:	60f8      	str	r0, [r7, #12]
 8000562:	60b9      	str	r1, [r7, #8]
 8000564:	607a      	str	r2, [r7, #4]
	return 0;
 8000566:	2300      	movs	r3, #0
}
 8000568:	4618      	mov	r0, r3
 800056a:	3714      	adds	r7, #20
 800056c:	46bd      	mov	sp, r7
 800056e:	bc80      	pop	{r7}
 8000570:	4770      	bx	lr
	...

08000574 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800057c:	4b11      	ldr	r3, [pc, #68]	; (80005c4 <_sbrk+0x50>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d102      	bne.n	800058a <_sbrk+0x16>
		heap_end = &end;
 8000584:	4b0f      	ldr	r3, [pc, #60]	; (80005c4 <_sbrk+0x50>)
 8000586:	4a10      	ldr	r2, [pc, #64]	; (80005c8 <_sbrk+0x54>)
 8000588:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800058a:	4b0e      	ldr	r3, [pc, #56]	; (80005c4 <_sbrk+0x50>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000590:	4b0c      	ldr	r3, [pc, #48]	; (80005c4 <_sbrk+0x50>)
 8000592:	681a      	ldr	r2, [r3, #0]
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	4413      	add	r3, r2
 8000598:	466a      	mov	r2, sp
 800059a:	4293      	cmp	r3, r2
 800059c:	d907      	bls.n	80005ae <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800059e:	f000 f83f 	bl	8000620 <__errno>
 80005a2:	4602      	mov	r2, r0
 80005a4:	230c      	movs	r3, #12
 80005a6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80005a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005ac:	e006      	b.n	80005bc <_sbrk+0x48>
	}

	heap_end += incr;
 80005ae:	4b05      	ldr	r3, [pc, #20]	; (80005c4 <_sbrk+0x50>)
 80005b0:	681a      	ldr	r2, [r3, #0]
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	4413      	add	r3, r2
 80005b6:	4a03      	ldr	r2, [pc, #12]	; (80005c4 <_sbrk+0x50>)
 80005b8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80005ba:	68fb      	ldr	r3, [r7, #12]
}
 80005bc:	4618      	mov	r0, r3
 80005be:	3710      	adds	r7, #16
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	20000094 	.word	0x20000094
 80005c8:	200000b8 	.word	0x200000b8

080005cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005cc:	480d      	ldr	r0, [pc, #52]	; (8000604 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005ce:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005d0:	480d      	ldr	r0, [pc, #52]	; (8000608 <LoopForever+0x6>)
  ldr r1, =_edata
 80005d2:	490e      	ldr	r1, [pc, #56]	; (800060c <LoopForever+0xa>)
  ldr r2, =_sidata
 80005d4:	4a0e      	ldr	r2, [pc, #56]	; (8000610 <LoopForever+0xe>)
  movs r3, #0
 80005d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005d8:	e002      	b.n	80005e0 <LoopCopyDataInit>

080005da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005de:	3304      	adds	r3, #4

080005e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005e4:	d3f9      	bcc.n	80005da <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005e6:	4a0b      	ldr	r2, [pc, #44]	; (8000614 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005e8:	4c0b      	ldr	r4, [pc, #44]	; (8000618 <LoopForever+0x16>)
  movs r3, #0
 80005ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005ec:	e001      	b.n	80005f2 <LoopFillZerobss>

080005ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005f0:	3204      	adds	r2, #4

080005f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005f4:	d3fb      	bcc.n	80005ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80005f6:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 80005fa:	f000 f817 	bl	800062c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005fe:	f7ff fe01 	bl	8000204 <main>

08000602 <LoopForever>:

LoopForever:
    b LoopForever
 8000602:	e7fe      	b.n	8000602 <LoopForever>
  ldr   r0, =_estack
 8000604:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000608:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800060c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000610:	08001074 	.word	0x08001074
  ldr r2, =_sbss
 8000614:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000618:	200000b4 	.word	0x200000b4

0800061c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800061c:	e7fe      	b.n	800061c <ADC_IRQHandler>
	...

08000620 <__errno>:
 8000620:	4b01      	ldr	r3, [pc, #4]	; (8000628 <__errno+0x8>)
 8000622:	6818      	ldr	r0, [r3, #0]
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	20000010 	.word	0x20000010

0800062c <__libc_init_array>:
 800062c:	b570      	push	{r4, r5, r6, lr}
 800062e:	4e0d      	ldr	r6, [pc, #52]	; (8000664 <__libc_init_array+0x38>)
 8000630:	4c0d      	ldr	r4, [pc, #52]	; (8000668 <__libc_init_array+0x3c>)
 8000632:	1ba4      	subs	r4, r4, r6
 8000634:	10a4      	asrs	r4, r4, #2
 8000636:	2500      	movs	r5, #0
 8000638:	42a5      	cmp	r5, r4
 800063a:	d109      	bne.n	8000650 <__libc_init_array+0x24>
 800063c:	4e0b      	ldr	r6, [pc, #44]	; (800066c <__libc_init_array+0x40>)
 800063e:	4c0c      	ldr	r4, [pc, #48]	; (8000670 <__libc_init_array+0x44>)
 8000640:	f000 fc88 	bl	8000f54 <_init>
 8000644:	1ba4      	subs	r4, r4, r6
 8000646:	10a4      	asrs	r4, r4, #2
 8000648:	2500      	movs	r5, #0
 800064a:	42a5      	cmp	r5, r4
 800064c:	d105      	bne.n	800065a <__libc_init_array+0x2e>
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000654:	4798      	blx	r3
 8000656:	3501      	adds	r5, #1
 8000658:	e7ee      	b.n	8000638 <__libc_init_array+0xc>
 800065a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800065e:	4798      	blx	r3
 8000660:	3501      	adds	r5, #1
 8000662:	e7f2      	b.n	800064a <__libc_init_array+0x1e>
 8000664:	0800106c 	.word	0x0800106c
 8000668:	0800106c 	.word	0x0800106c
 800066c:	0800106c 	.word	0x0800106c
 8000670:	08001070 	.word	0x08001070

08000674 <memset>:
 8000674:	4402      	add	r2, r0
 8000676:	4603      	mov	r3, r0
 8000678:	4293      	cmp	r3, r2
 800067a:	d100      	bne.n	800067e <memset+0xa>
 800067c:	4770      	bx	lr
 800067e:	f803 1b01 	strb.w	r1, [r3], #1
 8000682:	e7f9      	b.n	8000678 <memset+0x4>

08000684 <_puts_r>:
 8000684:	b570      	push	{r4, r5, r6, lr}
 8000686:	460e      	mov	r6, r1
 8000688:	4605      	mov	r5, r0
 800068a:	b118      	cbz	r0, 8000694 <_puts_r+0x10>
 800068c:	6983      	ldr	r3, [r0, #24]
 800068e:	b90b      	cbnz	r3, 8000694 <_puts_r+0x10>
 8000690:	f000 fa0c 	bl	8000aac <__sinit>
 8000694:	69ab      	ldr	r3, [r5, #24]
 8000696:	68ac      	ldr	r4, [r5, #8]
 8000698:	b913      	cbnz	r3, 80006a0 <_puts_r+0x1c>
 800069a:	4628      	mov	r0, r5
 800069c:	f000 fa06 	bl	8000aac <__sinit>
 80006a0:	4b23      	ldr	r3, [pc, #140]	; (8000730 <_puts_r+0xac>)
 80006a2:	429c      	cmp	r4, r3
 80006a4:	d117      	bne.n	80006d6 <_puts_r+0x52>
 80006a6:	686c      	ldr	r4, [r5, #4]
 80006a8:	89a3      	ldrh	r3, [r4, #12]
 80006aa:	071b      	lsls	r3, r3, #28
 80006ac:	d51d      	bpl.n	80006ea <_puts_r+0x66>
 80006ae:	6923      	ldr	r3, [r4, #16]
 80006b0:	b1db      	cbz	r3, 80006ea <_puts_r+0x66>
 80006b2:	3e01      	subs	r6, #1
 80006b4:	68a3      	ldr	r3, [r4, #8]
 80006b6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80006ba:	3b01      	subs	r3, #1
 80006bc:	60a3      	str	r3, [r4, #8]
 80006be:	b9e9      	cbnz	r1, 80006fc <_puts_r+0x78>
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	da2e      	bge.n	8000722 <_puts_r+0x9e>
 80006c4:	4622      	mov	r2, r4
 80006c6:	210a      	movs	r1, #10
 80006c8:	4628      	mov	r0, r5
 80006ca:	f000 f83f 	bl	800074c <__swbuf_r>
 80006ce:	3001      	adds	r0, #1
 80006d0:	d011      	beq.n	80006f6 <_puts_r+0x72>
 80006d2:	200a      	movs	r0, #10
 80006d4:	e011      	b.n	80006fa <_puts_r+0x76>
 80006d6:	4b17      	ldr	r3, [pc, #92]	; (8000734 <_puts_r+0xb0>)
 80006d8:	429c      	cmp	r4, r3
 80006da:	d101      	bne.n	80006e0 <_puts_r+0x5c>
 80006dc:	68ac      	ldr	r4, [r5, #8]
 80006de:	e7e3      	b.n	80006a8 <_puts_r+0x24>
 80006e0:	4b15      	ldr	r3, [pc, #84]	; (8000738 <_puts_r+0xb4>)
 80006e2:	429c      	cmp	r4, r3
 80006e4:	bf08      	it	eq
 80006e6:	68ec      	ldreq	r4, [r5, #12]
 80006e8:	e7de      	b.n	80006a8 <_puts_r+0x24>
 80006ea:	4621      	mov	r1, r4
 80006ec:	4628      	mov	r0, r5
 80006ee:	f000 f87f 	bl	80007f0 <__swsetup_r>
 80006f2:	2800      	cmp	r0, #0
 80006f4:	d0dd      	beq.n	80006b2 <_puts_r+0x2e>
 80006f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	da04      	bge.n	800070a <_puts_r+0x86>
 8000700:	69a2      	ldr	r2, [r4, #24]
 8000702:	429a      	cmp	r2, r3
 8000704:	dc06      	bgt.n	8000714 <_puts_r+0x90>
 8000706:	290a      	cmp	r1, #10
 8000708:	d004      	beq.n	8000714 <_puts_r+0x90>
 800070a:	6823      	ldr	r3, [r4, #0]
 800070c:	1c5a      	adds	r2, r3, #1
 800070e:	6022      	str	r2, [r4, #0]
 8000710:	7019      	strb	r1, [r3, #0]
 8000712:	e7cf      	b.n	80006b4 <_puts_r+0x30>
 8000714:	4622      	mov	r2, r4
 8000716:	4628      	mov	r0, r5
 8000718:	f000 f818 	bl	800074c <__swbuf_r>
 800071c:	3001      	adds	r0, #1
 800071e:	d1c9      	bne.n	80006b4 <_puts_r+0x30>
 8000720:	e7e9      	b.n	80006f6 <_puts_r+0x72>
 8000722:	6823      	ldr	r3, [r4, #0]
 8000724:	200a      	movs	r0, #10
 8000726:	1c5a      	adds	r2, r3, #1
 8000728:	6022      	str	r2, [r4, #0]
 800072a:	7018      	strb	r0, [r3, #0]
 800072c:	e7e5      	b.n	80006fa <_puts_r+0x76>
 800072e:	bf00      	nop
 8000730:	0800102c 	.word	0x0800102c
 8000734:	0800104c 	.word	0x0800104c
 8000738:	0800100c 	.word	0x0800100c

0800073c <puts>:
 800073c:	4b02      	ldr	r3, [pc, #8]	; (8000748 <puts+0xc>)
 800073e:	4601      	mov	r1, r0
 8000740:	6818      	ldr	r0, [r3, #0]
 8000742:	f7ff bf9f 	b.w	8000684 <_puts_r>
 8000746:	bf00      	nop
 8000748:	20000010 	.word	0x20000010

0800074c <__swbuf_r>:
 800074c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800074e:	460e      	mov	r6, r1
 8000750:	4614      	mov	r4, r2
 8000752:	4605      	mov	r5, r0
 8000754:	b118      	cbz	r0, 800075e <__swbuf_r+0x12>
 8000756:	6983      	ldr	r3, [r0, #24]
 8000758:	b90b      	cbnz	r3, 800075e <__swbuf_r+0x12>
 800075a:	f000 f9a7 	bl	8000aac <__sinit>
 800075e:	4b21      	ldr	r3, [pc, #132]	; (80007e4 <__swbuf_r+0x98>)
 8000760:	429c      	cmp	r4, r3
 8000762:	d12a      	bne.n	80007ba <__swbuf_r+0x6e>
 8000764:	686c      	ldr	r4, [r5, #4]
 8000766:	69a3      	ldr	r3, [r4, #24]
 8000768:	60a3      	str	r3, [r4, #8]
 800076a:	89a3      	ldrh	r3, [r4, #12]
 800076c:	071a      	lsls	r2, r3, #28
 800076e:	d52e      	bpl.n	80007ce <__swbuf_r+0x82>
 8000770:	6923      	ldr	r3, [r4, #16]
 8000772:	b363      	cbz	r3, 80007ce <__swbuf_r+0x82>
 8000774:	6923      	ldr	r3, [r4, #16]
 8000776:	6820      	ldr	r0, [r4, #0]
 8000778:	1ac0      	subs	r0, r0, r3
 800077a:	6963      	ldr	r3, [r4, #20]
 800077c:	b2f6      	uxtb	r6, r6
 800077e:	4283      	cmp	r3, r0
 8000780:	4637      	mov	r7, r6
 8000782:	dc04      	bgt.n	800078e <__swbuf_r+0x42>
 8000784:	4621      	mov	r1, r4
 8000786:	4628      	mov	r0, r5
 8000788:	f000 f926 	bl	80009d8 <_fflush_r>
 800078c:	bb28      	cbnz	r0, 80007da <__swbuf_r+0x8e>
 800078e:	68a3      	ldr	r3, [r4, #8]
 8000790:	3b01      	subs	r3, #1
 8000792:	60a3      	str	r3, [r4, #8]
 8000794:	6823      	ldr	r3, [r4, #0]
 8000796:	1c5a      	adds	r2, r3, #1
 8000798:	6022      	str	r2, [r4, #0]
 800079a:	701e      	strb	r6, [r3, #0]
 800079c:	6963      	ldr	r3, [r4, #20]
 800079e:	3001      	adds	r0, #1
 80007a0:	4283      	cmp	r3, r0
 80007a2:	d004      	beq.n	80007ae <__swbuf_r+0x62>
 80007a4:	89a3      	ldrh	r3, [r4, #12]
 80007a6:	07db      	lsls	r3, r3, #31
 80007a8:	d519      	bpl.n	80007de <__swbuf_r+0x92>
 80007aa:	2e0a      	cmp	r6, #10
 80007ac:	d117      	bne.n	80007de <__swbuf_r+0x92>
 80007ae:	4621      	mov	r1, r4
 80007b0:	4628      	mov	r0, r5
 80007b2:	f000 f911 	bl	80009d8 <_fflush_r>
 80007b6:	b190      	cbz	r0, 80007de <__swbuf_r+0x92>
 80007b8:	e00f      	b.n	80007da <__swbuf_r+0x8e>
 80007ba:	4b0b      	ldr	r3, [pc, #44]	; (80007e8 <__swbuf_r+0x9c>)
 80007bc:	429c      	cmp	r4, r3
 80007be:	d101      	bne.n	80007c4 <__swbuf_r+0x78>
 80007c0:	68ac      	ldr	r4, [r5, #8]
 80007c2:	e7d0      	b.n	8000766 <__swbuf_r+0x1a>
 80007c4:	4b09      	ldr	r3, [pc, #36]	; (80007ec <__swbuf_r+0xa0>)
 80007c6:	429c      	cmp	r4, r3
 80007c8:	bf08      	it	eq
 80007ca:	68ec      	ldreq	r4, [r5, #12]
 80007cc:	e7cb      	b.n	8000766 <__swbuf_r+0x1a>
 80007ce:	4621      	mov	r1, r4
 80007d0:	4628      	mov	r0, r5
 80007d2:	f000 f80d 	bl	80007f0 <__swsetup_r>
 80007d6:	2800      	cmp	r0, #0
 80007d8:	d0cc      	beq.n	8000774 <__swbuf_r+0x28>
 80007da:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80007de:	4638      	mov	r0, r7
 80007e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007e2:	bf00      	nop
 80007e4:	0800102c 	.word	0x0800102c
 80007e8:	0800104c 	.word	0x0800104c
 80007ec:	0800100c 	.word	0x0800100c

080007f0 <__swsetup_r>:
 80007f0:	4b32      	ldr	r3, [pc, #200]	; (80008bc <__swsetup_r+0xcc>)
 80007f2:	b570      	push	{r4, r5, r6, lr}
 80007f4:	681d      	ldr	r5, [r3, #0]
 80007f6:	4606      	mov	r6, r0
 80007f8:	460c      	mov	r4, r1
 80007fa:	b125      	cbz	r5, 8000806 <__swsetup_r+0x16>
 80007fc:	69ab      	ldr	r3, [r5, #24]
 80007fe:	b913      	cbnz	r3, 8000806 <__swsetup_r+0x16>
 8000800:	4628      	mov	r0, r5
 8000802:	f000 f953 	bl	8000aac <__sinit>
 8000806:	4b2e      	ldr	r3, [pc, #184]	; (80008c0 <__swsetup_r+0xd0>)
 8000808:	429c      	cmp	r4, r3
 800080a:	d10f      	bne.n	800082c <__swsetup_r+0x3c>
 800080c:	686c      	ldr	r4, [r5, #4]
 800080e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000812:	b29a      	uxth	r2, r3
 8000814:	0715      	lsls	r5, r2, #28
 8000816:	d42c      	bmi.n	8000872 <__swsetup_r+0x82>
 8000818:	06d0      	lsls	r0, r2, #27
 800081a:	d411      	bmi.n	8000840 <__swsetup_r+0x50>
 800081c:	2209      	movs	r2, #9
 800081e:	6032      	str	r2, [r6, #0]
 8000820:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000824:	81a3      	strh	r3, [r4, #12]
 8000826:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800082a:	e03e      	b.n	80008aa <__swsetup_r+0xba>
 800082c:	4b25      	ldr	r3, [pc, #148]	; (80008c4 <__swsetup_r+0xd4>)
 800082e:	429c      	cmp	r4, r3
 8000830:	d101      	bne.n	8000836 <__swsetup_r+0x46>
 8000832:	68ac      	ldr	r4, [r5, #8]
 8000834:	e7eb      	b.n	800080e <__swsetup_r+0x1e>
 8000836:	4b24      	ldr	r3, [pc, #144]	; (80008c8 <__swsetup_r+0xd8>)
 8000838:	429c      	cmp	r4, r3
 800083a:	bf08      	it	eq
 800083c:	68ec      	ldreq	r4, [r5, #12]
 800083e:	e7e6      	b.n	800080e <__swsetup_r+0x1e>
 8000840:	0751      	lsls	r1, r2, #29
 8000842:	d512      	bpl.n	800086a <__swsetup_r+0x7a>
 8000844:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000846:	b141      	cbz	r1, 800085a <__swsetup_r+0x6a>
 8000848:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800084c:	4299      	cmp	r1, r3
 800084e:	d002      	beq.n	8000856 <__swsetup_r+0x66>
 8000850:	4630      	mov	r0, r6
 8000852:	f000 fa19 	bl	8000c88 <_free_r>
 8000856:	2300      	movs	r3, #0
 8000858:	6363      	str	r3, [r4, #52]	; 0x34
 800085a:	89a3      	ldrh	r3, [r4, #12]
 800085c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000860:	81a3      	strh	r3, [r4, #12]
 8000862:	2300      	movs	r3, #0
 8000864:	6063      	str	r3, [r4, #4]
 8000866:	6923      	ldr	r3, [r4, #16]
 8000868:	6023      	str	r3, [r4, #0]
 800086a:	89a3      	ldrh	r3, [r4, #12]
 800086c:	f043 0308 	orr.w	r3, r3, #8
 8000870:	81a3      	strh	r3, [r4, #12]
 8000872:	6923      	ldr	r3, [r4, #16]
 8000874:	b94b      	cbnz	r3, 800088a <__swsetup_r+0x9a>
 8000876:	89a3      	ldrh	r3, [r4, #12]
 8000878:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800087c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000880:	d003      	beq.n	800088a <__swsetup_r+0x9a>
 8000882:	4621      	mov	r1, r4
 8000884:	4630      	mov	r0, r6
 8000886:	f000 f9bf 	bl	8000c08 <__smakebuf_r>
 800088a:	89a2      	ldrh	r2, [r4, #12]
 800088c:	f012 0301 	ands.w	r3, r2, #1
 8000890:	d00c      	beq.n	80008ac <__swsetup_r+0xbc>
 8000892:	2300      	movs	r3, #0
 8000894:	60a3      	str	r3, [r4, #8]
 8000896:	6963      	ldr	r3, [r4, #20]
 8000898:	425b      	negs	r3, r3
 800089a:	61a3      	str	r3, [r4, #24]
 800089c:	6923      	ldr	r3, [r4, #16]
 800089e:	b953      	cbnz	r3, 80008b6 <__swsetup_r+0xc6>
 80008a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80008a4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80008a8:	d1ba      	bne.n	8000820 <__swsetup_r+0x30>
 80008aa:	bd70      	pop	{r4, r5, r6, pc}
 80008ac:	0792      	lsls	r2, r2, #30
 80008ae:	bf58      	it	pl
 80008b0:	6963      	ldrpl	r3, [r4, #20]
 80008b2:	60a3      	str	r3, [r4, #8]
 80008b4:	e7f2      	b.n	800089c <__swsetup_r+0xac>
 80008b6:	2000      	movs	r0, #0
 80008b8:	e7f7      	b.n	80008aa <__swsetup_r+0xba>
 80008ba:	bf00      	nop
 80008bc:	20000010 	.word	0x20000010
 80008c0:	0800102c 	.word	0x0800102c
 80008c4:	0800104c 	.word	0x0800104c
 80008c8:	0800100c 	.word	0x0800100c

080008cc <__sflush_r>:
 80008cc:	898a      	ldrh	r2, [r1, #12]
 80008ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80008d2:	4605      	mov	r5, r0
 80008d4:	0710      	lsls	r0, r2, #28
 80008d6:	460c      	mov	r4, r1
 80008d8:	d458      	bmi.n	800098c <__sflush_r+0xc0>
 80008da:	684b      	ldr	r3, [r1, #4]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	dc05      	bgt.n	80008ec <__sflush_r+0x20>
 80008e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	dc02      	bgt.n	80008ec <__sflush_r+0x20>
 80008e6:	2000      	movs	r0, #0
 80008e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80008ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80008ee:	2e00      	cmp	r6, #0
 80008f0:	d0f9      	beq.n	80008e6 <__sflush_r+0x1a>
 80008f2:	2300      	movs	r3, #0
 80008f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80008f8:	682f      	ldr	r7, [r5, #0]
 80008fa:	6a21      	ldr	r1, [r4, #32]
 80008fc:	602b      	str	r3, [r5, #0]
 80008fe:	d032      	beq.n	8000966 <__sflush_r+0x9a>
 8000900:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000902:	89a3      	ldrh	r3, [r4, #12]
 8000904:	075a      	lsls	r2, r3, #29
 8000906:	d505      	bpl.n	8000914 <__sflush_r+0x48>
 8000908:	6863      	ldr	r3, [r4, #4]
 800090a:	1ac0      	subs	r0, r0, r3
 800090c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800090e:	b10b      	cbz	r3, 8000914 <__sflush_r+0x48>
 8000910:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000912:	1ac0      	subs	r0, r0, r3
 8000914:	2300      	movs	r3, #0
 8000916:	4602      	mov	r2, r0
 8000918:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800091a:	6a21      	ldr	r1, [r4, #32]
 800091c:	4628      	mov	r0, r5
 800091e:	47b0      	blx	r6
 8000920:	1c43      	adds	r3, r0, #1
 8000922:	89a3      	ldrh	r3, [r4, #12]
 8000924:	d106      	bne.n	8000934 <__sflush_r+0x68>
 8000926:	6829      	ldr	r1, [r5, #0]
 8000928:	291d      	cmp	r1, #29
 800092a:	d848      	bhi.n	80009be <__sflush_r+0xf2>
 800092c:	4a29      	ldr	r2, [pc, #164]	; (80009d4 <__sflush_r+0x108>)
 800092e:	40ca      	lsrs	r2, r1
 8000930:	07d6      	lsls	r6, r2, #31
 8000932:	d544      	bpl.n	80009be <__sflush_r+0xf2>
 8000934:	2200      	movs	r2, #0
 8000936:	6062      	str	r2, [r4, #4]
 8000938:	04d9      	lsls	r1, r3, #19
 800093a:	6922      	ldr	r2, [r4, #16]
 800093c:	6022      	str	r2, [r4, #0]
 800093e:	d504      	bpl.n	800094a <__sflush_r+0x7e>
 8000940:	1c42      	adds	r2, r0, #1
 8000942:	d101      	bne.n	8000948 <__sflush_r+0x7c>
 8000944:	682b      	ldr	r3, [r5, #0]
 8000946:	b903      	cbnz	r3, 800094a <__sflush_r+0x7e>
 8000948:	6560      	str	r0, [r4, #84]	; 0x54
 800094a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800094c:	602f      	str	r7, [r5, #0]
 800094e:	2900      	cmp	r1, #0
 8000950:	d0c9      	beq.n	80008e6 <__sflush_r+0x1a>
 8000952:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000956:	4299      	cmp	r1, r3
 8000958:	d002      	beq.n	8000960 <__sflush_r+0x94>
 800095a:	4628      	mov	r0, r5
 800095c:	f000 f994 	bl	8000c88 <_free_r>
 8000960:	2000      	movs	r0, #0
 8000962:	6360      	str	r0, [r4, #52]	; 0x34
 8000964:	e7c0      	b.n	80008e8 <__sflush_r+0x1c>
 8000966:	2301      	movs	r3, #1
 8000968:	4628      	mov	r0, r5
 800096a:	47b0      	blx	r6
 800096c:	1c41      	adds	r1, r0, #1
 800096e:	d1c8      	bne.n	8000902 <__sflush_r+0x36>
 8000970:	682b      	ldr	r3, [r5, #0]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d0c5      	beq.n	8000902 <__sflush_r+0x36>
 8000976:	2b1d      	cmp	r3, #29
 8000978:	d001      	beq.n	800097e <__sflush_r+0xb2>
 800097a:	2b16      	cmp	r3, #22
 800097c:	d101      	bne.n	8000982 <__sflush_r+0xb6>
 800097e:	602f      	str	r7, [r5, #0]
 8000980:	e7b1      	b.n	80008e6 <__sflush_r+0x1a>
 8000982:	89a3      	ldrh	r3, [r4, #12]
 8000984:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000988:	81a3      	strh	r3, [r4, #12]
 800098a:	e7ad      	b.n	80008e8 <__sflush_r+0x1c>
 800098c:	690f      	ldr	r7, [r1, #16]
 800098e:	2f00      	cmp	r7, #0
 8000990:	d0a9      	beq.n	80008e6 <__sflush_r+0x1a>
 8000992:	0793      	lsls	r3, r2, #30
 8000994:	680e      	ldr	r6, [r1, #0]
 8000996:	bf08      	it	eq
 8000998:	694b      	ldreq	r3, [r1, #20]
 800099a:	600f      	str	r7, [r1, #0]
 800099c:	bf18      	it	ne
 800099e:	2300      	movne	r3, #0
 80009a0:	eba6 0807 	sub.w	r8, r6, r7
 80009a4:	608b      	str	r3, [r1, #8]
 80009a6:	f1b8 0f00 	cmp.w	r8, #0
 80009aa:	dd9c      	ble.n	80008e6 <__sflush_r+0x1a>
 80009ac:	4643      	mov	r3, r8
 80009ae:	463a      	mov	r2, r7
 80009b0:	6a21      	ldr	r1, [r4, #32]
 80009b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80009b4:	4628      	mov	r0, r5
 80009b6:	47b0      	blx	r6
 80009b8:	2800      	cmp	r0, #0
 80009ba:	dc06      	bgt.n	80009ca <__sflush_r+0xfe>
 80009bc:	89a3      	ldrh	r3, [r4, #12]
 80009be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009c2:	81a3      	strh	r3, [r4, #12]
 80009c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009c8:	e78e      	b.n	80008e8 <__sflush_r+0x1c>
 80009ca:	4407      	add	r7, r0
 80009cc:	eba8 0800 	sub.w	r8, r8, r0
 80009d0:	e7e9      	b.n	80009a6 <__sflush_r+0xda>
 80009d2:	bf00      	nop
 80009d4:	20400001 	.word	0x20400001

080009d8 <_fflush_r>:
 80009d8:	b538      	push	{r3, r4, r5, lr}
 80009da:	690b      	ldr	r3, [r1, #16]
 80009dc:	4605      	mov	r5, r0
 80009de:	460c      	mov	r4, r1
 80009e0:	b1db      	cbz	r3, 8000a1a <_fflush_r+0x42>
 80009e2:	b118      	cbz	r0, 80009ec <_fflush_r+0x14>
 80009e4:	6983      	ldr	r3, [r0, #24]
 80009e6:	b90b      	cbnz	r3, 80009ec <_fflush_r+0x14>
 80009e8:	f000 f860 	bl	8000aac <__sinit>
 80009ec:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <_fflush_r+0x48>)
 80009ee:	429c      	cmp	r4, r3
 80009f0:	d109      	bne.n	8000a06 <_fflush_r+0x2e>
 80009f2:	686c      	ldr	r4, [r5, #4]
 80009f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80009f8:	b17b      	cbz	r3, 8000a1a <_fflush_r+0x42>
 80009fa:	4621      	mov	r1, r4
 80009fc:	4628      	mov	r0, r5
 80009fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000a02:	f7ff bf63 	b.w	80008cc <__sflush_r>
 8000a06:	4b07      	ldr	r3, [pc, #28]	; (8000a24 <_fflush_r+0x4c>)
 8000a08:	429c      	cmp	r4, r3
 8000a0a:	d101      	bne.n	8000a10 <_fflush_r+0x38>
 8000a0c:	68ac      	ldr	r4, [r5, #8]
 8000a0e:	e7f1      	b.n	80009f4 <_fflush_r+0x1c>
 8000a10:	4b05      	ldr	r3, [pc, #20]	; (8000a28 <_fflush_r+0x50>)
 8000a12:	429c      	cmp	r4, r3
 8000a14:	bf08      	it	eq
 8000a16:	68ec      	ldreq	r4, [r5, #12]
 8000a18:	e7ec      	b.n	80009f4 <_fflush_r+0x1c>
 8000a1a:	2000      	movs	r0, #0
 8000a1c:	bd38      	pop	{r3, r4, r5, pc}
 8000a1e:	bf00      	nop
 8000a20:	0800102c 	.word	0x0800102c
 8000a24:	0800104c 	.word	0x0800104c
 8000a28:	0800100c 	.word	0x0800100c

08000a2c <std>:
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	b510      	push	{r4, lr}
 8000a30:	4604      	mov	r4, r0
 8000a32:	e9c0 3300 	strd	r3, r3, [r0]
 8000a36:	6083      	str	r3, [r0, #8]
 8000a38:	8181      	strh	r1, [r0, #12]
 8000a3a:	6643      	str	r3, [r0, #100]	; 0x64
 8000a3c:	81c2      	strh	r2, [r0, #14]
 8000a3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000a42:	6183      	str	r3, [r0, #24]
 8000a44:	4619      	mov	r1, r3
 8000a46:	2208      	movs	r2, #8
 8000a48:	305c      	adds	r0, #92	; 0x5c
 8000a4a:	f7ff fe13 	bl	8000674 <memset>
 8000a4e:	4b05      	ldr	r3, [pc, #20]	; (8000a64 <std+0x38>)
 8000a50:	6263      	str	r3, [r4, #36]	; 0x24
 8000a52:	4b05      	ldr	r3, [pc, #20]	; (8000a68 <std+0x3c>)
 8000a54:	62a3      	str	r3, [r4, #40]	; 0x28
 8000a56:	4b05      	ldr	r3, [pc, #20]	; (8000a6c <std+0x40>)
 8000a58:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000a5a:	4b05      	ldr	r3, [pc, #20]	; (8000a70 <std+0x44>)
 8000a5c:	6224      	str	r4, [r4, #32]
 8000a5e:	6323      	str	r3, [r4, #48]	; 0x30
 8000a60:	bd10      	pop	{r4, pc}
 8000a62:	bf00      	nop
 8000a64:	08000df9 	.word	0x08000df9
 8000a68:	08000e1b 	.word	0x08000e1b
 8000a6c:	08000e53 	.word	0x08000e53
 8000a70:	08000e77 	.word	0x08000e77

08000a74 <_cleanup_r>:
 8000a74:	4901      	ldr	r1, [pc, #4]	; (8000a7c <_cleanup_r+0x8>)
 8000a76:	f000 b885 	b.w	8000b84 <_fwalk_reent>
 8000a7a:	bf00      	nop
 8000a7c:	080009d9 	.word	0x080009d9

08000a80 <__sfmoreglue>:
 8000a80:	b570      	push	{r4, r5, r6, lr}
 8000a82:	1e4a      	subs	r2, r1, #1
 8000a84:	2568      	movs	r5, #104	; 0x68
 8000a86:	4355      	muls	r5, r2
 8000a88:	460e      	mov	r6, r1
 8000a8a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000a8e:	f000 f949 	bl	8000d24 <_malloc_r>
 8000a92:	4604      	mov	r4, r0
 8000a94:	b140      	cbz	r0, 8000aa8 <__sfmoreglue+0x28>
 8000a96:	2100      	movs	r1, #0
 8000a98:	e9c0 1600 	strd	r1, r6, [r0]
 8000a9c:	300c      	adds	r0, #12
 8000a9e:	60a0      	str	r0, [r4, #8]
 8000aa0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000aa4:	f7ff fde6 	bl	8000674 <memset>
 8000aa8:	4620      	mov	r0, r4
 8000aaa:	bd70      	pop	{r4, r5, r6, pc}

08000aac <__sinit>:
 8000aac:	6983      	ldr	r3, [r0, #24]
 8000aae:	b510      	push	{r4, lr}
 8000ab0:	4604      	mov	r4, r0
 8000ab2:	bb33      	cbnz	r3, 8000b02 <__sinit+0x56>
 8000ab4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8000ab8:	6503      	str	r3, [r0, #80]	; 0x50
 8000aba:	4b12      	ldr	r3, [pc, #72]	; (8000b04 <__sinit+0x58>)
 8000abc:	4a12      	ldr	r2, [pc, #72]	; (8000b08 <__sinit+0x5c>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	6282      	str	r2, [r0, #40]	; 0x28
 8000ac2:	4298      	cmp	r0, r3
 8000ac4:	bf04      	itt	eq
 8000ac6:	2301      	moveq	r3, #1
 8000ac8:	6183      	streq	r3, [r0, #24]
 8000aca:	f000 f81f 	bl	8000b0c <__sfp>
 8000ace:	6060      	str	r0, [r4, #4]
 8000ad0:	4620      	mov	r0, r4
 8000ad2:	f000 f81b 	bl	8000b0c <__sfp>
 8000ad6:	60a0      	str	r0, [r4, #8]
 8000ad8:	4620      	mov	r0, r4
 8000ada:	f000 f817 	bl	8000b0c <__sfp>
 8000ade:	2200      	movs	r2, #0
 8000ae0:	60e0      	str	r0, [r4, #12]
 8000ae2:	2104      	movs	r1, #4
 8000ae4:	6860      	ldr	r0, [r4, #4]
 8000ae6:	f7ff ffa1 	bl	8000a2c <std>
 8000aea:	2201      	movs	r2, #1
 8000aec:	2109      	movs	r1, #9
 8000aee:	68a0      	ldr	r0, [r4, #8]
 8000af0:	f7ff ff9c 	bl	8000a2c <std>
 8000af4:	2202      	movs	r2, #2
 8000af6:	2112      	movs	r1, #18
 8000af8:	68e0      	ldr	r0, [r4, #12]
 8000afa:	f7ff ff97 	bl	8000a2c <std>
 8000afe:	2301      	movs	r3, #1
 8000b00:	61a3      	str	r3, [r4, #24]
 8000b02:	bd10      	pop	{r4, pc}
 8000b04:	08001008 	.word	0x08001008
 8000b08:	08000a75 	.word	0x08000a75

08000b0c <__sfp>:
 8000b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b0e:	4b1b      	ldr	r3, [pc, #108]	; (8000b7c <__sfp+0x70>)
 8000b10:	681e      	ldr	r6, [r3, #0]
 8000b12:	69b3      	ldr	r3, [r6, #24]
 8000b14:	4607      	mov	r7, r0
 8000b16:	b913      	cbnz	r3, 8000b1e <__sfp+0x12>
 8000b18:	4630      	mov	r0, r6
 8000b1a:	f7ff ffc7 	bl	8000aac <__sinit>
 8000b1e:	3648      	adds	r6, #72	; 0x48
 8000b20:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000b24:	3b01      	subs	r3, #1
 8000b26:	d503      	bpl.n	8000b30 <__sfp+0x24>
 8000b28:	6833      	ldr	r3, [r6, #0]
 8000b2a:	b133      	cbz	r3, 8000b3a <__sfp+0x2e>
 8000b2c:	6836      	ldr	r6, [r6, #0]
 8000b2e:	e7f7      	b.n	8000b20 <__sfp+0x14>
 8000b30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000b34:	b16d      	cbz	r5, 8000b52 <__sfp+0x46>
 8000b36:	3468      	adds	r4, #104	; 0x68
 8000b38:	e7f4      	b.n	8000b24 <__sfp+0x18>
 8000b3a:	2104      	movs	r1, #4
 8000b3c:	4638      	mov	r0, r7
 8000b3e:	f7ff ff9f 	bl	8000a80 <__sfmoreglue>
 8000b42:	6030      	str	r0, [r6, #0]
 8000b44:	2800      	cmp	r0, #0
 8000b46:	d1f1      	bne.n	8000b2c <__sfp+0x20>
 8000b48:	230c      	movs	r3, #12
 8000b4a:	603b      	str	r3, [r7, #0]
 8000b4c:	4604      	mov	r4, r0
 8000b4e:	4620      	mov	r0, r4
 8000b50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b52:	4b0b      	ldr	r3, [pc, #44]	; (8000b80 <__sfp+0x74>)
 8000b54:	6665      	str	r5, [r4, #100]	; 0x64
 8000b56:	e9c4 5500 	strd	r5, r5, [r4]
 8000b5a:	60a5      	str	r5, [r4, #8]
 8000b5c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8000b60:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8000b64:	2208      	movs	r2, #8
 8000b66:	4629      	mov	r1, r5
 8000b68:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000b6c:	f7ff fd82 	bl	8000674 <memset>
 8000b70:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000b74:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000b78:	e7e9      	b.n	8000b4e <__sfp+0x42>
 8000b7a:	bf00      	nop
 8000b7c:	08001008 	.word	0x08001008
 8000b80:	ffff0001 	.word	0xffff0001

08000b84 <_fwalk_reent>:
 8000b84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b88:	4680      	mov	r8, r0
 8000b8a:	4689      	mov	r9, r1
 8000b8c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000b90:	2600      	movs	r6, #0
 8000b92:	b914      	cbnz	r4, 8000b9a <_fwalk_reent+0x16>
 8000b94:	4630      	mov	r0, r6
 8000b96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b9a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8000b9e:	3f01      	subs	r7, #1
 8000ba0:	d501      	bpl.n	8000ba6 <_fwalk_reent+0x22>
 8000ba2:	6824      	ldr	r4, [r4, #0]
 8000ba4:	e7f5      	b.n	8000b92 <_fwalk_reent+0xe>
 8000ba6:	89ab      	ldrh	r3, [r5, #12]
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	d907      	bls.n	8000bbc <_fwalk_reent+0x38>
 8000bac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	d003      	beq.n	8000bbc <_fwalk_reent+0x38>
 8000bb4:	4629      	mov	r1, r5
 8000bb6:	4640      	mov	r0, r8
 8000bb8:	47c8      	blx	r9
 8000bba:	4306      	orrs	r6, r0
 8000bbc:	3568      	adds	r5, #104	; 0x68
 8000bbe:	e7ee      	b.n	8000b9e <_fwalk_reent+0x1a>

08000bc0 <__swhatbuf_r>:
 8000bc0:	b570      	push	{r4, r5, r6, lr}
 8000bc2:	460e      	mov	r6, r1
 8000bc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000bc8:	2900      	cmp	r1, #0
 8000bca:	b096      	sub	sp, #88	; 0x58
 8000bcc:	4614      	mov	r4, r2
 8000bce:	461d      	mov	r5, r3
 8000bd0:	da07      	bge.n	8000be2 <__swhatbuf_r+0x22>
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	602b      	str	r3, [r5, #0]
 8000bd6:	89b3      	ldrh	r3, [r6, #12]
 8000bd8:	061a      	lsls	r2, r3, #24
 8000bda:	d410      	bmi.n	8000bfe <__swhatbuf_r+0x3e>
 8000bdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000be0:	e00e      	b.n	8000c00 <__swhatbuf_r+0x40>
 8000be2:	466a      	mov	r2, sp
 8000be4:	f000 f96e 	bl	8000ec4 <_fstat_r>
 8000be8:	2800      	cmp	r0, #0
 8000bea:	dbf2      	blt.n	8000bd2 <__swhatbuf_r+0x12>
 8000bec:	9a01      	ldr	r2, [sp, #4]
 8000bee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000bf2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000bf6:	425a      	negs	r2, r3
 8000bf8:	415a      	adcs	r2, r3
 8000bfa:	602a      	str	r2, [r5, #0]
 8000bfc:	e7ee      	b.n	8000bdc <__swhatbuf_r+0x1c>
 8000bfe:	2340      	movs	r3, #64	; 0x40
 8000c00:	2000      	movs	r0, #0
 8000c02:	6023      	str	r3, [r4, #0]
 8000c04:	b016      	add	sp, #88	; 0x58
 8000c06:	bd70      	pop	{r4, r5, r6, pc}

08000c08 <__smakebuf_r>:
 8000c08:	898b      	ldrh	r3, [r1, #12]
 8000c0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000c0c:	079d      	lsls	r5, r3, #30
 8000c0e:	4606      	mov	r6, r0
 8000c10:	460c      	mov	r4, r1
 8000c12:	d507      	bpl.n	8000c24 <__smakebuf_r+0x1c>
 8000c14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000c18:	6023      	str	r3, [r4, #0]
 8000c1a:	6123      	str	r3, [r4, #16]
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	6163      	str	r3, [r4, #20]
 8000c20:	b002      	add	sp, #8
 8000c22:	bd70      	pop	{r4, r5, r6, pc}
 8000c24:	ab01      	add	r3, sp, #4
 8000c26:	466a      	mov	r2, sp
 8000c28:	f7ff ffca 	bl	8000bc0 <__swhatbuf_r>
 8000c2c:	9900      	ldr	r1, [sp, #0]
 8000c2e:	4605      	mov	r5, r0
 8000c30:	4630      	mov	r0, r6
 8000c32:	f000 f877 	bl	8000d24 <_malloc_r>
 8000c36:	b948      	cbnz	r0, 8000c4c <__smakebuf_r+0x44>
 8000c38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000c3c:	059a      	lsls	r2, r3, #22
 8000c3e:	d4ef      	bmi.n	8000c20 <__smakebuf_r+0x18>
 8000c40:	f023 0303 	bic.w	r3, r3, #3
 8000c44:	f043 0302 	orr.w	r3, r3, #2
 8000c48:	81a3      	strh	r3, [r4, #12]
 8000c4a:	e7e3      	b.n	8000c14 <__smakebuf_r+0xc>
 8000c4c:	4b0d      	ldr	r3, [pc, #52]	; (8000c84 <__smakebuf_r+0x7c>)
 8000c4e:	62b3      	str	r3, [r6, #40]	; 0x28
 8000c50:	89a3      	ldrh	r3, [r4, #12]
 8000c52:	6020      	str	r0, [r4, #0]
 8000c54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c58:	81a3      	strh	r3, [r4, #12]
 8000c5a:	9b00      	ldr	r3, [sp, #0]
 8000c5c:	6163      	str	r3, [r4, #20]
 8000c5e:	9b01      	ldr	r3, [sp, #4]
 8000c60:	6120      	str	r0, [r4, #16]
 8000c62:	b15b      	cbz	r3, 8000c7c <__smakebuf_r+0x74>
 8000c64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000c68:	4630      	mov	r0, r6
 8000c6a:	f000 f93d 	bl	8000ee8 <_isatty_r>
 8000c6e:	b128      	cbz	r0, 8000c7c <__smakebuf_r+0x74>
 8000c70:	89a3      	ldrh	r3, [r4, #12]
 8000c72:	f023 0303 	bic.w	r3, r3, #3
 8000c76:	f043 0301 	orr.w	r3, r3, #1
 8000c7a:	81a3      	strh	r3, [r4, #12]
 8000c7c:	89a3      	ldrh	r3, [r4, #12]
 8000c7e:	431d      	orrs	r5, r3
 8000c80:	81a5      	strh	r5, [r4, #12]
 8000c82:	e7cd      	b.n	8000c20 <__smakebuf_r+0x18>
 8000c84:	08000a75 	.word	0x08000a75

08000c88 <_free_r>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	4605      	mov	r5, r0
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	d045      	beq.n	8000d1c <_free_r+0x94>
 8000c90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000c94:	1f0c      	subs	r4, r1, #4
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	bfb8      	it	lt
 8000c9a:	18e4      	addlt	r4, r4, r3
 8000c9c:	f000 f946 	bl	8000f2c <__malloc_lock>
 8000ca0:	4a1f      	ldr	r2, [pc, #124]	; (8000d20 <_free_r+0x98>)
 8000ca2:	6813      	ldr	r3, [r2, #0]
 8000ca4:	4610      	mov	r0, r2
 8000ca6:	b933      	cbnz	r3, 8000cb6 <_free_r+0x2e>
 8000ca8:	6063      	str	r3, [r4, #4]
 8000caa:	6014      	str	r4, [r2, #0]
 8000cac:	4628      	mov	r0, r5
 8000cae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cb2:	f000 b93c 	b.w	8000f2e <__malloc_unlock>
 8000cb6:	42a3      	cmp	r3, r4
 8000cb8:	d90c      	bls.n	8000cd4 <_free_r+0x4c>
 8000cba:	6821      	ldr	r1, [r4, #0]
 8000cbc:	1862      	adds	r2, r4, r1
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	bf04      	itt	eq
 8000cc2:	681a      	ldreq	r2, [r3, #0]
 8000cc4:	685b      	ldreq	r3, [r3, #4]
 8000cc6:	6063      	str	r3, [r4, #4]
 8000cc8:	bf04      	itt	eq
 8000cca:	1852      	addeq	r2, r2, r1
 8000ccc:	6022      	streq	r2, [r4, #0]
 8000cce:	6004      	str	r4, [r0, #0]
 8000cd0:	e7ec      	b.n	8000cac <_free_r+0x24>
 8000cd2:	4613      	mov	r3, r2
 8000cd4:	685a      	ldr	r2, [r3, #4]
 8000cd6:	b10a      	cbz	r2, 8000cdc <_free_r+0x54>
 8000cd8:	42a2      	cmp	r2, r4
 8000cda:	d9fa      	bls.n	8000cd2 <_free_r+0x4a>
 8000cdc:	6819      	ldr	r1, [r3, #0]
 8000cde:	1858      	adds	r0, r3, r1
 8000ce0:	42a0      	cmp	r0, r4
 8000ce2:	d10b      	bne.n	8000cfc <_free_r+0x74>
 8000ce4:	6820      	ldr	r0, [r4, #0]
 8000ce6:	4401      	add	r1, r0
 8000ce8:	1858      	adds	r0, r3, r1
 8000cea:	4282      	cmp	r2, r0
 8000cec:	6019      	str	r1, [r3, #0]
 8000cee:	d1dd      	bne.n	8000cac <_free_r+0x24>
 8000cf0:	6810      	ldr	r0, [r2, #0]
 8000cf2:	6852      	ldr	r2, [r2, #4]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	4401      	add	r1, r0
 8000cf8:	6019      	str	r1, [r3, #0]
 8000cfa:	e7d7      	b.n	8000cac <_free_r+0x24>
 8000cfc:	d902      	bls.n	8000d04 <_free_r+0x7c>
 8000cfe:	230c      	movs	r3, #12
 8000d00:	602b      	str	r3, [r5, #0]
 8000d02:	e7d3      	b.n	8000cac <_free_r+0x24>
 8000d04:	6820      	ldr	r0, [r4, #0]
 8000d06:	1821      	adds	r1, r4, r0
 8000d08:	428a      	cmp	r2, r1
 8000d0a:	bf04      	itt	eq
 8000d0c:	6811      	ldreq	r1, [r2, #0]
 8000d0e:	6852      	ldreq	r2, [r2, #4]
 8000d10:	6062      	str	r2, [r4, #4]
 8000d12:	bf04      	itt	eq
 8000d14:	1809      	addeq	r1, r1, r0
 8000d16:	6021      	streq	r1, [r4, #0]
 8000d18:	605c      	str	r4, [r3, #4]
 8000d1a:	e7c7      	b.n	8000cac <_free_r+0x24>
 8000d1c:	bd38      	pop	{r3, r4, r5, pc}
 8000d1e:	bf00      	nop
 8000d20:	20000098 	.word	0x20000098

08000d24 <_malloc_r>:
 8000d24:	b570      	push	{r4, r5, r6, lr}
 8000d26:	1ccd      	adds	r5, r1, #3
 8000d28:	f025 0503 	bic.w	r5, r5, #3
 8000d2c:	3508      	adds	r5, #8
 8000d2e:	2d0c      	cmp	r5, #12
 8000d30:	bf38      	it	cc
 8000d32:	250c      	movcc	r5, #12
 8000d34:	2d00      	cmp	r5, #0
 8000d36:	4606      	mov	r6, r0
 8000d38:	db01      	blt.n	8000d3e <_malloc_r+0x1a>
 8000d3a:	42a9      	cmp	r1, r5
 8000d3c:	d903      	bls.n	8000d46 <_malloc_r+0x22>
 8000d3e:	230c      	movs	r3, #12
 8000d40:	6033      	str	r3, [r6, #0]
 8000d42:	2000      	movs	r0, #0
 8000d44:	bd70      	pop	{r4, r5, r6, pc}
 8000d46:	f000 f8f1 	bl	8000f2c <__malloc_lock>
 8000d4a:	4a21      	ldr	r2, [pc, #132]	; (8000dd0 <_malloc_r+0xac>)
 8000d4c:	6814      	ldr	r4, [r2, #0]
 8000d4e:	4621      	mov	r1, r4
 8000d50:	b991      	cbnz	r1, 8000d78 <_malloc_r+0x54>
 8000d52:	4c20      	ldr	r4, [pc, #128]	; (8000dd4 <_malloc_r+0xb0>)
 8000d54:	6823      	ldr	r3, [r4, #0]
 8000d56:	b91b      	cbnz	r3, 8000d60 <_malloc_r+0x3c>
 8000d58:	4630      	mov	r0, r6
 8000d5a:	f000 f83d 	bl	8000dd8 <_sbrk_r>
 8000d5e:	6020      	str	r0, [r4, #0]
 8000d60:	4629      	mov	r1, r5
 8000d62:	4630      	mov	r0, r6
 8000d64:	f000 f838 	bl	8000dd8 <_sbrk_r>
 8000d68:	1c43      	adds	r3, r0, #1
 8000d6a:	d124      	bne.n	8000db6 <_malloc_r+0x92>
 8000d6c:	230c      	movs	r3, #12
 8000d6e:	6033      	str	r3, [r6, #0]
 8000d70:	4630      	mov	r0, r6
 8000d72:	f000 f8dc 	bl	8000f2e <__malloc_unlock>
 8000d76:	e7e4      	b.n	8000d42 <_malloc_r+0x1e>
 8000d78:	680b      	ldr	r3, [r1, #0]
 8000d7a:	1b5b      	subs	r3, r3, r5
 8000d7c:	d418      	bmi.n	8000db0 <_malloc_r+0x8c>
 8000d7e:	2b0b      	cmp	r3, #11
 8000d80:	d90f      	bls.n	8000da2 <_malloc_r+0x7e>
 8000d82:	600b      	str	r3, [r1, #0]
 8000d84:	50cd      	str	r5, [r1, r3]
 8000d86:	18cc      	adds	r4, r1, r3
 8000d88:	4630      	mov	r0, r6
 8000d8a:	f000 f8d0 	bl	8000f2e <__malloc_unlock>
 8000d8e:	f104 000b 	add.w	r0, r4, #11
 8000d92:	1d23      	adds	r3, r4, #4
 8000d94:	f020 0007 	bic.w	r0, r0, #7
 8000d98:	1ac3      	subs	r3, r0, r3
 8000d9a:	d0d3      	beq.n	8000d44 <_malloc_r+0x20>
 8000d9c:	425a      	negs	r2, r3
 8000d9e:	50e2      	str	r2, [r4, r3]
 8000da0:	e7d0      	b.n	8000d44 <_malloc_r+0x20>
 8000da2:	428c      	cmp	r4, r1
 8000da4:	684b      	ldr	r3, [r1, #4]
 8000da6:	bf16      	itet	ne
 8000da8:	6063      	strne	r3, [r4, #4]
 8000daa:	6013      	streq	r3, [r2, #0]
 8000dac:	460c      	movne	r4, r1
 8000dae:	e7eb      	b.n	8000d88 <_malloc_r+0x64>
 8000db0:	460c      	mov	r4, r1
 8000db2:	6849      	ldr	r1, [r1, #4]
 8000db4:	e7cc      	b.n	8000d50 <_malloc_r+0x2c>
 8000db6:	1cc4      	adds	r4, r0, #3
 8000db8:	f024 0403 	bic.w	r4, r4, #3
 8000dbc:	42a0      	cmp	r0, r4
 8000dbe:	d005      	beq.n	8000dcc <_malloc_r+0xa8>
 8000dc0:	1a21      	subs	r1, r4, r0
 8000dc2:	4630      	mov	r0, r6
 8000dc4:	f000 f808 	bl	8000dd8 <_sbrk_r>
 8000dc8:	3001      	adds	r0, #1
 8000dca:	d0cf      	beq.n	8000d6c <_malloc_r+0x48>
 8000dcc:	6025      	str	r5, [r4, #0]
 8000dce:	e7db      	b.n	8000d88 <_malloc_r+0x64>
 8000dd0:	20000098 	.word	0x20000098
 8000dd4:	2000009c 	.word	0x2000009c

08000dd8 <_sbrk_r>:
 8000dd8:	b538      	push	{r3, r4, r5, lr}
 8000dda:	4c06      	ldr	r4, [pc, #24]	; (8000df4 <_sbrk_r+0x1c>)
 8000ddc:	2300      	movs	r3, #0
 8000dde:	4605      	mov	r5, r0
 8000de0:	4608      	mov	r0, r1
 8000de2:	6023      	str	r3, [r4, #0]
 8000de4:	f7ff fbc6 	bl	8000574 <_sbrk>
 8000de8:	1c43      	adds	r3, r0, #1
 8000dea:	d102      	bne.n	8000df2 <_sbrk_r+0x1a>
 8000dec:	6823      	ldr	r3, [r4, #0]
 8000dee:	b103      	cbz	r3, 8000df2 <_sbrk_r+0x1a>
 8000df0:	602b      	str	r3, [r5, #0]
 8000df2:	bd38      	pop	{r3, r4, r5, pc}
 8000df4:	200000b0 	.word	0x200000b0

08000df8 <__sread>:
 8000df8:	b510      	push	{r4, lr}
 8000dfa:	460c      	mov	r4, r1
 8000dfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e00:	f000 f896 	bl	8000f30 <_read_r>
 8000e04:	2800      	cmp	r0, #0
 8000e06:	bfab      	itete	ge
 8000e08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000e0a:	89a3      	ldrhlt	r3, [r4, #12]
 8000e0c:	181b      	addge	r3, r3, r0
 8000e0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000e12:	bfac      	ite	ge
 8000e14:	6563      	strge	r3, [r4, #84]	; 0x54
 8000e16:	81a3      	strhlt	r3, [r4, #12]
 8000e18:	bd10      	pop	{r4, pc}

08000e1a <__swrite>:
 8000e1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e1e:	461f      	mov	r7, r3
 8000e20:	898b      	ldrh	r3, [r1, #12]
 8000e22:	05db      	lsls	r3, r3, #23
 8000e24:	4605      	mov	r5, r0
 8000e26:	460c      	mov	r4, r1
 8000e28:	4616      	mov	r6, r2
 8000e2a:	d505      	bpl.n	8000e38 <__swrite+0x1e>
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	2200      	movs	r2, #0
 8000e30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e34:	f000 f868 	bl	8000f08 <_lseek_r>
 8000e38:	89a3      	ldrh	r3, [r4, #12]
 8000e3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000e3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000e42:	81a3      	strh	r3, [r4, #12]
 8000e44:	4632      	mov	r2, r6
 8000e46:	463b      	mov	r3, r7
 8000e48:	4628      	mov	r0, r5
 8000e4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000e4e:	f000 b817 	b.w	8000e80 <_write_r>

08000e52 <__sseek>:
 8000e52:	b510      	push	{r4, lr}
 8000e54:	460c      	mov	r4, r1
 8000e56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e5a:	f000 f855 	bl	8000f08 <_lseek_r>
 8000e5e:	1c43      	adds	r3, r0, #1
 8000e60:	89a3      	ldrh	r3, [r4, #12]
 8000e62:	bf15      	itete	ne
 8000e64:	6560      	strne	r0, [r4, #84]	; 0x54
 8000e66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000e6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000e6e:	81a3      	strheq	r3, [r4, #12]
 8000e70:	bf18      	it	ne
 8000e72:	81a3      	strhne	r3, [r4, #12]
 8000e74:	bd10      	pop	{r4, pc}

08000e76 <__sclose>:
 8000e76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e7a:	f000 b813 	b.w	8000ea4 <_close_r>
	...

08000e80 <_write_r>:
 8000e80:	b538      	push	{r3, r4, r5, lr}
 8000e82:	4c07      	ldr	r4, [pc, #28]	; (8000ea0 <_write_r+0x20>)
 8000e84:	4605      	mov	r5, r0
 8000e86:	4608      	mov	r0, r1
 8000e88:	4611      	mov	r1, r2
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	6022      	str	r2, [r4, #0]
 8000e8e:	461a      	mov	r2, r3
 8000e90:	f7ff fb23 	bl	80004da <_write>
 8000e94:	1c43      	adds	r3, r0, #1
 8000e96:	d102      	bne.n	8000e9e <_write_r+0x1e>
 8000e98:	6823      	ldr	r3, [r4, #0]
 8000e9a:	b103      	cbz	r3, 8000e9e <_write_r+0x1e>
 8000e9c:	602b      	str	r3, [r5, #0]
 8000e9e:	bd38      	pop	{r3, r4, r5, pc}
 8000ea0:	200000b0 	.word	0x200000b0

08000ea4 <_close_r>:
 8000ea4:	b538      	push	{r3, r4, r5, lr}
 8000ea6:	4c06      	ldr	r4, [pc, #24]	; (8000ec0 <_close_r+0x1c>)
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	4605      	mov	r5, r0
 8000eac:	4608      	mov	r0, r1
 8000eae:	6023      	str	r3, [r4, #0]
 8000eb0:	f7ff fb2f 	bl	8000512 <_close>
 8000eb4:	1c43      	adds	r3, r0, #1
 8000eb6:	d102      	bne.n	8000ebe <_close_r+0x1a>
 8000eb8:	6823      	ldr	r3, [r4, #0]
 8000eba:	b103      	cbz	r3, 8000ebe <_close_r+0x1a>
 8000ebc:	602b      	str	r3, [r5, #0]
 8000ebe:	bd38      	pop	{r3, r4, r5, pc}
 8000ec0:	200000b0 	.word	0x200000b0

08000ec4 <_fstat_r>:
 8000ec4:	b538      	push	{r3, r4, r5, lr}
 8000ec6:	4c07      	ldr	r4, [pc, #28]	; (8000ee4 <_fstat_r+0x20>)
 8000ec8:	2300      	movs	r3, #0
 8000eca:	4605      	mov	r5, r0
 8000ecc:	4608      	mov	r0, r1
 8000ece:	4611      	mov	r1, r2
 8000ed0:	6023      	str	r3, [r4, #0]
 8000ed2:	f7ff fb29 	bl	8000528 <_fstat>
 8000ed6:	1c43      	adds	r3, r0, #1
 8000ed8:	d102      	bne.n	8000ee0 <_fstat_r+0x1c>
 8000eda:	6823      	ldr	r3, [r4, #0]
 8000edc:	b103      	cbz	r3, 8000ee0 <_fstat_r+0x1c>
 8000ede:	602b      	str	r3, [r5, #0]
 8000ee0:	bd38      	pop	{r3, r4, r5, pc}
 8000ee2:	bf00      	nop
 8000ee4:	200000b0 	.word	0x200000b0

08000ee8 <_isatty_r>:
 8000ee8:	b538      	push	{r3, r4, r5, lr}
 8000eea:	4c06      	ldr	r4, [pc, #24]	; (8000f04 <_isatty_r+0x1c>)
 8000eec:	2300      	movs	r3, #0
 8000eee:	4605      	mov	r5, r0
 8000ef0:	4608      	mov	r0, r1
 8000ef2:	6023      	str	r3, [r4, #0]
 8000ef4:	f7ff fb27 	bl	8000546 <_isatty>
 8000ef8:	1c43      	adds	r3, r0, #1
 8000efa:	d102      	bne.n	8000f02 <_isatty_r+0x1a>
 8000efc:	6823      	ldr	r3, [r4, #0]
 8000efe:	b103      	cbz	r3, 8000f02 <_isatty_r+0x1a>
 8000f00:	602b      	str	r3, [r5, #0]
 8000f02:	bd38      	pop	{r3, r4, r5, pc}
 8000f04:	200000b0 	.word	0x200000b0

08000f08 <_lseek_r>:
 8000f08:	b538      	push	{r3, r4, r5, lr}
 8000f0a:	4c07      	ldr	r4, [pc, #28]	; (8000f28 <_lseek_r+0x20>)
 8000f0c:	4605      	mov	r5, r0
 8000f0e:	4608      	mov	r0, r1
 8000f10:	4611      	mov	r1, r2
 8000f12:	2200      	movs	r2, #0
 8000f14:	6022      	str	r2, [r4, #0]
 8000f16:	461a      	mov	r2, r3
 8000f18:	f7ff fb1f 	bl	800055a <_lseek>
 8000f1c:	1c43      	adds	r3, r0, #1
 8000f1e:	d102      	bne.n	8000f26 <_lseek_r+0x1e>
 8000f20:	6823      	ldr	r3, [r4, #0]
 8000f22:	b103      	cbz	r3, 8000f26 <_lseek_r+0x1e>
 8000f24:	602b      	str	r3, [r5, #0]
 8000f26:	bd38      	pop	{r3, r4, r5, pc}
 8000f28:	200000b0 	.word	0x200000b0

08000f2c <__malloc_lock>:
 8000f2c:	4770      	bx	lr

08000f2e <__malloc_unlock>:
 8000f2e:	4770      	bx	lr

08000f30 <_read_r>:
 8000f30:	b538      	push	{r3, r4, r5, lr}
 8000f32:	4c07      	ldr	r4, [pc, #28]	; (8000f50 <_read_r+0x20>)
 8000f34:	4605      	mov	r5, r0
 8000f36:	4608      	mov	r0, r1
 8000f38:	4611      	mov	r1, r2
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	6022      	str	r2, [r4, #0]
 8000f3e:	461a      	mov	r2, r3
 8000f40:	f7ff faae 	bl	80004a0 <_read>
 8000f44:	1c43      	adds	r3, r0, #1
 8000f46:	d102      	bne.n	8000f4e <_read_r+0x1e>
 8000f48:	6823      	ldr	r3, [r4, #0]
 8000f4a:	b103      	cbz	r3, 8000f4e <_read_r+0x1e>
 8000f4c:	602b      	str	r3, [r5, #0]
 8000f4e:	bd38      	pop	{r3, r4, r5, pc}
 8000f50:	200000b0 	.word	0x200000b0

08000f54 <_init>:
 8000f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f56:	bf00      	nop
 8000f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f5a:	bc08      	pop	{r3}
 8000f5c:	469e      	mov	lr, r3
 8000f5e:	4770      	bx	lr

08000f60 <_fini>:
 8000f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f62:	bf00      	nop
 8000f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f66:	bc08      	pop	{r3}
 8000f68:	469e      	mov	lr, r3
 8000f6a:	4770      	bx	lr
