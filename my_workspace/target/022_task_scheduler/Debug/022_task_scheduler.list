
022_task_scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e58  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  0800101c  0800101c  0001101c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800111c  0800111c  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  0800111c  0800111c  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800111c  0800111c  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800111c  0800111c  0001111c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001120  08001120  00011120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001124  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  20000064  08001188  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000d4  08001188  000200d4  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002349  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000656  00000000  00000000  000223d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000198  00000000  00000000  00022a30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000160  00000000  00000000  00022bc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002aff  00000000  00000000  00022d28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000013b2  00000000  00000000  00025827  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000945e  00000000  00000000  00026bd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00030037  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000af8  00000000  00000000  000300b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000064 	.word	0x20000064
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08001004 	.word	0x08001004

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000068 	.word	0x20000068
 8000200:	08001004 	.word	0x08001004

08000204 <main>:
}TCB_t;

TCB_t user_tasks[MAX_TASKS];

int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
	enable_processor_faults();
 8000208:	f000 f8ec 	bl	80003e4 <enable_processor_faults>

	init_scheduler_stack(SCHEDULER_STACK_START);
 800020c:	4806      	ldr	r0, [pc, #24]	; (8000228 <main+0x24>)
 800020e:	f000 f865 	bl	80002dc <init_scheduler_stack>

	init_tasks_stack();
 8000212:	f000 f869 	bl	80002e8 <init_tasks_stack>

	init_systick_timer(TICK_HZ);
 8000216:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800021a:	f000 f827 	bl	800026c <init_systick_timer>

	switch_sp_to_psp();
 800021e:	f000 f939 	bl	8000494 <switch_sp_to_psp>

	task1_handler();
 8000222:	f000 f803 	bl	800022c <task1_handler>

	for(;;);
 8000226:	e7fe      	b.n	8000226 <main+0x22>
 8000228:	2001f000 	.word	0x2001f000

0800022c <task1_handler>:
}

void task1_handler(void){
 800022c:	b580      	push	{r7, lr}
 800022e:	af00      	add	r7, sp, #0
	while(1){
		printf("This is task1\n");
 8000230:	4801      	ldr	r0, [pc, #4]	; (8000238 <task1_handler+0xc>)
 8000232:	f000 fadb 	bl	80007ec <puts>
 8000236:	e7fb      	b.n	8000230 <task1_handler+0x4>
 8000238:	0800101c 	.word	0x0800101c

0800023c <task2_handler>:
	}
}

void task2_handler(void){
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0
	while(1){
		printf("This is task2\n");
 8000240:	4801      	ldr	r0, [pc, #4]	; (8000248 <task2_handler+0xc>)
 8000242:	f000 fad3 	bl	80007ec <puts>
 8000246:	e7fb      	b.n	8000240 <task2_handler+0x4>
 8000248:	0800102c 	.word	0x0800102c

0800024c <task3_handler>:
	}
}

void task3_handler(void){
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0
	while(1){
		printf("This is task3\n");
 8000250:	4801      	ldr	r0, [pc, #4]	; (8000258 <task3_handler+0xc>)
 8000252:	f000 facb 	bl	80007ec <puts>
 8000256:	e7fb      	b.n	8000250 <task3_handler+0x4>
 8000258:	0800103c 	.word	0x0800103c

0800025c <task4_handler>:
	}
}

void task4_handler(void){
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0
	while(1){
		printf("This is task4\n");
 8000260:	4801      	ldr	r0, [pc, #4]	; (8000268 <task4_handler+0xc>)
 8000262:	f000 fac3 	bl	80007ec <puts>
 8000266:	e7fb      	b.n	8000260 <task4_handler+0x4>
 8000268:	0800104c 	.word	0x0800104c

0800026c <init_systick_timer>:
	}
}

void init_systick_timer(uint32_t tick_hz){
 800026c:	b480      	push	{r7}
 800026e:	b087      	sub	sp, #28
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
	uint32_t *pST_RVR = (uint32_t*)0xE000E014;
 8000274:	4b16      	ldr	r3, [pc, #88]	; (80002d0 <init_systick_timer+0x64>)
 8000276:	617b      	str	r3, [r7, #20]
	uint32_t *pST_CSR = (uint32_t*)0xE000E010;
 8000278:	4b16      	ldr	r3, [pc, #88]	; (80002d4 <init_systick_timer+0x68>)
 800027a:	613b      	str	r3, [r7, #16]

	uint32_t count_value = (SYSTICK_TIM_CLK / tick_hz) - 1;
 800027c:	4a16      	ldr	r2, [pc, #88]	; (80002d8 <init_systick_timer+0x6c>)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	fbb2 f3f3 	udiv	r3, r2, r3
 8000284:	3b01      	subs	r3, #1
 8000286:	60fb      	str	r3, [r7, #12]

	//clear ST_RVR
	*pST_RVR &= ~(0x00FFFFFF);
 8000288:	697b      	ldr	r3, [r7, #20]
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8000290:	697b      	ldr	r3, [r7, #20]
 8000292:	601a      	str	r2, [r3, #0]
	//load ST_RVR
	*pST_RVR |= count_value;
 8000294:	697b      	ldr	r3, [r7, #20]
 8000296:	681a      	ldr	r2, [r3, #0]
 8000298:	68fb      	ldr	r3, [r7, #12]
 800029a:	431a      	orrs	r2, r3
 800029c:	697b      	ldr	r3, [r7, #20]
 800029e:	601a      	str	r2, [r3, #0]

	//Do some settings
	*pST_CSR |= (1 << 2);//select processor clock source
 80002a0:	693b      	ldr	r3, [r7, #16]
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	f043 0204 	orr.w	r2, r3, #4
 80002a8:	693b      	ldr	r3, [r7, #16]
 80002aa:	601a      	str	r2, [r3, #0]
	*pST_CSR |= (1 << 1);//Enables SysTick exception request
 80002ac:	693b      	ldr	r3, [r7, #16]
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	f043 0202 	orr.w	r2, r3, #2
 80002b4:	693b      	ldr	r3, [r7, #16]
 80002b6:	601a      	str	r2, [r3, #0]

	//enable SYS_TICK
	*pST_CSR |= (1 << 0);//enables the counter
 80002b8:	693b      	ldr	r3, [r7, #16]
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	f043 0201 	orr.w	r2, r3, #1
 80002c0:	693b      	ldr	r3, [r7, #16]
 80002c2:	601a      	str	r2, [r3, #0]
}
 80002c4:	bf00      	nop
 80002c6:	371c      	adds	r7, #28
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bc80      	pop	{r7}
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop
 80002d0:	e000e014 	.word	0xe000e014
 80002d4:	e000e010 	.word	0xe000e010
 80002d8:	00f42400 	.word	0x00f42400

080002dc <init_scheduler_stack>:

__attribute__((naked)) void init_scheduler_stack(uint32_t scheduler_top_of_stack){
 80002dc:	4603      	mov	r3, r0
	__asm volatile("MSR MSP,%0"::"r"(scheduler_top_of_stack));
 80002de:	f383 8808 	msr	MSP, r3
	__asm volatile("BX LR");
 80002e2:	4770      	bx	lr
}
 80002e4:	bf00      	nop
	...

080002e8 <init_tasks_stack>:

void init_tasks_stack(void){
 80002e8:	b480      	push	{r7}
 80002ea:	b085      	sub	sp, #20
 80002ec:	af00      	add	r7, sp, #0
	user_tasks[0].current_state = TASK_RUNNING_STATE;
 80002ee:	4b34      	ldr	r3, [pc, #208]	; (80003c0 <init_tasks_stack+0xd8>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	721a      	strb	r2, [r3, #8]
	user_tasks[1].current_state = TASK_RUNNING_STATE;
 80002f4:	4b32      	ldr	r3, [pc, #200]	; (80003c0 <init_tasks_stack+0xd8>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	761a      	strb	r2, [r3, #24]
	user_tasks[2].current_state = TASK_RUNNING_STATE;
 80002fa:	4b31      	ldr	r3, [pc, #196]	; (80003c0 <init_tasks_stack+0xd8>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	user_tasks[3].current_state = TASK_RUNNING_STATE;
 8000302:	4b2f      	ldr	r3, [pc, #188]	; (80003c0 <init_tasks_stack+0xd8>)
 8000304:	2200      	movs	r2, #0
 8000306:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

	user_tasks[0].psp_value = T1_STACK_START;
 800030a:	4b2d      	ldr	r3, [pc, #180]	; (80003c0 <init_tasks_stack+0xd8>)
 800030c:	4a2d      	ldr	r2, [pc, #180]	; (80003c4 <init_tasks_stack+0xdc>)
 800030e:	601a      	str	r2, [r3, #0]
	user_tasks[1].psp_value = T2_STACK_START;
 8000310:	4b2b      	ldr	r3, [pc, #172]	; (80003c0 <init_tasks_stack+0xd8>)
 8000312:	4a2d      	ldr	r2, [pc, #180]	; (80003c8 <init_tasks_stack+0xe0>)
 8000314:	611a      	str	r2, [r3, #16]
	user_tasks[2].psp_value = T3_STACK_START;
 8000316:	4b2a      	ldr	r3, [pc, #168]	; (80003c0 <init_tasks_stack+0xd8>)
 8000318:	4a2c      	ldr	r2, [pc, #176]	; (80003cc <init_tasks_stack+0xe4>)
 800031a:	621a      	str	r2, [r3, #32]
	user_tasks[3].psp_value = T4_STACK_START;
 800031c:	4b28      	ldr	r3, [pc, #160]	; (80003c0 <init_tasks_stack+0xd8>)
 800031e:	4a2c      	ldr	r2, [pc, #176]	; (80003d0 <init_tasks_stack+0xe8>)
 8000320:	631a      	str	r2, [r3, #48]	; 0x30

	user_tasks[0].task_handler = task1_handler;
 8000322:	4b27      	ldr	r3, [pc, #156]	; (80003c0 <init_tasks_stack+0xd8>)
 8000324:	4a2b      	ldr	r2, [pc, #172]	; (80003d4 <init_tasks_stack+0xec>)
 8000326:	60da      	str	r2, [r3, #12]
	user_tasks[1].task_handler = task2_handler;
 8000328:	4b25      	ldr	r3, [pc, #148]	; (80003c0 <init_tasks_stack+0xd8>)
 800032a:	4a2b      	ldr	r2, [pc, #172]	; (80003d8 <init_tasks_stack+0xf0>)
 800032c:	61da      	str	r2, [r3, #28]
	user_tasks[2].task_handler = task3_handler;
 800032e:	4b24      	ldr	r3, [pc, #144]	; (80003c0 <init_tasks_stack+0xd8>)
 8000330:	4a2a      	ldr	r2, [pc, #168]	; (80003dc <init_tasks_stack+0xf4>)
 8000332:	62da      	str	r2, [r3, #44]	; 0x2c
	user_tasks[3].task_handler = task4_handler;
 8000334:	4b22      	ldr	r3, [pc, #136]	; (80003c0 <init_tasks_stack+0xd8>)
 8000336:	4a2a      	ldr	r2, [pc, #168]	; (80003e0 <init_tasks_stack+0xf8>)
 8000338:	63da      	str	r2, [r3, #60]	; 0x3c

	uint32_t *pPSP;

	for (int i = 0; i < MAX_TASKS; i++) {
 800033a:	2300      	movs	r3, #0
 800033c:	60bb      	str	r3, [r7, #8]
 800033e:	e037      	b.n	80003b0 <init_tasks_stack+0xc8>
		pPSP = (uint32_t*)user_tasks[i].psp_value;
 8000340:	4a1f      	ldr	r2, [pc, #124]	; (80003c0 <init_tasks_stack+0xd8>)
 8000342:	68bb      	ldr	r3, [r7, #8]
 8000344:	011b      	lsls	r3, r3, #4
 8000346:	4413      	add	r3, r2
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	60fb      	str	r3, [r7, #12]

		pPSP--;//XPRS
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	3b04      	subs	r3, #4
 8000350:	60fb      	str	r3, [r7, #12]
		*pPSP = DUMMY_XPRS;//0x01000000
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000358:	601a      	str	r2, [r3, #0]

		pPSP--;//PC
 800035a:	68fb      	ldr	r3, [r7, #12]
 800035c:	3b04      	subs	r3, #4
 800035e:	60fb      	str	r3, [r7, #12]
		*pPSP = (uint32_t)user_tasks[i].task_handler;
 8000360:	4a17      	ldr	r2, [pc, #92]	; (80003c0 <init_tasks_stack+0xd8>)
 8000362:	68bb      	ldr	r3, [r7, #8]
 8000364:	011b      	lsls	r3, r3, #4
 8000366:	4413      	add	r3, r2
 8000368:	330c      	adds	r3, #12
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	461a      	mov	r2, r3
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	601a      	str	r2, [r3, #0]

		pPSP--;//LR
 8000372:	68fb      	ldr	r3, [r7, #12]
 8000374:	3b04      	subs	r3, #4
 8000376:	60fb      	str	r3, [r7, #12]
		*pPSP = 0xFFFFFFFD;
 8000378:	68fb      	ldr	r3, [r7, #12]
 800037a:	f06f 0202 	mvn.w	r2, #2
 800037e:	601a      	str	r2, [r3, #0]

		//R0 to R12 registers should be zeros
		for(int i = 0; i < 13; i++){
 8000380:	2300      	movs	r3, #0
 8000382:	607b      	str	r3, [r7, #4]
 8000384:	e008      	b.n	8000398 <init_tasks_stack+0xb0>
			pPSP--;
 8000386:	68fb      	ldr	r3, [r7, #12]
 8000388:	3b04      	subs	r3, #4
 800038a:	60fb      	str	r3, [r7, #12]
			*pPSP = 0;
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	2200      	movs	r2, #0
 8000390:	601a      	str	r2, [r3, #0]
		for(int i = 0; i < 13; i++){
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	3301      	adds	r3, #1
 8000396:	607b      	str	r3, [r7, #4]
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	2b0c      	cmp	r3, #12
 800039c:	ddf3      	ble.n	8000386 <init_tasks_stack+0x9e>
		}

		user_tasks[i].psp_value = (uint32_t)pPSP;
 800039e:	68fa      	ldr	r2, [r7, #12]
 80003a0:	4907      	ldr	r1, [pc, #28]	; (80003c0 <init_tasks_stack+0xd8>)
 80003a2:	68bb      	ldr	r3, [r7, #8]
 80003a4:	011b      	lsls	r3, r3, #4
 80003a6:	440b      	add	r3, r1
 80003a8:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < MAX_TASKS; i++) {
 80003aa:	68bb      	ldr	r3, [r7, #8]
 80003ac:	3301      	adds	r3, #1
 80003ae:	60bb      	str	r3, [r7, #8]
 80003b0:	68bb      	ldr	r3, [r7, #8]
 80003b2:	2b03      	cmp	r3, #3
 80003b4:	ddc4      	ble.n	8000340 <init_tasks_stack+0x58>
	}
}
 80003b6:	bf00      	nop
 80003b8:	3714      	adds	r7, #20
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bc80      	pop	{r7}
 80003be:	4770      	bx	lr
 80003c0:	20000090 	.word	0x20000090
 80003c4:	20020000 	.word	0x20020000
 80003c8:	2001fc00 	.word	0x2001fc00
 80003cc:	2001f800 	.word	0x2001f800
 80003d0:	2001f400 	.word	0x2001f400
 80003d4:	0800022d 	.word	0x0800022d
 80003d8:	0800023d 	.word	0x0800023d
 80003dc:	0800024d 	.word	0x0800024d
 80003e0:	0800025d 	.word	0x0800025d

080003e4 <enable_processor_faults>:

void enable_processor_faults(void){
 80003e4:	b480      	push	{r7}
 80003e6:	b083      	sub	sp, #12
 80003e8:	af00      	add	r7, sp, #0
	uint32_t *pSHCSR = (uint32_t*)0xE000ED24;
 80003ea:	4b0c      	ldr	r3, [pc, #48]	; (800041c <enable_processor_faults+0x38>)
 80003ec:	607b      	str	r3, [r7, #4]

	*pSHCSR |= (1 << 16);//memory manage enable
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	601a      	str	r2, [r3, #0]
	*pSHCSR |= (1 << 17);//bus fault enable
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	601a      	str	r2, [r3, #0]
	*pSHCSR |= (1 << 18);//usage fault enable
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	601a      	str	r2, [r3, #0]
}
 8000412:	bf00      	nop
 8000414:	370c      	adds	r7, #12
 8000416:	46bd      	mov	sp, r7
 8000418:	bc80      	pop	{r7}
 800041a:	4770      	bx	lr
 800041c:	e000ed24 	.word	0xe000ed24

08000420 <get_psp_value>:

uint32_t get_psp_value(void){
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0
	return user_tasks[current_task].psp_value;
 8000424:	4b04      	ldr	r3, [pc, #16]	; (8000438 <get_psp_value+0x18>)
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	4a04      	ldr	r2, [pc, #16]	; (800043c <get_psp_value+0x1c>)
 800042a:	011b      	lsls	r3, r3, #4
 800042c:	4413      	add	r3, r2
 800042e:	681b      	ldr	r3, [r3, #0]
}
 8000430:	4618      	mov	r0, r3
 8000432:	46bd      	mov	sp, r7
 8000434:	bc80      	pop	{r7}
 8000436:	4770      	bx	lr
 8000438:	20000080 	.word	0x20000080
 800043c:	20000090 	.word	0x20000090

08000440 <save_psp_value>:

void save_psp_value(uint32_t current_psp_value){
 8000440:	b480      	push	{r7}
 8000442:	b083      	sub	sp, #12
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
	user_tasks[current_task].psp_value = current_psp_value;
 8000448:	4b05      	ldr	r3, [pc, #20]	; (8000460 <save_psp_value+0x20>)
 800044a:	781b      	ldrb	r3, [r3, #0]
 800044c:	4a05      	ldr	r2, [pc, #20]	; (8000464 <save_psp_value+0x24>)
 800044e:	011b      	lsls	r3, r3, #4
 8000450:	4413      	add	r3, r2
 8000452:	687a      	ldr	r2, [r7, #4]
 8000454:	601a      	str	r2, [r3, #0]
}
 8000456:	bf00      	nop
 8000458:	370c      	adds	r7, #12
 800045a:	46bd      	mov	sp, r7
 800045c:	bc80      	pop	{r7}
 800045e:	4770      	bx	lr
 8000460:	20000080 	.word	0x20000080
 8000464:	20000090 	.word	0x20000090

08000468 <update_next_task>:

void update_next_task(void){
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0
	current_task++;
 800046c:	4b08      	ldr	r3, [pc, #32]	; (8000490 <update_next_task+0x28>)
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	3301      	adds	r3, #1
 8000472:	b2da      	uxtb	r2, r3
 8000474:	4b06      	ldr	r3, [pc, #24]	; (8000490 <update_next_task+0x28>)
 8000476:	701a      	strb	r2, [r3, #0]
	current_task %= 4;
 8000478:	4b05      	ldr	r3, [pc, #20]	; (8000490 <update_next_task+0x28>)
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	f003 0303 	and.w	r3, r3, #3
 8000480:	b2da      	uxtb	r2, r3
 8000482:	4b03      	ldr	r3, [pc, #12]	; (8000490 <update_next_task+0x28>)
 8000484:	701a      	strb	r2, [r3, #0]
}
 8000486:	bf00      	nop
 8000488:	46bd      	mov	sp, r7
 800048a:	bc80      	pop	{r7}
 800048c:	4770      	bx	lr
 800048e:	bf00      	nop
 8000490:	20000080 	.word	0x20000080

08000494 <switch_sp_to_psp>:

__attribute__((naked)) void switch_sp_to_psp(void){
	//initialize PSP with task1 stack address
	__asm volatile("PUSH {LR}");
 8000494:	b500      	push	{lr}
	__asm volatile("BL get_psp_value");
 8000496:	f7ff ffc3 	bl	8000420 <get_psp_value>
	__asm volatile("MSR PSP,r0");
 800049a:	f380 8809 	msr	PSP, r0
	__asm volatile("POP {LR}");
 800049e:	f85d eb04 	ldr.w	lr, [sp], #4


	//set SP tp PSP
	__asm volatile("MOV r0,#0x02");
 80004a2:	f04f 0002 	mov.w	r0, #2
	__asm volatile("MSR CONTROL, r0");
 80004a6:	f380 8814 	msr	CONTROL, r0
	__asm volatile("BX LR");
 80004aa:	4770      	bx	lr
}
 80004ac:	bf00      	nop

080004ae <SysTick_Handler>:

//exception handlers
__attribute__((naked)) void SysTick_Handler(void){

	//Save context of current task
	__asm volatile("MRS r0,PSP");
 80004ae:	f3ef 8009 	mrs	r0, PSP
	__asm volatile("STMDB r0!,{r4-r11}");
 80004b2:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	__asm volatile("PUSH {LR}");
 80004b6:	b500      	push	{lr}
	__asm volatile("BL save_psp_value");
 80004b8:	f7ff ffc2 	bl	8000440 <save_psp_value>

	//retrieve the context of next task
	__asm volatile("BL update_next_task");
 80004bc:	f7ff ffd4 	bl	8000468 <update_next_task>
	__asm volatile("BL get_psp_value");
 80004c0:	f7ff ffae 	bl	8000420 <get_psp_value>
	__asm volatile("LDMIA r0!,{r4-r11}");
 80004c4:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	__asm volatile("MSR PSP,r0");
 80004c8:	f380 8809 	msr	PSP, r0

	__asm volatile("POP {LR}");
 80004cc:	f85d eb04 	ldr.w	lr, [sp], #4

	__asm volatile("BX LR");
 80004d0:	4770      	bx	lr
}
 80004d2:	bf00      	nop

080004d4 <HardFault_Handler>:

void HardFault_Handler(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
	printf("Exception: HardFault_Handler\n");
 80004d8:	4801      	ldr	r0, [pc, #4]	; (80004e0 <HardFault_Handler+0xc>)
 80004da:	f000 f987 	bl	80007ec <puts>
	while(1);
 80004de:	e7fe      	b.n	80004de <HardFault_Handler+0xa>
 80004e0:	0800105c 	.word	0x0800105c

080004e4 <MemManage_Handler>:
}

void MemManage_Handler(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
	printf("Exception: MemManage_Handler\n");
 80004e8:	4801      	ldr	r0, [pc, #4]	; (80004f0 <MemManage_Handler+0xc>)
 80004ea:	f000 f97f 	bl	80007ec <puts>
	while(1);
 80004ee:	e7fe      	b.n	80004ee <MemManage_Handler+0xa>
 80004f0:	0800107c 	.word	0x0800107c

080004f4 <BusFault_Handler>:
}

void BusFault_Handler(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
	printf("Exception: BusFault_Handler\n");
 80004f8:	4801      	ldr	r0, [pc, #4]	; (8000500 <BusFault_Handler+0xc>)
 80004fa:	f000 f977 	bl	80007ec <puts>
	while(1);
 80004fe:	e7fe      	b.n	80004fe <BusFault_Handler+0xa>
 8000500:	0800109c 	.word	0x0800109c

08000504 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
 800050a:	4603      	mov	r3, r0
 800050c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800050e:	4b0e      	ldr	r3, [pc, #56]	; (8000548 <ITM_SendChar+0x44>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	4a0d      	ldr	r2, [pc, #52]	; (8000548 <ITM_SendChar+0x44>)
 8000514:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000518:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800051a:	4b0c      	ldr	r3, [pc, #48]	; (800054c <ITM_SendChar+0x48>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	4a0b      	ldr	r2, [pc, #44]	; (800054c <ITM_SendChar+0x48>)
 8000520:	f043 0301 	orr.w	r3, r3, #1
 8000524:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000526:	bf00      	nop
 8000528:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	f003 0301 	and.w	r3, r3, #1
 8000532:	2b00      	cmp	r3, #0
 8000534:	d0f8      	beq.n	8000528 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000536:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800053a:	79fb      	ldrb	r3, [r7, #7]
 800053c:	6013      	str	r3, [r2, #0]
}
 800053e:	bf00      	nop
 8000540:	370c      	adds	r7, #12
 8000542:	46bd      	mov	sp, r7
 8000544:	bc80      	pop	{r7}
 8000546:	4770      	bx	lr
 8000548:	e000edfc 	.word	0xe000edfc
 800054c:	e0000e00 	.word	0xe0000e00

08000550 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b086      	sub	sp, #24
 8000554:	af00      	add	r7, sp, #0
 8000556:	60f8      	str	r0, [r7, #12]
 8000558:	60b9      	str	r1, [r7, #8]
 800055a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800055c:	2300      	movs	r3, #0
 800055e:	617b      	str	r3, [r7, #20]
 8000560:	e00a      	b.n	8000578 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000562:	f3af 8000 	nop.w
 8000566:	4601      	mov	r1, r0
 8000568:	68bb      	ldr	r3, [r7, #8]
 800056a:	1c5a      	adds	r2, r3, #1
 800056c:	60ba      	str	r2, [r7, #8]
 800056e:	b2ca      	uxtb	r2, r1
 8000570:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000572:	697b      	ldr	r3, [r7, #20]
 8000574:	3301      	adds	r3, #1
 8000576:	617b      	str	r3, [r7, #20]
 8000578:	697a      	ldr	r2, [r7, #20]
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	429a      	cmp	r2, r3
 800057e:	dbf0      	blt.n	8000562 <_read+0x12>
	}

return len;
 8000580:	687b      	ldr	r3, [r7, #4]
}
 8000582:	4618      	mov	r0, r3
 8000584:	3718      	adds	r7, #24
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}

0800058a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800058a:	b580      	push	{r7, lr}
 800058c:	b086      	sub	sp, #24
 800058e:	af00      	add	r7, sp, #0
 8000590:	60f8      	str	r0, [r7, #12]
 8000592:	60b9      	str	r1, [r7, #8]
 8000594:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000596:	2300      	movs	r3, #0
 8000598:	617b      	str	r3, [r7, #20]
 800059a:	e009      	b.n	80005b0 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 800059c:	68bb      	ldr	r3, [r7, #8]
 800059e:	1c5a      	adds	r2, r3, #1
 80005a0:	60ba      	str	r2, [r7, #8]
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	4618      	mov	r0, r3
 80005a6:	f7ff ffad 	bl	8000504 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005aa:	697b      	ldr	r3, [r7, #20]
 80005ac:	3301      	adds	r3, #1
 80005ae:	617b      	str	r3, [r7, #20]
 80005b0:	697a      	ldr	r2, [r7, #20]
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	429a      	cmp	r2, r3
 80005b6:	dbf1      	blt.n	800059c <_write+0x12>
	}
	return len;
 80005b8:	687b      	ldr	r3, [r7, #4]
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	3718      	adds	r7, #24
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}

080005c2 <_close>:

int _close(int file)
{
 80005c2:	b480      	push	{r7}
 80005c4:	b083      	sub	sp, #12
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	6078      	str	r0, [r7, #4]
	return -1;
 80005ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	370c      	adds	r7, #12
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bc80      	pop	{r7}
 80005d6:	4770      	bx	lr

080005d8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
 80005e0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80005e2:	683b      	ldr	r3, [r7, #0]
 80005e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005e8:	605a      	str	r2, [r3, #4]
	return 0;
 80005ea:	2300      	movs	r3, #0
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bc80      	pop	{r7}
 80005f4:	4770      	bx	lr

080005f6 <_isatty>:

int _isatty(int file)
{
 80005f6:	b480      	push	{r7}
 80005f8:	b083      	sub	sp, #12
 80005fa:	af00      	add	r7, sp, #0
 80005fc:	6078      	str	r0, [r7, #4]
	return 1;
 80005fe:	2301      	movs	r3, #1
}
 8000600:	4618      	mov	r0, r3
 8000602:	370c      	adds	r7, #12
 8000604:	46bd      	mov	sp, r7
 8000606:	bc80      	pop	{r7}
 8000608:	4770      	bx	lr

0800060a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800060a:	b480      	push	{r7}
 800060c:	b085      	sub	sp, #20
 800060e:	af00      	add	r7, sp, #0
 8000610:	60f8      	str	r0, [r7, #12]
 8000612:	60b9      	str	r1, [r7, #8]
 8000614:	607a      	str	r2, [r7, #4]
	return 0;
 8000616:	2300      	movs	r3, #0
}
 8000618:	4618      	mov	r0, r3
 800061a:	3714      	adds	r7, #20
 800061c:	46bd      	mov	sp, r7
 800061e:	bc80      	pop	{r7}
 8000620:	4770      	bx	lr
	...

08000624 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b084      	sub	sp, #16
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800062c:	4b11      	ldr	r3, [pc, #68]	; (8000674 <_sbrk+0x50>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d102      	bne.n	800063a <_sbrk+0x16>
		heap_end = &end;
 8000634:	4b0f      	ldr	r3, [pc, #60]	; (8000674 <_sbrk+0x50>)
 8000636:	4a10      	ldr	r2, [pc, #64]	; (8000678 <_sbrk+0x54>)
 8000638:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800063a:	4b0e      	ldr	r3, [pc, #56]	; (8000674 <_sbrk+0x50>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000640:	4b0c      	ldr	r3, [pc, #48]	; (8000674 <_sbrk+0x50>)
 8000642:	681a      	ldr	r2, [r3, #0]
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	4413      	add	r3, r2
 8000648:	466a      	mov	r2, sp
 800064a:	4293      	cmp	r3, r2
 800064c:	d907      	bls.n	800065e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800064e:	f000 f83f 	bl	80006d0 <__errno>
 8000652:	4602      	mov	r2, r0
 8000654:	230c      	movs	r3, #12
 8000656:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000658:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800065c:	e006      	b.n	800066c <_sbrk+0x48>
	}

	heap_end += incr;
 800065e:	4b05      	ldr	r3, [pc, #20]	; (8000674 <_sbrk+0x50>)
 8000660:	681a      	ldr	r2, [r3, #0]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	4413      	add	r3, r2
 8000666:	4a03      	ldr	r2, [pc, #12]	; (8000674 <_sbrk+0x50>)
 8000668:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800066a:	68fb      	ldr	r3, [r7, #12]
}
 800066c:	4618      	mov	r0, r3
 800066e:	3710      	adds	r7, #16
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	20000084 	.word	0x20000084
 8000678:	200000d8 	.word	0x200000d8

0800067c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800067c:	480d      	ldr	r0, [pc, #52]	; (80006b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800067e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000680:	480d      	ldr	r0, [pc, #52]	; (80006b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000682:	490e      	ldr	r1, [pc, #56]	; (80006bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000684:	4a0e      	ldr	r2, [pc, #56]	; (80006c0 <LoopForever+0xe>)
  movs r3, #0
 8000686:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000688:	e002      	b.n	8000690 <LoopCopyDataInit>

0800068a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800068a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800068c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800068e:	3304      	adds	r3, #4

08000690 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000690:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000692:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000694:	d3f9      	bcc.n	800068a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000696:	4a0b      	ldr	r2, [pc, #44]	; (80006c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000698:	4c0b      	ldr	r4, [pc, #44]	; (80006c8 <LoopForever+0x16>)
  movs r3, #0
 800069a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800069c:	e001      	b.n	80006a2 <LoopFillZerobss>

0800069e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800069e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006a0:	3204      	adds	r2, #4

080006a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006a4:	d3fb      	bcc.n	800069e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80006a6:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 80006aa:	f000 f817 	bl	80006dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006ae:	f7ff fda9 	bl	8000204 <main>

080006b2 <LoopForever>:

LoopForever:
    b LoopForever
 80006b2:	e7fe      	b.n	80006b2 <LoopForever>
  ldr   r0, =_estack
 80006b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006bc:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80006c0:	08001124 	.word	0x08001124
  ldr r2, =_sbss
 80006c4:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80006c8:	200000d4 	.word	0x200000d4

080006cc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006cc:	e7fe      	b.n	80006cc <ADC_IRQHandler>
	...

080006d0 <__errno>:
 80006d0:	4b01      	ldr	r3, [pc, #4]	; (80006d8 <__errno+0x8>)
 80006d2:	6818      	ldr	r0, [r3, #0]
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	20000000 	.word	0x20000000

080006dc <__libc_init_array>:
 80006dc:	b570      	push	{r4, r5, r6, lr}
 80006de:	4e0d      	ldr	r6, [pc, #52]	; (8000714 <__libc_init_array+0x38>)
 80006e0:	4c0d      	ldr	r4, [pc, #52]	; (8000718 <__libc_init_array+0x3c>)
 80006e2:	1ba4      	subs	r4, r4, r6
 80006e4:	10a4      	asrs	r4, r4, #2
 80006e6:	2500      	movs	r5, #0
 80006e8:	42a5      	cmp	r5, r4
 80006ea:	d109      	bne.n	8000700 <__libc_init_array+0x24>
 80006ec:	4e0b      	ldr	r6, [pc, #44]	; (800071c <__libc_init_array+0x40>)
 80006ee:	4c0c      	ldr	r4, [pc, #48]	; (8000720 <__libc_init_array+0x44>)
 80006f0:	f000 fc88 	bl	8001004 <_init>
 80006f4:	1ba4      	subs	r4, r4, r6
 80006f6:	10a4      	asrs	r4, r4, #2
 80006f8:	2500      	movs	r5, #0
 80006fa:	42a5      	cmp	r5, r4
 80006fc:	d105      	bne.n	800070a <__libc_init_array+0x2e>
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000704:	4798      	blx	r3
 8000706:	3501      	adds	r5, #1
 8000708:	e7ee      	b.n	80006e8 <__libc_init_array+0xc>
 800070a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800070e:	4798      	blx	r3
 8000710:	3501      	adds	r5, #1
 8000712:	e7f2      	b.n	80006fa <__libc_init_array+0x1e>
 8000714:	0800111c 	.word	0x0800111c
 8000718:	0800111c 	.word	0x0800111c
 800071c:	0800111c 	.word	0x0800111c
 8000720:	08001120 	.word	0x08001120

08000724 <memset>:
 8000724:	4402      	add	r2, r0
 8000726:	4603      	mov	r3, r0
 8000728:	4293      	cmp	r3, r2
 800072a:	d100      	bne.n	800072e <memset+0xa>
 800072c:	4770      	bx	lr
 800072e:	f803 1b01 	strb.w	r1, [r3], #1
 8000732:	e7f9      	b.n	8000728 <memset+0x4>

08000734 <_puts_r>:
 8000734:	b570      	push	{r4, r5, r6, lr}
 8000736:	460e      	mov	r6, r1
 8000738:	4605      	mov	r5, r0
 800073a:	b118      	cbz	r0, 8000744 <_puts_r+0x10>
 800073c:	6983      	ldr	r3, [r0, #24]
 800073e:	b90b      	cbnz	r3, 8000744 <_puts_r+0x10>
 8000740:	f000 fa0c 	bl	8000b5c <__sinit>
 8000744:	69ab      	ldr	r3, [r5, #24]
 8000746:	68ac      	ldr	r4, [r5, #8]
 8000748:	b913      	cbnz	r3, 8000750 <_puts_r+0x1c>
 800074a:	4628      	mov	r0, r5
 800074c:	f000 fa06 	bl	8000b5c <__sinit>
 8000750:	4b23      	ldr	r3, [pc, #140]	; (80007e0 <_puts_r+0xac>)
 8000752:	429c      	cmp	r4, r3
 8000754:	d117      	bne.n	8000786 <_puts_r+0x52>
 8000756:	686c      	ldr	r4, [r5, #4]
 8000758:	89a3      	ldrh	r3, [r4, #12]
 800075a:	071b      	lsls	r3, r3, #28
 800075c:	d51d      	bpl.n	800079a <_puts_r+0x66>
 800075e:	6923      	ldr	r3, [r4, #16]
 8000760:	b1db      	cbz	r3, 800079a <_puts_r+0x66>
 8000762:	3e01      	subs	r6, #1
 8000764:	68a3      	ldr	r3, [r4, #8]
 8000766:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800076a:	3b01      	subs	r3, #1
 800076c:	60a3      	str	r3, [r4, #8]
 800076e:	b9e9      	cbnz	r1, 80007ac <_puts_r+0x78>
 8000770:	2b00      	cmp	r3, #0
 8000772:	da2e      	bge.n	80007d2 <_puts_r+0x9e>
 8000774:	4622      	mov	r2, r4
 8000776:	210a      	movs	r1, #10
 8000778:	4628      	mov	r0, r5
 800077a:	f000 f83f 	bl	80007fc <__swbuf_r>
 800077e:	3001      	adds	r0, #1
 8000780:	d011      	beq.n	80007a6 <_puts_r+0x72>
 8000782:	200a      	movs	r0, #10
 8000784:	e011      	b.n	80007aa <_puts_r+0x76>
 8000786:	4b17      	ldr	r3, [pc, #92]	; (80007e4 <_puts_r+0xb0>)
 8000788:	429c      	cmp	r4, r3
 800078a:	d101      	bne.n	8000790 <_puts_r+0x5c>
 800078c:	68ac      	ldr	r4, [r5, #8]
 800078e:	e7e3      	b.n	8000758 <_puts_r+0x24>
 8000790:	4b15      	ldr	r3, [pc, #84]	; (80007e8 <_puts_r+0xb4>)
 8000792:	429c      	cmp	r4, r3
 8000794:	bf08      	it	eq
 8000796:	68ec      	ldreq	r4, [r5, #12]
 8000798:	e7de      	b.n	8000758 <_puts_r+0x24>
 800079a:	4621      	mov	r1, r4
 800079c:	4628      	mov	r0, r5
 800079e:	f000 f87f 	bl	80008a0 <__swsetup_r>
 80007a2:	2800      	cmp	r0, #0
 80007a4:	d0dd      	beq.n	8000762 <_puts_r+0x2e>
 80007a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	da04      	bge.n	80007ba <_puts_r+0x86>
 80007b0:	69a2      	ldr	r2, [r4, #24]
 80007b2:	429a      	cmp	r2, r3
 80007b4:	dc06      	bgt.n	80007c4 <_puts_r+0x90>
 80007b6:	290a      	cmp	r1, #10
 80007b8:	d004      	beq.n	80007c4 <_puts_r+0x90>
 80007ba:	6823      	ldr	r3, [r4, #0]
 80007bc:	1c5a      	adds	r2, r3, #1
 80007be:	6022      	str	r2, [r4, #0]
 80007c0:	7019      	strb	r1, [r3, #0]
 80007c2:	e7cf      	b.n	8000764 <_puts_r+0x30>
 80007c4:	4622      	mov	r2, r4
 80007c6:	4628      	mov	r0, r5
 80007c8:	f000 f818 	bl	80007fc <__swbuf_r>
 80007cc:	3001      	adds	r0, #1
 80007ce:	d1c9      	bne.n	8000764 <_puts_r+0x30>
 80007d0:	e7e9      	b.n	80007a6 <_puts_r+0x72>
 80007d2:	6823      	ldr	r3, [r4, #0]
 80007d4:	200a      	movs	r0, #10
 80007d6:	1c5a      	adds	r2, r3, #1
 80007d8:	6022      	str	r2, [r4, #0]
 80007da:	7018      	strb	r0, [r3, #0]
 80007dc:	e7e5      	b.n	80007aa <_puts_r+0x76>
 80007de:	bf00      	nop
 80007e0:	080010dc 	.word	0x080010dc
 80007e4:	080010fc 	.word	0x080010fc
 80007e8:	080010bc 	.word	0x080010bc

080007ec <puts>:
 80007ec:	4b02      	ldr	r3, [pc, #8]	; (80007f8 <puts+0xc>)
 80007ee:	4601      	mov	r1, r0
 80007f0:	6818      	ldr	r0, [r3, #0]
 80007f2:	f7ff bf9f 	b.w	8000734 <_puts_r>
 80007f6:	bf00      	nop
 80007f8:	20000000 	.word	0x20000000

080007fc <__swbuf_r>:
 80007fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007fe:	460e      	mov	r6, r1
 8000800:	4614      	mov	r4, r2
 8000802:	4605      	mov	r5, r0
 8000804:	b118      	cbz	r0, 800080e <__swbuf_r+0x12>
 8000806:	6983      	ldr	r3, [r0, #24]
 8000808:	b90b      	cbnz	r3, 800080e <__swbuf_r+0x12>
 800080a:	f000 f9a7 	bl	8000b5c <__sinit>
 800080e:	4b21      	ldr	r3, [pc, #132]	; (8000894 <__swbuf_r+0x98>)
 8000810:	429c      	cmp	r4, r3
 8000812:	d12a      	bne.n	800086a <__swbuf_r+0x6e>
 8000814:	686c      	ldr	r4, [r5, #4]
 8000816:	69a3      	ldr	r3, [r4, #24]
 8000818:	60a3      	str	r3, [r4, #8]
 800081a:	89a3      	ldrh	r3, [r4, #12]
 800081c:	071a      	lsls	r2, r3, #28
 800081e:	d52e      	bpl.n	800087e <__swbuf_r+0x82>
 8000820:	6923      	ldr	r3, [r4, #16]
 8000822:	b363      	cbz	r3, 800087e <__swbuf_r+0x82>
 8000824:	6923      	ldr	r3, [r4, #16]
 8000826:	6820      	ldr	r0, [r4, #0]
 8000828:	1ac0      	subs	r0, r0, r3
 800082a:	6963      	ldr	r3, [r4, #20]
 800082c:	b2f6      	uxtb	r6, r6
 800082e:	4283      	cmp	r3, r0
 8000830:	4637      	mov	r7, r6
 8000832:	dc04      	bgt.n	800083e <__swbuf_r+0x42>
 8000834:	4621      	mov	r1, r4
 8000836:	4628      	mov	r0, r5
 8000838:	f000 f926 	bl	8000a88 <_fflush_r>
 800083c:	bb28      	cbnz	r0, 800088a <__swbuf_r+0x8e>
 800083e:	68a3      	ldr	r3, [r4, #8]
 8000840:	3b01      	subs	r3, #1
 8000842:	60a3      	str	r3, [r4, #8]
 8000844:	6823      	ldr	r3, [r4, #0]
 8000846:	1c5a      	adds	r2, r3, #1
 8000848:	6022      	str	r2, [r4, #0]
 800084a:	701e      	strb	r6, [r3, #0]
 800084c:	6963      	ldr	r3, [r4, #20]
 800084e:	3001      	adds	r0, #1
 8000850:	4283      	cmp	r3, r0
 8000852:	d004      	beq.n	800085e <__swbuf_r+0x62>
 8000854:	89a3      	ldrh	r3, [r4, #12]
 8000856:	07db      	lsls	r3, r3, #31
 8000858:	d519      	bpl.n	800088e <__swbuf_r+0x92>
 800085a:	2e0a      	cmp	r6, #10
 800085c:	d117      	bne.n	800088e <__swbuf_r+0x92>
 800085e:	4621      	mov	r1, r4
 8000860:	4628      	mov	r0, r5
 8000862:	f000 f911 	bl	8000a88 <_fflush_r>
 8000866:	b190      	cbz	r0, 800088e <__swbuf_r+0x92>
 8000868:	e00f      	b.n	800088a <__swbuf_r+0x8e>
 800086a:	4b0b      	ldr	r3, [pc, #44]	; (8000898 <__swbuf_r+0x9c>)
 800086c:	429c      	cmp	r4, r3
 800086e:	d101      	bne.n	8000874 <__swbuf_r+0x78>
 8000870:	68ac      	ldr	r4, [r5, #8]
 8000872:	e7d0      	b.n	8000816 <__swbuf_r+0x1a>
 8000874:	4b09      	ldr	r3, [pc, #36]	; (800089c <__swbuf_r+0xa0>)
 8000876:	429c      	cmp	r4, r3
 8000878:	bf08      	it	eq
 800087a:	68ec      	ldreq	r4, [r5, #12]
 800087c:	e7cb      	b.n	8000816 <__swbuf_r+0x1a>
 800087e:	4621      	mov	r1, r4
 8000880:	4628      	mov	r0, r5
 8000882:	f000 f80d 	bl	80008a0 <__swsetup_r>
 8000886:	2800      	cmp	r0, #0
 8000888:	d0cc      	beq.n	8000824 <__swbuf_r+0x28>
 800088a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800088e:	4638      	mov	r0, r7
 8000890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000892:	bf00      	nop
 8000894:	080010dc 	.word	0x080010dc
 8000898:	080010fc 	.word	0x080010fc
 800089c:	080010bc 	.word	0x080010bc

080008a0 <__swsetup_r>:
 80008a0:	4b32      	ldr	r3, [pc, #200]	; (800096c <__swsetup_r+0xcc>)
 80008a2:	b570      	push	{r4, r5, r6, lr}
 80008a4:	681d      	ldr	r5, [r3, #0]
 80008a6:	4606      	mov	r6, r0
 80008a8:	460c      	mov	r4, r1
 80008aa:	b125      	cbz	r5, 80008b6 <__swsetup_r+0x16>
 80008ac:	69ab      	ldr	r3, [r5, #24]
 80008ae:	b913      	cbnz	r3, 80008b6 <__swsetup_r+0x16>
 80008b0:	4628      	mov	r0, r5
 80008b2:	f000 f953 	bl	8000b5c <__sinit>
 80008b6:	4b2e      	ldr	r3, [pc, #184]	; (8000970 <__swsetup_r+0xd0>)
 80008b8:	429c      	cmp	r4, r3
 80008ba:	d10f      	bne.n	80008dc <__swsetup_r+0x3c>
 80008bc:	686c      	ldr	r4, [r5, #4]
 80008be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80008c2:	b29a      	uxth	r2, r3
 80008c4:	0715      	lsls	r5, r2, #28
 80008c6:	d42c      	bmi.n	8000922 <__swsetup_r+0x82>
 80008c8:	06d0      	lsls	r0, r2, #27
 80008ca:	d411      	bmi.n	80008f0 <__swsetup_r+0x50>
 80008cc:	2209      	movs	r2, #9
 80008ce:	6032      	str	r2, [r6, #0]
 80008d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008d4:	81a3      	strh	r3, [r4, #12]
 80008d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008da:	e03e      	b.n	800095a <__swsetup_r+0xba>
 80008dc:	4b25      	ldr	r3, [pc, #148]	; (8000974 <__swsetup_r+0xd4>)
 80008de:	429c      	cmp	r4, r3
 80008e0:	d101      	bne.n	80008e6 <__swsetup_r+0x46>
 80008e2:	68ac      	ldr	r4, [r5, #8]
 80008e4:	e7eb      	b.n	80008be <__swsetup_r+0x1e>
 80008e6:	4b24      	ldr	r3, [pc, #144]	; (8000978 <__swsetup_r+0xd8>)
 80008e8:	429c      	cmp	r4, r3
 80008ea:	bf08      	it	eq
 80008ec:	68ec      	ldreq	r4, [r5, #12]
 80008ee:	e7e6      	b.n	80008be <__swsetup_r+0x1e>
 80008f0:	0751      	lsls	r1, r2, #29
 80008f2:	d512      	bpl.n	800091a <__swsetup_r+0x7a>
 80008f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80008f6:	b141      	cbz	r1, 800090a <__swsetup_r+0x6a>
 80008f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80008fc:	4299      	cmp	r1, r3
 80008fe:	d002      	beq.n	8000906 <__swsetup_r+0x66>
 8000900:	4630      	mov	r0, r6
 8000902:	f000 fa19 	bl	8000d38 <_free_r>
 8000906:	2300      	movs	r3, #0
 8000908:	6363      	str	r3, [r4, #52]	; 0x34
 800090a:	89a3      	ldrh	r3, [r4, #12]
 800090c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000910:	81a3      	strh	r3, [r4, #12]
 8000912:	2300      	movs	r3, #0
 8000914:	6063      	str	r3, [r4, #4]
 8000916:	6923      	ldr	r3, [r4, #16]
 8000918:	6023      	str	r3, [r4, #0]
 800091a:	89a3      	ldrh	r3, [r4, #12]
 800091c:	f043 0308 	orr.w	r3, r3, #8
 8000920:	81a3      	strh	r3, [r4, #12]
 8000922:	6923      	ldr	r3, [r4, #16]
 8000924:	b94b      	cbnz	r3, 800093a <__swsetup_r+0x9a>
 8000926:	89a3      	ldrh	r3, [r4, #12]
 8000928:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800092c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000930:	d003      	beq.n	800093a <__swsetup_r+0x9a>
 8000932:	4621      	mov	r1, r4
 8000934:	4630      	mov	r0, r6
 8000936:	f000 f9bf 	bl	8000cb8 <__smakebuf_r>
 800093a:	89a2      	ldrh	r2, [r4, #12]
 800093c:	f012 0301 	ands.w	r3, r2, #1
 8000940:	d00c      	beq.n	800095c <__swsetup_r+0xbc>
 8000942:	2300      	movs	r3, #0
 8000944:	60a3      	str	r3, [r4, #8]
 8000946:	6963      	ldr	r3, [r4, #20]
 8000948:	425b      	negs	r3, r3
 800094a:	61a3      	str	r3, [r4, #24]
 800094c:	6923      	ldr	r3, [r4, #16]
 800094e:	b953      	cbnz	r3, 8000966 <__swsetup_r+0xc6>
 8000950:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000954:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8000958:	d1ba      	bne.n	80008d0 <__swsetup_r+0x30>
 800095a:	bd70      	pop	{r4, r5, r6, pc}
 800095c:	0792      	lsls	r2, r2, #30
 800095e:	bf58      	it	pl
 8000960:	6963      	ldrpl	r3, [r4, #20]
 8000962:	60a3      	str	r3, [r4, #8]
 8000964:	e7f2      	b.n	800094c <__swsetup_r+0xac>
 8000966:	2000      	movs	r0, #0
 8000968:	e7f7      	b.n	800095a <__swsetup_r+0xba>
 800096a:	bf00      	nop
 800096c:	20000000 	.word	0x20000000
 8000970:	080010dc 	.word	0x080010dc
 8000974:	080010fc 	.word	0x080010fc
 8000978:	080010bc 	.word	0x080010bc

0800097c <__sflush_r>:
 800097c:	898a      	ldrh	r2, [r1, #12]
 800097e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000982:	4605      	mov	r5, r0
 8000984:	0710      	lsls	r0, r2, #28
 8000986:	460c      	mov	r4, r1
 8000988:	d458      	bmi.n	8000a3c <__sflush_r+0xc0>
 800098a:	684b      	ldr	r3, [r1, #4]
 800098c:	2b00      	cmp	r3, #0
 800098e:	dc05      	bgt.n	800099c <__sflush_r+0x20>
 8000990:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000992:	2b00      	cmp	r3, #0
 8000994:	dc02      	bgt.n	800099c <__sflush_r+0x20>
 8000996:	2000      	movs	r0, #0
 8000998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800099c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800099e:	2e00      	cmp	r6, #0
 80009a0:	d0f9      	beq.n	8000996 <__sflush_r+0x1a>
 80009a2:	2300      	movs	r3, #0
 80009a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80009a8:	682f      	ldr	r7, [r5, #0]
 80009aa:	6a21      	ldr	r1, [r4, #32]
 80009ac:	602b      	str	r3, [r5, #0]
 80009ae:	d032      	beq.n	8000a16 <__sflush_r+0x9a>
 80009b0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80009b2:	89a3      	ldrh	r3, [r4, #12]
 80009b4:	075a      	lsls	r2, r3, #29
 80009b6:	d505      	bpl.n	80009c4 <__sflush_r+0x48>
 80009b8:	6863      	ldr	r3, [r4, #4]
 80009ba:	1ac0      	subs	r0, r0, r3
 80009bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80009be:	b10b      	cbz	r3, 80009c4 <__sflush_r+0x48>
 80009c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80009c2:	1ac0      	subs	r0, r0, r3
 80009c4:	2300      	movs	r3, #0
 80009c6:	4602      	mov	r2, r0
 80009c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80009ca:	6a21      	ldr	r1, [r4, #32]
 80009cc:	4628      	mov	r0, r5
 80009ce:	47b0      	blx	r6
 80009d0:	1c43      	adds	r3, r0, #1
 80009d2:	89a3      	ldrh	r3, [r4, #12]
 80009d4:	d106      	bne.n	80009e4 <__sflush_r+0x68>
 80009d6:	6829      	ldr	r1, [r5, #0]
 80009d8:	291d      	cmp	r1, #29
 80009da:	d848      	bhi.n	8000a6e <__sflush_r+0xf2>
 80009dc:	4a29      	ldr	r2, [pc, #164]	; (8000a84 <__sflush_r+0x108>)
 80009de:	40ca      	lsrs	r2, r1
 80009e0:	07d6      	lsls	r6, r2, #31
 80009e2:	d544      	bpl.n	8000a6e <__sflush_r+0xf2>
 80009e4:	2200      	movs	r2, #0
 80009e6:	6062      	str	r2, [r4, #4]
 80009e8:	04d9      	lsls	r1, r3, #19
 80009ea:	6922      	ldr	r2, [r4, #16]
 80009ec:	6022      	str	r2, [r4, #0]
 80009ee:	d504      	bpl.n	80009fa <__sflush_r+0x7e>
 80009f0:	1c42      	adds	r2, r0, #1
 80009f2:	d101      	bne.n	80009f8 <__sflush_r+0x7c>
 80009f4:	682b      	ldr	r3, [r5, #0]
 80009f6:	b903      	cbnz	r3, 80009fa <__sflush_r+0x7e>
 80009f8:	6560      	str	r0, [r4, #84]	; 0x54
 80009fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80009fc:	602f      	str	r7, [r5, #0]
 80009fe:	2900      	cmp	r1, #0
 8000a00:	d0c9      	beq.n	8000996 <__sflush_r+0x1a>
 8000a02:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000a06:	4299      	cmp	r1, r3
 8000a08:	d002      	beq.n	8000a10 <__sflush_r+0x94>
 8000a0a:	4628      	mov	r0, r5
 8000a0c:	f000 f994 	bl	8000d38 <_free_r>
 8000a10:	2000      	movs	r0, #0
 8000a12:	6360      	str	r0, [r4, #52]	; 0x34
 8000a14:	e7c0      	b.n	8000998 <__sflush_r+0x1c>
 8000a16:	2301      	movs	r3, #1
 8000a18:	4628      	mov	r0, r5
 8000a1a:	47b0      	blx	r6
 8000a1c:	1c41      	adds	r1, r0, #1
 8000a1e:	d1c8      	bne.n	80009b2 <__sflush_r+0x36>
 8000a20:	682b      	ldr	r3, [r5, #0]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d0c5      	beq.n	80009b2 <__sflush_r+0x36>
 8000a26:	2b1d      	cmp	r3, #29
 8000a28:	d001      	beq.n	8000a2e <__sflush_r+0xb2>
 8000a2a:	2b16      	cmp	r3, #22
 8000a2c:	d101      	bne.n	8000a32 <__sflush_r+0xb6>
 8000a2e:	602f      	str	r7, [r5, #0]
 8000a30:	e7b1      	b.n	8000996 <__sflush_r+0x1a>
 8000a32:	89a3      	ldrh	r3, [r4, #12]
 8000a34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a38:	81a3      	strh	r3, [r4, #12]
 8000a3a:	e7ad      	b.n	8000998 <__sflush_r+0x1c>
 8000a3c:	690f      	ldr	r7, [r1, #16]
 8000a3e:	2f00      	cmp	r7, #0
 8000a40:	d0a9      	beq.n	8000996 <__sflush_r+0x1a>
 8000a42:	0793      	lsls	r3, r2, #30
 8000a44:	680e      	ldr	r6, [r1, #0]
 8000a46:	bf08      	it	eq
 8000a48:	694b      	ldreq	r3, [r1, #20]
 8000a4a:	600f      	str	r7, [r1, #0]
 8000a4c:	bf18      	it	ne
 8000a4e:	2300      	movne	r3, #0
 8000a50:	eba6 0807 	sub.w	r8, r6, r7
 8000a54:	608b      	str	r3, [r1, #8]
 8000a56:	f1b8 0f00 	cmp.w	r8, #0
 8000a5a:	dd9c      	ble.n	8000996 <__sflush_r+0x1a>
 8000a5c:	4643      	mov	r3, r8
 8000a5e:	463a      	mov	r2, r7
 8000a60:	6a21      	ldr	r1, [r4, #32]
 8000a62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000a64:	4628      	mov	r0, r5
 8000a66:	47b0      	blx	r6
 8000a68:	2800      	cmp	r0, #0
 8000a6a:	dc06      	bgt.n	8000a7a <__sflush_r+0xfe>
 8000a6c:	89a3      	ldrh	r3, [r4, #12]
 8000a6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a72:	81a3      	strh	r3, [r4, #12]
 8000a74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a78:	e78e      	b.n	8000998 <__sflush_r+0x1c>
 8000a7a:	4407      	add	r7, r0
 8000a7c:	eba8 0800 	sub.w	r8, r8, r0
 8000a80:	e7e9      	b.n	8000a56 <__sflush_r+0xda>
 8000a82:	bf00      	nop
 8000a84:	20400001 	.word	0x20400001

08000a88 <_fflush_r>:
 8000a88:	b538      	push	{r3, r4, r5, lr}
 8000a8a:	690b      	ldr	r3, [r1, #16]
 8000a8c:	4605      	mov	r5, r0
 8000a8e:	460c      	mov	r4, r1
 8000a90:	b1db      	cbz	r3, 8000aca <_fflush_r+0x42>
 8000a92:	b118      	cbz	r0, 8000a9c <_fflush_r+0x14>
 8000a94:	6983      	ldr	r3, [r0, #24]
 8000a96:	b90b      	cbnz	r3, 8000a9c <_fflush_r+0x14>
 8000a98:	f000 f860 	bl	8000b5c <__sinit>
 8000a9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ad0 <_fflush_r+0x48>)
 8000a9e:	429c      	cmp	r4, r3
 8000aa0:	d109      	bne.n	8000ab6 <_fflush_r+0x2e>
 8000aa2:	686c      	ldr	r4, [r5, #4]
 8000aa4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000aa8:	b17b      	cbz	r3, 8000aca <_fflush_r+0x42>
 8000aaa:	4621      	mov	r1, r4
 8000aac:	4628      	mov	r0, r5
 8000aae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ab2:	f7ff bf63 	b.w	800097c <__sflush_r>
 8000ab6:	4b07      	ldr	r3, [pc, #28]	; (8000ad4 <_fflush_r+0x4c>)
 8000ab8:	429c      	cmp	r4, r3
 8000aba:	d101      	bne.n	8000ac0 <_fflush_r+0x38>
 8000abc:	68ac      	ldr	r4, [r5, #8]
 8000abe:	e7f1      	b.n	8000aa4 <_fflush_r+0x1c>
 8000ac0:	4b05      	ldr	r3, [pc, #20]	; (8000ad8 <_fflush_r+0x50>)
 8000ac2:	429c      	cmp	r4, r3
 8000ac4:	bf08      	it	eq
 8000ac6:	68ec      	ldreq	r4, [r5, #12]
 8000ac8:	e7ec      	b.n	8000aa4 <_fflush_r+0x1c>
 8000aca:	2000      	movs	r0, #0
 8000acc:	bd38      	pop	{r3, r4, r5, pc}
 8000ace:	bf00      	nop
 8000ad0:	080010dc 	.word	0x080010dc
 8000ad4:	080010fc 	.word	0x080010fc
 8000ad8:	080010bc 	.word	0x080010bc

08000adc <std>:
 8000adc:	2300      	movs	r3, #0
 8000ade:	b510      	push	{r4, lr}
 8000ae0:	4604      	mov	r4, r0
 8000ae2:	e9c0 3300 	strd	r3, r3, [r0]
 8000ae6:	6083      	str	r3, [r0, #8]
 8000ae8:	8181      	strh	r1, [r0, #12]
 8000aea:	6643      	str	r3, [r0, #100]	; 0x64
 8000aec:	81c2      	strh	r2, [r0, #14]
 8000aee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000af2:	6183      	str	r3, [r0, #24]
 8000af4:	4619      	mov	r1, r3
 8000af6:	2208      	movs	r2, #8
 8000af8:	305c      	adds	r0, #92	; 0x5c
 8000afa:	f7ff fe13 	bl	8000724 <memset>
 8000afe:	4b05      	ldr	r3, [pc, #20]	; (8000b14 <std+0x38>)
 8000b00:	6263      	str	r3, [r4, #36]	; 0x24
 8000b02:	4b05      	ldr	r3, [pc, #20]	; (8000b18 <std+0x3c>)
 8000b04:	62a3      	str	r3, [r4, #40]	; 0x28
 8000b06:	4b05      	ldr	r3, [pc, #20]	; (8000b1c <std+0x40>)
 8000b08:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000b0a:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <std+0x44>)
 8000b0c:	6224      	str	r4, [r4, #32]
 8000b0e:	6323      	str	r3, [r4, #48]	; 0x30
 8000b10:	bd10      	pop	{r4, pc}
 8000b12:	bf00      	nop
 8000b14:	08000ea9 	.word	0x08000ea9
 8000b18:	08000ecb 	.word	0x08000ecb
 8000b1c:	08000f03 	.word	0x08000f03
 8000b20:	08000f27 	.word	0x08000f27

08000b24 <_cleanup_r>:
 8000b24:	4901      	ldr	r1, [pc, #4]	; (8000b2c <_cleanup_r+0x8>)
 8000b26:	f000 b885 	b.w	8000c34 <_fwalk_reent>
 8000b2a:	bf00      	nop
 8000b2c:	08000a89 	.word	0x08000a89

08000b30 <__sfmoreglue>:
 8000b30:	b570      	push	{r4, r5, r6, lr}
 8000b32:	1e4a      	subs	r2, r1, #1
 8000b34:	2568      	movs	r5, #104	; 0x68
 8000b36:	4355      	muls	r5, r2
 8000b38:	460e      	mov	r6, r1
 8000b3a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000b3e:	f000 f949 	bl	8000dd4 <_malloc_r>
 8000b42:	4604      	mov	r4, r0
 8000b44:	b140      	cbz	r0, 8000b58 <__sfmoreglue+0x28>
 8000b46:	2100      	movs	r1, #0
 8000b48:	e9c0 1600 	strd	r1, r6, [r0]
 8000b4c:	300c      	adds	r0, #12
 8000b4e:	60a0      	str	r0, [r4, #8]
 8000b50:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000b54:	f7ff fde6 	bl	8000724 <memset>
 8000b58:	4620      	mov	r0, r4
 8000b5a:	bd70      	pop	{r4, r5, r6, pc}

08000b5c <__sinit>:
 8000b5c:	6983      	ldr	r3, [r0, #24]
 8000b5e:	b510      	push	{r4, lr}
 8000b60:	4604      	mov	r4, r0
 8000b62:	bb33      	cbnz	r3, 8000bb2 <__sinit+0x56>
 8000b64:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8000b68:	6503      	str	r3, [r0, #80]	; 0x50
 8000b6a:	4b12      	ldr	r3, [pc, #72]	; (8000bb4 <__sinit+0x58>)
 8000b6c:	4a12      	ldr	r2, [pc, #72]	; (8000bb8 <__sinit+0x5c>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	6282      	str	r2, [r0, #40]	; 0x28
 8000b72:	4298      	cmp	r0, r3
 8000b74:	bf04      	itt	eq
 8000b76:	2301      	moveq	r3, #1
 8000b78:	6183      	streq	r3, [r0, #24]
 8000b7a:	f000 f81f 	bl	8000bbc <__sfp>
 8000b7e:	6060      	str	r0, [r4, #4]
 8000b80:	4620      	mov	r0, r4
 8000b82:	f000 f81b 	bl	8000bbc <__sfp>
 8000b86:	60a0      	str	r0, [r4, #8]
 8000b88:	4620      	mov	r0, r4
 8000b8a:	f000 f817 	bl	8000bbc <__sfp>
 8000b8e:	2200      	movs	r2, #0
 8000b90:	60e0      	str	r0, [r4, #12]
 8000b92:	2104      	movs	r1, #4
 8000b94:	6860      	ldr	r0, [r4, #4]
 8000b96:	f7ff ffa1 	bl	8000adc <std>
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	2109      	movs	r1, #9
 8000b9e:	68a0      	ldr	r0, [r4, #8]
 8000ba0:	f7ff ff9c 	bl	8000adc <std>
 8000ba4:	2202      	movs	r2, #2
 8000ba6:	2112      	movs	r1, #18
 8000ba8:	68e0      	ldr	r0, [r4, #12]
 8000baa:	f7ff ff97 	bl	8000adc <std>
 8000bae:	2301      	movs	r3, #1
 8000bb0:	61a3      	str	r3, [r4, #24]
 8000bb2:	bd10      	pop	{r4, pc}
 8000bb4:	080010b8 	.word	0x080010b8
 8000bb8:	08000b25 	.word	0x08000b25

08000bbc <__sfp>:
 8000bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bbe:	4b1b      	ldr	r3, [pc, #108]	; (8000c2c <__sfp+0x70>)
 8000bc0:	681e      	ldr	r6, [r3, #0]
 8000bc2:	69b3      	ldr	r3, [r6, #24]
 8000bc4:	4607      	mov	r7, r0
 8000bc6:	b913      	cbnz	r3, 8000bce <__sfp+0x12>
 8000bc8:	4630      	mov	r0, r6
 8000bca:	f7ff ffc7 	bl	8000b5c <__sinit>
 8000bce:	3648      	adds	r6, #72	; 0x48
 8000bd0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000bd4:	3b01      	subs	r3, #1
 8000bd6:	d503      	bpl.n	8000be0 <__sfp+0x24>
 8000bd8:	6833      	ldr	r3, [r6, #0]
 8000bda:	b133      	cbz	r3, 8000bea <__sfp+0x2e>
 8000bdc:	6836      	ldr	r6, [r6, #0]
 8000bde:	e7f7      	b.n	8000bd0 <__sfp+0x14>
 8000be0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000be4:	b16d      	cbz	r5, 8000c02 <__sfp+0x46>
 8000be6:	3468      	adds	r4, #104	; 0x68
 8000be8:	e7f4      	b.n	8000bd4 <__sfp+0x18>
 8000bea:	2104      	movs	r1, #4
 8000bec:	4638      	mov	r0, r7
 8000bee:	f7ff ff9f 	bl	8000b30 <__sfmoreglue>
 8000bf2:	6030      	str	r0, [r6, #0]
 8000bf4:	2800      	cmp	r0, #0
 8000bf6:	d1f1      	bne.n	8000bdc <__sfp+0x20>
 8000bf8:	230c      	movs	r3, #12
 8000bfa:	603b      	str	r3, [r7, #0]
 8000bfc:	4604      	mov	r4, r0
 8000bfe:	4620      	mov	r0, r4
 8000c00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c02:	4b0b      	ldr	r3, [pc, #44]	; (8000c30 <__sfp+0x74>)
 8000c04:	6665      	str	r5, [r4, #100]	; 0x64
 8000c06:	e9c4 5500 	strd	r5, r5, [r4]
 8000c0a:	60a5      	str	r5, [r4, #8]
 8000c0c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8000c10:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8000c14:	2208      	movs	r2, #8
 8000c16:	4629      	mov	r1, r5
 8000c18:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000c1c:	f7ff fd82 	bl	8000724 <memset>
 8000c20:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000c24:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000c28:	e7e9      	b.n	8000bfe <__sfp+0x42>
 8000c2a:	bf00      	nop
 8000c2c:	080010b8 	.word	0x080010b8
 8000c30:	ffff0001 	.word	0xffff0001

08000c34 <_fwalk_reent>:
 8000c34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c38:	4680      	mov	r8, r0
 8000c3a:	4689      	mov	r9, r1
 8000c3c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000c40:	2600      	movs	r6, #0
 8000c42:	b914      	cbnz	r4, 8000c4a <_fwalk_reent+0x16>
 8000c44:	4630      	mov	r0, r6
 8000c46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c4a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8000c4e:	3f01      	subs	r7, #1
 8000c50:	d501      	bpl.n	8000c56 <_fwalk_reent+0x22>
 8000c52:	6824      	ldr	r4, [r4, #0]
 8000c54:	e7f5      	b.n	8000c42 <_fwalk_reent+0xe>
 8000c56:	89ab      	ldrh	r3, [r5, #12]
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	d907      	bls.n	8000c6c <_fwalk_reent+0x38>
 8000c5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000c60:	3301      	adds	r3, #1
 8000c62:	d003      	beq.n	8000c6c <_fwalk_reent+0x38>
 8000c64:	4629      	mov	r1, r5
 8000c66:	4640      	mov	r0, r8
 8000c68:	47c8      	blx	r9
 8000c6a:	4306      	orrs	r6, r0
 8000c6c:	3568      	adds	r5, #104	; 0x68
 8000c6e:	e7ee      	b.n	8000c4e <_fwalk_reent+0x1a>

08000c70 <__swhatbuf_r>:
 8000c70:	b570      	push	{r4, r5, r6, lr}
 8000c72:	460e      	mov	r6, r1
 8000c74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c78:	2900      	cmp	r1, #0
 8000c7a:	b096      	sub	sp, #88	; 0x58
 8000c7c:	4614      	mov	r4, r2
 8000c7e:	461d      	mov	r5, r3
 8000c80:	da07      	bge.n	8000c92 <__swhatbuf_r+0x22>
 8000c82:	2300      	movs	r3, #0
 8000c84:	602b      	str	r3, [r5, #0]
 8000c86:	89b3      	ldrh	r3, [r6, #12]
 8000c88:	061a      	lsls	r2, r3, #24
 8000c8a:	d410      	bmi.n	8000cae <__swhatbuf_r+0x3e>
 8000c8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c90:	e00e      	b.n	8000cb0 <__swhatbuf_r+0x40>
 8000c92:	466a      	mov	r2, sp
 8000c94:	f000 f96e 	bl	8000f74 <_fstat_r>
 8000c98:	2800      	cmp	r0, #0
 8000c9a:	dbf2      	blt.n	8000c82 <__swhatbuf_r+0x12>
 8000c9c:	9a01      	ldr	r2, [sp, #4]
 8000c9e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000ca2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000ca6:	425a      	negs	r2, r3
 8000ca8:	415a      	adcs	r2, r3
 8000caa:	602a      	str	r2, [r5, #0]
 8000cac:	e7ee      	b.n	8000c8c <__swhatbuf_r+0x1c>
 8000cae:	2340      	movs	r3, #64	; 0x40
 8000cb0:	2000      	movs	r0, #0
 8000cb2:	6023      	str	r3, [r4, #0]
 8000cb4:	b016      	add	sp, #88	; 0x58
 8000cb6:	bd70      	pop	{r4, r5, r6, pc}

08000cb8 <__smakebuf_r>:
 8000cb8:	898b      	ldrh	r3, [r1, #12]
 8000cba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000cbc:	079d      	lsls	r5, r3, #30
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460c      	mov	r4, r1
 8000cc2:	d507      	bpl.n	8000cd4 <__smakebuf_r+0x1c>
 8000cc4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000cc8:	6023      	str	r3, [r4, #0]
 8000cca:	6123      	str	r3, [r4, #16]
 8000ccc:	2301      	movs	r3, #1
 8000cce:	6163      	str	r3, [r4, #20]
 8000cd0:	b002      	add	sp, #8
 8000cd2:	bd70      	pop	{r4, r5, r6, pc}
 8000cd4:	ab01      	add	r3, sp, #4
 8000cd6:	466a      	mov	r2, sp
 8000cd8:	f7ff ffca 	bl	8000c70 <__swhatbuf_r>
 8000cdc:	9900      	ldr	r1, [sp, #0]
 8000cde:	4605      	mov	r5, r0
 8000ce0:	4630      	mov	r0, r6
 8000ce2:	f000 f877 	bl	8000dd4 <_malloc_r>
 8000ce6:	b948      	cbnz	r0, 8000cfc <__smakebuf_r+0x44>
 8000ce8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000cec:	059a      	lsls	r2, r3, #22
 8000cee:	d4ef      	bmi.n	8000cd0 <__smakebuf_r+0x18>
 8000cf0:	f023 0303 	bic.w	r3, r3, #3
 8000cf4:	f043 0302 	orr.w	r3, r3, #2
 8000cf8:	81a3      	strh	r3, [r4, #12]
 8000cfa:	e7e3      	b.n	8000cc4 <__smakebuf_r+0xc>
 8000cfc:	4b0d      	ldr	r3, [pc, #52]	; (8000d34 <__smakebuf_r+0x7c>)
 8000cfe:	62b3      	str	r3, [r6, #40]	; 0x28
 8000d00:	89a3      	ldrh	r3, [r4, #12]
 8000d02:	6020      	str	r0, [r4, #0]
 8000d04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d08:	81a3      	strh	r3, [r4, #12]
 8000d0a:	9b00      	ldr	r3, [sp, #0]
 8000d0c:	6163      	str	r3, [r4, #20]
 8000d0e:	9b01      	ldr	r3, [sp, #4]
 8000d10:	6120      	str	r0, [r4, #16]
 8000d12:	b15b      	cbz	r3, 8000d2c <__smakebuf_r+0x74>
 8000d14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000d18:	4630      	mov	r0, r6
 8000d1a:	f000 f93d 	bl	8000f98 <_isatty_r>
 8000d1e:	b128      	cbz	r0, 8000d2c <__smakebuf_r+0x74>
 8000d20:	89a3      	ldrh	r3, [r4, #12]
 8000d22:	f023 0303 	bic.w	r3, r3, #3
 8000d26:	f043 0301 	orr.w	r3, r3, #1
 8000d2a:	81a3      	strh	r3, [r4, #12]
 8000d2c:	89a3      	ldrh	r3, [r4, #12]
 8000d2e:	431d      	orrs	r5, r3
 8000d30:	81a5      	strh	r5, [r4, #12]
 8000d32:	e7cd      	b.n	8000cd0 <__smakebuf_r+0x18>
 8000d34:	08000b25 	.word	0x08000b25

08000d38 <_free_r>:
 8000d38:	b538      	push	{r3, r4, r5, lr}
 8000d3a:	4605      	mov	r5, r0
 8000d3c:	2900      	cmp	r1, #0
 8000d3e:	d045      	beq.n	8000dcc <_free_r+0x94>
 8000d40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000d44:	1f0c      	subs	r4, r1, #4
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	bfb8      	it	lt
 8000d4a:	18e4      	addlt	r4, r4, r3
 8000d4c:	f000 f946 	bl	8000fdc <__malloc_lock>
 8000d50:	4a1f      	ldr	r2, [pc, #124]	; (8000dd0 <_free_r+0x98>)
 8000d52:	6813      	ldr	r3, [r2, #0]
 8000d54:	4610      	mov	r0, r2
 8000d56:	b933      	cbnz	r3, 8000d66 <_free_r+0x2e>
 8000d58:	6063      	str	r3, [r4, #4]
 8000d5a:	6014      	str	r4, [r2, #0]
 8000d5c:	4628      	mov	r0, r5
 8000d5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d62:	f000 b93c 	b.w	8000fde <__malloc_unlock>
 8000d66:	42a3      	cmp	r3, r4
 8000d68:	d90c      	bls.n	8000d84 <_free_r+0x4c>
 8000d6a:	6821      	ldr	r1, [r4, #0]
 8000d6c:	1862      	adds	r2, r4, r1
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	bf04      	itt	eq
 8000d72:	681a      	ldreq	r2, [r3, #0]
 8000d74:	685b      	ldreq	r3, [r3, #4]
 8000d76:	6063      	str	r3, [r4, #4]
 8000d78:	bf04      	itt	eq
 8000d7a:	1852      	addeq	r2, r2, r1
 8000d7c:	6022      	streq	r2, [r4, #0]
 8000d7e:	6004      	str	r4, [r0, #0]
 8000d80:	e7ec      	b.n	8000d5c <_free_r+0x24>
 8000d82:	4613      	mov	r3, r2
 8000d84:	685a      	ldr	r2, [r3, #4]
 8000d86:	b10a      	cbz	r2, 8000d8c <_free_r+0x54>
 8000d88:	42a2      	cmp	r2, r4
 8000d8a:	d9fa      	bls.n	8000d82 <_free_r+0x4a>
 8000d8c:	6819      	ldr	r1, [r3, #0]
 8000d8e:	1858      	adds	r0, r3, r1
 8000d90:	42a0      	cmp	r0, r4
 8000d92:	d10b      	bne.n	8000dac <_free_r+0x74>
 8000d94:	6820      	ldr	r0, [r4, #0]
 8000d96:	4401      	add	r1, r0
 8000d98:	1858      	adds	r0, r3, r1
 8000d9a:	4282      	cmp	r2, r0
 8000d9c:	6019      	str	r1, [r3, #0]
 8000d9e:	d1dd      	bne.n	8000d5c <_free_r+0x24>
 8000da0:	6810      	ldr	r0, [r2, #0]
 8000da2:	6852      	ldr	r2, [r2, #4]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	4401      	add	r1, r0
 8000da8:	6019      	str	r1, [r3, #0]
 8000daa:	e7d7      	b.n	8000d5c <_free_r+0x24>
 8000dac:	d902      	bls.n	8000db4 <_free_r+0x7c>
 8000dae:	230c      	movs	r3, #12
 8000db0:	602b      	str	r3, [r5, #0]
 8000db2:	e7d3      	b.n	8000d5c <_free_r+0x24>
 8000db4:	6820      	ldr	r0, [r4, #0]
 8000db6:	1821      	adds	r1, r4, r0
 8000db8:	428a      	cmp	r2, r1
 8000dba:	bf04      	itt	eq
 8000dbc:	6811      	ldreq	r1, [r2, #0]
 8000dbe:	6852      	ldreq	r2, [r2, #4]
 8000dc0:	6062      	str	r2, [r4, #4]
 8000dc2:	bf04      	itt	eq
 8000dc4:	1809      	addeq	r1, r1, r0
 8000dc6:	6021      	streq	r1, [r4, #0]
 8000dc8:	605c      	str	r4, [r3, #4]
 8000dca:	e7c7      	b.n	8000d5c <_free_r+0x24>
 8000dcc:	bd38      	pop	{r3, r4, r5, pc}
 8000dce:	bf00      	nop
 8000dd0:	20000088 	.word	0x20000088

08000dd4 <_malloc_r>:
 8000dd4:	b570      	push	{r4, r5, r6, lr}
 8000dd6:	1ccd      	adds	r5, r1, #3
 8000dd8:	f025 0503 	bic.w	r5, r5, #3
 8000ddc:	3508      	adds	r5, #8
 8000dde:	2d0c      	cmp	r5, #12
 8000de0:	bf38      	it	cc
 8000de2:	250c      	movcc	r5, #12
 8000de4:	2d00      	cmp	r5, #0
 8000de6:	4606      	mov	r6, r0
 8000de8:	db01      	blt.n	8000dee <_malloc_r+0x1a>
 8000dea:	42a9      	cmp	r1, r5
 8000dec:	d903      	bls.n	8000df6 <_malloc_r+0x22>
 8000dee:	230c      	movs	r3, #12
 8000df0:	6033      	str	r3, [r6, #0]
 8000df2:	2000      	movs	r0, #0
 8000df4:	bd70      	pop	{r4, r5, r6, pc}
 8000df6:	f000 f8f1 	bl	8000fdc <__malloc_lock>
 8000dfa:	4a21      	ldr	r2, [pc, #132]	; (8000e80 <_malloc_r+0xac>)
 8000dfc:	6814      	ldr	r4, [r2, #0]
 8000dfe:	4621      	mov	r1, r4
 8000e00:	b991      	cbnz	r1, 8000e28 <_malloc_r+0x54>
 8000e02:	4c20      	ldr	r4, [pc, #128]	; (8000e84 <_malloc_r+0xb0>)
 8000e04:	6823      	ldr	r3, [r4, #0]
 8000e06:	b91b      	cbnz	r3, 8000e10 <_malloc_r+0x3c>
 8000e08:	4630      	mov	r0, r6
 8000e0a:	f000 f83d 	bl	8000e88 <_sbrk_r>
 8000e0e:	6020      	str	r0, [r4, #0]
 8000e10:	4629      	mov	r1, r5
 8000e12:	4630      	mov	r0, r6
 8000e14:	f000 f838 	bl	8000e88 <_sbrk_r>
 8000e18:	1c43      	adds	r3, r0, #1
 8000e1a:	d124      	bne.n	8000e66 <_malloc_r+0x92>
 8000e1c:	230c      	movs	r3, #12
 8000e1e:	6033      	str	r3, [r6, #0]
 8000e20:	4630      	mov	r0, r6
 8000e22:	f000 f8dc 	bl	8000fde <__malloc_unlock>
 8000e26:	e7e4      	b.n	8000df2 <_malloc_r+0x1e>
 8000e28:	680b      	ldr	r3, [r1, #0]
 8000e2a:	1b5b      	subs	r3, r3, r5
 8000e2c:	d418      	bmi.n	8000e60 <_malloc_r+0x8c>
 8000e2e:	2b0b      	cmp	r3, #11
 8000e30:	d90f      	bls.n	8000e52 <_malloc_r+0x7e>
 8000e32:	600b      	str	r3, [r1, #0]
 8000e34:	50cd      	str	r5, [r1, r3]
 8000e36:	18cc      	adds	r4, r1, r3
 8000e38:	4630      	mov	r0, r6
 8000e3a:	f000 f8d0 	bl	8000fde <__malloc_unlock>
 8000e3e:	f104 000b 	add.w	r0, r4, #11
 8000e42:	1d23      	adds	r3, r4, #4
 8000e44:	f020 0007 	bic.w	r0, r0, #7
 8000e48:	1ac3      	subs	r3, r0, r3
 8000e4a:	d0d3      	beq.n	8000df4 <_malloc_r+0x20>
 8000e4c:	425a      	negs	r2, r3
 8000e4e:	50e2      	str	r2, [r4, r3]
 8000e50:	e7d0      	b.n	8000df4 <_malloc_r+0x20>
 8000e52:	428c      	cmp	r4, r1
 8000e54:	684b      	ldr	r3, [r1, #4]
 8000e56:	bf16      	itet	ne
 8000e58:	6063      	strne	r3, [r4, #4]
 8000e5a:	6013      	streq	r3, [r2, #0]
 8000e5c:	460c      	movne	r4, r1
 8000e5e:	e7eb      	b.n	8000e38 <_malloc_r+0x64>
 8000e60:	460c      	mov	r4, r1
 8000e62:	6849      	ldr	r1, [r1, #4]
 8000e64:	e7cc      	b.n	8000e00 <_malloc_r+0x2c>
 8000e66:	1cc4      	adds	r4, r0, #3
 8000e68:	f024 0403 	bic.w	r4, r4, #3
 8000e6c:	42a0      	cmp	r0, r4
 8000e6e:	d005      	beq.n	8000e7c <_malloc_r+0xa8>
 8000e70:	1a21      	subs	r1, r4, r0
 8000e72:	4630      	mov	r0, r6
 8000e74:	f000 f808 	bl	8000e88 <_sbrk_r>
 8000e78:	3001      	adds	r0, #1
 8000e7a:	d0cf      	beq.n	8000e1c <_malloc_r+0x48>
 8000e7c:	6025      	str	r5, [r4, #0]
 8000e7e:	e7db      	b.n	8000e38 <_malloc_r+0x64>
 8000e80:	20000088 	.word	0x20000088
 8000e84:	2000008c 	.word	0x2000008c

08000e88 <_sbrk_r>:
 8000e88:	b538      	push	{r3, r4, r5, lr}
 8000e8a:	4c06      	ldr	r4, [pc, #24]	; (8000ea4 <_sbrk_r+0x1c>)
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	4605      	mov	r5, r0
 8000e90:	4608      	mov	r0, r1
 8000e92:	6023      	str	r3, [r4, #0]
 8000e94:	f7ff fbc6 	bl	8000624 <_sbrk>
 8000e98:	1c43      	adds	r3, r0, #1
 8000e9a:	d102      	bne.n	8000ea2 <_sbrk_r+0x1a>
 8000e9c:	6823      	ldr	r3, [r4, #0]
 8000e9e:	b103      	cbz	r3, 8000ea2 <_sbrk_r+0x1a>
 8000ea0:	602b      	str	r3, [r5, #0]
 8000ea2:	bd38      	pop	{r3, r4, r5, pc}
 8000ea4:	200000d0 	.word	0x200000d0

08000ea8 <__sread>:
 8000ea8:	b510      	push	{r4, lr}
 8000eaa:	460c      	mov	r4, r1
 8000eac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000eb0:	f000 f896 	bl	8000fe0 <_read_r>
 8000eb4:	2800      	cmp	r0, #0
 8000eb6:	bfab      	itete	ge
 8000eb8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000eba:	89a3      	ldrhlt	r3, [r4, #12]
 8000ebc:	181b      	addge	r3, r3, r0
 8000ebe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000ec2:	bfac      	ite	ge
 8000ec4:	6563      	strge	r3, [r4, #84]	; 0x54
 8000ec6:	81a3      	strhlt	r3, [r4, #12]
 8000ec8:	bd10      	pop	{r4, pc}

08000eca <__swrite>:
 8000eca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ece:	461f      	mov	r7, r3
 8000ed0:	898b      	ldrh	r3, [r1, #12]
 8000ed2:	05db      	lsls	r3, r3, #23
 8000ed4:	4605      	mov	r5, r0
 8000ed6:	460c      	mov	r4, r1
 8000ed8:	4616      	mov	r6, r2
 8000eda:	d505      	bpl.n	8000ee8 <__swrite+0x1e>
 8000edc:	2302      	movs	r3, #2
 8000ede:	2200      	movs	r2, #0
 8000ee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ee4:	f000 f868 	bl	8000fb8 <_lseek_r>
 8000ee8:	89a3      	ldrh	r3, [r4, #12]
 8000eea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000eee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000ef2:	81a3      	strh	r3, [r4, #12]
 8000ef4:	4632      	mov	r2, r6
 8000ef6:	463b      	mov	r3, r7
 8000ef8:	4628      	mov	r0, r5
 8000efa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000efe:	f000 b817 	b.w	8000f30 <_write_r>

08000f02 <__sseek>:
 8000f02:	b510      	push	{r4, lr}
 8000f04:	460c      	mov	r4, r1
 8000f06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f0a:	f000 f855 	bl	8000fb8 <_lseek_r>
 8000f0e:	1c43      	adds	r3, r0, #1
 8000f10:	89a3      	ldrh	r3, [r4, #12]
 8000f12:	bf15      	itete	ne
 8000f14:	6560      	strne	r0, [r4, #84]	; 0x54
 8000f16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000f1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000f1e:	81a3      	strheq	r3, [r4, #12]
 8000f20:	bf18      	it	ne
 8000f22:	81a3      	strhne	r3, [r4, #12]
 8000f24:	bd10      	pop	{r4, pc}

08000f26 <__sclose>:
 8000f26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f2a:	f000 b813 	b.w	8000f54 <_close_r>
	...

08000f30 <_write_r>:
 8000f30:	b538      	push	{r3, r4, r5, lr}
 8000f32:	4c07      	ldr	r4, [pc, #28]	; (8000f50 <_write_r+0x20>)
 8000f34:	4605      	mov	r5, r0
 8000f36:	4608      	mov	r0, r1
 8000f38:	4611      	mov	r1, r2
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	6022      	str	r2, [r4, #0]
 8000f3e:	461a      	mov	r2, r3
 8000f40:	f7ff fb23 	bl	800058a <_write>
 8000f44:	1c43      	adds	r3, r0, #1
 8000f46:	d102      	bne.n	8000f4e <_write_r+0x1e>
 8000f48:	6823      	ldr	r3, [r4, #0]
 8000f4a:	b103      	cbz	r3, 8000f4e <_write_r+0x1e>
 8000f4c:	602b      	str	r3, [r5, #0]
 8000f4e:	bd38      	pop	{r3, r4, r5, pc}
 8000f50:	200000d0 	.word	0x200000d0

08000f54 <_close_r>:
 8000f54:	b538      	push	{r3, r4, r5, lr}
 8000f56:	4c06      	ldr	r4, [pc, #24]	; (8000f70 <_close_r+0x1c>)
 8000f58:	2300      	movs	r3, #0
 8000f5a:	4605      	mov	r5, r0
 8000f5c:	4608      	mov	r0, r1
 8000f5e:	6023      	str	r3, [r4, #0]
 8000f60:	f7ff fb2f 	bl	80005c2 <_close>
 8000f64:	1c43      	adds	r3, r0, #1
 8000f66:	d102      	bne.n	8000f6e <_close_r+0x1a>
 8000f68:	6823      	ldr	r3, [r4, #0]
 8000f6a:	b103      	cbz	r3, 8000f6e <_close_r+0x1a>
 8000f6c:	602b      	str	r3, [r5, #0]
 8000f6e:	bd38      	pop	{r3, r4, r5, pc}
 8000f70:	200000d0 	.word	0x200000d0

08000f74 <_fstat_r>:
 8000f74:	b538      	push	{r3, r4, r5, lr}
 8000f76:	4c07      	ldr	r4, [pc, #28]	; (8000f94 <_fstat_r+0x20>)
 8000f78:	2300      	movs	r3, #0
 8000f7a:	4605      	mov	r5, r0
 8000f7c:	4608      	mov	r0, r1
 8000f7e:	4611      	mov	r1, r2
 8000f80:	6023      	str	r3, [r4, #0]
 8000f82:	f7ff fb29 	bl	80005d8 <_fstat>
 8000f86:	1c43      	adds	r3, r0, #1
 8000f88:	d102      	bne.n	8000f90 <_fstat_r+0x1c>
 8000f8a:	6823      	ldr	r3, [r4, #0]
 8000f8c:	b103      	cbz	r3, 8000f90 <_fstat_r+0x1c>
 8000f8e:	602b      	str	r3, [r5, #0]
 8000f90:	bd38      	pop	{r3, r4, r5, pc}
 8000f92:	bf00      	nop
 8000f94:	200000d0 	.word	0x200000d0

08000f98 <_isatty_r>:
 8000f98:	b538      	push	{r3, r4, r5, lr}
 8000f9a:	4c06      	ldr	r4, [pc, #24]	; (8000fb4 <_isatty_r+0x1c>)
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	4605      	mov	r5, r0
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	6023      	str	r3, [r4, #0]
 8000fa4:	f7ff fb27 	bl	80005f6 <_isatty>
 8000fa8:	1c43      	adds	r3, r0, #1
 8000faa:	d102      	bne.n	8000fb2 <_isatty_r+0x1a>
 8000fac:	6823      	ldr	r3, [r4, #0]
 8000fae:	b103      	cbz	r3, 8000fb2 <_isatty_r+0x1a>
 8000fb0:	602b      	str	r3, [r5, #0]
 8000fb2:	bd38      	pop	{r3, r4, r5, pc}
 8000fb4:	200000d0 	.word	0x200000d0

08000fb8 <_lseek_r>:
 8000fb8:	b538      	push	{r3, r4, r5, lr}
 8000fba:	4c07      	ldr	r4, [pc, #28]	; (8000fd8 <_lseek_r+0x20>)
 8000fbc:	4605      	mov	r5, r0
 8000fbe:	4608      	mov	r0, r1
 8000fc0:	4611      	mov	r1, r2
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	6022      	str	r2, [r4, #0]
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	f7ff fb1f 	bl	800060a <_lseek>
 8000fcc:	1c43      	adds	r3, r0, #1
 8000fce:	d102      	bne.n	8000fd6 <_lseek_r+0x1e>
 8000fd0:	6823      	ldr	r3, [r4, #0]
 8000fd2:	b103      	cbz	r3, 8000fd6 <_lseek_r+0x1e>
 8000fd4:	602b      	str	r3, [r5, #0]
 8000fd6:	bd38      	pop	{r3, r4, r5, pc}
 8000fd8:	200000d0 	.word	0x200000d0

08000fdc <__malloc_lock>:
 8000fdc:	4770      	bx	lr

08000fde <__malloc_unlock>:
 8000fde:	4770      	bx	lr

08000fe0 <_read_r>:
 8000fe0:	b538      	push	{r3, r4, r5, lr}
 8000fe2:	4c07      	ldr	r4, [pc, #28]	; (8001000 <_read_r+0x20>)
 8000fe4:	4605      	mov	r5, r0
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	4611      	mov	r1, r2
 8000fea:	2200      	movs	r2, #0
 8000fec:	6022      	str	r2, [r4, #0]
 8000fee:	461a      	mov	r2, r3
 8000ff0:	f7ff faae 	bl	8000550 <_read>
 8000ff4:	1c43      	adds	r3, r0, #1
 8000ff6:	d102      	bne.n	8000ffe <_read_r+0x1e>
 8000ff8:	6823      	ldr	r3, [r4, #0]
 8000ffa:	b103      	cbz	r3, 8000ffe <_read_r+0x1e>
 8000ffc:	602b      	str	r3, [r5, #0]
 8000ffe:	bd38      	pop	{r3, r4, r5, pc}
 8001000:	200000d0 	.word	0x200000d0

08001004 <_init>:
 8001004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001006:	bf00      	nop
 8001008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800100a:	bc08      	pop	{r3}
 800100c:	469e      	mov	lr, r3
 800100e:	4770      	bx	lr

08001010 <_fini>:
 8001010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001012:	bf00      	nop
 8001014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001016:	bc08      	pop	{r3}
 8001018:	469e      	mov	lr, r3
 800101a:	4770      	bx	lr
