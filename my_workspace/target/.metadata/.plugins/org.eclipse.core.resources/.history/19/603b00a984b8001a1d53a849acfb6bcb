/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

#include<stdio.h>
#include<stdint.h>
#include"main.h"

void task1_handler(void);
void task2_handler(void);
void task3_handler(void);
void task4_handler(void);

void init_systick_timer(uint32_t tick_hz);
__attribute__((naked)) void init_scheduler_stack(uint32_t scheduler_top_of_stack);
void init_tasks_stack(void);
void enable_processor_faults(void);
uint32_t get_psp_value(void);
void save_psp_value(uint32_t current_psp_value);
void update_next_task(void);
__attribute__((naked)) void switch_sp_to_psp(void);

uint8_t current_task = 0;

typedef struct{
	uint32_t psp_value;
	uint32_t block_count;
	uint8_t current_state;
	void (*task_handler)(void);
}TCB_t;

TCB_t user_tasks[MAX_TASKS];

int main(void)
{
	enable_processor_faults();

	init_scheduler_stack(SCHEDULER_STACK_START);

	init_tasks_stack();

	init_systick_timer(TICK_HZ);

	switch_sp_to_psp();

	task1_handler();

	for(;;);
}

void task1_handler(void){
	while(1){
		printf("This is task1\n");
	}
}

void task2_handler(void){
	while(1){
		printf("This is task2\n");
	}
}

void task3_handler(void){
	while(1){
		printf("This is task3\n");
	}
}

void task4_handler(void){
	while(1){
		printf("This is task4\n");
	}
}

void init_systick_timer(uint32_t tick_hz){
	uint32_t *pST_RVR = (uint32_t*)0xE000E014;
	uint32_t *pST_CSR = (uint32_t*)0xE000E010;

	uint32_t count_value = (SYSTICK_TIM_CLK / tick_hz) - 1;

	//clear ST_RVR
	*pST_RVR &= ~(0x00FFFFFF);
	//load ST_RVR
	*pST_RVR |= count_value;

	//Do some settings
	*pST_CSR |= (1 << 2);//select processor clock source
	*pST_CSR |= (1 << 1);//Enables SysTick exception request

	//enable SYS_TICK
	*pST_CSR |= (1 << 0);//enables the counter
}

__attribute__((naked)) void init_scheduler_stack(uint32_t scheduler_top_of_stack){
	__asm volatile("MSR MSP,%0"::"r"(scheduler_top_of_stack));
	__asm volatile("BX LR");
}

void init_tasks_stack(void){
	user_tasks[0].current_state = TASK_RUNNING_STATE;
	user_tasks[1].current_state = TASK_RUNNING_STATE;
	user_tasks[2].current_state = TASK_RUNNING_STATE;
	user_tasks[3].current_state = TASK_RUNNING_STATE;

	user_tasks[0].psp_value = T1_STACK_START;
	user_tasks[1].psp_value = T2_STACK_START;
	user_tasks[2].psp_value = T3_STACK_START;
	user_tasks[3].psp_value = T4_STACK_START;

	user_tasks[0].task_handler = task1_handler;
	user_tasks[1].task_handler = task2_handler;
	user_tasks[2].task_handler = task3_handler;
	user_tasks[3].task_handler = task4_handler;

	uint32_t *pPSP;

	for (int i = 0; i < MAX_TASKS; i++) {
		pPSP = (uint32_t*)user_tasks[i];

		pPSP--;//XPRS
		*pPSP = DUMMY_XPRS;//0x01000000

		pPSP--;//PC
		*pPSP = user_tasks[i].task_handler;

		pPSP--;//LR
		*pPSP = 0xFFFFFFFD;

		//R0 to R12 registers should be zeros
		for(int i = 0; i < 13; i++){
			pPSP--;
			*pPSP = 0;
		}

		user_tasks[i] = (uint32_t)pPSP;
	}
}

void enable_processor_faults(void){
	uint32_t *pSHCSR = (uint32_t*)0xE000ED24;

	*pSHCSR |= (1 << 16);//memory manage enable
	*pSHCSR |= (1 << 17);//bus fault enable
	*pSHCSR |= (1 << 18);//usage fault enable
}

uint32_t get_psp_value(void){
	return psp_of_tasks[current_task];
}

void save_psp_value(uint32_t current_psp_value){
	psp_of_tasks[current_task] = current_psp_value;
}

void update_next_task(void){
	current_task++;
	current_task %= 4;
}

__attribute__((naked)) void switch_sp_to_psp(void){
	//initialize PSP with task1 stack address
	__asm volatile("PUSH {LR}");
	__asm volatile("BL get_psp_value");
	__asm volatile("MSR PSP,r0");
	__asm volatile("POP {LR}");


	//set SP tp PSP
	__asm volatile("MOV r0,#0x02");
	__asm volatile("MSR CONTROL, r0");
	__asm volatile("BX LR");
}


//exception handlers
__attribute__((naked)) void SysTick_Handler(void){

	//Save context of current task
	__asm volatile("MRS r0,PSP");
	__asm volatile("STMDB r0!,{r4-r11}");
	__asm volatile("PUSH {LR}");
	__asm volatile("BL save_psp_value");

	//retrieve the context of next task
	__asm volatile("BL update_next_task");
	__asm volatile("BL get_psp_value");
	__asm volatile("LDMIA r0!,{r4-r11}");
	__asm volatile("MSR PSP,r0");

	__asm volatile("POP {LR}");

	__asm volatile("BX LR");
}

void HardFault_Handler(void)
{
	printf("Exception: HardFault_Handler\n");
	while(1);
}

void MemManage_Handler(void)
{
	printf("Exception: MemManage_Handler\n");
	while(1);
}

void BusFault_Handler(void)
{
	printf("Exception: BusFault_Handler\n");
	while(1);
}
