/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

#include<stdio.h>
#include<stdint.h>

#define IRQNO_TIMER2 	28
#define IRQNO_I2C1 		31

uint32_t *pNVIC_IPRBase 	= (uint32_t*)0xE000E100;
uint32_t *pNVIC_ISERBase 	= (uint32_t*)0xE000E400;
uint32_t *pNVIC_ISPRBase  	= (uint32_t*)0xE000E200;

void config_priority_for_isqs(uint8_t irq_no, uint8_t priority_value)
{
	uint8_t iprx = irq_no / 4;
	uint32_t *ipr = pNVIC_IPRBase + iprx;

	uint8_t iprx_position = (irq_no % 4) * 8;

	*ipr &= ~(0xFF << iprx_position);
	*ipr |= (priority_value << iprx_position);

}

int main(void)
{
	config_priority_for_isqs(IRQNO_TIMER2, 0x80);
	config_priority_for_isqs(IRQNO_I2C1, 0x80);

	//set the interrupt pending bit in the NVIC PR
	*pNVIC_ISPRBase |= (1 << IRQNO_TIMER2);

	//Enable the IRQs in NVIC ISER
	*pNVIC_ISERBase |= (1 << IRQNO_I2C1);
	*pNVIC_ISERBase |= (1 << IRQNO_TIMER2);

	for(;;);
}

//ISRs
void TIM2_IRQHandler(void)
{
	printf("TIM2_IRQHandler\n");
	*pNVIC_ISERBase |= (1 << IRQNO_I2C1);
	while(1);
}

void I2C1_EV_IRQHandler(void)
{
	printf("I2C1_EV_IRQHandler\n");
}
