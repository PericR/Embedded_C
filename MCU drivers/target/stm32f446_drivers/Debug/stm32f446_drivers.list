
stm32f446_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023b0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08002580  08002580  00012580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026c0  080026c0  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  080026c0  080026c0  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080026c0  080026c0  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026c0  080026c0  000126c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026c4  080026c4  000126c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080026c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  2000006c  08002734  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000144  08002734  00020144  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002705  00000000  00000000  00020096  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000006f0  00000000  00000000  0002279b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001c0  00000000  00000000  00022e90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000178  00000000  00000000  00023050  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002db1  00000000  00000000  000231c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000199d  00000000  00000000  00025f79  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000afbf  00000000  00000000  00027916  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000328d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001148  00000000  00000000  00032950  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08002568 	.word	0x08002568

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	08002568 	.word	0x08002568

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <delay>:

//Arduino LED
#define LED_PIN						7


void delay(void){
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < 500000; i++);
 80002c6:	2300      	movs	r3, #0
 80002c8:	607b      	str	r3, [r7, #4]
 80002ca:	e002      	b.n	80002d2 <delay+0x12>
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	3301      	adds	r3, #1
 80002d0:	607b      	str	r3, [r7, #4]
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	4a03      	ldr	r2, [pc, #12]	; (80002e4 <delay+0x24>)
 80002d6:	4293      	cmp	r3, r2
 80002d8:	d9f8      	bls.n	80002cc <delay+0xc>
}
 80002da:	bf00      	nop
 80002dc:	370c      	adds	r7, #12
 80002de:	46bd      	mov	sp, r7
 80002e0:	bc80      	pop	{r7}
 80002e2:	4770      	bx	lr
 80002e4:	0007a11f 	.word	0x0007a11f

080002e8 <SPI2_GPIO_Inits>:

void SPI2_GPIO_Inits(void){
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b084      	sub	sp, #16
 80002ec:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPI_Pins;
	SPI_Pins.pGPIOx = GPIOB;
 80002ee:	4b16      	ldr	r3, [pc, #88]	; (8000348 <SPI2_GPIO_Inits+0x60>)
 80002f0:	607b      	str	r3, [r7, #4]

	SPI_Pins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80002f2:	2302      	movs	r3, #2
 80002f4:	727b      	strb	r3, [r7, #9]
	SPI_Pins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 80002f6:	2305      	movs	r3, #5
 80002f8:	737b      	strb	r3, [r7, #13]
	SPI_Pins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80002fa:	2300      	movs	r3, #0
 80002fc:	733b      	strb	r3, [r7, #12]
	SPI_Pins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PU;
 80002fe:	2301      	movs	r3, #1
 8000300:	72fb      	strb	r3, [r7, #11]
	SPI_Pins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OP_SPEED_FAST;
 8000302:	2302      	movs	r3, #2
 8000304:	72bb      	strb	r3, [r7, #10]

	//GPIOB PCLK enable
	GPIO_PeriClockControl(SPI_Pins.pGPIOx, ENABLE);
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	2101      	movs	r1, #1
 800030a:	4618      	mov	r0, r3
 800030c:	f000 fad4 	bl	80008b8 <GPIO_PeriClockControl>

	//SCLK
	SPI_Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000310:	230d      	movs	r3, #13
 8000312:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPI_Pins);
 8000314:	1d3b      	adds	r3, r7, #4
 8000316:	4618      	mov	r0, r3
 8000318:	f000 fba0 	bl	8000a5c <GPIO_Init>

	//MISO
	SPI_Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
 800031c:	230e      	movs	r3, #14
 800031e:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPI_Pins);
 8000320:	1d3b      	adds	r3, r7, #4
 8000322:	4618      	mov	r0, r3
 8000324:	f000 fb9a 	bl	8000a5c <GPIO_Init>

	//MOSI
	SPI_Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 8000328:	230f      	movs	r3, #15
 800032a:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPI_Pins);
 800032c:	1d3b      	adds	r3, r7, #4
 800032e:	4618      	mov	r0, r3
 8000330:	f000 fb94 	bl	8000a5c <GPIO_Init>

	//NSS
	SPI_Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 8000334:	230c      	movs	r3, #12
 8000336:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPI_Pins);
 8000338:	1d3b      	adds	r3, r7, #4
 800033a:	4618      	mov	r0, r3
 800033c:	f000 fb8e 	bl	8000a5c <GPIO_Init>
}
 8000340:	bf00      	nop
 8000342:	3710      	adds	r7, #16
 8000344:	46bd      	mov	sp, r7
 8000346:	bd80      	pop	{r7, pc}
 8000348:	40020400 	.word	0x40020400

0800034c <SPI2_Inits>:

void SPI2_Inits(void){
 800034c:	b580      	push	{r7, lr}
 800034e:	b088      	sub	sp, #32
 8000350:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2_Handle;
	SPI2_Handle.pSPIx = SPI2;
 8000352:	4b0e      	ldr	r3, [pc, #56]	; (800038c <SPI2_Inits+0x40>)
 8000354:	603b      	str	r3, [r7, #0]

	SPI2_Handle.SPI_Config.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 8000356:	2301      	movs	r3, #1
 8000358:	717b      	strb	r3, [r7, #5]
	SPI2_Handle.SPI_Config.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 800035a:	2301      	movs	r3, #1
 800035c:	713b      	strb	r3, [r7, #4]
	SPI2_Handle.SPI_Config.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV8;			//Generate SCLK of 2MHz
 800035e:	2302      	movs	r3, #2
 8000360:	71bb      	strb	r3, [r7, #6]
	SPI2_Handle.SPI_Config.SPI_DFF = SPI_DFF_8BITS;
 8000362:	2300      	movs	r3, #0
 8000364:	71fb      	strb	r3, [r7, #7]
	SPI2_Handle.SPI_Config.SPI_CPOL = SPI_CPOL_LOW;
 8000366:	2300      	movs	r3, #0
 8000368:	723b      	strb	r3, [r7, #8]
	SPI2_Handle.SPI_Config.SPI_CPHA = SPI_CPHA_LOW;
 800036a:	2300      	movs	r3, #0
 800036c:	727b      	strb	r3, [r7, #9]
	SPI2_Handle.SPI_Config.SPI_SSM = SPI_SSM_DI;						//Hardware slave management enabled
 800036e:	2300      	movs	r3, #0
 8000370:	72bb      	strb	r3, [r7, #10]

	SPI_PeriClockControl(SPI2_Handle.pSPIx, ENABLE);
 8000372:	683b      	ldr	r3, [r7, #0]
 8000374:	2101      	movs	r1, #1
 8000376:	4618      	mov	r0, r3
 8000378:	f000 fd58 	bl	8000e2c <SPI_PeriClockControl>

	SPI_Init(&SPI2_Handle);
 800037c:	463b      	mov	r3, r7
 800037e:	4618      	mov	r0, r3
 8000380:	f000 fdc6 	bl	8000f10 <SPI_Init>
}
 8000384:	bf00      	nop
 8000386:	3720      	adds	r7, #32
 8000388:	46bd      	mov	sp, r7
 800038a:	bd80      	pop	{r7, pc}
 800038c:	40003800 	.word	0x40003800

08000390 <GPIO_Button_Init>:

void GPIO_Button_Init(){
 8000390:	b580      	push	{r7, lr}
 8000392:	b084      	sub	sp, #16
 8000394:	af00      	add	r7, sp, #0
	GPIO_Handle_t gpioc_button;
	gpioc_button.pGPIOx = GPIOC;
 8000396:	4b09      	ldr	r3, [pc, #36]	; (80003bc <GPIO_Button_Init+0x2c>)
 8000398:	607b      	str	r3, [r7, #4]

	gpioc_button.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 800039a:	230d      	movs	r3, #13
 800039c:	723b      	strb	r3, [r7, #8]
	gpioc_button.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 800039e:	2300      	movs	r3, #0
 80003a0:	727b      	strb	r3, [r7, #9]

	GPIO_PeriClockControl(gpioc_button.pGPIOx, ENABLE);
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	2101      	movs	r1, #1
 80003a6:	4618      	mov	r0, r3
 80003a8:	f000 fa86 	bl	80008b8 <GPIO_PeriClockControl>
	GPIO_Init(&gpioc_button);
 80003ac:	1d3b      	adds	r3, r7, #4
 80003ae:	4618      	mov	r0, r3
 80003b0:	f000 fb54 	bl	8000a5c <GPIO_Init>
}
 80003b4:	bf00      	nop
 80003b6:	3710      	adds	r7, #16
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	40020800 	.word	0x40020800

080003c0 <SPI_Verify_Response>:

uint8_t SPI_Verify_Response(uint8_t ack_byte){
 80003c0:	b480      	push	{r7}
 80003c2:	b083      	sub	sp, #12
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	4603      	mov	r3, r0
 80003c8:	71fb      	strb	r3, [r7, #7]
	if(ack_byte == 0XF5){
 80003ca:	79fb      	ldrb	r3, [r7, #7]
 80003cc:	2bf5      	cmp	r3, #245	; 0xf5
 80003ce:	d101      	bne.n	80003d4 <SPI_Verify_Response+0x14>
		//ack
		return 1;
 80003d0:	2301      	movs	r3, #1
 80003d2:	e000      	b.n	80003d6 <SPI_Verify_Response+0x16>
	}

	return 0;
 80003d4:	2300      	movs	r3, #0
}
 80003d6:	4618      	mov	r0, r3
 80003d8:	370c      	adds	r7, #12
 80003da:	46bd      	mov	sp, r7
 80003dc:	bc80      	pop	{r7}
 80003de:	4770      	bx	lr

080003e0 <main>:

int main(void)
{
 80003e0:	b5b0      	push	{r4, r5, r7, lr}
 80003e2:	b090      	sub	sp, #64	; 0x40
 80003e4:	af00      	add	r7, sp, #0
	uint8_t dummy_write = 0XFF;
 80003e6:	23ff      	movs	r3, #255	; 0xff
 80003e8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t dummy_read;
	uint8_t ack_byte;

	initialise_monitor_handles();
 80003ec:	f002 f842 	bl	8002474 <initialise_monitor_handles>
	printf("Application is running\n");
 80003f0:	48c8      	ldr	r0, [pc, #800]	; (8000714 <main+0x334>)
 80003f2:	f000 ff3f 	bl	8001274 <puts>

	//Initialize GPIO pins to behave as SPI pins
	SPI2_GPIO_Inits();
 80003f6:	f7ff ff77 	bl	80002e8 <SPI2_GPIO_Inits>

	GPIO_Button_Init();
 80003fa:	f7ff ffc9 	bl	8000390 <GPIO_Button_Init>

	SPI2_Inits();
 80003fe:	f7ff ffa5 	bl	800034c <SPI2_Inits>
	printf("SPI Initialized\n");
 8000402:	48c5      	ldr	r0, [pc, #788]	; (8000718 <main+0x338>)
 8000404:	f000 ff36 	bl	8001274 <puts>

	/*
	 * Enabling SSOE makes NSS automatically managed by hardware
	 * Which means that enabling SPI peripheral will make NSS 0, and disabling will make it 1
	 */
	SPI_SSOE_Config(SPI2, ENABLE);
 8000408:	2101      	movs	r1, #1
 800040a:	48c4      	ldr	r0, [pc, #784]	; (800071c <main+0x33c>)
 800040c:	f000 fe70 	bl	80010f0 <SPI_SSOE_Config>

	while(1){
		while(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13)){};
 8000410:	bf00      	nop
 8000412:	210d      	movs	r1, #13
 8000414:	48c2      	ldr	r0, [pc, #776]	; (8000720 <main+0x340>)
 8000416:	f000 fcf3 	bl	8000e00 <GPIO_ReadFromInputPin>
 800041a:	4603      	mov	r3, r0
 800041c:	2b00      	cmp	r3, #0
 800041e:	d1f8      	bne.n	8000412 <main+0x32>

		delay();
 8000420:	f7ff ff4e 	bl	80002c0 <delay>
		//Enable SPI peripheral
		SPI_PeripheralControl(SPI2, ENABLE);
 8000424:	2101      	movs	r1, #1
 8000426:	48bd      	ldr	r0, [pc, #756]	; (800071c <main+0x33c>)
 8000428:	f000 fe47 	bl	80010ba <SPI_PeripheralControl>

		//1. CMD_LED_CNTRL		<pin no>	<value>
		uint8_t command = COMMAND_LED_CTRL;
 800042c:	2350      	movs	r3, #80	; 0x50
 800042e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
		SPI_SendData(SPI2, &command, 1);
 8000432:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000436:	2201      	movs	r2, #1
 8000438:	4619      	mov	r1, r3
 800043a:	48b8      	ldr	r0, [pc, #736]	; (800071c <main+0x33c>)
 800043c:	f000 fdd1 	bl	8000fe2 <SPI_SendData>

		//Dummy read to clear off RXEN flag
		SPI_ReceiveData(SPI2, &dummy_read, 1);
 8000440:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 8000444:	2201      	movs	r2, #1
 8000446:	4619      	mov	r1, r3
 8000448:	48b4      	ldr	r0, [pc, #720]	; (800071c <main+0x33c>)
 800044a:	f000 fe00 	bl	800104e <SPI_ReceiveData>

		//Send some dummy byte to fetch ack or nack response from slave
		SPI_SendData(SPI2, &dummy_write, 1);
 800044e:	f107 033b 	add.w	r3, r7, #59	; 0x3b
 8000452:	2201      	movs	r2, #1
 8000454:	4619      	mov	r1, r3
 8000456:	48b1      	ldr	r0, [pc, #708]	; (800071c <main+0x33c>)
 8000458:	f000 fdc3 	bl	8000fe2 <SPI_SendData>

		//Receive data from slave
		SPI_ReceiveData(SPI2, &ack_byte, 1);
 800045c:	f107 0339 	add.w	r3, r7, #57	; 0x39
 8000460:	2201      	movs	r2, #1
 8000462:	4619      	mov	r1, r3
 8000464:	48ad      	ldr	r0, [pc, #692]	; (800071c <main+0x33c>)
 8000466:	f000 fdf2 	bl	800104e <SPI_ReceiveData>
		if (SPI_Verify_Response(ack_byte)){
 800046a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800046e:	4618      	mov	r0, r3
 8000470:	f7ff ffa6 	bl	80003c0 <SPI_Verify_Response>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d00c      	beq.n	8000494 <main+0xb4>
			//Send arguments
			uint8_t args[2];
			args[0] = LED_PIN;
 800047a:	2307      	movs	r3, #7
 800047c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
			args[1] = LED_ON;
 8000480:	2301      	movs	r3, #1
 8000482:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

			SPI_SendData(SPI2, args, 2);
 8000486:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800048a:	2202      	movs	r2, #2
 800048c:	4619      	mov	r1, r3
 800048e:	48a3      	ldr	r0, [pc, #652]	; (800071c <main+0x33c>)
 8000490:	f000 fda7 	bl	8000fe2 <SPI_SendData>
		}

		//2. CMD SENSOR READ <analog pin number>
		while(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13)){};
 8000494:	bf00      	nop
 8000496:	210d      	movs	r1, #13
 8000498:	48a1      	ldr	r0, [pc, #644]	; (8000720 <main+0x340>)
 800049a:	f000 fcb1 	bl	8000e00 <GPIO_ReadFromInputPin>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d1f8      	bne.n	8000496 <main+0xb6>
		delay();
 80004a4:	f7ff ff0c 	bl	80002c0 <delay>

		command = COMMAND_SENSOR_READ;
 80004a8:	2351      	movs	r3, #81	; 0x51
 80004aa:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
		SPI_SendData(SPI2, &command, 1);
 80004ae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80004b2:	2201      	movs	r2, #1
 80004b4:	4619      	mov	r1, r3
 80004b6:	4899      	ldr	r0, [pc, #612]	; (800071c <main+0x33c>)
 80004b8:	f000 fd93 	bl	8000fe2 <SPI_SendData>

		//Dummy read to clear off RXEN flag
		SPI_ReceiveData(SPI2, &dummy_read, 1);
 80004bc:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 80004c0:	2201      	movs	r2, #1
 80004c2:	4619      	mov	r1, r3
 80004c4:	4895      	ldr	r0, [pc, #596]	; (800071c <main+0x33c>)
 80004c6:	f000 fdc2 	bl	800104e <SPI_ReceiveData>

		//Send some dummy byte to fetch ack or nack response from slave
		SPI_SendData(SPI2, &dummy_write, 1);
 80004ca:	f107 033b 	add.w	r3, r7, #59	; 0x3b
 80004ce:	2201      	movs	r2, #1
 80004d0:	4619      	mov	r1, r3
 80004d2:	4892      	ldr	r0, [pc, #584]	; (800071c <main+0x33c>)
 80004d4:	f000 fd85 	bl	8000fe2 <SPI_SendData>

		//Receive data from slave
		SPI_ReceiveData(SPI2, &ack_byte, 1);
 80004d8:	f107 0339 	add.w	r3, r7, #57	; 0x39
 80004dc:	2201      	movs	r2, #1
 80004de:	4619      	mov	r1, r3
 80004e0:	488e      	ldr	r0, [pc, #568]	; (800071c <main+0x33c>)
 80004e2:	f000 fdb4 	bl	800104e <SPI_ReceiveData>
		if (SPI_Verify_Response(ack_byte)){
 80004e6:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80004ea:	4618      	mov	r0, r3
 80004ec:	f7ff ff68 	bl	80003c0 <SPI_Verify_Response>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d026      	beq.n	8000544 <main+0x164>
			//Send arguments
			uint8_t args;
			args = ANALOG_PIN0;
 80004f6:	2300      	movs	r3, #0
 80004f8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

			SPI_SendData(SPI2, &args, 1);
 80004fc:	f107 0333 	add.w	r3, r7, #51	; 0x33
 8000500:	2201      	movs	r2, #1
 8000502:	4619      	mov	r1, r3
 8000504:	4885      	ldr	r0, [pc, #532]	; (800071c <main+0x33c>)
 8000506:	f000 fd6c 	bl	8000fe2 <SPI_SendData>

			//Dummy read to clear off RXEN flag
			SPI_ReceiveData(SPI2, &dummy_read, 1);
 800050a:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 800050e:	2201      	movs	r2, #1
 8000510:	4619      	mov	r1, r3
 8000512:	4882      	ldr	r0, [pc, #520]	; (800071c <main+0x33c>)
 8000514:	f000 fd9b 	bl	800104e <SPI_ReceiveData>

			//inset delay to give slave time for response
			delay();
 8000518:	f7ff fed2 	bl	80002c0 <delay>

			SPI_SendData(SPI2, &dummy_write, 1);
 800051c:	f107 033b 	add.w	r3, r7, #59	; 0x3b
 8000520:	2201      	movs	r2, #1
 8000522:	4619      	mov	r1, r3
 8000524:	487d      	ldr	r0, [pc, #500]	; (800071c <main+0x33c>)
 8000526:	f000 fd5c 	bl	8000fe2 <SPI_SendData>
			uint8_t analog_read;
			SPI_ReceiveData(SPI2, &analog_read, 1);
 800052a:	f107 0332 	add.w	r3, r7, #50	; 0x32
 800052e:	2201      	movs	r2, #1
 8000530:	4619      	mov	r1, r3
 8000532:	487a      	ldr	r0, [pc, #488]	; (800071c <main+0x33c>)
 8000534:	f000 fd8b 	bl	800104e <SPI_ReceiveData>
			printf("Sensor Value: %d\n", analog_read);
 8000538:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800053c:	4619      	mov	r1, r3
 800053e:	4879      	ldr	r0, [pc, #484]	; (8000724 <main+0x344>)
 8000540:	f000 fe24 	bl	800118c <iprintf>
		}


		//3. CMD LED READ <analog pin number>
		while(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13)){};
 8000544:	bf00      	nop
 8000546:	210d      	movs	r1, #13
 8000548:	4875      	ldr	r0, [pc, #468]	; (8000720 <main+0x340>)
 800054a:	f000 fc59 	bl	8000e00 <GPIO_ReadFromInputPin>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d1f8      	bne.n	8000546 <main+0x166>
		delay();
 8000554:	f7ff feb4 	bl	80002c0 <delay>

		command = COMMAND_LED_READ;
 8000558:	2352      	movs	r3, #82	; 0x52
 800055a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
		SPI_SendData(SPI2, &command, 1);
 800055e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000562:	2201      	movs	r2, #1
 8000564:	4619      	mov	r1, r3
 8000566:	486d      	ldr	r0, [pc, #436]	; (800071c <main+0x33c>)
 8000568:	f000 fd3b 	bl	8000fe2 <SPI_SendData>

		//Dummy read to clear off RXEN flag
		SPI_ReceiveData(SPI2, &dummy_read, 1);
 800056c:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 8000570:	2201      	movs	r2, #1
 8000572:	4619      	mov	r1, r3
 8000574:	4869      	ldr	r0, [pc, #420]	; (800071c <main+0x33c>)
 8000576:	f000 fd6a 	bl	800104e <SPI_ReceiveData>

		//Send some dummy byte to fetch ack or nack response from slave
		SPI_SendData(SPI2, &dummy_write, 1);
 800057a:	f107 033b 	add.w	r3, r7, #59	; 0x3b
 800057e:	2201      	movs	r2, #1
 8000580:	4619      	mov	r1, r3
 8000582:	4866      	ldr	r0, [pc, #408]	; (800071c <main+0x33c>)
 8000584:	f000 fd2d 	bl	8000fe2 <SPI_SendData>

		//Receive data from slave
		SPI_ReceiveData(SPI2, &ack_byte, 1);
 8000588:	f107 0339 	add.w	r3, r7, #57	; 0x39
 800058c:	2201      	movs	r2, #1
 800058e:	4619      	mov	r1, r3
 8000590:	4862      	ldr	r0, [pc, #392]	; (800071c <main+0x33c>)
 8000592:	f000 fd5c 	bl	800104e <SPI_ReceiveData>
		if(SPI_Verify_Response(ack_byte)){
 8000596:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800059a:	4618      	mov	r0, r3
 800059c:	f7ff ff10 	bl	80003c0 <SPI_Verify_Response>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d026      	beq.n	80005f4 <main+0x214>
			//send arguments
			uint8_t args;
			args = LED_PIN;
 80005a6:	2307      	movs	r3, #7
 80005a8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

			SPI_SendData(SPI2, &args, 1);
 80005ac:	f107 0331 	add.w	r3, r7, #49	; 0x31
 80005b0:	2201      	movs	r2, #1
 80005b2:	4619      	mov	r1, r3
 80005b4:	4859      	ldr	r0, [pc, #356]	; (800071c <main+0x33c>)
 80005b6:	f000 fd14 	bl	8000fe2 <SPI_SendData>

			//Dummy read to clear off RXEN flag
			SPI_ReceiveData(SPI2, &dummy_read, 1);
 80005ba:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 80005be:	2201      	movs	r2, #1
 80005c0:	4619      	mov	r1, r3
 80005c2:	4856      	ldr	r0, [pc, #344]	; (800071c <main+0x33c>)
 80005c4:	f000 fd43 	bl	800104e <SPI_ReceiveData>

			//inset delay to give slave time for response
			delay();
 80005c8:	f7ff fe7a 	bl	80002c0 <delay>

			uint8_t led_status;
			SPI_SendData(SPI2, &dummy_write, 1);
 80005cc:	f107 033b 	add.w	r3, r7, #59	; 0x3b
 80005d0:	2201      	movs	r2, #1
 80005d2:	4619      	mov	r1, r3
 80005d4:	4851      	ldr	r0, [pc, #324]	; (800071c <main+0x33c>)
 80005d6:	f000 fd04 	bl	8000fe2 <SPI_SendData>
			SPI_ReceiveData(SPI2, &led_status, 1);
 80005da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005de:	2201      	movs	r2, #1
 80005e0:	4619      	mov	r1, r3
 80005e2:	484e      	ldr	r0, [pc, #312]	; (800071c <main+0x33c>)
 80005e4:	f000 fd33 	bl	800104e <SPI_ReceiveData>
			printf("LED Value: %d\n", led_status);
 80005e8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80005ec:	4619      	mov	r1, r3
 80005ee:	484e      	ldr	r0, [pc, #312]	; (8000728 <main+0x348>)
 80005f0:	f000 fdcc 	bl	800118c <iprintf>
		}

		//4. CMD PRINT <message as string>
		while(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13)){};
 80005f4:	bf00      	nop
 80005f6:	210d      	movs	r1, #13
 80005f8:	4849      	ldr	r0, [pc, #292]	; (8000720 <main+0x340>)
 80005fa:	f000 fc01 	bl	8000e00 <GPIO_ReadFromInputPin>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d1f8      	bne.n	80005f6 <main+0x216>
		delay();
 8000604:	f7ff fe5c 	bl	80002c0 <delay>

		command = COMMAND_PRINT;
 8000608:	2353      	movs	r3, #83	; 0x53
 800060a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
		SPI_SendData(SPI2, &command, 1);
 800060e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000612:	2201      	movs	r2, #1
 8000614:	4619      	mov	r1, r3
 8000616:	4841      	ldr	r0, [pc, #260]	; (800071c <main+0x33c>)
 8000618:	f000 fce3 	bl	8000fe2 <SPI_SendData>

		//Dummy read to clear off RXEN flag
		SPI_ReceiveData(SPI2, &dummy_read, 1);
 800061c:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 8000620:	2201      	movs	r2, #1
 8000622:	4619      	mov	r1, r3
 8000624:	483d      	ldr	r0, [pc, #244]	; (800071c <main+0x33c>)
 8000626:	f000 fd12 	bl	800104e <SPI_ReceiveData>

		//Send some dummy byte to fetch ack or nack response from slave
		SPI_SendData(SPI2, &dummy_write, 1);
 800062a:	f107 033b 	add.w	r3, r7, #59	; 0x3b
 800062e:	2201      	movs	r2, #1
 8000630:	4619      	mov	r1, r3
 8000632:	483a      	ldr	r0, [pc, #232]	; (800071c <main+0x33c>)
 8000634:	f000 fcd5 	bl	8000fe2 <SPI_SendData>

		//Receive data from slave
		SPI_ReceiveData(SPI2, &ack_byte, 1);
 8000638:	f107 0339 	add.w	r3, r7, #57	; 0x39
 800063c:	2201      	movs	r2, #1
 800063e:	4619      	mov	r1, r3
 8000640:	4836      	ldr	r0, [pc, #216]	; (800071c <main+0x33c>)
 8000642:	f000 fd04 	bl	800104e <SPI_ReceiveData>
		if (SPI_Verify_Response(ack_byte)){
 8000646:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800064a:	4618      	mov	r0, r3
 800064c:	f7ff feb8 	bl	80003c0 <SPI_Verify_Response>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d02a      	beq.n	80006ac <main+0x2cc>
			//Send arguments
			uint8_t message[] = "Hello from the otter side";
 8000656:	4b35      	ldr	r3, [pc, #212]	; (800072c <main+0x34c>)
 8000658:	f107 0414 	add.w	r4, r7, #20
 800065c:	461d      	mov	r5, r3
 800065e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000660:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000662:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000666:	c403      	stmia	r4!, {r0, r1}
 8000668:	8022      	strh	r2, [r4, #0]
			uint8_t args;
			args = strlen((char*)message);
 800066a:	f107 0314 	add.w	r3, r7, #20
 800066e:	4618      	mov	r0, r3
 8000670:	f7ff fdce 	bl	8000210 <strlen>
 8000674:	4603      	mov	r3, r0
 8000676:	b2db      	uxtb	r3, r3
 8000678:	74fb      	strb	r3, [r7, #19]

			//send length
			SPI_SendData(SPI2, &args, 1);
 800067a:	f107 0313 	add.w	r3, r7, #19
 800067e:	2201      	movs	r2, #1
 8000680:	4619      	mov	r1, r3
 8000682:	4826      	ldr	r0, [pc, #152]	; (800071c <main+0x33c>)
 8000684:	f000 fcad 	bl	8000fe2 <SPI_SendData>

			//send message
			SPI_SendData(SPI2, message, args);
 8000688:	7cfb      	ldrb	r3, [r7, #19]
 800068a:	461a      	mov	r2, r3
 800068c:	f107 0314 	add.w	r3, r7, #20
 8000690:	4619      	mov	r1, r3
 8000692:	4822      	ldr	r0, [pc, #136]	; (800071c <main+0x33c>)
 8000694:	f000 fca5 	bl	8000fe2 <SPI_SendData>

			//Dummy read to clear off RXEN flag
			SPI_ReceiveData(SPI2, &dummy_read, 1);
 8000698:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 800069c:	2201      	movs	r2, #1
 800069e:	4619      	mov	r1, r3
 80006a0:	481e      	ldr	r0, [pc, #120]	; (800071c <main+0x33c>)
 80006a2:	f000 fcd4 	bl	800104e <SPI_ReceiveData>

			printf("Message sent!\n");
 80006a6:	4822      	ldr	r0, [pc, #136]	; (8000730 <main+0x350>)
 80006a8:	f000 fde4 	bl	8001274 <puts>
		}

		//5. CMD ID READ
		while(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13)){};
 80006ac:	bf00      	nop
 80006ae:	210d      	movs	r1, #13
 80006b0:	481b      	ldr	r0, [pc, #108]	; (8000720 <main+0x340>)
 80006b2:	f000 fba5 	bl	8000e00 <GPIO_ReadFromInputPin>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d1f8      	bne.n	80006ae <main+0x2ce>
		delay();
 80006bc:	f7ff fe00 	bl	80002c0 <delay>

		command = COMMAND_ID_READ;
 80006c0:	2354      	movs	r3, #84	; 0x54
 80006c2:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
		SPI_SendData(SPI2, &command, 1);
 80006c6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80006ca:	2201      	movs	r2, #1
 80006cc:	4619      	mov	r1, r3
 80006ce:	4813      	ldr	r0, [pc, #76]	; (800071c <main+0x33c>)
 80006d0:	f000 fc87 	bl	8000fe2 <SPI_SendData>

		//Dummy read to clear off RXEN flag
		SPI_ReceiveData(SPI2, &dummy_read, 1);
 80006d4:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 80006d8:	2201      	movs	r2, #1
 80006da:	4619      	mov	r1, r3
 80006dc:	480f      	ldr	r0, [pc, #60]	; (800071c <main+0x33c>)
 80006de:	f000 fcb6 	bl	800104e <SPI_ReceiveData>

		//Send some dummy byte to fetch ack or nack response from slave
		SPI_SendData(SPI2, &dummy_write, 1);
 80006e2:	f107 033b 	add.w	r3, r7, #59	; 0x3b
 80006e6:	2201      	movs	r2, #1
 80006e8:	4619      	mov	r1, r3
 80006ea:	480c      	ldr	r0, [pc, #48]	; (800071c <main+0x33c>)
 80006ec:	f000 fc79 	bl	8000fe2 <SPI_SendData>

		//Receive data from slave
		SPI_ReceiveData(SPI2, &ack_byte, 1);
 80006f0:	f107 0339 	add.w	r3, r7, #57	; 0x39
 80006f4:	2201      	movs	r2, #1
 80006f6:	4619      	mov	r1, r3
 80006f8:	4808      	ldr	r0, [pc, #32]	; (800071c <main+0x33c>)
 80006fa:	f000 fca8 	bl	800104e <SPI_ReceiveData>
		if (SPI_Verify_Response(ack_byte)){
 80006fe:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8000702:	4618      	mov	r0, r3
 8000704:	f7ff fe5c 	bl	80003c0 <SPI_Verify_Response>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d030      	beq.n	8000770 <main+0x390>
			uint8_t id[11];

			//read 10 bytes id from the slave
			for( int i = 0 ; i < 10 ; i++)
 800070e:	2300      	movs	r3, #0
 8000710:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000712:	e022      	b.n	800075a <main+0x37a>
 8000714:	08002580 	.word	0x08002580
 8000718:	08002598 	.word	0x08002598
 800071c:	40003800 	.word	0x40003800
 8000720:	40020800 	.word	0x40020800
 8000724:	080025a8 	.word	0x080025a8
 8000728:	080025bc 	.word	0x080025bc
 800072c:	080025f0 	.word	0x080025f0
 8000730:	080025cc 	.word	0x080025cc
			{
				//send dummy byte to fetch data from slave
				SPI_SendData(SPI2,&dummy_write,1);
 8000734:	f107 033b 	add.w	r3, r7, #59	; 0x3b
 8000738:	2201      	movs	r2, #1
 800073a:	4619      	mov	r1, r3
 800073c:	4830      	ldr	r0, [pc, #192]	; (8000800 <main+0x420>)
 800073e:	f000 fc50 	bl	8000fe2 <SPI_SendData>
				SPI_ReceiveData(SPI2,&id[i],1);
 8000742:	f107 0208 	add.w	r2, r7, #8
 8000746:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000748:	4413      	add	r3, r2
 800074a:	2201      	movs	r2, #1
 800074c:	4619      	mov	r1, r3
 800074e:	482c      	ldr	r0, [pc, #176]	; (8000800 <main+0x420>)
 8000750:	f000 fc7d 	bl	800104e <SPI_ReceiveData>
			for( int i = 0 ; i < 10 ; i++)
 8000754:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000756:	3301      	adds	r3, #1
 8000758:	63fb      	str	r3, [r7, #60]	; 0x3c
 800075a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800075c:	2b09      	cmp	r3, #9
 800075e:	dde9      	ble.n	8000734 <main+0x354>
			}

			id[11] = '\0';
 8000760:	2300      	movs	r3, #0
 8000762:	74fb      	strb	r3, [r7, #19]

			printf("COMMAND_ID : %s \n",id);
 8000764:	f107 0308 	add.w	r3, r7, #8
 8000768:	4619      	mov	r1, r3
 800076a:	4826      	ldr	r0, [pc, #152]	; (8000804 <main+0x424>)
 800076c:	f000 fd0e 	bl	800118c <iprintf>
		}

		//6. CMD_LED_CNTRL		<pin no>	<value>
		while(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13)){};
 8000770:	bf00      	nop
 8000772:	210d      	movs	r1, #13
 8000774:	4824      	ldr	r0, [pc, #144]	; (8000808 <main+0x428>)
 8000776:	f000 fb43 	bl	8000e00 <GPIO_ReadFromInputPin>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d1f8      	bne.n	8000772 <main+0x392>
		delay();
 8000780:	f7ff fd9e 	bl	80002c0 <delay>

		command = COMMAND_LED_CTRL;
 8000784:	2350      	movs	r3, #80	; 0x50
 8000786:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
		SPI_SendData(SPI2, &command, 1);
 800078a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800078e:	2201      	movs	r2, #1
 8000790:	4619      	mov	r1, r3
 8000792:	481b      	ldr	r0, [pc, #108]	; (8000800 <main+0x420>)
 8000794:	f000 fc25 	bl	8000fe2 <SPI_SendData>

		//Dummy read to clear off RXEN flag
		SPI_ReceiveData(SPI2, &dummy_read, 1);
 8000798:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 800079c:	2201      	movs	r2, #1
 800079e:	4619      	mov	r1, r3
 80007a0:	4817      	ldr	r0, [pc, #92]	; (8000800 <main+0x420>)
 80007a2:	f000 fc54 	bl	800104e <SPI_ReceiveData>

		//Send some dummy byte to fetch ack or nack response from slave
		SPI_SendData(SPI2, &dummy_write, 1);
 80007a6:	f107 033b 	add.w	r3, r7, #59	; 0x3b
 80007aa:	2201      	movs	r2, #1
 80007ac:	4619      	mov	r1, r3
 80007ae:	4814      	ldr	r0, [pc, #80]	; (8000800 <main+0x420>)
 80007b0:	f000 fc17 	bl	8000fe2 <SPI_SendData>

		//Receive data from slave
		SPI_ReceiveData(SPI2, &ack_byte, 1);
 80007b4:	f107 0339 	add.w	r3, r7, #57	; 0x39
 80007b8:	2201      	movs	r2, #1
 80007ba:	4619      	mov	r1, r3
 80007bc:	4810      	ldr	r0, [pc, #64]	; (8000800 <main+0x420>)
 80007be:	f000 fc46 	bl	800104e <SPI_ReceiveData>
		if (SPI_Verify_Response(ack_byte)){
 80007c2:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80007c6:	4618      	mov	r0, r3
 80007c8:	f7ff fdfa 	bl	80003c0 <SPI_Verify_Response>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d009      	beq.n	80007e6 <main+0x406>
			//Send arguments
			uint8_t args[2];
			args[0] = LED_PIN;
 80007d2:	2307      	movs	r3, #7
 80007d4:	713b      	strb	r3, [r7, #4]
			args[1] = LED_OFF;
 80007d6:	2300      	movs	r3, #0
 80007d8:	717b      	strb	r3, [r7, #5]

			SPI_SendData(SPI2, args, 2);
 80007da:	1d3b      	adds	r3, r7, #4
 80007dc:	2202      	movs	r2, #2
 80007de:	4619      	mov	r1, r3
 80007e0:	4807      	ldr	r0, [pc, #28]	; (8000800 <main+0x420>)
 80007e2:	f000 fbfe 	bl	8000fe2 <SPI_SendData>
		}


		//check till SPI is finished with transmission
		while(SPI_GetFlagStatus(SPI2, SPI_BSY_FLAG)){};
 80007e6:	bf00      	nop
 80007e8:	2180      	movs	r1, #128	; 0x80
 80007ea:	4805      	ldr	r0, [pc, #20]	; (8000800 <main+0x420>)
 80007ec:	f000 fbe6 	bl	8000fbc <SPI_GetFlagStatus>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d1f8      	bne.n	80007e8 <main+0x408>

		SPI_PeripheralControl(SPI2, DISABLE);
 80007f6:	2100      	movs	r1, #0
 80007f8:	4801      	ldr	r0, [pc, #4]	; (8000800 <main+0x420>)
 80007fa:	f000 fc5e 	bl	80010ba <SPI_PeripheralControl>
	while(1){
 80007fe:	e607      	b.n	8000410 <main+0x30>
 8000800:	40003800 	.word	0x40003800
 8000804:	080025dc 	.word	0x080025dc
 8000808:	40020800 	.word	0x40020800

0800080c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000814:	4b11      	ldr	r3, [pc, #68]	; (800085c <_sbrk+0x50>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d102      	bne.n	8000822 <_sbrk+0x16>
		heap_end = &end;
 800081c:	4b0f      	ldr	r3, [pc, #60]	; (800085c <_sbrk+0x50>)
 800081e:	4a10      	ldr	r2, [pc, #64]	; (8000860 <_sbrk+0x54>)
 8000820:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000822:	4b0e      	ldr	r3, [pc, #56]	; (800085c <_sbrk+0x50>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000828:	4b0c      	ldr	r3, [pc, #48]	; (800085c <_sbrk+0x50>)
 800082a:	681a      	ldr	r2, [r3, #0]
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	4413      	add	r3, r2
 8000830:	466a      	mov	r2, sp
 8000832:	4293      	cmp	r3, r2
 8000834:	d907      	bls.n	8000846 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000836:	f000 fc77 	bl	8001128 <__errno>
 800083a:	4602      	mov	r2, r0
 800083c:	230c      	movs	r3, #12
 800083e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000840:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000844:	e006      	b.n	8000854 <_sbrk+0x48>
	}

	heap_end += incr;
 8000846:	4b05      	ldr	r3, [pc, #20]	; (800085c <_sbrk+0x50>)
 8000848:	681a      	ldr	r2, [r3, #0]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	4413      	add	r3, r2
 800084e:	4a03      	ldr	r2, [pc, #12]	; (800085c <_sbrk+0x50>)
 8000850:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000852:	68fb      	ldr	r3, [r7, #12]
}
 8000854:	4618      	mov	r0, r3
 8000856:	3710      	adds	r7, #16
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	20000088 	.word	0x20000088
 8000860:	20000148 	.word	0x20000148

08000864 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000864:	480d      	ldr	r0, [pc, #52]	; (800089c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000866:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000868:	480d      	ldr	r0, [pc, #52]	; (80008a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800086a:	490e      	ldr	r1, [pc, #56]	; (80008a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800086c:	4a0e      	ldr	r2, [pc, #56]	; (80008a8 <LoopForever+0xe>)
  movs r3, #0
 800086e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000870:	e002      	b.n	8000878 <LoopCopyDataInit>

08000872 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000872:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000874:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000876:	3304      	adds	r3, #4

08000878 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000878:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800087a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800087c:	d3f9      	bcc.n	8000872 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800087e:	4a0b      	ldr	r2, [pc, #44]	; (80008ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000880:	4c0b      	ldr	r4, [pc, #44]	; (80008b0 <LoopForever+0x16>)
  movs r3, #0
 8000882:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000884:	e001      	b.n	800088a <LoopFillZerobss>

08000886 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000886:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000888:	3204      	adds	r2, #4

0800088a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800088a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800088c:	d3fb      	bcc.n	8000886 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800088e:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8000892:	f000 fc4f 	bl	8001134 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000896:	f7ff fda3 	bl	80003e0 <main>

0800089a <LoopForever>:

LoopForever:
    b LoopForever
 800089a:	e7fe      	b.n	800089a <LoopForever>
  ldr   r0, =_estack
 800089c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008a4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80008a8:	080026c8 	.word	0x080026c8
  ldr r2, =_sbss
 80008ac:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80008b0:	20000144 	.word	0x20000144

080008b4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008b4:	e7fe      	b.n	80008b4 <ADC_IRQHandler>
	...

080008b8 <GPIO_PeriClockControl>:
 * @return				- none
 *
 * @note				- none
 *
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
 80008c0:	460b      	mov	r3, r1
 80008c2:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 80008c4:	78fb      	ldrb	r3, [r7, #3]
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	d157      	bne.n	800097a <GPIO_PeriClockControl+0xc2>
		if(pGPIOx == GPIOA){
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	4a5a      	ldr	r2, [pc, #360]	; (8000a38 <GPIO_PeriClockControl+0x180>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d106      	bne.n	80008e0 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 80008d2:	4b5a      	ldr	r3, [pc, #360]	; (8000a3c <GPIO_PeriClockControl+0x184>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a59      	ldr	r2, [pc, #356]	; (8000a3c <GPIO_PeriClockControl+0x184>)
 80008d8:	f043 0301 	orr.w	r3, r3, #1
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOG_PCLK_DI();
		} else if(pGPIOx == GPIOH){
			GPIOH_PCLK_DI();
		}
	}
}
 80008de:	e0a6      	b.n	8000a2e <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOB){
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	4a57      	ldr	r2, [pc, #348]	; (8000a40 <GPIO_PeriClockControl+0x188>)
 80008e4:	4293      	cmp	r3, r2
 80008e6:	d106      	bne.n	80008f6 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80008e8:	4b54      	ldr	r3, [pc, #336]	; (8000a3c <GPIO_PeriClockControl+0x184>)
 80008ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ec:	4a53      	ldr	r2, [pc, #332]	; (8000a3c <GPIO_PeriClockControl+0x184>)
 80008ee:	f043 0302 	orr.w	r3, r3, #2
 80008f2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80008f4:	e09b      	b.n	8000a2e <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOC){
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4a52      	ldr	r2, [pc, #328]	; (8000a44 <GPIO_PeriClockControl+0x18c>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d106      	bne.n	800090c <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80008fe:	4b4f      	ldr	r3, [pc, #316]	; (8000a3c <GPIO_PeriClockControl+0x184>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a4e      	ldr	r2, [pc, #312]	; (8000a3c <GPIO_PeriClockControl+0x184>)
 8000904:	f043 0304 	orr.w	r3, r3, #4
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
}
 800090a:	e090      	b.n	8000a2e <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOD){
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	4a4e      	ldr	r2, [pc, #312]	; (8000a48 <GPIO_PeriClockControl+0x190>)
 8000910:	4293      	cmp	r3, r2
 8000912:	d106      	bne.n	8000922 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000914:	4b49      	ldr	r3, [pc, #292]	; (8000a3c <GPIO_PeriClockControl+0x184>)
 8000916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000918:	4a48      	ldr	r2, [pc, #288]	; (8000a3c <GPIO_PeriClockControl+0x184>)
 800091a:	f043 0308 	orr.w	r3, r3, #8
 800091e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000920:	e085      	b.n	8000a2e <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOE){
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	4a49      	ldr	r2, [pc, #292]	; (8000a4c <GPIO_PeriClockControl+0x194>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d106      	bne.n	8000938 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800092a:	4b44      	ldr	r3, [pc, #272]	; (8000a3c <GPIO_PeriClockControl+0x184>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a43      	ldr	r2, [pc, #268]	; (8000a3c <GPIO_PeriClockControl+0x184>)
 8000930:	f043 0310 	orr.w	r3, r3, #16
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000936:	e07a      	b.n	8000a2e <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOF){
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	4a45      	ldr	r2, [pc, #276]	; (8000a50 <GPIO_PeriClockControl+0x198>)
 800093c:	4293      	cmp	r3, r2
 800093e:	d106      	bne.n	800094e <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000940:	4b3e      	ldr	r3, [pc, #248]	; (8000a3c <GPIO_PeriClockControl+0x184>)
 8000942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000944:	4a3d      	ldr	r2, [pc, #244]	; (8000a3c <GPIO_PeriClockControl+0x184>)
 8000946:	f043 0320 	orr.w	r3, r3, #32
 800094a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800094c:	e06f      	b.n	8000a2e <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOG){
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	4a40      	ldr	r2, [pc, #256]	; (8000a54 <GPIO_PeriClockControl+0x19c>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d106      	bne.n	8000964 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000956:	4b39      	ldr	r3, [pc, #228]	; (8000a3c <GPIO_PeriClockControl+0x184>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a38      	ldr	r2, [pc, #224]	; (8000a3c <GPIO_PeriClockControl+0x184>)
 800095c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000962:	e064      	b.n	8000a2e <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOH){
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	4a3c      	ldr	r2, [pc, #240]	; (8000a58 <GPIO_PeriClockControl+0x1a0>)
 8000968:	4293      	cmp	r3, r2
 800096a:	d160      	bne.n	8000a2e <GPIO_PeriClockControl+0x176>
			GPIOH_PCLK_EN();
 800096c:	4b33      	ldr	r3, [pc, #204]	; (8000a3c <GPIO_PeriClockControl+0x184>)
 800096e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000970:	4a32      	ldr	r2, [pc, #200]	; (8000a3c <GPIO_PeriClockControl+0x184>)
 8000972:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000976:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000978:	e059      	b.n	8000a2e <GPIO_PeriClockControl+0x176>
	} else if(EnorDi == DISABLE){
 800097a:	78fb      	ldrb	r3, [r7, #3]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d156      	bne.n	8000a2e <GPIO_PeriClockControl+0x176>
		if(pGPIOx == GPIOA){
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	4a2d      	ldr	r2, [pc, #180]	; (8000a38 <GPIO_PeriClockControl+0x180>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d106      	bne.n	8000996 <GPIO_PeriClockControl+0xde>
			GPIOA_PCLK_DI();
 8000988:	4b2c      	ldr	r3, [pc, #176]	; (8000a3c <GPIO_PeriClockControl+0x184>)
 800098a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098c:	4a2b      	ldr	r2, [pc, #172]	; (8000a3c <GPIO_PeriClockControl+0x184>)
 800098e:	f023 0301 	bic.w	r3, r3, #1
 8000992:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000994:	e04b      	b.n	8000a2e <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOB){
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	4a29      	ldr	r2, [pc, #164]	; (8000a40 <GPIO_PeriClockControl+0x188>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d106      	bne.n	80009ac <GPIO_PeriClockControl+0xf4>
			GPIOB_PCLK_DI();
 800099e:	4b27      	ldr	r3, [pc, #156]	; (8000a3c <GPIO_PeriClockControl+0x184>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	4a26      	ldr	r2, [pc, #152]	; (8000a3c <GPIO_PeriClockControl+0x184>)
 80009a4:	f023 0302 	bic.w	r3, r3, #2
 80009a8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009aa:	e040      	b.n	8000a2e <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOC){
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	4a25      	ldr	r2, [pc, #148]	; (8000a44 <GPIO_PeriClockControl+0x18c>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d106      	bne.n	80009c2 <GPIO_PeriClockControl+0x10a>
			GPIOC_PCLK_DI();
 80009b4:	4b21      	ldr	r3, [pc, #132]	; (8000a3c <GPIO_PeriClockControl+0x184>)
 80009b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b8:	4a20      	ldr	r2, [pc, #128]	; (8000a3c <GPIO_PeriClockControl+0x184>)
 80009ba:	f023 0304 	bic.w	r3, r3, #4
 80009be:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009c0:	e035      	b.n	8000a2e <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOD){
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	4a20      	ldr	r2, [pc, #128]	; (8000a48 <GPIO_PeriClockControl+0x190>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d106      	bne.n	80009d8 <GPIO_PeriClockControl+0x120>
			GPIOD_PCLK_DI();
 80009ca:	4b1c      	ldr	r3, [pc, #112]	; (8000a3c <GPIO_PeriClockControl+0x184>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	4a1b      	ldr	r2, [pc, #108]	; (8000a3c <GPIO_PeriClockControl+0x184>)
 80009d0:	f023 0308 	bic.w	r3, r3, #8
 80009d4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009d6:	e02a      	b.n	8000a2e <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOE){
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	4a1c      	ldr	r2, [pc, #112]	; (8000a4c <GPIO_PeriClockControl+0x194>)
 80009dc:	4293      	cmp	r3, r2
 80009de:	d106      	bne.n	80009ee <GPIO_PeriClockControl+0x136>
			GPIOE_PCLK_DI();
 80009e0:	4b16      	ldr	r3, [pc, #88]	; (8000a3c <GPIO_PeriClockControl+0x184>)
 80009e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e4:	4a15      	ldr	r2, [pc, #84]	; (8000a3c <GPIO_PeriClockControl+0x184>)
 80009e6:	f023 0310 	bic.w	r3, r3, #16
 80009ea:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009ec:	e01f      	b.n	8000a2e <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOF){
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4a17      	ldr	r2, [pc, #92]	; (8000a50 <GPIO_PeriClockControl+0x198>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d106      	bne.n	8000a04 <GPIO_PeriClockControl+0x14c>
			GPIOF_PCLK_DI();
 80009f6:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <GPIO_PeriClockControl+0x184>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	4a10      	ldr	r2, [pc, #64]	; (8000a3c <GPIO_PeriClockControl+0x184>)
 80009fc:	f023 0320 	bic.w	r3, r3, #32
 8000a00:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a02:	e014      	b.n	8000a2e <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOG){
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	4a13      	ldr	r2, [pc, #76]	; (8000a54 <GPIO_PeriClockControl+0x19c>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d106      	bne.n	8000a1a <GPIO_PeriClockControl+0x162>
			GPIOG_PCLK_DI();
 8000a0c:	4b0b      	ldr	r3, [pc, #44]	; (8000a3c <GPIO_PeriClockControl+0x184>)
 8000a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a10:	4a0a      	ldr	r2, [pc, #40]	; (8000a3c <GPIO_PeriClockControl+0x184>)
 8000a12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000a16:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a18:	e009      	b.n	8000a2e <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOH){
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4a0e      	ldr	r2, [pc, #56]	; (8000a58 <GPIO_PeriClockControl+0x1a0>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d105      	bne.n	8000a2e <GPIO_PeriClockControl+0x176>
			GPIOH_PCLK_DI();
 8000a22:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <GPIO_PeriClockControl+0x184>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a05      	ldr	r2, [pc, #20]	; (8000a3c <GPIO_PeriClockControl+0x184>)
 8000a28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a2e:	bf00      	nop
 8000a30:	370c      	adds	r7, #12
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bc80      	pop	{r7}
 8000a36:	4770      	bx	lr
 8000a38:	40020000 	.word	0x40020000
 8000a3c:	40023800 	.word	0x40023800
 8000a40:	40020400 	.word	0x40020400
 8000a44:	40020800 	.word	0x40020800
 8000a48:	40020c00 	.word	0x40020c00
 8000a4c:	40021000 	.word	0x40021000
 8000a50:	40021400 	.word	0x40021400
 8000a54:	40021800 	.word	0x40021800
 8000a58:	40021c00 	.word	0x40021c00

08000a5c <GPIO_Init>:
 * @return				- none
 *
 * @note				- none
 *
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8000a5c:	b480      	push	{r7}
 8000a5e:	b08b      	sub	sp, #44	; 0x2c
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
	uint32_t reset_value = 0;
 8000a64:	2300      	movs	r3, #0
 8000a66:	627b      	str	r3, [r7, #36]	; 0x24

	//reset, then set mode register
	if( pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	795b      	ldrb	r3, [r3, #5]
 8000a6c:	2b03      	cmp	r3, #3
 8000a6e:	d823      	bhi.n	8000ab8 <GPIO_Init+0x5c>
		reset_value = (0x3 << ((2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)));
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	791b      	ldrb	r3, [r3, #4]
 8000a74:	005b      	lsls	r3, r3, #1
 8000a76:	2203      	movs	r2, #3
 8000a78:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7c:	627b      	str	r3, [r7, #36]	; 0x24
		pGPIOHandle->pGPIOx->MODER &= ~(reset_value);
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	6819      	ldr	r1, [r3, #0]
 8000a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a86:	43da      	mvns	r2, r3
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	400a      	ands	r2, r1
 8000a8e:	601a      	str	r2, [r3, #0]
		reset_value = 0;
 8000a90:	2300      	movs	r3, #0
 8000a92:	627b      	str	r3, [r7, #36]	; 0x24

		uint32_t moder_value = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	795b      	ldrb	r3, [r3, #5]
 8000a98:	461a      	mov	r2, r3
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	791b      	ldrb	r3, [r3, #4]
 8000a9e:	005b      	lsls	r3, r3, #1
 8000aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa4:	61fb      	str	r3, [r7, #28]
		pGPIOHandle->pGPIOx->MODER |= moder_value;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	6819      	ldr	r1, [r3, #0]
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	69fa      	ldr	r2, [r7, #28]
 8000ab2:	430a      	orrs	r2, r1
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	e0ee      	b.n	8000c96 <GPIO_Init+0x23a>
	} else{
		//interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	795b      	ldrb	r3, [r3, #5]
 8000abc:	2b04      	cmp	r3, #4
 8000abe:	d11a      	bne.n	8000af6 <GPIO_Init+0x9a>
			//reset RTSR
			reset_value = (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	791b      	ldrb	r3, [r3, #4]
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	4093      	lsls	r3, r2
 8000aca:	627b      	str	r3, [r7, #36]	; 0x24
			EXTI->RTSR &= ~(reset_value);
 8000acc:	4b49      	ldr	r3, [pc, #292]	; (8000bf4 <GPIO_Init+0x198>)
 8000ace:	689a      	ldr	r2, [r3, #8]
 8000ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad2:	43db      	mvns	r3, r3
 8000ad4:	4947      	ldr	r1, [pc, #284]	; (8000bf4 <GPIO_Init+0x198>)
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	608b      	str	r3, [r1, #8]
			reset_value = 0;
 8000ada:	2300      	movs	r3, #0
 8000adc:	627b      	str	r3, [r7, #36]	; 0x24

			//configure FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000ade:	4b45      	ldr	r3, [pc, #276]	; (8000bf4 <GPIO_Init+0x198>)
 8000ae0:	68db      	ldr	r3, [r3, #12]
 8000ae2:	687a      	ldr	r2, [r7, #4]
 8000ae4:	7912      	ldrb	r2, [r2, #4]
 8000ae6:	4611      	mov	r1, r2
 8000ae8:	2201      	movs	r2, #1
 8000aea:	408a      	lsls	r2, r1
 8000aec:	4611      	mov	r1, r2
 8000aee:	4a41      	ldr	r2, [pc, #260]	; (8000bf4 <GPIO_Init+0x198>)
 8000af0:	430b      	orrs	r3, r1
 8000af2:	60d3      	str	r3, [r2, #12]
 8000af4:	e038      	b.n	8000b68 <GPIO_Init+0x10c>
		} else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	795b      	ldrb	r3, [r3, #5]
 8000afa:	2b05      	cmp	r3, #5
 8000afc:	d11a      	bne.n	8000b34 <GPIO_Init+0xd8>
			//reset FTSR
			reset_value = (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	791b      	ldrb	r3, [r3, #4]
 8000b02:	461a      	mov	r2, r3
 8000b04:	2301      	movs	r3, #1
 8000b06:	4093      	lsls	r3, r2
 8000b08:	627b      	str	r3, [r7, #36]	; 0x24
			EXTI->FTSR &= ~(reset_value);
 8000b0a:	4b3a      	ldr	r3, [pc, #232]	; (8000bf4 <GPIO_Init+0x198>)
 8000b0c:	68da      	ldr	r2, [r3, #12]
 8000b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b10:	43db      	mvns	r3, r3
 8000b12:	4938      	ldr	r1, [pc, #224]	; (8000bf4 <GPIO_Init+0x198>)
 8000b14:	4013      	ands	r3, r2
 8000b16:	60cb      	str	r3, [r1, #12]
			reset_value = 0;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	627b      	str	r3, [r7, #36]	; 0x24

			//configure RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b1c:	4b35      	ldr	r3, [pc, #212]	; (8000bf4 <GPIO_Init+0x198>)
 8000b1e:	689b      	ldr	r3, [r3, #8]
 8000b20:	687a      	ldr	r2, [r7, #4]
 8000b22:	7912      	ldrb	r2, [r2, #4]
 8000b24:	4611      	mov	r1, r2
 8000b26:	2201      	movs	r2, #1
 8000b28:	408a      	lsls	r2, r1
 8000b2a:	4611      	mov	r1, r2
 8000b2c:	4a31      	ldr	r2, [pc, #196]	; (8000bf4 <GPIO_Init+0x198>)
 8000b2e:	430b      	orrs	r3, r1
 8000b30:	6093      	str	r3, [r2, #8]
 8000b32:	e019      	b.n	8000b68 <GPIO_Init+0x10c>
		} else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	795b      	ldrb	r3, [r3, #5]
 8000b38:	2b06      	cmp	r3, #6
 8000b3a:	d115      	bne.n	8000b68 <GPIO_Init+0x10c>
			//configure RTSR and FTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b3c:	4b2d      	ldr	r3, [pc, #180]	; (8000bf4 <GPIO_Init+0x198>)
 8000b3e:	689b      	ldr	r3, [r3, #8]
 8000b40:	687a      	ldr	r2, [r7, #4]
 8000b42:	7912      	ldrb	r2, [r2, #4]
 8000b44:	4611      	mov	r1, r2
 8000b46:	2201      	movs	r2, #1
 8000b48:	408a      	lsls	r2, r1
 8000b4a:	4611      	mov	r1, r2
 8000b4c:	4a29      	ldr	r2, [pc, #164]	; (8000bf4 <GPIO_Init+0x198>)
 8000b4e:	430b      	orrs	r3, r1
 8000b50:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b52:	4b28      	ldr	r3, [pc, #160]	; (8000bf4 <GPIO_Init+0x198>)
 8000b54:	68db      	ldr	r3, [r3, #12]
 8000b56:	687a      	ldr	r2, [r7, #4]
 8000b58:	7912      	ldrb	r2, [r2, #4]
 8000b5a:	4611      	mov	r1, r2
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	408a      	lsls	r2, r1
 8000b60:	4611      	mov	r1, r2
 8000b62:	4a24      	ldr	r2, [pc, #144]	; (8000bf4 <GPIO_Init+0x198>)
 8000b64:	430b      	orrs	r3, r1
 8000b66:	60d3      	str	r3, [r2, #12]
		}

		//configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t index = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	791b      	ldrb	r3, [r3, #4]
 8000b6c:	089b      	lsrs	r3, r3, #2
 8000b6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		uint8_t position = ((pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4) * 4);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	791b      	ldrb	r3, [r3, #4]
 8000b76:	f003 0303 	and.w	r3, r3, #3
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	009b      	lsls	r3, r3, #2
 8000b7e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		uint8_t port_code = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a1c      	ldr	r2, [pc, #112]	; (8000bf8 <GPIO_Init+0x19c>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d045      	beq.n	8000c18 <GPIO_Init+0x1bc>
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a1a      	ldr	r2, [pc, #104]	; (8000bfc <GPIO_Init+0x1a0>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d02b      	beq.n	8000bee <GPIO_Init+0x192>
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4a19      	ldr	r2, [pc, #100]	; (8000c00 <GPIO_Init+0x1a4>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d024      	beq.n	8000bea <GPIO_Init+0x18e>
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a17      	ldr	r2, [pc, #92]	; (8000c04 <GPIO_Init+0x1a8>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d01d      	beq.n	8000be6 <GPIO_Init+0x18a>
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4a16      	ldr	r2, [pc, #88]	; (8000c08 <GPIO_Init+0x1ac>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d016      	beq.n	8000be2 <GPIO_Init+0x186>
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a14      	ldr	r2, [pc, #80]	; (8000c0c <GPIO_Init+0x1b0>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d00f      	beq.n	8000bde <GPIO_Init+0x182>
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4a13      	ldr	r2, [pc, #76]	; (8000c10 <GPIO_Init+0x1b4>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d008      	beq.n	8000bda <GPIO_Init+0x17e>
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a11      	ldr	r2, [pc, #68]	; (8000c14 <GPIO_Init+0x1b8>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d101      	bne.n	8000bd6 <GPIO_Init+0x17a>
 8000bd2:	2307      	movs	r3, #7
 8000bd4:	e021      	b.n	8000c1a <GPIO_Init+0x1be>
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	e01f      	b.n	8000c1a <GPIO_Init+0x1be>
 8000bda:	2306      	movs	r3, #6
 8000bdc:	e01d      	b.n	8000c1a <GPIO_Init+0x1be>
 8000bde:	2305      	movs	r3, #5
 8000be0:	e01b      	b.n	8000c1a <GPIO_Init+0x1be>
 8000be2:	2304      	movs	r3, #4
 8000be4:	e019      	b.n	8000c1a <GPIO_Init+0x1be>
 8000be6:	2303      	movs	r3, #3
 8000be8:	e017      	b.n	8000c1a <GPIO_Init+0x1be>
 8000bea:	2302      	movs	r3, #2
 8000bec:	e015      	b.n	8000c1a <GPIO_Init+0x1be>
 8000bee:	2301      	movs	r3, #1
 8000bf0:	e013      	b.n	8000c1a <GPIO_Init+0x1be>
 8000bf2:	bf00      	nop
 8000bf4:	40013c00 	.word	0x40013c00
 8000bf8:	40020000 	.word	0x40020000
 8000bfc:	40020400 	.word	0x40020400
 8000c00:	40020800 	.word	0x40020800
 8000c04:	40020c00 	.word	0x40020c00
 8000c08:	40021000 	.word	0x40021000
 8000c0c:	40021400 	.word	0x40021400
 8000c10:	40021800 	.word	0x40021800
 8000c14:	40021c00 	.word	0x40021c00
 8000c18:	2300      	movs	r3, #0
 8000c1a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

		SYSCFG_PCLK_EN();
 8000c1e:	4b75      	ldr	r3, [pc, #468]	; (8000df4 <GPIO_Init+0x398>)
 8000c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c22:	4a74      	ldr	r2, [pc, #464]	; (8000df4 <GPIO_Init+0x398>)
 8000c24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c28:	6453      	str	r3, [r2, #68]	; 0x44

		reset_value = (0xF << position);
 8000c2a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000c2e:	220f      	movs	r2, #15
 8000c30:	fa02 f303 	lsl.w	r3, r2, r3
 8000c34:	627b      	str	r3, [r7, #36]	; 0x24
		SYSCFG->EXTICR[index] &= ~(reset_value);
 8000c36:	4a70      	ldr	r2, [pc, #448]	; (8000df8 <GPIO_Init+0x39c>)
 8000c38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000c3c:	3302      	adds	r3, #2
 8000c3e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c44:	43da      	mvns	r2, r3
 8000c46:	486c      	ldr	r0, [pc, #432]	; (8000df8 <GPIO_Init+0x39c>)
 8000c48:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000c4c:	400a      	ands	r2, r1
 8000c4e:	3302      	adds	r3, #2
 8000c50:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		reset_value = 0;
 8000c54:	2300      	movs	r3, #0
 8000c56:	627b      	str	r3, [r7, #36]	; 0x24

		SYSCFG->EXTICR[index] |= (port_code << position);
 8000c58:	4a67      	ldr	r2, [pc, #412]	; (8000df8 <GPIO_Init+0x39c>)
 8000c5a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000c5e:	3302      	adds	r3, #2
 8000c60:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c64:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 8000c68:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c70:	4618      	mov	r0, r3
 8000c72:	4961      	ldr	r1, [pc, #388]	; (8000df8 <GPIO_Init+0x39c>)
 8000c74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000c78:	4302      	orrs	r2, r0
 8000c7a:	3302      	adds	r3, #2
 8000c7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		//enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000c80:	4b5e      	ldr	r3, [pc, #376]	; (8000dfc <GPIO_Init+0x3a0>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	687a      	ldr	r2, [r7, #4]
 8000c86:	7912      	ldrb	r2, [r2, #4]
 8000c88:	4611      	mov	r1, r2
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	408a      	lsls	r2, r1
 8000c8e:	4611      	mov	r1, r2
 8000c90:	4a5a      	ldr	r2, [pc, #360]	; (8000dfc <GPIO_Init+0x3a0>)
 8000c92:	430b      	orrs	r3, r1
 8000c94:	6013      	str	r3, [r2, #0]
	}

	// reset, then set speed register
	reset_value = (0x3 << ((2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)));
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	791b      	ldrb	r3, [r3, #4]
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	2203      	movs	r2, #3
 8000c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca2:	627b      	str	r3, [r7, #36]	; 0x24
	pGPIOHandle->pGPIOx->OSPEEDER &= ~(reset_value);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	6899      	ldr	r1, [r3, #8]
 8000caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cac:	43da      	mvns	r2, r3
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	400a      	ands	r2, r1
 8000cb4:	609a      	str	r2, [r3, #8]
	reset_value = 0;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	627b      	str	r3, [r7, #36]	; 0x24

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_OUT){
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	795b      	ldrb	r3, [r3, #5]
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d110      	bne.n	8000ce4 <GPIO_Init+0x288>
		uint32_t ospeedr_value = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	799b      	ldrb	r3, [r3, #6]
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	791b      	ldrb	r3, [r3, #4]
 8000ccc:	005b      	lsls	r3, r3, #1
 8000cce:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd2:	61bb      	str	r3, [r7, #24]
		pGPIOHandle->pGPIOx->OSPEEDER |= ospeedr_value;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	6899      	ldr	r1, [r3, #8]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	69ba      	ldr	r2, [r7, #24]
 8000ce0:	430a      	orrs	r2, r1
 8000ce2:	609a      	str	r2, [r3, #8]
	}
	//reset, then set pupd register
	reset_value = (0x3 << ((2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)));
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	791b      	ldrb	r3, [r3, #4]
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	2203      	movs	r2, #3
 8000cec:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf0:	627b      	str	r3, [r7, #36]	; 0x24
	pGPIOHandle->pGPIOx->PUPDR &= ~(reset_value);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	68d9      	ldr	r1, [r3, #12]
 8000cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cfa:	43da      	mvns	r2, r3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	400a      	ands	r2, r1
 8000d02:	60da      	str	r2, [r3, #12]
	reset_value = 0;
 8000d04:	2300      	movs	r3, #0
 8000d06:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t pupdr_value = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	79db      	ldrb	r3, [r3, #7]
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	791b      	ldrb	r3, [r3, #4]
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	fa02 f303 	lsl.w	r3, r2, r3
 8000d18:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR |= pupdr_value;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	68d9      	ldr	r1, [r3, #12]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	697a      	ldr	r2, [r7, #20]
 8000d26:	430a      	orrs	r2, r1
 8000d28:	60da      	str	r2, [r3, #12]

	//reset, then set output type register
	reset_value = (0x1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	791b      	ldrb	r3, [r3, #4]
 8000d2e:	461a      	mov	r2, r3
 8000d30:	2301      	movs	r3, #1
 8000d32:	4093      	lsls	r3, r2
 8000d34:	627b      	str	r3, [r7, #36]	; 0x24
	pGPIOHandle->pGPIOx->OTYPER &= ~(reset_value);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	6859      	ldr	r1, [r3, #4]
 8000d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d3e:	43da      	mvns	r2, r3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	400a      	ands	r2, r1
 8000d46:	605a      	str	r2, [r3, #4]
	reset_value = 0;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	627b      	str	r3, [r7, #36]	; 0x24

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_OUT){
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	795b      	ldrb	r3, [r3, #5]
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d10f      	bne.n	8000d74 <GPIO_Init+0x318>
		uint32_t optyper_value = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	7a1b      	ldrb	r3, [r3, #8]
 8000d58:	461a      	mov	r2, r3
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	791b      	ldrb	r3, [r3, #4]
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	613b      	str	r3, [r7, #16]
		pGPIOHandle->pGPIOx->OTYPER |= optyper_value;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	6859      	ldr	r1, [r3, #4]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	693a      	ldr	r2, [r7, #16]
 8000d70:	430a      	orrs	r2, r1
 8000d72:	605a      	str	r2, [r3, #4]
	}
	//reset, then set altfn register
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	795b      	ldrb	r3, [r3, #5]
 8000d78:	2b02      	cmp	r3, #2
 8000d7a:	d135      	bne.n	8000de8 <GPIO_Init+0x38c>
		uint8_t index = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	791b      	ldrb	r3, [r3, #4]
 8000d80:	08db      	lsrs	r3, r3, #3
 8000d82:	73fb      	strb	r3, [r7, #15]
		uint8_t position = ((pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8) * 4);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	791b      	ldrb	r3, [r3, #4]
 8000d88:	f003 0307 	and.w	r3, r3, #7
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	73bb      	strb	r3, [r7, #14]

		//reset
		reset_value = (0xF << position);
 8000d92:	7bbb      	ldrb	r3, [r7, #14]
 8000d94:	220f      	movs	r2, #15
 8000d96:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9a:	627b      	str	r3, [r7, #36]	; 0x24
		pGPIOHandle->pGPIOx->AFR[index] &= ~(reset_value);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	7bfa      	ldrb	r2, [r7, #15]
 8000da2:	3208      	adds	r2, #8
 8000da4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000daa:	43d9      	mvns	r1, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	7bfa      	ldrb	r2, [r7, #15]
 8000db2:	4001      	ands	r1, r0
 8000db4:	3208      	adds	r2, #8
 8000db6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		reset_value = 0;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	627b      	str	r3, [r7, #36]	; 0x24

		//set
		uint32_t afr_value = (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << position);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	7a5b      	ldrb	r3, [r3, #9]
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	7bbb      	ldrb	r3, [r7, #14]
 8000dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dca:	60bb      	str	r3, [r7, #8]
		pGPIOHandle->pGPIOx->AFR[index] |= afr_value;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	7bfa      	ldrb	r2, [r7, #15]
 8000dd2:	3208      	adds	r2, #8
 8000dd4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	7bfa      	ldrb	r2, [r7, #15]
 8000dde:	68b9      	ldr	r1, [r7, #8]
 8000de0:	4301      	orrs	r1, r0
 8000de2:	3208      	adds	r2, #8
 8000de4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8000de8:	bf00      	nop
 8000dea:	372c      	adds	r7, #44	; 0x2c
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bc80      	pop	{r7}
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	40023800 	.word	0x40023800
 8000df8:	40013800 	.word	0x40013800
 8000dfc:	40013c00 	.word	0x40013c00

08000e00 <GPIO_ReadFromInputPin>:
 * @return				- 0 or 1
 *
 * @note				- none
 *
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber){
 8000e00:	b480      	push	{r7}
 8000e02:	b085      	sub	sp, #20
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	460b      	mov	r3, r1
 8000e0a:	70fb      	strb	r3, [r7, #3]
	uint8_t value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x00000001);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	691a      	ldr	r2, [r3, #16]
 8000e10:	78fb      	ldrb	r3, [r7, #3]
 8000e12:	fa22 f303 	lsr.w	r3, r2, r3
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	f003 0301 	and.w	r3, r3, #1
 8000e1c:	73fb      	strb	r3, [r7, #15]
	return value;
 8000e1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3714      	adds	r7, #20
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bc80      	pop	{r7}
 8000e28:	4770      	bx	lr
	...

08000e2c <SPI_PeriClockControl>:
 * @return				- none
 *
 * @note				- none
 *
 */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi){
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	460b      	mov	r3, r1
 8000e36:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8000e38:	78fb      	ldrb	r3, [r7, #3]
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d12b      	bne.n	8000e96 <SPI_PeriClockControl+0x6a>
		if(pSPIx == SPI1){
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a2e      	ldr	r2, [pc, #184]	; (8000efc <SPI_PeriClockControl+0xd0>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d106      	bne.n	8000e54 <SPI_PeriClockControl+0x28>
			SPI1_PCLK_EN();
 8000e46:	4b2e      	ldr	r3, [pc, #184]	; (8000f00 <SPI_PeriClockControl+0xd4>)
 8000e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4a:	4a2d      	ldr	r2, [pc, #180]	; (8000f00 <SPI_PeriClockControl+0xd4>)
 8000e4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e50:	6453      	str	r3, [r2, #68]	; 0x44
			SPI3_PCLK_DI();
		} else if(pSPIx == SPI4){
			SPI4_PCLK_DI();
		}
	}
}
 8000e52:	e04e      	b.n	8000ef2 <SPI_PeriClockControl+0xc6>
		} else if(pSPIx == SPI2){
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	4a2b      	ldr	r2, [pc, #172]	; (8000f04 <SPI_PeriClockControl+0xd8>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d106      	bne.n	8000e6a <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 8000e5c:	4b28      	ldr	r3, [pc, #160]	; (8000f00 <SPI_PeriClockControl+0xd4>)
 8000e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e60:	4a27      	ldr	r2, [pc, #156]	; (8000f00 <SPI_PeriClockControl+0xd4>)
 8000e62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e66:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000e68:	e043      	b.n	8000ef2 <SPI_PeriClockControl+0xc6>
		} else if(pSPIx == SPI3){
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4a26      	ldr	r2, [pc, #152]	; (8000f08 <SPI_PeriClockControl+0xdc>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d106      	bne.n	8000e80 <SPI_PeriClockControl+0x54>
			SPI3_PCLK_EN();
 8000e72:	4b23      	ldr	r3, [pc, #140]	; (8000f00 <SPI_PeriClockControl+0xd4>)
 8000e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e76:	4a22      	ldr	r2, [pc, #136]	; (8000f00 <SPI_PeriClockControl+0xd4>)
 8000e78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e7c:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000e7e:	e038      	b.n	8000ef2 <SPI_PeriClockControl+0xc6>
		} else if(pSPIx == SPI4){
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	4a22      	ldr	r2, [pc, #136]	; (8000f0c <SPI_PeriClockControl+0xe0>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d134      	bne.n	8000ef2 <SPI_PeriClockControl+0xc6>
			SPI4_PCLK_EN();
 8000e88:	4b1d      	ldr	r3, [pc, #116]	; (8000f00 <SPI_PeriClockControl+0xd4>)
 8000e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8c:	4a1c      	ldr	r2, [pc, #112]	; (8000f00 <SPI_PeriClockControl+0xd4>)
 8000e8e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e92:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000e94:	e02d      	b.n	8000ef2 <SPI_PeriClockControl+0xc6>
	} else if(EnorDi == DISABLE){
 8000e96:	78fb      	ldrb	r3, [r7, #3]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d12a      	bne.n	8000ef2 <SPI_PeriClockControl+0xc6>
		if(pSPIx == SPI1){
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	4a17      	ldr	r2, [pc, #92]	; (8000efc <SPI_PeriClockControl+0xd0>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d106      	bne.n	8000eb2 <SPI_PeriClockControl+0x86>
			SPI1_PCLK_DI();
 8000ea4:	4b16      	ldr	r3, [pc, #88]	; (8000f00 <SPI_PeriClockControl+0xd4>)
 8000ea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea8:	4a15      	ldr	r2, [pc, #84]	; (8000f00 <SPI_PeriClockControl+0xd4>)
 8000eaa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000eae:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000eb0:	e01f      	b.n	8000ef2 <SPI_PeriClockControl+0xc6>
		} else if(pSPIx == SPI2){
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4a13      	ldr	r2, [pc, #76]	; (8000f04 <SPI_PeriClockControl+0xd8>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d106      	bne.n	8000ec8 <SPI_PeriClockControl+0x9c>
			SPI2_PCLK_DI();
 8000eba:	4b11      	ldr	r3, [pc, #68]	; (8000f00 <SPI_PeriClockControl+0xd4>)
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebe:	4a10      	ldr	r2, [pc, #64]	; (8000f00 <SPI_PeriClockControl+0xd4>)
 8000ec0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000ec4:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000ec6:	e014      	b.n	8000ef2 <SPI_PeriClockControl+0xc6>
		} else if(pSPIx == SPI3){
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	4a0f      	ldr	r2, [pc, #60]	; (8000f08 <SPI_PeriClockControl+0xdc>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d106      	bne.n	8000ede <SPI_PeriClockControl+0xb2>
			SPI3_PCLK_DI();
 8000ed0:	4b0b      	ldr	r3, [pc, #44]	; (8000f00 <SPI_PeriClockControl+0xd4>)
 8000ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed4:	4a0a      	ldr	r2, [pc, #40]	; (8000f00 <SPI_PeriClockControl+0xd4>)
 8000ed6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000eda:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000edc:	e009      	b.n	8000ef2 <SPI_PeriClockControl+0xc6>
		} else if(pSPIx == SPI4){
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a0a      	ldr	r2, [pc, #40]	; (8000f0c <SPI_PeriClockControl+0xe0>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d105      	bne.n	8000ef2 <SPI_PeriClockControl+0xc6>
			SPI4_PCLK_DI();
 8000ee6:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <SPI_PeriClockControl+0xd4>)
 8000ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eea:	4a05      	ldr	r2, [pc, #20]	; (8000f00 <SPI_PeriClockControl+0xd4>)
 8000eec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000ef0:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000ef2:	bf00      	nop
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bc80      	pop	{r7}
 8000efa:	4770      	bx	lr
 8000efc:	40013000 	.word	0x40013000
 8000f00:	40023800 	.word	0x40023800
 8000f04:	40003800 	.word	0x40003800
 8000f08:	40003c00 	.word	0x40003c00
 8000f0c:	40013400 	.word	0x40013400

08000f10 <SPI_Init>:
 * @return				- none
 *
 * @note				- none
 *
 */
void SPI_Init(SPI_Handle_t *pSPIHandle){
 8000f10:	b480      	push	{r7}
 8000f12:	b085      	sub	sp, #20
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
	uint32_t ControlReg1 = 0;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	60fb      	str	r3, [r7, #12]

	//configure device mode
	ControlReg1 |= pSPIHandle->SPI_Config.SPI_DeviceMode << 2;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	791b      	ldrb	r3, [r3, #4]
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	461a      	mov	r2, r3
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	60fb      	str	r3, [r7, #12]

	//Bus Configuration
	if(pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CONFIG_FD){
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	795b      	ldrb	r3, [r3, #5]
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d104      	bne.n	8000f3c <SPI_Init+0x2c>
		//bidi mode should be cleared
		ControlReg1 &= ~(1 << SPI_CR1_BIDIMODE);
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000f38:	60fb      	str	r3, [r7, #12]
 8000f3a:	e014      	b.n	8000f66 <SPI_Init+0x56>
	} else if(pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CONFIG_HD){
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	795b      	ldrb	r3, [r3, #5]
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	d104      	bne.n	8000f4e <SPI_Init+0x3e>
		//bidi mode should be set
		ControlReg1 |= (1 << SPI_CR1_BIDIMODE);
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	e00b      	b.n	8000f66 <SPI_Init+0x56>
	} else if(pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY){
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	795b      	ldrb	r3, [r3, #5]
 8000f52:	2b03      	cmp	r3, #3
 8000f54:	d107      	bne.n	8000f66 <SPI_Init+0x56>
		//bidi mode should be cleared
		ControlReg1 &= ~(1 << SPI_CR1_BIDIMODE);
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000f5c:	60fb      	str	r3, [r7, #12]
		//rxonly bit must be set
		ControlReg1 |= (1 << SPI_CR1_RXONLY);
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f64:	60fb      	str	r3, [r7, #12]
	}

	//Serial clk Configuration
	ControlReg1 |= (pSPIHandle->SPI_Config.SPI_SclkSpeed << SPI_CR1_BR);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	799b      	ldrb	r3, [r3, #6]
 8000f6a:	00db      	lsls	r3, r3, #3
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	60fb      	str	r3, [r7, #12]

	//Data Frame Format Configuration
	ControlReg1 |= (pSPIHandle->SPI_Config.SPI_DFF << SPI_CR1_DFF);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	79db      	ldrb	r3, [r3, #7]
 8000f78:	02db      	lsls	r3, r3, #11
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	60fb      	str	r3, [r7, #12]

	//CPOL Configuration
	ControlReg1 |= (pSPIHandle->SPI_Config.SPI_CPOL << SPI_CR1_CPOL);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	7a1b      	ldrb	r3, [r3, #8]
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	461a      	mov	r2, r3
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	60fb      	str	r3, [r7, #12]

	//CPHA Configuration
	ControlReg1 |= (pSPIHandle->SPI_Config.SPI_CPHA << SPI_CR1_CPHA);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	7a5b      	ldrb	r3, [r3, #9]
 8000f94:	461a      	mov	r2, r3
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	60fb      	str	r3, [r7, #12]

	//Software Slave Select Configuration
	ControlReg1 |= (pSPIHandle->SPI_Config.SPI_SSM << SPI_CR1_SSM);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	7a9b      	ldrb	r3, [r3, #10]
 8000fa0:	025b      	lsls	r3, r3, #9
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = ControlReg1;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	68fa      	ldr	r2, [r7, #12]
 8000fb0:	601a      	str	r2, [r3, #0]
}
 8000fb2:	bf00      	nop
 8000fb4:	3714      	adds	r7, #20
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bc80      	pop	{r7}
 8000fba:	4770      	bx	lr

08000fbc <SPI_GetFlagStatus>:

/*
 * 	Data Send and Receive
 */

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName){
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & FlagName){
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	689a      	ldr	r2, [r3, #8]
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <SPI_GetFlagStatus+0x1a>
		return FLAG_SET;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e000      	b.n	8000fd8 <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000fd6:	2300      	movs	r3, #0
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bc80      	pop	{r7}
 8000fe0:	4770      	bx	lr

08000fe2 <SPI_SendData>:
 * @return				- none
 *
 * @note				- This is blocking call
 *
 */
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len){
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b084      	sub	sp, #16
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	60f8      	str	r0, [r7, #12]
 8000fea:	60b9      	str	r1, [r7, #8]
 8000fec:	607a      	str	r2, [r7, #4]
	while(Len > 0){
 8000fee:	e027      	b.n	8001040 <SPI_SendData+0x5e>
		//Wait until TXE is set
		while(SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET);
 8000ff0:	bf00      	nop
 8000ff2:	2102      	movs	r1, #2
 8000ff4:	68f8      	ldr	r0, [r7, #12]
 8000ff6:	f7ff ffe1 	bl	8000fbc <SPI_GetFlagStatus>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d0f8      	beq.n	8000ff2 <SPI_SendData+0x10>
		//Check DFF bit in CR1
		if(pSPIx->CR1 & (1 << SPI_CR1_DFF)){
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001008:	2b00      	cmp	r3, #0
 800100a:	d00e      	beq.n	800102a <SPI_SendData+0x48>
			//16 bit data frame format
			pSPIx->DR = *((uint16_t*) pTxBuffer);
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	881b      	ldrh	r3, [r3, #0]
 8001010:	461a      	mov	r2, r3
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	60da      	str	r2, [r3, #12]
			Len--;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	3b01      	subs	r3, #1
 800101a:	607b      	str	r3, [r7, #4]
			Len--;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	3b01      	subs	r3, #1
 8001020:	607b      	str	r3, [r7, #4]
			(uint16_t*) pTxBuffer++;
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	3301      	adds	r3, #1
 8001026:	60bb      	str	r3, [r7, #8]
 8001028:	e00a      	b.n	8001040 <SPI_SendData+0x5e>
		} else{
			//8 bit data frame format
			pSPIx->DR = *pTxBuffer;
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	461a      	mov	r2, r3
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	60da      	str	r2, [r3, #12]
			Len--;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	3b01      	subs	r3, #1
 8001038:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	3301      	adds	r3, #1
 800103e:	60bb      	str	r3, [r7, #8]
	while(Len > 0){
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d1d4      	bne.n	8000ff0 <SPI_SendData+0xe>
		}
	}
}
 8001046:	bf00      	nop
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <SPI_ReceiveData>:

void SPI_ReceiveData(SPI_RegDef_t *pSPIx, uint8_t *pRxBuffer, uint32_t Len){
 800104e:	b580      	push	{r7, lr}
 8001050:	b084      	sub	sp, #16
 8001052:	af00      	add	r7, sp, #0
 8001054:	60f8      	str	r0, [r7, #12]
 8001056:	60b9      	str	r1, [r7, #8]
 8001058:	607a      	str	r2, [r7, #4]
	while(Len > 0){
 800105a:	e027      	b.n	80010ac <SPI_ReceiveData+0x5e>
			//Wait until RXNE is set
			while(SPI_GetFlagStatus(pSPIx, SPI_RXNE_FLAG) == FLAG_RESET);
 800105c:	bf00      	nop
 800105e:	2101      	movs	r1, #1
 8001060:	68f8      	ldr	r0, [r7, #12]
 8001062:	f7ff ffab 	bl	8000fbc <SPI_GetFlagStatus>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d0f8      	beq.n	800105e <SPI_ReceiveData+0x10>
			//Check DFF bit in CR1
			if(pSPIx->CR1 & (1 << SPI_CR1_DFF)){
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001074:	2b00      	cmp	r3, #0
 8001076:	d00e      	beq.n	8001096 <SPI_ReceiveData+0x48>
				//16 bit data frame format
				*((uint16_t*) pRxBuffer) = pSPIx->DR;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	b29a      	uxth	r2, r3
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	801a      	strh	r2, [r3, #0]
				Len--;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	3b01      	subs	r3, #1
 8001086:	607b      	str	r3, [r7, #4]
				Len--;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	3b01      	subs	r3, #1
 800108c:	607b      	str	r3, [r7, #4]
				(uint16_t*) pRxBuffer++;
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	3301      	adds	r3, #1
 8001092:	60bb      	str	r3, [r7, #8]
 8001094:	e00a      	b.n	80010ac <SPI_ReceiveData+0x5e>
			} else{
				//8 bit data frame format
				*pRxBuffer = pSPIx->DR;
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	68db      	ldr	r3, [r3, #12]
 800109a:	b2da      	uxtb	r2, r3
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	701a      	strb	r2, [r3, #0]
				Len--;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3b01      	subs	r3, #1
 80010a4:	607b      	str	r3, [r7, #4]
				pRxBuffer++;
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	3301      	adds	r3, #1
 80010aa:	60bb      	str	r3, [r7, #8]
	while(Len > 0){
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d1d4      	bne.n	800105c <SPI_ReceiveData+0xe>
			}
		}
}
 80010b2:	bf00      	nop
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <SPI_PeripheralControl>:
 * @return				- none
 *
 * @note				- none
 *
 */
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi){
 80010ba:	b480      	push	{r7}
 80010bc:	b083      	sub	sp, #12
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
 80010c2:	460b      	mov	r3, r1
 80010c4:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE){
 80010c6:	78fb      	ldrb	r3, [r7, #3]
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d106      	bne.n	80010da <SPI_PeripheralControl+0x20>
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	601a      	str	r2, [r3, #0]
	} else{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}
 80010d8:	e005      	b.n	80010e6 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	601a      	str	r2, [r3, #0]
}
 80010e6:	bf00      	nop
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bc80      	pop	{r7}
 80010ee:	4770      	bx	lr

080010f0 <SPI_SSOE_Config>:
 * @return				- none
 *
 * @note				- none
 *
 */
void SPI_SSOE_Config(SPI_RegDef_t *pSPIx, uint8_t EnOrDi){
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	460b      	mov	r3, r1
 80010fa:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE){
 80010fc:	78fb      	ldrb	r3, [r7, #3]
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d106      	bne.n	8001110 <SPI_SSOE_Config+0x20>
		pSPIx->CR2 |= (1 << SPI_CR2_SSOE);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f043 0204 	orr.w	r2, r3, #4
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	605a      	str	r2, [r3, #4]
	} else{
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
	}
}
 800110e:	e005      	b.n	800111c <SPI_SSOE_Config+0x2c>
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f023 0204 	bic.w	r2, r3, #4
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	605a      	str	r2, [r3, #4]
}
 800111c:	bf00      	nop
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	bc80      	pop	{r7}
 8001124:	4770      	bx	lr
	...

08001128 <__errno>:
 8001128:	4b01      	ldr	r3, [pc, #4]	; (8001130 <__errno+0x8>)
 800112a:	6818      	ldr	r0, [r3, #0]
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	20000000 	.word	0x20000000

08001134 <__libc_init_array>:
 8001134:	b570      	push	{r4, r5, r6, lr}
 8001136:	4e0d      	ldr	r6, [pc, #52]	; (800116c <__libc_init_array+0x38>)
 8001138:	4c0d      	ldr	r4, [pc, #52]	; (8001170 <__libc_init_array+0x3c>)
 800113a:	1ba4      	subs	r4, r4, r6
 800113c:	10a4      	asrs	r4, r4, #2
 800113e:	2500      	movs	r5, #0
 8001140:	42a5      	cmp	r5, r4
 8001142:	d109      	bne.n	8001158 <__libc_init_array+0x24>
 8001144:	4e0b      	ldr	r6, [pc, #44]	; (8001174 <__libc_init_array+0x40>)
 8001146:	4c0c      	ldr	r4, [pc, #48]	; (8001178 <__libc_init_array+0x44>)
 8001148:	f001 fa0e 	bl	8002568 <_init>
 800114c:	1ba4      	subs	r4, r4, r6
 800114e:	10a4      	asrs	r4, r4, #2
 8001150:	2500      	movs	r5, #0
 8001152:	42a5      	cmp	r5, r4
 8001154:	d105      	bne.n	8001162 <__libc_init_array+0x2e>
 8001156:	bd70      	pop	{r4, r5, r6, pc}
 8001158:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800115c:	4798      	blx	r3
 800115e:	3501      	adds	r5, #1
 8001160:	e7ee      	b.n	8001140 <__libc_init_array+0xc>
 8001162:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001166:	4798      	blx	r3
 8001168:	3501      	adds	r5, #1
 800116a:	e7f2      	b.n	8001152 <__libc_init_array+0x1e>
 800116c:	080026c0 	.word	0x080026c0
 8001170:	080026c0 	.word	0x080026c0
 8001174:	080026c0 	.word	0x080026c0
 8001178:	080026c4 	.word	0x080026c4

0800117c <memset>:
 800117c:	4402      	add	r2, r0
 800117e:	4603      	mov	r3, r0
 8001180:	4293      	cmp	r3, r2
 8001182:	d100      	bne.n	8001186 <memset+0xa>
 8001184:	4770      	bx	lr
 8001186:	f803 1b01 	strb.w	r1, [r3], #1
 800118a:	e7f9      	b.n	8001180 <memset+0x4>

0800118c <iprintf>:
 800118c:	b40f      	push	{r0, r1, r2, r3}
 800118e:	4b0a      	ldr	r3, [pc, #40]	; (80011b8 <iprintf+0x2c>)
 8001190:	b513      	push	{r0, r1, r4, lr}
 8001192:	681c      	ldr	r4, [r3, #0]
 8001194:	b124      	cbz	r4, 80011a0 <iprintf+0x14>
 8001196:	69a3      	ldr	r3, [r4, #24]
 8001198:	b913      	cbnz	r3, 80011a0 <iprintf+0x14>
 800119a:	4620      	mov	r0, r4
 800119c:	f000 fa22 	bl	80015e4 <__sinit>
 80011a0:	ab05      	add	r3, sp, #20
 80011a2:	9a04      	ldr	r2, [sp, #16]
 80011a4:	68a1      	ldr	r1, [r4, #8]
 80011a6:	9301      	str	r3, [sp, #4]
 80011a8:	4620      	mov	r0, r4
 80011aa:	f000 fbd9 	bl	8001960 <_vfiprintf_r>
 80011ae:	b002      	add	sp, #8
 80011b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80011b4:	b004      	add	sp, #16
 80011b6:	4770      	bx	lr
 80011b8:	20000000 	.word	0x20000000

080011bc <_puts_r>:
 80011bc:	b570      	push	{r4, r5, r6, lr}
 80011be:	460e      	mov	r6, r1
 80011c0:	4605      	mov	r5, r0
 80011c2:	b118      	cbz	r0, 80011cc <_puts_r+0x10>
 80011c4:	6983      	ldr	r3, [r0, #24]
 80011c6:	b90b      	cbnz	r3, 80011cc <_puts_r+0x10>
 80011c8:	f000 fa0c 	bl	80015e4 <__sinit>
 80011cc:	69ab      	ldr	r3, [r5, #24]
 80011ce:	68ac      	ldr	r4, [r5, #8]
 80011d0:	b913      	cbnz	r3, 80011d8 <_puts_r+0x1c>
 80011d2:	4628      	mov	r0, r5
 80011d4:	f000 fa06 	bl	80015e4 <__sinit>
 80011d8:	4b23      	ldr	r3, [pc, #140]	; (8001268 <_puts_r+0xac>)
 80011da:	429c      	cmp	r4, r3
 80011dc:	d117      	bne.n	800120e <_puts_r+0x52>
 80011de:	686c      	ldr	r4, [r5, #4]
 80011e0:	89a3      	ldrh	r3, [r4, #12]
 80011e2:	071b      	lsls	r3, r3, #28
 80011e4:	d51d      	bpl.n	8001222 <_puts_r+0x66>
 80011e6:	6923      	ldr	r3, [r4, #16]
 80011e8:	b1db      	cbz	r3, 8001222 <_puts_r+0x66>
 80011ea:	3e01      	subs	r6, #1
 80011ec:	68a3      	ldr	r3, [r4, #8]
 80011ee:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80011f2:	3b01      	subs	r3, #1
 80011f4:	60a3      	str	r3, [r4, #8]
 80011f6:	b9e9      	cbnz	r1, 8001234 <_puts_r+0x78>
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	da2e      	bge.n	800125a <_puts_r+0x9e>
 80011fc:	4622      	mov	r2, r4
 80011fe:	210a      	movs	r1, #10
 8001200:	4628      	mov	r0, r5
 8001202:	f000 f83f 	bl	8001284 <__swbuf_r>
 8001206:	3001      	adds	r0, #1
 8001208:	d011      	beq.n	800122e <_puts_r+0x72>
 800120a:	200a      	movs	r0, #10
 800120c:	e011      	b.n	8001232 <_puts_r+0x76>
 800120e:	4b17      	ldr	r3, [pc, #92]	; (800126c <_puts_r+0xb0>)
 8001210:	429c      	cmp	r4, r3
 8001212:	d101      	bne.n	8001218 <_puts_r+0x5c>
 8001214:	68ac      	ldr	r4, [r5, #8]
 8001216:	e7e3      	b.n	80011e0 <_puts_r+0x24>
 8001218:	4b15      	ldr	r3, [pc, #84]	; (8001270 <_puts_r+0xb4>)
 800121a:	429c      	cmp	r4, r3
 800121c:	bf08      	it	eq
 800121e:	68ec      	ldreq	r4, [r5, #12]
 8001220:	e7de      	b.n	80011e0 <_puts_r+0x24>
 8001222:	4621      	mov	r1, r4
 8001224:	4628      	mov	r0, r5
 8001226:	f000 f87f 	bl	8001328 <__swsetup_r>
 800122a:	2800      	cmp	r0, #0
 800122c:	d0dd      	beq.n	80011ea <_puts_r+0x2e>
 800122e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001232:	bd70      	pop	{r4, r5, r6, pc}
 8001234:	2b00      	cmp	r3, #0
 8001236:	da04      	bge.n	8001242 <_puts_r+0x86>
 8001238:	69a2      	ldr	r2, [r4, #24]
 800123a:	429a      	cmp	r2, r3
 800123c:	dc06      	bgt.n	800124c <_puts_r+0x90>
 800123e:	290a      	cmp	r1, #10
 8001240:	d004      	beq.n	800124c <_puts_r+0x90>
 8001242:	6823      	ldr	r3, [r4, #0]
 8001244:	1c5a      	adds	r2, r3, #1
 8001246:	6022      	str	r2, [r4, #0]
 8001248:	7019      	strb	r1, [r3, #0]
 800124a:	e7cf      	b.n	80011ec <_puts_r+0x30>
 800124c:	4622      	mov	r2, r4
 800124e:	4628      	mov	r0, r5
 8001250:	f000 f818 	bl	8001284 <__swbuf_r>
 8001254:	3001      	adds	r0, #1
 8001256:	d1c9      	bne.n	80011ec <_puts_r+0x30>
 8001258:	e7e9      	b.n	800122e <_puts_r+0x72>
 800125a:	6823      	ldr	r3, [r4, #0]
 800125c:	200a      	movs	r0, #10
 800125e:	1c5a      	adds	r2, r3, #1
 8001260:	6022      	str	r2, [r4, #0]
 8001262:	7018      	strb	r0, [r3, #0]
 8001264:	e7e5      	b.n	8001232 <_puts_r+0x76>
 8001266:	bf00      	nop
 8001268:	08002630 	.word	0x08002630
 800126c:	08002650 	.word	0x08002650
 8001270:	08002610 	.word	0x08002610

08001274 <puts>:
 8001274:	4b02      	ldr	r3, [pc, #8]	; (8001280 <puts+0xc>)
 8001276:	4601      	mov	r1, r0
 8001278:	6818      	ldr	r0, [r3, #0]
 800127a:	f7ff bf9f 	b.w	80011bc <_puts_r>
 800127e:	bf00      	nop
 8001280:	20000000 	.word	0x20000000

08001284 <__swbuf_r>:
 8001284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001286:	460e      	mov	r6, r1
 8001288:	4614      	mov	r4, r2
 800128a:	4605      	mov	r5, r0
 800128c:	b118      	cbz	r0, 8001296 <__swbuf_r+0x12>
 800128e:	6983      	ldr	r3, [r0, #24]
 8001290:	b90b      	cbnz	r3, 8001296 <__swbuf_r+0x12>
 8001292:	f000 f9a7 	bl	80015e4 <__sinit>
 8001296:	4b21      	ldr	r3, [pc, #132]	; (800131c <__swbuf_r+0x98>)
 8001298:	429c      	cmp	r4, r3
 800129a:	d12a      	bne.n	80012f2 <__swbuf_r+0x6e>
 800129c:	686c      	ldr	r4, [r5, #4]
 800129e:	69a3      	ldr	r3, [r4, #24]
 80012a0:	60a3      	str	r3, [r4, #8]
 80012a2:	89a3      	ldrh	r3, [r4, #12]
 80012a4:	071a      	lsls	r2, r3, #28
 80012a6:	d52e      	bpl.n	8001306 <__swbuf_r+0x82>
 80012a8:	6923      	ldr	r3, [r4, #16]
 80012aa:	b363      	cbz	r3, 8001306 <__swbuf_r+0x82>
 80012ac:	6923      	ldr	r3, [r4, #16]
 80012ae:	6820      	ldr	r0, [r4, #0]
 80012b0:	1ac0      	subs	r0, r0, r3
 80012b2:	6963      	ldr	r3, [r4, #20]
 80012b4:	b2f6      	uxtb	r6, r6
 80012b6:	4283      	cmp	r3, r0
 80012b8:	4637      	mov	r7, r6
 80012ba:	dc04      	bgt.n	80012c6 <__swbuf_r+0x42>
 80012bc:	4621      	mov	r1, r4
 80012be:	4628      	mov	r0, r5
 80012c0:	f000 f926 	bl	8001510 <_fflush_r>
 80012c4:	bb28      	cbnz	r0, 8001312 <__swbuf_r+0x8e>
 80012c6:	68a3      	ldr	r3, [r4, #8]
 80012c8:	3b01      	subs	r3, #1
 80012ca:	60a3      	str	r3, [r4, #8]
 80012cc:	6823      	ldr	r3, [r4, #0]
 80012ce:	1c5a      	adds	r2, r3, #1
 80012d0:	6022      	str	r2, [r4, #0]
 80012d2:	701e      	strb	r6, [r3, #0]
 80012d4:	6963      	ldr	r3, [r4, #20]
 80012d6:	3001      	adds	r0, #1
 80012d8:	4283      	cmp	r3, r0
 80012da:	d004      	beq.n	80012e6 <__swbuf_r+0x62>
 80012dc:	89a3      	ldrh	r3, [r4, #12]
 80012de:	07db      	lsls	r3, r3, #31
 80012e0:	d519      	bpl.n	8001316 <__swbuf_r+0x92>
 80012e2:	2e0a      	cmp	r6, #10
 80012e4:	d117      	bne.n	8001316 <__swbuf_r+0x92>
 80012e6:	4621      	mov	r1, r4
 80012e8:	4628      	mov	r0, r5
 80012ea:	f000 f911 	bl	8001510 <_fflush_r>
 80012ee:	b190      	cbz	r0, 8001316 <__swbuf_r+0x92>
 80012f0:	e00f      	b.n	8001312 <__swbuf_r+0x8e>
 80012f2:	4b0b      	ldr	r3, [pc, #44]	; (8001320 <__swbuf_r+0x9c>)
 80012f4:	429c      	cmp	r4, r3
 80012f6:	d101      	bne.n	80012fc <__swbuf_r+0x78>
 80012f8:	68ac      	ldr	r4, [r5, #8]
 80012fa:	e7d0      	b.n	800129e <__swbuf_r+0x1a>
 80012fc:	4b09      	ldr	r3, [pc, #36]	; (8001324 <__swbuf_r+0xa0>)
 80012fe:	429c      	cmp	r4, r3
 8001300:	bf08      	it	eq
 8001302:	68ec      	ldreq	r4, [r5, #12]
 8001304:	e7cb      	b.n	800129e <__swbuf_r+0x1a>
 8001306:	4621      	mov	r1, r4
 8001308:	4628      	mov	r0, r5
 800130a:	f000 f80d 	bl	8001328 <__swsetup_r>
 800130e:	2800      	cmp	r0, #0
 8001310:	d0cc      	beq.n	80012ac <__swbuf_r+0x28>
 8001312:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001316:	4638      	mov	r0, r7
 8001318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800131a:	bf00      	nop
 800131c:	08002630 	.word	0x08002630
 8001320:	08002650 	.word	0x08002650
 8001324:	08002610 	.word	0x08002610

08001328 <__swsetup_r>:
 8001328:	4b32      	ldr	r3, [pc, #200]	; (80013f4 <__swsetup_r+0xcc>)
 800132a:	b570      	push	{r4, r5, r6, lr}
 800132c:	681d      	ldr	r5, [r3, #0]
 800132e:	4606      	mov	r6, r0
 8001330:	460c      	mov	r4, r1
 8001332:	b125      	cbz	r5, 800133e <__swsetup_r+0x16>
 8001334:	69ab      	ldr	r3, [r5, #24]
 8001336:	b913      	cbnz	r3, 800133e <__swsetup_r+0x16>
 8001338:	4628      	mov	r0, r5
 800133a:	f000 f953 	bl	80015e4 <__sinit>
 800133e:	4b2e      	ldr	r3, [pc, #184]	; (80013f8 <__swsetup_r+0xd0>)
 8001340:	429c      	cmp	r4, r3
 8001342:	d10f      	bne.n	8001364 <__swsetup_r+0x3c>
 8001344:	686c      	ldr	r4, [r5, #4]
 8001346:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800134a:	b29a      	uxth	r2, r3
 800134c:	0715      	lsls	r5, r2, #28
 800134e:	d42c      	bmi.n	80013aa <__swsetup_r+0x82>
 8001350:	06d0      	lsls	r0, r2, #27
 8001352:	d411      	bmi.n	8001378 <__swsetup_r+0x50>
 8001354:	2209      	movs	r2, #9
 8001356:	6032      	str	r2, [r6, #0]
 8001358:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800135c:	81a3      	strh	r3, [r4, #12]
 800135e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001362:	e03e      	b.n	80013e2 <__swsetup_r+0xba>
 8001364:	4b25      	ldr	r3, [pc, #148]	; (80013fc <__swsetup_r+0xd4>)
 8001366:	429c      	cmp	r4, r3
 8001368:	d101      	bne.n	800136e <__swsetup_r+0x46>
 800136a:	68ac      	ldr	r4, [r5, #8]
 800136c:	e7eb      	b.n	8001346 <__swsetup_r+0x1e>
 800136e:	4b24      	ldr	r3, [pc, #144]	; (8001400 <__swsetup_r+0xd8>)
 8001370:	429c      	cmp	r4, r3
 8001372:	bf08      	it	eq
 8001374:	68ec      	ldreq	r4, [r5, #12]
 8001376:	e7e6      	b.n	8001346 <__swsetup_r+0x1e>
 8001378:	0751      	lsls	r1, r2, #29
 800137a:	d512      	bpl.n	80013a2 <__swsetup_r+0x7a>
 800137c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800137e:	b141      	cbz	r1, 8001392 <__swsetup_r+0x6a>
 8001380:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001384:	4299      	cmp	r1, r3
 8001386:	d002      	beq.n	800138e <__swsetup_r+0x66>
 8001388:	4630      	mov	r0, r6
 800138a:	f000 fa19 	bl	80017c0 <_free_r>
 800138e:	2300      	movs	r3, #0
 8001390:	6363      	str	r3, [r4, #52]	; 0x34
 8001392:	89a3      	ldrh	r3, [r4, #12]
 8001394:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001398:	81a3      	strh	r3, [r4, #12]
 800139a:	2300      	movs	r3, #0
 800139c:	6063      	str	r3, [r4, #4]
 800139e:	6923      	ldr	r3, [r4, #16]
 80013a0:	6023      	str	r3, [r4, #0]
 80013a2:	89a3      	ldrh	r3, [r4, #12]
 80013a4:	f043 0308 	orr.w	r3, r3, #8
 80013a8:	81a3      	strh	r3, [r4, #12]
 80013aa:	6923      	ldr	r3, [r4, #16]
 80013ac:	b94b      	cbnz	r3, 80013c2 <__swsetup_r+0x9a>
 80013ae:	89a3      	ldrh	r3, [r4, #12]
 80013b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80013b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013b8:	d003      	beq.n	80013c2 <__swsetup_r+0x9a>
 80013ba:	4621      	mov	r1, r4
 80013bc:	4630      	mov	r0, r6
 80013be:	f000 f9bf 	bl	8001740 <__smakebuf_r>
 80013c2:	89a2      	ldrh	r2, [r4, #12]
 80013c4:	f012 0301 	ands.w	r3, r2, #1
 80013c8:	d00c      	beq.n	80013e4 <__swsetup_r+0xbc>
 80013ca:	2300      	movs	r3, #0
 80013cc:	60a3      	str	r3, [r4, #8]
 80013ce:	6963      	ldr	r3, [r4, #20]
 80013d0:	425b      	negs	r3, r3
 80013d2:	61a3      	str	r3, [r4, #24]
 80013d4:	6923      	ldr	r3, [r4, #16]
 80013d6:	b953      	cbnz	r3, 80013ee <__swsetup_r+0xc6>
 80013d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013dc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80013e0:	d1ba      	bne.n	8001358 <__swsetup_r+0x30>
 80013e2:	bd70      	pop	{r4, r5, r6, pc}
 80013e4:	0792      	lsls	r2, r2, #30
 80013e6:	bf58      	it	pl
 80013e8:	6963      	ldrpl	r3, [r4, #20]
 80013ea:	60a3      	str	r3, [r4, #8]
 80013ec:	e7f2      	b.n	80013d4 <__swsetup_r+0xac>
 80013ee:	2000      	movs	r0, #0
 80013f0:	e7f7      	b.n	80013e2 <__swsetup_r+0xba>
 80013f2:	bf00      	nop
 80013f4:	20000000 	.word	0x20000000
 80013f8:	08002630 	.word	0x08002630
 80013fc:	08002650 	.word	0x08002650
 8001400:	08002610 	.word	0x08002610

08001404 <__sflush_r>:
 8001404:	898a      	ldrh	r2, [r1, #12]
 8001406:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800140a:	4605      	mov	r5, r0
 800140c:	0710      	lsls	r0, r2, #28
 800140e:	460c      	mov	r4, r1
 8001410:	d458      	bmi.n	80014c4 <__sflush_r+0xc0>
 8001412:	684b      	ldr	r3, [r1, #4]
 8001414:	2b00      	cmp	r3, #0
 8001416:	dc05      	bgt.n	8001424 <__sflush_r+0x20>
 8001418:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800141a:	2b00      	cmp	r3, #0
 800141c:	dc02      	bgt.n	8001424 <__sflush_r+0x20>
 800141e:	2000      	movs	r0, #0
 8001420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001424:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001426:	2e00      	cmp	r6, #0
 8001428:	d0f9      	beq.n	800141e <__sflush_r+0x1a>
 800142a:	2300      	movs	r3, #0
 800142c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001430:	682f      	ldr	r7, [r5, #0]
 8001432:	6a21      	ldr	r1, [r4, #32]
 8001434:	602b      	str	r3, [r5, #0]
 8001436:	d032      	beq.n	800149e <__sflush_r+0x9a>
 8001438:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800143a:	89a3      	ldrh	r3, [r4, #12]
 800143c:	075a      	lsls	r2, r3, #29
 800143e:	d505      	bpl.n	800144c <__sflush_r+0x48>
 8001440:	6863      	ldr	r3, [r4, #4]
 8001442:	1ac0      	subs	r0, r0, r3
 8001444:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001446:	b10b      	cbz	r3, 800144c <__sflush_r+0x48>
 8001448:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800144a:	1ac0      	subs	r0, r0, r3
 800144c:	2300      	movs	r3, #0
 800144e:	4602      	mov	r2, r0
 8001450:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001452:	6a21      	ldr	r1, [r4, #32]
 8001454:	4628      	mov	r0, r5
 8001456:	47b0      	blx	r6
 8001458:	1c43      	adds	r3, r0, #1
 800145a:	89a3      	ldrh	r3, [r4, #12]
 800145c:	d106      	bne.n	800146c <__sflush_r+0x68>
 800145e:	6829      	ldr	r1, [r5, #0]
 8001460:	291d      	cmp	r1, #29
 8001462:	d848      	bhi.n	80014f6 <__sflush_r+0xf2>
 8001464:	4a29      	ldr	r2, [pc, #164]	; (800150c <__sflush_r+0x108>)
 8001466:	40ca      	lsrs	r2, r1
 8001468:	07d6      	lsls	r6, r2, #31
 800146a:	d544      	bpl.n	80014f6 <__sflush_r+0xf2>
 800146c:	2200      	movs	r2, #0
 800146e:	6062      	str	r2, [r4, #4]
 8001470:	04d9      	lsls	r1, r3, #19
 8001472:	6922      	ldr	r2, [r4, #16]
 8001474:	6022      	str	r2, [r4, #0]
 8001476:	d504      	bpl.n	8001482 <__sflush_r+0x7e>
 8001478:	1c42      	adds	r2, r0, #1
 800147a:	d101      	bne.n	8001480 <__sflush_r+0x7c>
 800147c:	682b      	ldr	r3, [r5, #0]
 800147e:	b903      	cbnz	r3, 8001482 <__sflush_r+0x7e>
 8001480:	6560      	str	r0, [r4, #84]	; 0x54
 8001482:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001484:	602f      	str	r7, [r5, #0]
 8001486:	2900      	cmp	r1, #0
 8001488:	d0c9      	beq.n	800141e <__sflush_r+0x1a>
 800148a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800148e:	4299      	cmp	r1, r3
 8001490:	d002      	beq.n	8001498 <__sflush_r+0x94>
 8001492:	4628      	mov	r0, r5
 8001494:	f000 f994 	bl	80017c0 <_free_r>
 8001498:	2000      	movs	r0, #0
 800149a:	6360      	str	r0, [r4, #52]	; 0x34
 800149c:	e7c0      	b.n	8001420 <__sflush_r+0x1c>
 800149e:	2301      	movs	r3, #1
 80014a0:	4628      	mov	r0, r5
 80014a2:	47b0      	blx	r6
 80014a4:	1c41      	adds	r1, r0, #1
 80014a6:	d1c8      	bne.n	800143a <__sflush_r+0x36>
 80014a8:	682b      	ldr	r3, [r5, #0]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d0c5      	beq.n	800143a <__sflush_r+0x36>
 80014ae:	2b1d      	cmp	r3, #29
 80014b0:	d001      	beq.n	80014b6 <__sflush_r+0xb2>
 80014b2:	2b16      	cmp	r3, #22
 80014b4:	d101      	bne.n	80014ba <__sflush_r+0xb6>
 80014b6:	602f      	str	r7, [r5, #0]
 80014b8:	e7b1      	b.n	800141e <__sflush_r+0x1a>
 80014ba:	89a3      	ldrh	r3, [r4, #12]
 80014bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014c0:	81a3      	strh	r3, [r4, #12]
 80014c2:	e7ad      	b.n	8001420 <__sflush_r+0x1c>
 80014c4:	690f      	ldr	r7, [r1, #16]
 80014c6:	2f00      	cmp	r7, #0
 80014c8:	d0a9      	beq.n	800141e <__sflush_r+0x1a>
 80014ca:	0793      	lsls	r3, r2, #30
 80014cc:	680e      	ldr	r6, [r1, #0]
 80014ce:	bf08      	it	eq
 80014d0:	694b      	ldreq	r3, [r1, #20]
 80014d2:	600f      	str	r7, [r1, #0]
 80014d4:	bf18      	it	ne
 80014d6:	2300      	movne	r3, #0
 80014d8:	eba6 0807 	sub.w	r8, r6, r7
 80014dc:	608b      	str	r3, [r1, #8]
 80014de:	f1b8 0f00 	cmp.w	r8, #0
 80014e2:	dd9c      	ble.n	800141e <__sflush_r+0x1a>
 80014e4:	4643      	mov	r3, r8
 80014e6:	463a      	mov	r2, r7
 80014e8:	6a21      	ldr	r1, [r4, #32]
 80014ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80014ec:	4628      	mov	r0, r5
 80014ee:	47b0      	blx	r6
 80014f0:	2800      	cmp	r0, #0
 80014f2:	dc06      	bgt.n	8001502 <__sflush_r+0xfe>
 80014f4:	89a3      	ldrh	r3, [r4, #12]
 80014f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014fa:	81a3      	strh	r3, [r4, #12]
 80014fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001500:	e78e      	b.n	8001420 <__sflush_r+0x1c>
 8001502:	4407      	add	r7, r0
 8001504:	eba8 0800 	sub.w	r8, r8, r0
 8001508:	e7e9      	b.n	80014de <__sflush_r+0xda>
 800150a:	bf00      	nop
 800150c:	20400001 	.word	0x20400001

08001510 <_fflush_r>:
 8001510:	b538      	push	{r3, r4, r5, lr}
 8001512:	690b      	ldr	r3, [r1, #16]
 8001514:	4605      	mov	r5, r0
 8001516:	460c      	mov	r4, r1
 8001518:	b1db      	cbz	r3, 8001552 <_fflush_r+0x42>
 800151a:	b118      	cbz	r0, 8001524 <_fflush_r+0x14>
 800151c:	6983      	ldr	r3, [r0, #24]
 800151e:	b90b      	cbnz	r3, 8001524 <_fflush_r+0x14>
 8001520:	f000 f860 	bl	80015e4 <__sinit>
 8001524:	4b0c      	ldr	r3, [pc, #48]	; (8001558 <_fflush_r+0x48>)
 8001526:	429c      	cmp	r4, r3
 8001528:	d109      	bne.n	800153e <_fflush_r+0x2e>
 800152a:	686c      	ldr	r4, [r5, #4]
 800152c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001530:	b17b      	cbz	r3, 8001552 <_fflush_r+0x42>
 8001532:	4621      	mov	r1, r4
 8001534:	4628      	mov	r0, r5
 8001536:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800153a:	f7ff bf63 	b.w	8001404 <__sflush_r>
 800153e:	4b07      	ldr	r3, [pc, #28]	; (800155c <_fflush_r+0x4c>)
 8001540:	429c      	cmp	r4, r3
 8001542:	d101      	bne.n	8001548 <_fflush_r+0x38>
 8001544:	68ac      	ldr	r4, [r5, #8]
 8001546:	e7f1      	b.n	800152c <_fflush_r+0x1c>
 8001548:	4b05      	ldr	r3, [pc, #20]	; (8001560 <_fflush_r+0x50>)
 800154a:	429c      	cmp	r4, r3
 800154c:	bf08      	it	eq
 800154e:	68ec      	ldreq	r4, [r5, #12]
 8001550:	e7ec      	b.n	800152c <_fflush_r+0x1c>
 8001552:	2000      	movs	r0, #0
 8001554:	bd38      	pop	{r3, r4, r5, pc}
 8001556:	bf00      	nop
 8001558:	08002630 	.word	0x08002630
 800155c:	08002650 	.word	0x08002650
 8001560:	08002610 	.word	0x08002610

08001564 <std>:
 8001564:	2300      	movs	r3, #0
 8001566:	b510      	push	{r4, lr}
 8001568:	4604      	mov	r4, r0
 800156a:	e9c0 3300 	strd	r3, r3, [r0]
 800156e:	6083      	str	r3, [r0, #8]
 8001570:	8181      	strh	r1, [r0, #12]
 8001572:	6643      	str	r3, [r0, #100]	; 0x64
 8001574:	81c2      	strh	r2, [r0, #14]
 8001576:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800157a:	6183      	str	r3, [r0, #24]
 800157c:	4619      	mov	r1, r3
 800157e:	2208      	movs	r2, #8
 8001580:	305c      	adds	r0, #92	; 0x5c
 8001582:	f7ff fdfb 	bl	800117c <memset>
 8001586:	4b05      	ldr	r3, [pc, #20]	; (800159c <std+0x38>)
 8001588:	6263      	str	r3, [r4, #36]	; 0x24
 800158a:	4b05      	ldr	r3, [pc, #20]	; (80015a0 <std+0x3c>)
 800158c:	62a3      	str	r3, [r4, #40]	; 0x28
 800158e:	4b05      	ldr	r3, [pc, #20]	; (80015a4 <std+0x40>)
 8001590:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001592:	4b05      	ldr	r3, [pc, #20]	; (80015a8 <std+0x44>)
 8001594:	6224      	str	r4, [r4, #32]
 8001596:	6323      	str	r3, [r4, #48]	; 0x30
 8001598:	bd10      	pop	{r4, pc}
 800159a:	bf00      	nop
 800159c:	08001ebd 	.word	0x08001ebd
 80015a0:	08001edf 	.word	0x08001edf
 80015a4:	08001f17 	.word	0x08001f17
 80015a8:	08001f3b 	.word	0x08001f3b

080015ac <_cleanup_r>:
 80015ac:	4901      	ldr	r1, [pc, #4]	; (80015b4 <_cleanup_r+0x8>)
 80015ae:	f000 b885 	b.w	80016bc <_fwalk_reent>
 80015b2:	bf00      	nop
 80015b4:	08001511 	.word	0x08001511

080015b8 <__sfmoreglue>:
 80015b8:	b570      	push	{r4, r5, r6, lr}
 80015ba:	1e4a      	subs	r2, r1, #1
 80015bc:	2568      	movs	r5, #104	; 0x68
 80015be:	4355      	muls	r5, r2
 80015c0:	460e      	mov	r6, r1
 80015c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80015c6:	f000 f949 	bl	800185c <_malloc_r>
 80015ca:	4604      	mov	r4, r0
 80015cc:	b140      	cbz	r0, 80015e0 <__sfmoreglue+0x28>
 80015ce:	2100      	movs	r1, #0
 80015d0:	e9c0 1600 	strd	r1, r6, [r0]
 80015d4:	300c      	adds	r0, #12
 80015d6:	60a0      	str	r0, [r4, #8]
 80015d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80015dc:	f7ff fdce 	bl	800117c <memset>
 80015e0:	4620      	mov	r0, r4
 80015e2:	bd70      	pop	{r4, r5, r6, pc}

080015e4 <__sinit>:
 80015e4:	6983      	ldr	r3, [r0, #24]
 80015e6:	b510      	push	{r4, lr}
 80015e8:	4604      	mov	r4, r0
 80015ea:	bb33      	cbnz	r3, 800163a <__sinit+0x56>
 80015ec:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80015f0:	6503      	str	r3, [r0, #80]	; 0x50
 80015f2:	4b12      	ldr	r3, [pc, #72]	; (800163c <__sinit+0x58>)
 80015f4:	4a12      	ldr	r2, [pc, #72]	; (8001640 <__sinit+0x5c>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	6282      	str	r2, [r0, #40]	; 0x28
 80015fa:	4298      	cmp	r0, r3
 80015fc:	bf04      	itt	eq
 80015fe:	2301      	moveq	r3, #1
 8001600:	6183      	streq	r3, [r0, #24]
 8001602:	f000 f81f 	bl	8001644 <__sfp>
 8001606:	6060      	str	r0, [r4, #4]
 8001608:	4620      	mov	r0, r4
 800160a:	f000 f81b 	bl	8001644 <__sfp>
 800160e:	60a0      	str	r0, [r4, #8]
 8001610:	4620      	mov	r0, r4
 8001612:	f000 f817 	bl	8001644 <__sfp>
 8001616:	2200      	movs	r2, #0
 8001618:	60e0      	str	r0, [r4, #12]
 800161a:	2104      	movs	r1, #4
 800161c:	6860      	ldr	r0, [r4, #4]
 800161e:	f7ff ffa1 	bl	8001564 <std>
 8001622:	2201      	movs	r2, #1
 8001624:	2109      	movs	r1, #9
 8001626:	68a0      	ldr	r0, [r4, #8]
 8001628:	f7ff ff9c 	bl	8001564 <std>
 800162c:	2202      	movs	r2, #2
 800162e:	2112      	movs	r1, #18
 8001630:	68e0      	ldr	r0, [r4, #12]
 8001632:	f7ff ff97 	bl	8001564 <std>
 8001636:	2301      	movs	r3, #1
 8001638:	61a3      	str	r3, [r4, #24]
 800163a:	bd10      	pop	{r4, pc}
 800163c:	0800260c 	.word	0x0800260c
 8001640:	080015ad 	.word	0x080015ad

08001644 <__sfp>:
 8001644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001646:	4b1b      	ldr	r3, [pc, #108]	; (80016b4 <__sfp+0x70>)
 8001648:	681e      	ldr	r6, [r3, #0]
 800164a:	69b3      	ldr	r3, [r6, #24]
 800164c:	4607      	mov	r7, r0
 800164e:	b913      	cbnz	r3, 8001656 <__sfp+0x12>
 8001650:	4630      	mov	r0, r6
 8001652:	f7ff ffc7 	bl	80015e4 <__sinit>
 8001656:	3648      	adds	r6, #72	; 0x48
 8001658:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800165c:	3b01      	subs	r3, #1
 800165e:	d503      	bpl.n	8001668 <__sfp+0x24>
 8001660:	6833      	ldr	r3, [r6, #0]
 8001662:	b133      	cbz	r3, 8001672 <__sfp+0x2e>
 8001664:	6836      	ldr	r6, [r6, #0]
 8001666:	e7f7      	b.n	8001658 <__sfp+0x14>
 8001668:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800166c:	b16d      	cbz	r5, 800168a <__sfp+0x46>
 800166e:	3468      	adds	r4, #104	; 0x68
 8001670:	e7f4      	b.n	800165c <__sfp+0x18>
 8001672:	2104      	movs	r1, #4
 8001674:	4638      	mov	r0, r7
 8001676:	f7ff ff9f 	bl	80015b8 <__sfmoreglue>
 800167a:	6030      	str	r0, [r6, #0]
 800167c:	2800      	cmp	r0, #0
 800167e:	d1f1      	bne.n	8001664 <__sfp+0x20>
 8001680:	230c      	movs	r3, #12
 8001682:	603b      	str	r3, [r7, #0]
 8001684:	4604      	mov	r4, r0
 8001686:	4620      	mov	r0, r4
 8001688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800168a:	4b0b      	ldr	r3, [pc, #44]	; (80016b8 <__sfp+0x74>)
 800168c:	6665      	str	r5, [r4, #100]	; 0x64
 800168e:	e9c4 5500 	strd	r5, r5, [r4]
 8001692:	60a5      	str	r5, [r4, #8]
 8001694:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8001698:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800169c:	2208      	movs	r2, #8
 800169e:	4629      	mov	r1, r5
 80016a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80016a4:	f7ff fd6a 	bl	800117c <memset>
 80016a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80016ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80016b0:	e7e9      	b.n	8001686 <__sfp+0x42>
 80016b2:	bf00      	nop
 80016b4:	0800260c 	.word	0x0800260c
 80016b8:	ffff0001 	.word	0xffff0001

080016bc <_fwalk_reent>:
 80016bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80016c0:	4680      	mov	r8, r0
 80016c2:	4689      	mov	r9, r1
 80016c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80016c8:	2600      	movs	r6, #0
 80016ca:	b914      	cbnz	r4, 80016d2 <_fwalk_reent+0x16>
 80016cc:	4630      	mov	r0, r6
 80016ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80016d2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80016d6:	3f01      	subs	r7, #1
 80016d8:	d501      	bpl.n	80016de <_fwalk_reent+0x22>
 80016da:	6824      	ldr	r4, [r4, #0]
 80016dc:	e7f5      	b.n	80016ca <_fwalk_reent+0xe>
 80016de:	89ab      	ldrh	r3, [r5, #12]
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d907      	bls.n	80016f4 <_fwalk_reent+0x38>
 80016e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80016e8:	3301      	adds	r3, #1
 80016ea:	d003      	beq.n	80016f4 <_fwalk_reent+0x38>
 80016ec:	4629      	mov	r1, r5
 80016ee:	4640      	mov	r0, r8
 80016f0:	47c8      	blx	r9
 80016f2:	4306      	orrs	r6, r0
 80016f4:	3568      	adds	r5, #104	; 0x68
 80016f6:	e7ee      	b.n	80016d6 <_fwalk_reent+0x1a>

080016f8 <__swhatbuf_r>:
 80016f8:	b570      	push	{r4, r5, r6, lr}
 80016fa:	460e      	mov	r6, r1
 80016fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001700:	2900      	cmp	r1, #0
 8001702:	b096      	sub	sp, #88	; 0x58
 8001704:	4614      	mov	r4, r2
 8001706:	461d      	mov	r5, r3
 8001708:	da07      	bge.n	800171a <__swhatbuf_r+0x22>
 800170a:	2300      	movs	r3, #0
 800170c:	602b      	str	r3, [r5, #0]
 800170e:	89b3      	ldrh	r3, [r6, #12]
 8001710:	061a      	lsls	r2, r3, #24
 8001712:	d410      	bmi.n	8001736 <__swhatbuf_r+0x3e>
 8001714:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001718:	e00e      	b.n	8001738 <__swhatbuf_r+0x40>
 800171a:	466a      	mov	r2, sp
 800171c:	f000 fc34 	bl	8001f88 <_fstat_r>
 8001720:	2800      	cmp	r0, #0
 8001722:	dbf2      	blt.n	800170a <__swhatbuf_r+0x12>
 8001724:	9a01      	ldr	r2, [sp, #4]
 8001726:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800172a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800172e:	425a      	negs	r2, r3
 8001730:	415a      	adcs	r2, r3
 8001732:	602a      	str	r2, [r5, #0]
 8001734:	e7ee      	b.n	8001714 <__swhatbuf_r+0x1c>
 8001736:	2340      	movs	r3, #64	; 0x40
 8001738:	2000      	movs	r0, #0
 800173a:	6023      	str	r3, [r4, #0]
 800173c:	b016      	add	sp, #88	; 0x58
 800173e:	bd70      	pop	{r4, r5, r6, pc}

08001740 <__smakebuf_r>:
 8001740:	898b      	ldrh	r3, [r1, #12]
 8001742:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001744:	079d      	lsls	r5, r3, #30
 8001746:	4606      	mov	r6, r0
 8001748:	460c      	mov	r4, r1
 800174a:	d507      	bpl.n	800175c <__smakebuf_r+0x1c>
 800174c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001750:	6023      	str	r3, [r4, #0]
 8001752:	6123      	str	r3, [r4, #16]
 8001754:	2301      	movs	r3, #1
 8001756:	6163      	str	r3, [r4, #20]
 8001758:	b002      	add	sp, #8
 800175a:	bd70      	pop	{r4, r5, r6, pc}
 800175c:	ab01      	add	r3, sp, #4
 800175e:	466a      	mov	r2, sp
 8001760:	f7ff ffca 	bl	80016f8 <__swhatbuf_r>
 8001764:	9900      	ldr	r1, [sp, #0]
 8001766:	4605      	mov	r5, r0
 8001768:	4630      	mov	r0, r6
 800176a:	f000 f877 	bl	800185c <_malloc_r>
 800176e:	b948      	cbnz	r0, 8001784 <__smakebuf_r+0x44>
 8001770:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001774:	059a      	lsls	r2, r3, #22
 8001776:	d4ef      	bmi.n	8001758 <__smakebuf_r+0x18>
 8001778:	f023 0303 	bic.w	r3, r3, #3
 800177c:	f043 0302 	orr.w	r3, r3, #2
 8001780:	81a3      	strh	r3, [r4, #12]
 8001782:	e7e3      	b.n	800174c <__smakebuf_r+0xc>
 8001784:	4b0d      	ldr	r3, [pc, #52]	; (80017bc <__smakebuf_r+0x7c>)
 8001786:	62b3      	str	r3, [r6, #40]	; 0x28
 8001788:	89a3      	ldrh	r3, [r4, #12]
 800178a:	6020      	str	r0, [r4, #0]
 800178c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001790:	81a3      	strh	r3, [r4, #12]
 8001792:	9b00      	ldr	r3, [sp, #0]
 8001794:	6163      	str	r3, [r4, #20]
 8001796:	9b01      	ldr	r3, [sp, #4]
 8001798:	6120      	str	r0, [r4, #16]
 800179a:	b15b      	cbz	r3, 80017b4 <__smakebuf_r+0x74>
 800179c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80017a0:	4630      	mov	r0, r6
 80017a2:	f000 fc03 	bl	8001fac <_isatty_r>
 80017a6:	b128      	cbz	r0, 80017b4 <__smakebuf_r+0x74>
 80017a8:	89a3      	ldrh	r3, [r4, #12]
 80017aa:	f023 0303 	bic.w	r3, r3, #3
 80017ae:	f043 0301 	orr.w	r3, r3, #1
 80017b2:	81a3      	strh	r3, [r4, #12]
 80017b4:	89a3      	ldrh	r3, [r4, #12]
 80017b6:	431d      	orrs	r5, r3
 80017b8:	81a5      	strh	r5, [r4, #12]
 80017ba:	e7cd      	b.n	8001758 <__smakebuf_r+0x18>
 80017bc:	080015ad 	.word	0x080015ad

080017c0 <_free_r>:
 80017c0:	b538      	push	{r3, r4, r5, lr}
 80017c2:	4605      	mov	r5, r0
 80017c4:	2900      	cmp	r1, #0
 80017c6:	d045      	beq.n	8001854 <_free_r+0x94>
 80017c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80017cc:	1f0c      	subs	r4, r1, #4
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	bfb8      	it	lt
 80017d2:	18e4      	addlt	r4, r4, r3
 80017d4:	f000 fc0c 	bl	8001ff0 <__malloc_lock>
 80017d8:	4a1f      	ldr	r2, [pc, #124]	; (8001858 <_free_r+0x98>)
 80017da:	6813      	ldr	r3, [r2, #0]
 80017dc:	4610      	mov	r0, r2
 80017de:	b933      	cbnz	r3, 80017ee <_free_r+0x2e>
 80017e0:	6063      	str	r3, [r4, #4]
 80017e2:	6014      	str	r4, [r2, #0]
 80017e4:	4628      	mov	r0, r5
 80017e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80017ea:	f000 bc02 	b.w	8001ff2 <__malloc_unlock>
 80017ee:	42a3      	cmp	r3, r4
 80017f0:	d90c      	bls.n	800180c <_free_r+0x4c>
 80017f2:	6821      	ldr	r1, [r4, #0]
 80017f4:	1862      	adds	r2, r4, r1
 80017f6:	4293      	cmp	r3, r2
 80017f8:	bf04      	itt	eq
 80017fa:	681a      	ldreq	r2, [r3, #0]
 80017fc:	685b      	ldreq	r3, [r3, #4]
 80017fe:	6063      	str	r3, [r4, #4]
 8001800:	bf04      	itt	eq
 8001802:	1852      	addeq	r2, r2, r1
 8001804:	6022      	streq	r2, [r4, #0]
 8001806:	6004      	str	r4, [r0, #0]
 8001808:	e7ec      	b.n	80017e4 <_free_r+0x24>
 800180a:	4613      	mov	r3, r2
 800180c:	685a      	ldr	r2, [r3, #4]
 800180e:	b10a      	cbz	r2, 8001814 <_free_r+0x54>
 8001810:	42a2      	cmp	r2, r4
 8001812:	d9fa      	bls.n	800180a <_free_r+0x4a>
 8001814:	6819      	ldr	r1, [r3, #0]
 8001816:	1858      	adds	r0, r3, r1
 8001818:	42a0      	cmp	r0, r4
 800181a:	d10b      	bne.n	8001834 <_free_r+0x74>
 800181c:	6820      	ldr	r0, [r4, #0]
 800181e:	4401      	add	r1, r0
 8001820:	1858      	adds	r0, r3, r1
 8001822:	4282      	cmp	r2, r0
 8001824:	6019      	str	r1, [r3, #0]
 8001826:	d1dd      	bne.n	80017e4 <_free_r+0x24>
 8001828:	6810      	ldr	r0, [r2, #0]
 800182a:	6852      	ldr	r2, [r2, #4]
 800182c:	605a      	str	r2, [r3, #4]
 800182e:	4401      	add	r1, r0
 8001830:	6019      	str	r1, [r3, #0]
 8001832:	e7d7      	b.n	80017e4 <_free_r+0x24>
 8001834:	d902      	bls.n	800183c <_free_r+0x7c>
 8001836:	230c      	movs	r3, #12
 8001838:	602b      	str	r3, [r5, #0]
 800183a:	e7d3      	b.n	80017e4 <_free_r+0x24>
 800183c:	6820      	ldr	r0, [r4, #0]
 800183e:	1821      	adds	r1, r4, r0
 8001840:	428a      	cmp	r2, r1
 8001842:	bf04      	itt	eq
 8001844:	6811      	ldreq	r1, [r2, #0]
 8001846:	6852      	ldreq	r2, [r2, #4]
 8001848:	6062      	str	r2, [r4, #4]
 800184a:	bf04      	itt	eq
 800184c:	1809      	addeq	r1, r1, r0
 800184e:	6021      	streq	r1, [r4, #0]
 8001850:	605c      	str	r4, [r3, #4]
 8001852:	e7c7      	b.n	80017e4 <_free_r+0x24>
 8001854:	bd38      	pop	{r3, r4, r5, pc}
 8001856:	bf00      	nop
 8001858:	2000008c 	.word	0x2000008c

0800185c <_malloc_r>:
 800185c:	b570      	push	{r4, r5, r6, lr}
 800185e:	1ccd      	adds	r5, r1, #3
 8001860:	f025 0503 	bic.w	r5, r5, #3
 8001864:	3508      	adds	r5, #8
 8001866:	2d0c      	cmp	r5, #12
 8001868:	bf38      	it	cc
 800186a:	250c      	movcc	r5, #12
 800186c:	2d00      	cmp	r5, #0
 800186e:	4606      	mov	r6, r0
 8001870:	db01      	blt.n	8001876 <_malloc_r+0x1a>
 8001872:	42a9      	cmp	r1, r5
 8001874:	d903      	bls.n	800187e <_malloc_r+0x22>
 8001876:	230c      	movs	r3, #12
 8001878:	6033      	str	r3, [r6, #0]
 800187a:	2000      	movs	r0, #0
 800187c:	bd70      	pop	{r4, r5, r6, pc}
 800187e:	f000 fbb7 	bl	8001ff0 <__malloc_lock>
 8001882:	4a21      	ldr	r2, [pc, #132]	; (8001908 <_malloc_r+0xac>)
 8001884:	6814      	ldr	r4, [r2, #0]
 8001886:	4621      	mov	r1, r4
 8001888:	b991      	cbnz	r1, 80018b0 <_malloc_r+0x54>
 800188a:	4c20      	ldr	r4, [pc, #128]	; (800190c <_malloc_r+0xb0>)
 800188c:	6823      	ldr	r3, [r4, #0]
 800188e:	b91b      	cbnz	r3, 8001898 <_malloc_r+0x3c>
 8001890:	4630      	mov	r0, r6
 8001892:	f000 fb03 	bl	8001e9c <_sbrk_r>
 8001896:	6020      	str	r0, [r4, #0]
 8001898:	4629      	mov	r1, r5
 800189a:	4630      	mov	r0, r6
 800189c:	f000 fafe 	bl	8001e9c <_sbrk_r>
 80018a0:	1c43      	adds	r3, r0, #1
 80018a2:	d124      	bne.n	80018ee <_malloc_r+0x92>
 80018a4:	230c      	movs	r3, #12
 80018a6:	6033      	str	r3, [r6, #0]
 80018a8:	4630      	mov	r0, r6
 80018aa:	f000 fba2 	bl	8001ff2 <__malloc_unlock>
 80018ae:	e7e4      	b.n	800187a <_malloc_r+0x1e>
 80018b0:	680b      	ldr	r3, [r1, #0]
 80018b2:	1b5b      	subs	r3, r3, r5
 80018b4:	d418      	bmi.n	80018e8 <_malloc_r+0x8c>
 80018b6:	2b0b      	cmp	r3, #11
 80018b8:	d90f      	bls.n	80018da <_malloc_r+0x7e>
 80018ba:	600b      	str	r3, [r1, #0]
 80018bc:	50cd      	str	r5, [r1, r3]
 80018be:	18cc      	adds	r4, r1, r3
 80018c0:	4630      	mov	r0, r6
 80018c2:	f000 fb96 	bl	8001ff2 <__malloc_unlock>
 80018c6:	f104 000b 	add.w	r0, r4, #11
 80018ca:	1d23      	adds	r3, r4, #4
 80018cc:	f020 0007 	bic.w	r0, r0, #7
 80018d0:	1ac3      	subs	r3, r0, r3
 80018d2:	d0d3      	beq.n	800187c <_malloc_r+0x20>
 80018d4:	425a      	negs	r2, r3
 80018d6:	50e2      	str	r2, [r4, r3]
 80018d8:	e7d0      	b.n	800187c <_malloc_r+0x20>
 80018da:	428c      	cmp	r4, r1
 80018dc:	684b      	ldr	r3, [r1, #4]
 80018de:	bf16      	itet	ne
 80018e0:	6063      	strne	r3, [r4, #4]
 80018e2:	6013      	streq	r3, [r2, #0]
 80018e4:	460c      	movne	r4, r1
 80018e6:	e7eb      	b.n	80018c0 <_malloc_r+0x64>
 80018e8:	460c      	mov	r4, r1
 80018ea:	6849      	ldr	r1, [r1, #4]
 80018ec:	e7cc      	b.n	8001888 <_malloc_r+0x2c>
 80018ee:	1cc4      	adds	r4, r0, #3
 80018f0:	f024 0403 	bic.w	r4, r4, #3
 80018f4:	42a0      	cmp	r0, r4
 80018f6:	d005      	beq.n	8001904 <_malloc_r+0xa8>
 80018f8:	1a21      	subs	r1, r4, r0
 80018fa:	4630      	mov	r0, r6
 80018fc:	f000 face 	bl	8001e9c <_sbrk_r>
 8001900:	3001      	adds	r0, #1
 8001902:	d0cf      	beq.n	80018a4 <_malloc_r+0x48>
 8001904:	6025      	str	r5, [r4, #0]
 8001906:	e7db      	b.n	80018c0 <_malloc_r+0x64>
 8001908:	2000008c 	.word	0x2000008c
 800190c:	20000090 	.word	0x20000090

08001910 <__sfputc_r>:
 8001910:	6893      	ldr	r3, [r2, #8]
 8001912:	3b01      	subs	r3, #1
 8001914:	2b00      	cmp	r3, #0
 8001916:	b410      	push	{r4}
 8001918:	6093      	str	r3, [r2, #8]
 800191a:	da07      	bge.n	800192c <__sfputc_r+0x1c>
 800191c:	6994      	ldr	r4, [r2, #24]
 800191e:	42a3      	cmp	r3, r4
 8001920:	db01      	blt.n	8001926 <__sfputc_r+0x16>
 8001922:	290a      	cmp	r1, #10
 8001924:	d102      	bne.n	800192c <__sfputc_r+0x1c>
 8001926:	bc10      	pop	{r4}
 8001928:	f7ff bcac 	b.w	8001284 <__swbuf_r>
 800192c:	6813      	ldr	r3, [r2, #0]
 800192e:	1c58      	adds	r0, r3, #1
 8001930:	6010      	str	r0, [r2, #0]
 8001932:	7019      	strb	r1, [r3, #0]
 8001934:	4608      	mov	r0, r1
 8001936:	bc10      	pop	{r4}
 8001938:	4770      	bx	lr

0800193a <__sfputs_r>:
 800193a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800193c:	4606      	mov	r6, r0
 800193e:	460f      	mov	r7, r1
 8001940:	4614      	mov	r4, r2
 8001942:	18d5      	adds	r5, r2, r3
 8001944:	42ac      	cmp	r4, r5
 8001946:	d101      	bne.n	800194c <__sfputs_r+0x12>
 8001948:	2000      	movs	r0, #0
 800194a:	e007      	b.n	800195c <__sfputs_r+0x22>
 800194c:	463a      	mov	r2, r7
 800194e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001952:	4630      	mov	r0, r6
 8001954:	f7ff ffdc 	bl	8001910 <__sfputc_r>
 8001958:	1c43      	adds	r3, r0, #1
 800195a:	d1f3      	bne.n	8001944 <__sfputs_r+0xa>
 800195c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001960 <_vfiprintf_r>:
 8001960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001964:	460c      	mov	r4, r1
 8001966:	b09d      	sub	sp, #116	; 0x74
 8001968:	4617      	mov	r7, r2
 800196a:	461d      	mov	r5, r3
 800196c:	4606      	mov	r6, r0
 800196e:	b118      	cbz	r0, 8001978 <_vfiprintf_r+0x18>
 8001970:	6983      	ldr	r3, [r0, #24]
 8001972:	b90b      	cbnz	r3, 8001978 <_vfiprintf_r+0x18>
 8001974:	f7ff fe36 	bl	80015e4 <__sinit>
 8001978:	4b7c      	ldr	r3, [pc, #496]	; (8001b6c <_vfiprintf_r+0x20c>)
 800197a:	429c      	cmp	r4, r3
 800197c:	d158      	bne.n	8001a30 <_vfiprintf_r+0xd0>
 800197e:	6874      	ldr	r4, [r6, #4]
 8001980:	89a3      	ldrh	r3, [r4, #12]
 8001982:	0718      	lsls	r0, r3, #28
 8001984:	d55e      	bpl.n	8001a44 <_vfiprintf_r+0xe4>
 8001986:	6923      	ldr	r3, [r4, #16]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d05b      	beq.n	8001a44 <_vfiprintf_r+0xe4>
 800198c:	2300      	movs	r3, #0
 800198e:	9309      	str	r3, [sp, #36]	; 0x24
 8001990:	2320      	movs	r3, #32
 8001992:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001996:	2330      	movs	r3, #48	; 0x30
 8001998:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800199c:	9503      	str	r5, [sp, #12]
 800199e:	f04f 0b01 	mov.w	fp, #1
 80019a2:	46b8      	mov	r8, r7
 80019a4:	4645      	mov	r5, r8
 80019a6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80019aa:	b10b      	cbz	r3, 80019b0 <_vfiprintf_r+0x50>
 80019ac:	2b25      	cmp	r3, #37	; 0x25
 80019ae:	d154      	bne.n	8001a5a <_vfiprintf_r+0xfa>
 80019b0:	ebb8 0a07 	subs.w	sl, r8, r7
 80019b4:	d00b      	beq.n	80019ce <_vfiprintf_r+0x6e>
 80019b6:	4653      	mov	r3, sl
 80019b8:	463a      	mov	r2, r7
 80019ba:	4621      	mov	r1, r4
 80019bc:	4630      	mov	r0, r6
 80019be:	f7ff ffbc 	bl	800193a <__sfputs_r>
 80019c2:	3001      	adds	r0, #1
 80019c4:	f000 80c2 	beq.w	8001b4c <_vfiprintf_r+0x1ec>
 80019c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80019ca:	4453      	add	r3, sl
 80019cc:	9309      	str	r3, [sp, #36]	; 0x24
 80019ce:	f898 3000 	ldrb.w	r3, [r8]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	f000 80ba 	beq.w	8001b4c <_vfiprintf_r+0x1ec>
 80019d8:	2300      	movs	r3, #0
 80019da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80019e2:	9304      	str	r3, [sp, #16]
 80019e4:	9307      	str	r3, [sp, #28]
 80019e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80019ea:	931a      	str	r3, [sp, #104]	; 0x68
 80019ec:	46a8      	mov	r8, r5
 80019ee:	2205      	movs	r2, #5
 80019f0:	f818 1b01 	ldrb.w	r1, [r8], #1
 80019f4:	485e      	ldr	r0, [pc, #376]	; (8001b70 <_vfiprintf_r+0x210>)
 80019f6:	f7fe fc13 	bl	8000220 <memchr>
 80019fa:	9b04      	ldr	r3, [sp, #16]
 80019fc:	bb78      	cbnz	r0, 8001a5e <_vfiprintf_r+0xfe>
 80019fe:	06d9      	lsls	r1, r3, #27
 8001a00:	bf44      	itt	mi
 8001a02:	2220      	movmi	r2, #32
 8001a04:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001a08:	071a      	lsls	r2, r3, #28
 8001a0a:	bf44      	itt	mi
 8001a0c:	222b      	movmi	r2, #43	; 0x2b
 8001a0e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001a12:	782a      	ldrb	r2, [r5, #0]
 8001a14:	2a2a      	cmp	r2, #42	; 0x2a
 8001a16:	d02a      	beq.n	8001a6e <_vfiprintf_r+0x10e>
 8001a18:	9a07      	ldr	r2, [sp, #28]
 8001a1a:	46a8      	mov	r8, r5
 8001a1c:	2000      	movs	r0, #0
 8001a1e:	250a      	movs	r5, #10
 8001a20:	4641      	mov	r1, r8
 8001a22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001a26:	3b30      	subs	r3, #48	; 0x30
 8001a28:	2b09      	cmp	r3, #9
 8001a2a:	d969      	bls.n	8001b00 <_vfiprintf_r+0x1a0>
 8001a2c:	b360      	cbz	r0, 8001a88 <_vfiprintf_r+0x128>
 8001a2e:	e024      	b.n	8001a7a <_vfiprintf_r+0x11a>
 8001a30:	4b50      	ldr	r3, [pc, #320]	; (8001b74 <_vfiprintf_r+0x214>)
 8001a32:	429c      	cmp	r4, r3
 8001a34:	d101      	bne.n	8001a3a <_vfiprintf_r+0xda>
 8001a36:	68b4      	ldr	r4, [r6, #8]
 8001a38:	e7a2      	b.n	8001980 <_vfiprintf_r+0x20>
 8001a3a:	4b4f      	ldr	r3, [pc, #316]	; (8001b78 <_vfiprintf_r+0x218>)
 8001a3c:	429c      	cmp	r4, r3
 8001a3e:	bf08      	it	eq
 8001a40:	68f4      	ldreq	r4, [r6, #12]
 8001a42:	e79d      	b.n	8001980 <_vfiprintf_r+0x20>
 8001a44:	4621      	mov	r1, r4
 8001a46:	4630      	mov	r0, r6
 8001a48:	f7ff fc6e 	bl	8001328 <__swsetup_r>
 8001a4c:	2800      	cmp	r0, #0
 8001a4e:	d09d      	beq.n	800198c <_vfiprintf_r+0x2c>
 8001a50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a54:	b01d      	add	sp, #116	; 0x74
 8001a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a5a:	46a8      	mov	r8, r5
 8001a5c:	e7a2      	b.n	80019a4 <_vfiprintf_r+0x44>
 8001a5e:	4a44      	ldr	r2, [pc, #272]	; (8001b70 <_vfiprintf_r+0x210>)
 8001a60:	1a80      	subs	r0, r0, r2
 8001a62:	fa0b f000 	lsl.w	r0, fp, r0
 8001a66:	4318      	orrs	r0, r3
 8001a68:	9004      	str	r0, [sp, #16]
 8001a6a:	4645      	mov	r5, r8
 8001a6c:	e7be      	b.n	80019ec <_vfiprintf_r+0x8c>
 8001a6e:	9a03      	ldr	r2, [sp, #12]
 8001a70:	1d11      	adds	r1, r2, #4
 8001a72:	6812      	ldr	r2, [r2, #0]
 8001a74:	9103      	str	r1, [sp, #12]
 8001a76:	2a00      	cmp	r2, #0
 8001a78:	db01      	blt.n	8001a7e <_vfiprintf_r+0x11e>
 8001a7a:	9207      	str	r2, [sp, #28]
 8001a7c:	e004      	b.n	8001a88 <_vfiprintf_r+0x128>
 8001a7e:	4252      	negs	r2, r2
 8001a80:	f043 0302 	orr.w	r3, r3, #2
 8001a84:	9207      	str	r2, [sp, #28]
 8001a86:	9304      	str	r3, [sp, #16]
 8001a88:	f898 3000 	ldrb.w	r3, [r8]
 8001a8c:	2b2e      	cmp	r3, #46	; 0x2e
 8001a8e:	d10e      	bne.n	8001aae <_vfiprintf_r+0x14e>
 8001a90:	f898 3001 	ldrb.w	r3, [r8, #1]
 8001a94:	2b2a      	cmp	r3, #42	; 0x2a
 8001a96:	d138      	bne.n	8001b0a <_vfiprintf_r+0x1aa>
 8001a98:	9b03      	ldr	r3, [sp, #12]
 8001a9a:	1d1a      	adds	r2, r3, #4
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	9203      	str	r2, [sp, #12]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	bfb8      	it	lt
 8001aa4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8001aa8:	f108 0802 	add.w	r8, r8, #2
 8001aac:	9305      	str	r3, [sp, #20]
 8001aae:	4d33      	ldr	r5, [pc, #204]	; (8001b7c <_vfiprintf_r+0x21c>)
 8001ab0:	f898 1000 	ldrb.w	r1, [r8]
 8001ab4:	2203      	movs	r2, #3
 8001ab6:	4628      	mov	r0, r5
 8001ab8:	f7fe fbb2 	bl	8000220 <memchr>
 8001abc:	b140      	cbz	r0, 8001ad0 <_vfiprintf_r+0x170>
 8001abe:	2340      	movs	r3, #64	; 0x40
 8001ac0:	1b40      	subs	r0, r0, r5
 8001ac2:	fa03 f000 	lsl.w	r0, r3, r0
 8001ac6:	9b04      	ldr	r3, [sp, #16]
 8001ac8:	4303      	orrs	r3, r0
 8001aca:	f108 0801 	add.w	r8, r8, #1
 8001ace:	9304      	str	r3, [sp, #16]
 8001ad0:	f898 1000 	ldrb.w	r1, [r8]
 8001ad4:	482a      	ldr	r0, [pc, #168]	; (8001b80 <_vfiprintf_r+0x220>)
 8001ad6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001ada:	2206      	movs	r2, #6
 8001adc:	f108 0701 	add.w	r7, r8, #1
 8001ae0:	f7fe fb9e 	bl	8000220 <memchr>
 8001ae4:	2800      	cmp	r0, #0
 8001ae6:	d037      	beq.n	8001b58 <_vfiprintf_r+0x1f8>
 8001ae8:	4b26      	ldr	r3, [pc, #152]	; (8001b84 <_vfiprintf_r+0x224>)
 8001aea:	bb1b      	cbnz	r3, 8001b34 <_vfiprintf_r+0x1d4>
 8001aec:	9b03      	ldr	r3, [sp, #12]
 8001aee:	3307      	adds	r3, #7
 8001af0:	f023 0307 	bic.w	r3, r3, #7
 8001af4:	3308      	adds	r3, #8
 8001af6:	9303      	str	r3, [sp, #12]
 8001af8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001afa:	444b      	add	r3, r9
 8001afc:	9309      	str	r3, [sp, #36]	; 0x24
 8001afe:	e750      	b.n	80019a2 <_vfiprintf_r+0x42>
 8001b00:	fb05 3202 	mla	r2, r5, r2, r3
 8001b04:	2001      	movs	r0, #1
 8001b06:	4688      	mov	r8, r1
 8001b08:	e78a      	b.n	8001a20 <_vfiprintf_r+0xc0>
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	f108 0801 	add.w	r8, r8, #1
 8001b10:	9305      	str	r3, [sp, #20]
 8001b12:	4619      	mov	r1, r3
 8001b14:	250a      	movs	r5, #10
 8001b16:	4640      	mov	r0, r8
 8001b18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001b1c:	3a30      	subs	r2, #48	; 0x30
 8001b1e:	2a09      	cmp	r2, #9
 8001b20:	d903      	bls.n	8001b2a <_vfiprintf_r+0x1ca>
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d0c3      	beq.n	8001aae <_vfiprintf_r+0x14e>
 8001b26:	9105      	str	r1, [sp, #20]
 8001b28:	e7c1      	b.n	8001aae <_vfiprintf_r+0x14e>
 8001b2a:	fb05 2101 	mla	r1, r5, r1, r2
 8001b2e:	2301      	movs	r3, #1
 8001b30:	4680      	mov	r8, r0
 8001b32:	e7f0      	b.n	8001b16 <_vfiprintf_r+0x1b6>
 8001b34:	ab03      	add	r3, sp, #12
 8001b36:	9300      	str	r3, [sp, #0]
 8001b38:	4622      	mov	r2, r4
 8001b3a:	4b13      	ldr	r3, [pc, #76]	; (8001b88 <_vfiprintf_r+0x228>)
 8001b3c:	a904      	add	r1, sp, #16
 8001b3e:	4630      	mov	r0, r6
 8001b40:	f3af 8000 	nop.w
 8001b44:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8001b48:	4681      	mov	r9, r0
 8001b4a:	d1d5      	bne.n	8001af8 <_vfiprintf_r+0x198>
 8001b4c:	89a3      	ldrh	r3, [r4, #12]
 8001b4e:	065b      	lsls	r3, r3, #25
 8001b50:	f53f af7e 	bmi.w	8001a50 <_vfiprintf_r+0xf0>
 8001b54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001b56:	e77d      	b.n	8001a54 <_vfiprintf_r+0xf4>
 8001b58:	ab03      	add	r3, sp, #12
 8001b5a:	9300      	str	r3, [sp, #0]
 8001b5c:	4622      	mov	r2, r4
 8001b5e:	4b0a      	ldr	r3, [pc, #40]	; (8001b88 <_vfiprintf_r+0x228>)
 8001b60:	a904      	add	r1, sp, #16
 8001b62:	4630      	mov	r0, r6
 8001b64:	f000 f888 	bl	8001c78 <_printf_i>
 8001b68:	e7ec      	b.n	8001b44 <_vfiprintf_r+0x1e4>
 8001b6a:	bf00      	nop
 8001b6c:	08002630 	.word	0x08002630
 8001b70:	08002670 	.word	0x08002670
 8001b74:	08002650 	.word	0x08002650
 8001b78:	08002610 	.word	0x08002610
 8001b7c:	08002676 	.word	0x08002676
 8001b80:	0800267a 	.word	0x0800267a
 8001b84:	00000000 	.word	0x00000000
 8001b88:	0800193b 	.word	0x0800193b

08001b8c <_printf_common>:
 8001b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b90:	4691      	mov	r9, r2
 8001b92:	461f      	mov	r7, r3
 8001b94:	688a      	ldr	r2, [r1, #8]
 8001b96:	690b      	ldr	r3, [r1, #16]
 8001b98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	bfb8      	it	lt
 8001ba0:	4613      	movlt	r3, r2
 8001ba2:	f8c9 3000 	str.w	r3, [r9]
 8001ba6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001baa:	4606      	mov	r6, r0
 8001bac:	460c      	mov	r4, r1
 8001bae:	b112      	cbz	r2, 8001bb6 <_printf_common+0x2a>
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	f8c9 3000 	str.w	r3, [r9]
 8001bb6:	6823      	ldr	r3, [r4, #0]
 8001bb8:	0699      	lsls	r1, r3, #26
 8001bba:	bf42      	ittt	mi
 8001bbc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001bc0:	3302      	addmi	r3, #2
 8001bc2:	f8c9 3000 	strmi.w	r3, [r9]
 8001bc6:	6825      	ldr	r5, [r4, #0]
 8001bc8:	f015 0506 	ands.w	r5, r5, #6
 8001bcc:	d107      	bne.n	8001bde <_printf_common+0x52>
 8001bce:	f104 0a19 	add.w	sl, r4, #25
 8001bd2:	68e3      	ldr	r3, [r4, #12]
 8001bd4:	f8d9 2000 	ldr.w	r2, [r9]
 8001bd8:	1a9b      	subs	r3, r3, r2
 8001bda:	42ab      	cmp	r3, r5
 8001bdc:	dc28      	bgt.n	8001c30 <_printf_common+0xa4>
 8001bde:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001be2:	6822      	ldr	r2, [r4, #0]
 8001be4:	3300      	adds	r3, #0
 8001be6:	bf18      	it	ne
 8001be8:	2301      	movne	r3, #1
 8001bea:	0692      	lsls	r2, r2, #26
 8001bec:	d42d      	bmi.n	8001c4a <_printf_common+0xbe>
 8001bee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001bf2:	4639      	mov	r1, r7
 8001bf4:	4630      	mov	r0, r6
 8001bf6:	47c0      	blx	r8
 8001bf8:	3001      	adds	r0, #1
 8001bfa:	d020      	beq.n	8001c3e <_printf_common+0xb2>
 8001bfc:	6823      	ldr	r3, [r4, #0]
 8001bfe:	68e5      	ldr	r5, [r4, #12]
 8001c00:	f8d9 2000 	ldr.w	r2, [r9]
 8001c04:	f003 0306 	and.w	r3, r3, #6
 8001c08:	2b04      	cmp	r3, #4
 8001c0a:	bf08      	it	eq
 8001c0c:	1aad      	subeq	r5, r5, r2
 8001c0e:	68a3      	ldr	r3, [r4, #8]
 8001c10:	6922      	ldr	r2, [r4, #16]
 8001c12:	bf0c      	ite	eq
 8001c14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001c18:	2500      	movne	r5, #0
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	bfc4      	itt	gt
 8001c1e:	1a9b      	subgt	r3, r3, r2
 8001c20:	18ed      	addgt	r5, r5, r3
 8001c22:	f04f 0900 	mov.w	r9, #0
 8001c26:	341a      	adds	r4, #26
 8001c28:	454d      	cmp	r5, r9
 8001c2a:	d11a      	bne.n	8001c62 <_printf_common+0xd6>
 8001c2c:	2000      	movs	r0, #0
 8001c2e:	e008      	b.n	8001c42 <_printf_common+0xb6>
 8001c30:	2301      	movs	r3, #1
 8001c32:	4652      	mov	r2, sl
 8001c34:	4639      	mov	r1, r7
 8001c36:	4630      	mov	r0, r6
 8001c38:	47c0      	blx	r8
 8001c3a:	3001      	adds	r0, #1
 8001c3c:	d103      	bne.n	8001c46 <_printf_common+0xba>
 8001c3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c46:	3501      	adds	r5, #1
 8001c48:	e7c3      	b.n	8001bd2 <_printf_common+0x46>
 8001c4a:	18e1      	adds	r1, r4, r3
 8001c4c:	1c5a      	adds	r2, r3, #1
 8001c4e:	2030      	movs	r0, #48	; 0x30
 8001c50:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001c54:	4422      	add	r2, r4
 8001c56:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001c5a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001c5e:	3302      	adds	r3, #2
 8001c60:	e7c5      	b.n	8001bee <_printf_common+0x62>
 8001c62:	2301      	movs	r3, #1
 8001c64:	4622      	mov	r2, r4
 8001c66:	4639      	mov	r1, r7
 8001c68:	4630      	mov	r0, r6
 8001c6a:	47c0      	blx	r8
 8001c6c:	3001      	adds	r0, #1
 8001c6e:	d0e6      	beq.n	8001c3e <_printf_common+0xb2>
 8001c70:	f109 0901 	add.w	r9, r9, #1
 8001c74:	e7d8      	b.n	8001c28 <_printf_common+0x9c>
	...

08001c78 <_printf_i>:
 8001c78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001c7c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8001c80:	460c      	mov	r4, r1
 8001c82:	7e09      	ldrb	r1, [r1, #24]
 8001c84:	b085      	sub	sp, #20
 8001c86:	296e      	cmp	r1, #110	; 0x6e
 8001c88:	4617      	mov	r7, r2
 8001c8a:	4606      	mov	r6, r0
 8001c8c:	4698      	mov	r8, r3
 8001c8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001c90:	f000 80b3 	beq.w	8001dfa <_printf_i+0x182>
 8001c94:	d822      	bhi.n	8001cdc <_printf_i+0x64>
 8001c96:	2963      	cmp	r1, #99	; 0x63
 8001c98:	d036      	beq.n	8001d08 <_printf_i+0x90>
 8001c9a:	d80a      	bhi.n	8001cb2 <_printf_i+0x3a>
 8001c9c:	2900      	cmp	r1, #0
 8001c9e:	f000 80b9 	beq.w	8001e14 <_printf_i+0x19c>
 8001ca2:	2958      	cmp	r1, #88	; 0x58
 8001ca4:	f000 8083 	beq.w	8001dae <_printf_i+0x136>
 8001ca8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001cac:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8001cb0:	e032      	b.n	8001d18 <_printf_i+0xa0>
 8001cb2:	2964      	cmp	r1, #100	; 0x64
 8001cb4:	d001      	beq.n	8001cba <_printf_i+0x42>
 8001cb6:	2969      	cmp	r1, #105	; 0x69
 8001cb8:	d1f6      	bne.n	8001ca8 <_printf_i+0x30>
 8001cba:	6820      	ldr	r0, [r4, #0]
 8001cbc:	6813      	ldr	r3, [r2, #0]
 8001cbe:	0605      	lsls	r5, r0, #24
 8001cc0:	f103 0104 	add.w	r1, r3, #4
 8001cc4:	d52a      	bpl.n	8001d1c <_printf_i+0xa4>
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	6011      	str	r1, [r2, #0]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	da03      	bge.n	8001cd6 <_printf_i+0x5e>
 8001cce:	222d      	movs	r2, #45	; 0x2d
 8001cd0:	425b      	negs	r3, r3
 8001cd2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001cd6:	486f      	ldr	r0, [pc, #444]	; (8001e94 <_printf_i+0x21c>)
 8001cd8:	220a      	movs	r2, #10
 8001cda:	e039      	b.n	8001d50 <_printf_i+0xd8>
 8001cdc:	2973      	cmp	r1, #115	; 0x73
 8001cde:	f000 809d 	beq.w	8001e1c <_printf_i+0x1a4>
 8001ce2:	d808      	bhi.n	8001cf6 <_printf_i+0x7e>
 8001ce4:	296f      	cmp	r1, #111	; 0x6f
 8001ce6:	d020      	beq.n	8001d2a <_printf_i+0xb2>
 8001ce8:	2970      	cmp	r1, #112	; 0x70
 8001cea:	d1dd      	bne.n	8001ca8 <_printf_i+0x30>
 8001cec:	6823      	ldr	r3, [r4, #0]
 8001cee:	f043 0320 	orr.w	r3, r3, #32
 8001cf2:	6023      	str	r3, [r4, #0]
 8001cf4:	e003      	b.n	8001cfe <_printf_i+0x86>
 8001cf6:	2975      	cmp	r1, #117	; 0x75
 8001cf8:	d017      	beq.n	8001d2a <_printf_i+0xb2>
 8001cfa:	2978      	cmp	r1, #120	; 0x78
 8001cfc:	d1d4      	bne.n	8001ca8 <_printf_i+0x30>
 8001cfe:	2378      	movs	r3, #120	; 0x78
 8001d00:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001d04:	4864      	ldr	r0, [pc, #400]	; (8001e98 <_printf_i+0x220>)
 8001d06:	e055      	b.n	8001db4 <_printf_i+0x13c>
 8001d08:	6813      	ldr	r3, [r2, #0]
 8001d0a:	1d19      	adds	r1, r3, #4
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	6011      	str	r1, [r2, #0]
 8001d10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001d14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e08c      	b.n	8001e36 <_printf_i+0x1be>
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	6011      	str	r1, [r2, #0]
 8001d20:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001d24:	bf18      	it	ne
 8001d26:	b21b      	sxthne	r3, r3
 8001d28:	e7cf      	b.n	8001cca <_printf_i+0x52>
 8001d2a:	6813      	ldr	r3, [r2, #0]
 8001d2c:	6825      	ldr	r5, [r4, #0]
 8001d2e:	1d18      	adds	r0, r3, #4
 8001d30:	6010      	str	r0, [r2, #0]
 8001d32:	0628      	lsls	r0, r5, #24
 8001d34:	d501      	bpl.n	8001d3a <_printf_i+0xc2>
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	e002      	b.n	8001d40 <_printf_i+0xc8>
 8001d3a:	0668      	lsls	r0, r5, #25
 8001d3c:	d5fb      	bpl.n	8001d36 <_printf_i+0xbe>
 8001d3e:	881b      	ldrh	r3, [r3, #0]
 8001d40:	4854      	ldr	r0, [pc, #336]	; (8001e94 <_printf_i+0x21c>)
 8001d42:	296f      	cmp	r1, #111	; 0x6f
 8001d44:	bf14      	ite	ne
 8001d46:	220a      	movne	r2, #10
 8001d48:	2208      	moveq	r2, #8
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001d50:	6865      	ldr	r5, [r4, #4]
 8001d52:	60a5      	str	r5, [r4, #8]
 8001d54:	2d00      	cmp	r5, #0
 8001d56:	f2c0 8095 	blt.w	8001e84 <_printf_i+0x20c>
 8001d5a:	6821      	ldr	r1, [r4, #0]
 8001d5c:	f021 0104 	bic.w	r1, r1, #4
 8001d60:	6021      	str	r1, [r4, #0]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d13d      	bne.n	8001de2 <_printf_i+0x16a>
 8001d66:	2d00      	cmp	r5, #0
 8001d68:	f040 808e 	bne.w	8001e88 <_printf_i+0x210>
 8001d6c:	4665      	mov	r5, ip
 8001d6e:	2a08      	cmp	r2, #8
 8001d70:	d10b      	bne.n	8001d8a <_printf_i+0x112>
 8001d72:	6823      	ldr	r3, [r4, #0]
 8001d74:	07db      	lsls	r3, r3, #31
 8001d76:	d508      	bpl.n	8001d8a <_printf_i+0x112>
 8001d78:	6923      	ldr	r3, [r4, #16]
 8001d7a:	6862      	ldr	r2, [r4, #4]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	bfde      	ittt	le
 8001d80:	2330      	movle	r3, #48	; 0x30
 8001d82:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001d86:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8001d8a:	ebac 0305 	sub.w	r3, ip, r5
 8001d8e:	6123      	str	r3, [r4, #16]
 8001d90:	f8cd 8000 	str.w	r8, [sp]
 8001d94:	463b      	mov	r3, r7
 8001d96:	aa03      	add	r2, sp, #12
 8001d98:	4621      	mov	r1, r4
 8001d9a:	4630      	mov	r0, r6
 8001d9c:	f7ff fef6 	bl	8001b8c <_printf_common>
 8001da0:	3001      	adds	r0, #1
 8001da2:	d14d      	bne.n	8001e40 <_printf_i+0x1c8>
 8001da4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001da8:	b005      	add	sp, #20
 8001daa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001dae:	4839      	ldr	r0, [pc, #228]	; (8001e94 <_printf_i+0x21c>)
 8001db0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8001db4:	6813      	ldr	r3, [r2, #0]
 8001db6:	6821      	ldr	r1, [r4, #0]
 8001db8:	1d1d      	adds	r5, r3, #4
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	6015      	str	r5, [r2, #0]
 8001dbe:	060a      	lsls	r2, r1, #24
 8001dc0:	d50b      	bpl.n	8001dda <_printf_i+0x162>
 8001dc2:	07ca      	lsls	r2, r1, #31
 8001dc4:	bf44      	itt	mi
 8001dc6:	f041 0120 	orrmi.w	r1, r1, #32
 8001dca:	6021      	strmi	r1, [r4, #0]
 8001dcc:	b91b      	cbnz	r3, 8001dd6 <_printf_i+0x15e>
 8001dce:	6822      	ldr	r2, [r4, #0]
 8001dd0:	f022 0220 	bic.w	r2, r2, #32
 8001dd4:	6022      	str	r2, [r4, #0]
 8001dd6:	2210      	movs	r2, #16
 8001dd8:	e7b7      	b.n	8001d4a <_printf_i+0xd2>
 8001dda:	064d      	lsls	r5, r1, #25
 8001ddc:	bf48      	it	mi
 8001dde:	b29b      	uxthmi	r3, r3
 8001de0:	e7ef      	b.n	8001dc2 <_printf_i+0x14a>
 8001de2:	4665      	mov	r5, ip
 8001de4:	fbb3 f1f2 	udiv	r1, r3, r2
 8001de8:	fb02 3311 	mls	r3, r2, r1, r3
 8001dec:	5cc3      	ldrb	r3, [r0, r3]
 8001dee:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001df2:	460b      	mov	r3, r1
 8001df4:	2900      	cmp	r1, #0
 8001df6:	d1f5      	bne.n	8001de4 <_printf_i+0x16c>
 8001df8:	e7b9      	b.n	8001d6e <_printf_i+0xf6>
 8001dfa:	6813      	ldr	r3, [r2, #0]
 8001dfc:	6825      	ldr	r5, [r4, #0]
 8001dfe:	6961      	ldr	r1, [r4, #20]
 8001e00:	1d18      	adds	r0, r3, #4
 8001e02:	6010      	str	r0, [r2, #0]
 8001e04:	0628      	lsls	r0, r5, #24
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	d501      	bpl.n	8001e0e <_printf_i+0x196>
 8001e0a:	6019      	str	r1, [r3, #0]
 8001e0c:	e002      	b.n	8001e14 <_printf_i+0x19c>
 8001e0e:	066a      	lsls	r2, r5, #25
 8001e10:	d5fb      	bpl.n	8001e0a <_printf_i+0x192>
 8001e12:	8019      	strh	r1, [r3, #0]
 8001e14:	2300      	movs	r3, #0
 8001e16:	6123      	str	r3, [r4, #16]
 8001e18:	4665      	mov	r5, ip
 8001e1a:	e7b9      	b.n	8001d90 <_printf_i+0x118>
 8001e1c:	6813      	ldr	r3, [r2, #0]
 8001e1e:	1d19      	adds	r1, r3, #4
 8001e20:	6011      	str	r1, [r2, #0]
 8001e22:	681d      	ldr	r5, [r3, #0]
 8001e24:	6862      	ldr	r2, [r4, #4]
 8001e26:	2100      	movs	r1, #0
 8001e28:	4628      	mov	r0, r5
 8001e2a:	f7fe f9f9 	bl	8000220 <memchr>
 8001e2e:	b108      	cbz	r0, 8001e34 <_printf_i+0x1bc>
 8001e30:	1b40      	subs	r0, r0, r5
 8001e32:	6060      	str	r0, [r4, #4]
 8001e34:	6863      	ldr	r3, [r4, #4]
 8001e36:	6123      	str	r3, [r4, #16]
 8001e38:	2300      	movs	r3, #0
 8001e3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001e3e:	e7a7      	b.n	8001d90 <_printf_i+0x118>
 8001e40:	6923      	ldr	r3, [r4, #16]
 8001e42:	462a      	mov	r2, r5
 8001e44:	4639      	mov	r1, r7
 8001e46:	4630      	mov	r0, r6
 8001e48:	47c0      	blx	r8
 8001e4a:	3001      	adds	r0, #1
 8001e4c:	d0aa      	beq.n	8001da4 <_printf_i+0x12c>
 8001e4e:	6823      	ldr	r3, [r4, #0]
 8001e50:	079b      	lsls	r3, r3, #30
 8001e52:	d413      	bmi.n	8001e7c <_printf_i+0x204>
 8001e54:	68e0      	ldr	r0, [r4, #12]
 8001e56:	9b03      	ldr	r3, [sp, #12]
 8001e58:	4298      	cmp	r0, r3
 8001e5a:	bfb8      	it	lt
 8001e5c:	4618      	movlt	r0, r3
 8001e5e:	e7a3      	b.n	8001da8 <_printf_i+0x130>
 8001e60:	2301      	movs	r3, #1
 8001e62:	464a      	mov	r2, r9
 8001e64:	4639      	mov	r1, r7
 8001e66:	4630      	mov	r0, r6
 8001e68:	47c0      	blx	r8
 8001e6a:	3001      	adds	r0, #1
 8001e6c:	d09a      	beq.n	8001da4 <_printf_i+0x12c>
 8001e6e:	3501      	adds	r5, #1
 8001e70:	68e3      	ldr	r3, [r4, #12]
 8001e72:	9a03      	ldr	r2, [sp, #12]
 8001e74:	1a9b      	subs	r3, r3, r2
 8001e76:	42ab      	cmp	r3, r5
 8001e78:	dcf2      	bgt.n	8001e60 <_printf_i+0x1e8>
 8001e7a:	e7eb      	b.n	8001e54 <_printf_i+0x1dc>
 8001e7c:	2500      	movs	r5, #0
 8001e7e:	f104 0919 	add.w	r9, r4, #25
 8001e82:	e7f5      	b.n	8001e70 <_printf_i+0x1f8>
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d1ac      	bne.n	8001de2 <_printf_i+0x16a>
 8001e88:	7803      	ldrb	r3, [r0, #0]
 8001e8a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001e8e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001e92:	e76c      	b.n	8001d6e <_printf_i+0xf6>
 8001e94:	08002681 	.word	0x08002681
 8001e98:	08002692 	.word	0x08002692

08001e9c <_sbrk_r>:
 8001e9c:	b538      	push	{r3, r4, r5, lr}
 8001e9e:	4c06      	ldr	r4, [pc, #24]	; (8001eb8 <_sbrk_r+0x1c>)
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	4605      	mov	r5, r0
 8001ea4:	4608      	mov	r0, r1
 8001ea6:	6023      	str	r3, [r4, #0]
 8001ea8:	f7fe fcb0 	bl	800080c <_sbrk>
 8001eac:	1c43      	adds	r3, r0, #1
 8001eae:	d102      	bne.n	8001eb6 <_sbrk_r+0x1a>
 8001eb0:	6823      	ldr	r3, [r4, #0]
 8001eb2:	b103      	cbz	r3, 8001eb6 <_sbrk_r+0x1a>
 8001eb4:	602b      	str	r3, [r5, #0]
 8001eb6:	bd38      	pop	{r3, r4, r5, pc}
 8001eb8:	20000140 	.word	0x20000140

08001ebc <__sread>:
 8001ebc:	b510      	push	{r4, lr}
 8001ebe:	460c      	mov	r4, r1
 8001ec0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ec4:	f000 f896 	bl	8001ff4 <_read_r>
 8001ec8:	2800      	cmp	r0, #0
 8001eca:	bfab      	itete	ge
 8001ecc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001ece:	89a3      	ldrhlt	r3, [r4, #12]
 8001ed0:	181b      	addge	r3, r3, r0
 8001ed2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001ed6:	bfac      	ite	ge
 8001ed8:	6563      	strge	r3, [r4, #84]	; 0x54
 8001eda:	81a3      	strhlt	r3, [r4, #12]
 8001edc:	bd10      	pop	{r4, pc}

08001ede <__swrite>:
 8001ede:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ee2:	461f      	mov	r7, r3
 8001ee4:	898b      	ldrh	r3, [r1, #12]
 8001ee6:	05db      	lsls	r3, r3, #23
 8001ee8:	4605      	mov	r5, r0
 8001eea:	460c      	mov	r4, r1
 8001eec:	4616      	mov	r6, r2
 8001eee:	d505      	bpl.n	8001efc <__swrite+0x1e>
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ef8:	f000 f868 	bl	8001fcc <_lseek_r>
 8001efc:	89a3      	ldrh	r3, [r4, #12]
 8001efe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001f02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f06:	81a3      	strh	r3, [r4, #12]
 8001f08:	4632      	mov	r2, r6
 8001f0a:	463b      	mov	r3, r7
 8001f0c:	4628      	mov	r0, r5
 8001f0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001f12:	f000 b817 	b.w	8001f44 <_write_r>

08001f16 <__sseek>:
 8001f16:	b510      	push	{r4, lr}
 8001f18:	460c      	mov	r4, r1
 8001f1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f1e:	f000 f855 	bl	8001fcc <_lseek_r>
 8001f22:	1c43      	adds	r3, r0, #1
 8001f24:	89a3      	ldrh	r3, [r4, #12]
 8001f26:	bf15      	itete	ne
 8001f28:	6560      	strne	r0, [r4, #84]	; 0x54
 8001f2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001f2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001f32:	81a3      	strheq	r3, [r4, #12]
 8001f34:	bf18      	it	ne
 8001f36:	81a3      	strhne	r3, [r4, #12]
 8001f38:	bd10      	pop	{r4, pc}

08001f3a <__sclose>:
 8001f3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f3e:	f000 b813 	b.w	8001f68 <_close_r>
	...

08001f44 <_write_r>:
 8001f44:	b538      	push	{r3, r4, r5, lr}
 8001f46:	4c07      	ldr	r4, [pc, #28]	; (8001f64 <_write_r+0x20>)
 8001f48:	4605      	mov	r5, r0
 8001f4a:	4608      	mov	r0, r1
 8001f4c:	4611      	mov	r1, r2
 8001f4e:	2200      	movs	r2, #0
 8001f50:	6022      	str	r2, [r4, #0]
 8001f52:	461a      	mov	r2, r3
 8001f54:	f000 f911 	bl	800217a <_write>
 8001f58:	1c43      	adds	r3, r0, #1
 8001f5a:	d102      	bne.n	8001f62 <_write_r+0x1e>
 8001f5c:	6823      	ldr	r3, [r4, #0]
 8001f5e:	b103      	cbz	r3, 8001f62 <_write_r+0x1e>
 8001f60:	602b      	str	r3, [r5, #0]
 8001f62:	bd38      	pop	{r3, r4, r5, pc}
 8001f64:	20000140 	.word	0x20000140

08001f68 <_close_r>:
 8001f68:	b538      	push	{r3, r4, r5, lr}
 8001f6a:	4c06      	ldr	r4, [pc, #24]	; (8001f84 <_close_r+0x1c>)
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	4605      	mov	r5, r0
 8001f70:	4608      	mov	r0, r1
 8001f72:	6023      	str	r3, [r4, #0]
 8001f74:	f000 f930 	bl	80021d8 <_close>
 8001f78:	1c43      	adds	r3, r0, #1
 8001f7a:	d102      	bne.n	8001f82 <_close_r+0x1a>
 8001f7c:	6823      	ldr	r3, [r4, #0]
 8001f7e:	b103      	cbz	r3, 8001f82 <_close_r+0x1a>
 8001f80:	602b      	str	r3, [r5, #0]
 8001f82:	bd38      	pop	{r3, r4, r5, pc}
 8001f84:	20000140 	.word	0x20000140

08001f88 <_fstat_r>:
 8001f88:	b538      	push	{r3, r4, r5, lr}
 8001f8a:	4c07      	ldr	r4, [pc, #28]	; (8001fa8 <_fstat_r+0x20>)
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	4605      	mov	r5, r0
 8001f90:	4608      	mov	r0, r1
 8001f92:	4611      	mov	r1, r2
 8001f94:	6023      	str	r3, [r4, #0]
 8001f96:	f000 f966 	bl	8002266 <_fstat>
 8001f9a:	1c43      	adds	r3, r0, #1
 8001f9c:	d102      	bne.n	8001fa4 <_fstat_r+0x1c>
 8001f9e:	6823      	ldr	r3, [r4, #0]
 8001fa0:	b103      	cbz	r3, 8001fa4 <_fstat_r+0x1c>
 8001fa2:	602b      	str	r3, [r5, #0]
 8001fa4:	bd38      	pop	{r3, r4, r5, pc}
 8001fa6:	bf00      	nop
 8001fa8:	20000140 	.word	0x20000140

08001fac <_isatty_r>:
 8001fac:	b538      	push	{r3, r4, r5, lr}
 8001fae:	4c06      	ldr	r4, [pc, #24]	; (8001fc8 <_isatty_r+0x1c>)
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	4605      	mov	r5, r0
 8001fb4:	4608      	mov	r0, r1
 8001fb6:	6023      	str	r3, [r4, #0]
 8001fb8:	f000 faba 	bl	8002530 <_isatty>
 8001fbc:	1c43      	adds	r3, r0, #1
 8001fbe:	d102      	bne.n	8001fc6 <_isatty_r+0x1a>
 8001fc0:	6823      	ldr	r3, [r4, #0]
 8001fc2:	b103      	cbz	r3, 8001fc6 <_isatty_r+0x1a>
 8001fc4:	602b      	str	r3, [r5, #0]
 8001fc6:	bd38      	pop	{r3, r4, r5, pc}
 8001fc8:	20000140 	.word	0x20000140

08001fcc <_lseek_r>:
 8001fcc:	b538      	push	{r3, r4, r5, lr}
 8001fce:	4c07      	ldr	r4, [pc, #28]	; (8001fec <_lseek_r+0x20>)
 8001fd0:	4605      	mov	r5, r0
 8001fd2:	4608      	mov	r0, r1
 8001fd4:	4611      	mov	r1, r2
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	6022      	str	r2, [r4, #0]
 8001fda:	461a      	mov	r2, r3
 8001fdc:	f000 f8bb 	bl	8002156 <_lseek>
 8001fe0:	1c43      	adds	r3, r0, #1
 8001fe2:	d102      	bne.n	8001fea <_lseek_r+0x1e>
 8001fe4:	6823      	ldr	r3, [r4, #0]
 8001fe6:	b103      	cbz	r3, 8001fea <_lseek_r+0x1e>
 8001fe8:	602b      	str	r3, [r5, #0]
 8001fea:	bd38      	pop	{r3, r4, r5, pc}
 8001fec:	20000140 	.word	0x20000140

08001ff0 <__malloc_lock>:
 8001ff0:	4770      	bx	lr

08001ff2 <__malloc_unlock>:
 8001ff2:	4770      	bx	lr

08001ff4 <_read_r>:
 8001ff4:	b538      	push	{r3, r4, r5, lr}
 8001ff6:	4c07      	ldr	r4, [pc, #28]	; (8002014 <_read_r+0x20>)
 8001ff8:	4605      	mov	r5, r0
 8001ffa:	4608      	mov	r0, r1
 8001ffc:	4611      	mov	r1, r2
 8001ffe:	2200      	movs	r2, #0
 8002000:	6022      	str	r2, [r4, #0]
 8002002:	461a      	mov	r2, r3
 8002004:	f000 f850 	bl	80020a8 <_read>
 8002008:	1c43      	adds	r3, r0, #1
 800200a:	d102      	bne.n	8002012 <_read_r+0x1e>
 800200c:	6823      	ldr	r3, [r4, #0]
 800200e:	b103      	cbz	r3, 8002012 <_read_r+0x1e>
 8002010:	602b      	str	r3, [r5, #0]
 8002012:	bd38      	pop	{r3, r4, r5, pc}
 8002014:	20000140 	.word	0x20000140

08002018 <findslot>:
 8002018:	4b0a      	ldr	r3, [pc, #40]	; (8002044 <findslot+0x2c>)
 800201a:	b510      	push	{r4, lr}
 800201c:	4604      	mov	r4, r0
 800201e:	6818      	ldr	r0, [r3, #0]
 8002020:	b118      	cbz	r0, 800202a <findslot+0x12>
 8002022:	6983      	ldr	r3, [r0, #24]
 8002024:	b90b      	cbnz	r3, 800202a <findslot+0x12>
 8002026:	f7ff fadd 	bl	80015e4 <__sinit>
 800202a:	2c13      	cmp	r4, #19
 800202c:	d807      	bhi.n	800203e <findslot+0x26>
 800202e:	4806      	ldr	r0, [pc, #24]	; (8002048 <findslot+0x30>)
 8002030:	f850 3034 	ldr.w	r3, [r0, r4, lsl #3]
 8002034:	3301      	adds	r3, #1
 8002036:	d002      	beq.n	800203e <findslot+0x26>
 8002038:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 800203c:	bd10      	pop	{r4, pc}
 800203e:	2000      	movs	r0, #0
 8002040:	e7fc      	b.n	800203c <findslot+0x24>
 8002042:	bf00      	nop
 8002044:	20000000 	.word	0x20000000
 8002048:	200000a0 	.word	0x200000a0

0800204c <checkerror>:
 800204c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800204e:	1c43      	adds	r3, r0, #1
 8002050:	4605      	mov	r5, r0
 8002052:	d109      	bne.n	8002068 <checkerror+0x1c>
 8002054:	f7ff f868 	bl	8001128 <__errno>
 8002058:	2413      	movs	r4, #19
 800205a:	4606      	mov	r6, r0
 800205c:	2700      	movs	r7, #0
 800205e:	4620      	mov	r0, r4
 8002060:	4639      	mov	r1, r7
 8002062:	beab      	bkpt	0x00ab
 8002064:	4604      	mov	r4, r0
 8002066:	6034      	str	r4, [r6, #0]
 8002068:	4628      	mov	r0, r5
 800206a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800206c <error>:
 800206c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800206e:	4605      	mov	r5, r0
 8002070:	f7ff f85a 	bl	8001128 <__errno>
 8002074:	2413      	movs	r4, #19
 8002076:	4606      	mov	r6, r0
 8002078:	2700      	movs	r7, #0
 800207a:	4620      	mov	r0, r4
 800207c:	4639      	mov	r1, r7
 800207e:	beab      	bkpt	0x00ab
 8002080:	4604      	mov	r4, r0
 8002082:	6034      	str	r4, [r6, #0]
 8002084:	4628      	mov	r0, r5
 8002086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002088 <_swiread>:
 8002088:	b530      	push	{r4, r5, lr}
 800208a:	b085      	sub	sp, #20
 800208c:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002090:	9203      	str	r2, [sp, #12]
 8002092:	2406      	movs	r4, #6
 8002094:	ad01      	add	r5, sp, #4
 8002096:	4620      	mov	r0, r4
 8002098:	4629      	mov	r1, r5
 800209a:	beab      	bkpt	0x00ab
 800209c:	4604      	mov	r4, r0
 800209e:	4620      	mov	r0, r4
 80020a0:	f7ff ffd4 	bl	800204c <checkerror>
 80020a4:	b005      	add	sp, #20
 80020a6:	bd30      	pop	{r4, r5, pc}

080020a8 <_read>:
 80020a8:	b570      	push	{r4, r5, r6, lr}
 80020aa:	460e      	mov	r6, r1
 80020ac:	4615      	mov	r5, r2
 80020ae:	f7ff ffb3 	bl	8002018 <findslot>
 80020b2:	4604      	mov	r4, r0
 80020b4:	b930      	cbnz	r0, 80020c4 <_read+0x1c>
 80020b6:	f7ff f837 	bl	8001128 <__errno>
 80020ba:	2309      	movs	r3, #9
 80020bc:	6003      	str	r3, [r0, #0]
 80020be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020c2:	bd70      	pop	{r4, r5, r6, pc}
 80020c4:	462a      	mov	r2, r5
 80020c6:	4631      	mov	r1, r6
 80020c8:	6800      	ldr	r0, [r0, #0]
 80020ca:	f7ff ffdd 	bl	8002088 <_swiread>
 80020ce:	1c43      	adds	r3, r0, #1
 80020d0:	bf1f      	itttt	ne
 80020d2:	6863      	ldrne	r3, [r4, #4]
 80020d4:	1a28      	subne	r0, r5, r0
 80020d6:	181b      	addne	r3, r3, r0
 80020d8:	6063      	strne	r3, [r4, #4]
 80020da:	e7f2      	b.n	80020c2 <_read+0x1a>

080020dc <_swilseek>:
 80020dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80020de:	460c      	mov	r4, r1
 80020e0:	4616      	mov	r6, r2
 80020e2:	f7ff ff99 	bl	8002018 <findslot>
 80020e6:	4605      	mov	r5, r0
 80020e8:	b940      	cbnz	r0, 80020fc <_swilseek+0x20>
 80020ea:	f7ff f81d 	bl	8001128 <__errno>
 80020ee:	2309      	movs	r3, #9
 80020f0:	6003      	str	r3, [r0, #0]
 80020f2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80020f6:	4620      	mov	r0, r4
 80020f8:	b003      	add	sp, #12
 80020fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020fc:	2e02      	cmp	r6, #2
 80020fe:	d903      	bls.n	8002108 <_swilseek+0x2c>
 8002100:	f7ff f812 	bl	8001128 <__errno>
 8002104:	2316      	movs	r3, #22
 8002106:	e7f3      	b.n	80020f0 <_swilseek+0x14>
 8002108:	2e01      	cmp	r6, #1
 800210a:	d112      	bne.n	8002132 <_swilseek+0x56>
 800210c:	6843      	ldr	r3, [r0, #4]
 800210e:	18e4      	adds	r4, r4, r3
 8002110:	d4f6      	bmi.n	8002100 <_swilseek+0x24>
 8002112:	682b      	ldr	r3, [r5, #0]
 8002114:	260a      	movs	r6, #10
 8002116:	e9cd 3400 	strd	r3, r4, [sp]
 800211a:	466f      	mov	r7, sp
 800211c:	4630      	mov	r0, r6
 800211e:	4639      	mov	r1, r7
 8002120:	beab      	bkpt	0x00ab
 8002122:	4606      	mov	r6, r0
 8002124:	4630      	mov	r0, r6
 8002126:	f7ff ff91 	bl	800204c <checkerror>
 800212a:	2800      	cmp	r0, #0
 800212c:	dbe1      	blt.n	80020f2 <_swilseek+0x16>
 800212e:	606c      	str	r4, [r5, #4]
 8002130:	e7e1      	b.n	80020f6 <_swilseek+0x1a>
 8002132:	2e02      	cmp	r6, #2
 8002134:	d1ed      	bne.n	8002112 <_swilseek+0x36>
 8002136:	af02      	add	r7, sp, #8
 8002138:	6803      	ldr	r3, [r0, #0]
 800213a:	f847 3d08 	str.w	r3, [r7, #-8]!
 800213e:	260c      	movs	r6, #12
 8002140:	4630      	mov	r0, r6
 8002142:	4639      	mov	r1, r7
 8002144:	beab      	bkpt	0x00ab
 8002146:	4606      	mov	r6, r0
 8002148:	4630      	mov	r0, r6
 800214a:	f7ff ff7f 	bl	800204c <checkerror>
 800214e:	1c43      	adds	r3, r0, #1
 8002150:	d0cf      	beq.n	80020f2 <_swilseek+0x16>
 8002152:	4404      	add	r4, r0
 8002154:	e7dd      	b.n	8002112 <_swilseek+0x36>

08002156 <_lseek>:
 8002156:	f7ff bfc1 	b.w	80020dc <_swilseek>

0800215a <_swiwrite>:
 800215a:	b530      	push	{r4, r5, lr}
 800215c:	b085      	sub	sp, #20
 800215e:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002162:	9203      	str	r2, [sp, #12]
 8002164:	2405      	movs	r4, #5
 8002166:	ad01      	add	r5, sp, #4
 8002168:	4620      	mov	r0, r4
 800216a:	4629      	mov	r1, r5
 800216c:	beab      	bkpt	0x00ab
 800216e:	4604      	mov	r4, r0
 8002170:	4620      	mov	r0, r4
 8002172:	f7ff ff6b 	bl	800204c <checkerror>
 8002176:	b005      	add	sp, #20
 8002178:	bd30      	pop	{r4, r5, pc}

0800217a <_write>:
 800217a:	b570      	push	{r4, r5, r6, lr}
 800217c:	460e      	mov	r6, r1
 800217e:	4615      	mov	r5, r2
 8002180:	f7ff ff4a 	bl	8002018 <findslot>
 8002184:	4604      	mov	r4, r0
 8002186:	b930      	cbnz	r0, 8002196 <_write+0x1c>
 8002188:	f7fe ffce 	bl	8001128 <__errno>
 800218c:	2309      	movs	r3, #9
 800218e:	6003      	str	r3, [r0, #0]
 8002190:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002194:	bd70      	pop	{r4, r5, r6, pc}
 8002196:	462a      	mov	r2, r5
 8002198:	4631      	mov	r1, r6
 800219a:	6800      	ldr	r0, [r0, #0]
 800219c:	f7ff ffdd 	bl	800215a <_swiwrite>
 80021a0:	1e02      	subs	r2, r0, #0
 80021a2:	dbf5      	blt.n	8002190 <_write+0x16>
 80021a4:	6863      	ldr	r3, [r4, #4]
 80021a6:	1aa8      	subs	r0, r5, r2
 80021a8:	4403      	add	r3, r0
 80021aa:	42aa      	cmp	r2, r5
 80021ac:	6063      	str	r3, [r4, #4]
 80021ae:	d1f1      	bne.n	8002194 <_write+0x1a>
 80021b0:	2000      	movs	r0, #0
 80021b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80021b6:	f7ff bf59 	b.w	800206c <error>

080021ba <_swiclose>:
 80021ba:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80021bc:	ad02      	add	r5, sp, #8
 80021be:	2402      	movs	r4, #2
 80021c0:	f845 0d04 	str.w	r0, [r5, #-4]!
 80021c4:	4620      	mov	r0, r4
 80021c6:	4629      	mov	r1, r5
 80021c8:	beab      	bkpt	0x00ab
 80021ca:	4604      	mov	r4, r0
 80021cc:	4620      	mov	r0, r4
 80021ce:	f7ff ff3d 	bl	800204c <checkerror>
 80021d2:	b003      	add	sp, #12
 80021d4:	bd30      	pop	{r4, r5, pc}
	...

080021d8 <_close>:
 80021d8:	b538      	push	{r3, r4, r5, lr}
 80021da:	4605      	mov	r5, r0
 80021dc:	f7ff ff1c 	bl	8002018 <findslot>
 80021e0:	4604      	mov	r4, r0
 80021e2:	b930      	cbnz	r0, 80021f2 <_close+0x1a>
 80021e4:	f7fe ffa0 	bl	8001128 <__errno>
 80021e8:	2309      	movs	r3, #9
 80021ea:	6003      	str	r3, [r0, #0]
 80021ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021f0:	bd38      	pop	{r3, r4, r5, pc}
 80021f2:	3d01      	subs	r5, #1
 80021f4:	2d01      	cmp	r5, #1
 80021f6:	d809      	bhi.n	800220c <_close+0x34>
 80021f8:	4b09      	ldr	r3, [pc, #36]	; (8002220 <_close+0x48>)
 80021fa:	689a      	ldr	r2, [r3, #8]
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	429a      	cmp	r2, r3
 8002200:	d104      	bne.n	800220c <_close+0x34>
 8002202:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002206:	6003      	str	r3, [r0, #0]
 8002208:	2000      	movs	r0, #0
 800220a:	e7f1      	b.n	80021f0 <_close+0x18>
 800220c:	6820      	ldr	r0, [r4, #0]
 800220e:	f7ff ffd4 	bl	80021ba <_swiclose>
 8002212:	2800      	cmp	r0, #0
 8002214:	d1ec      	bne.n	80021f0 <_close+0x18>
 8002216:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800221a:	6023      	str	r3, [r4, #0]
 800221c:	e7e8      	b.n	80021f0 <_close+0x18>
 800221e:	bf00      	nop
 8002220:	200000a0 	.word	0x200000a0

08002224 <_swistat>:
 8002224:	b570      	push	{r4, r5, r6, lr}
 8002226:	460c      	mov	r4, r1
 8002228:	f7ff fef6 	bl	8002018 <findslot>
 800222c:	4606      	mov	r6, r0
 800222e:	b930      	cbnz	r0, 800223e <_swistat+0x1a>
 8002230:	f7fe ff7a 	bl	8001128 <__errno>
 8002234:	2309      	movs	r3, #9
 8002236:	6003      	str	r3, [r0, #0]
 8002238:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800223c:	bd70      	pop	{r4, r5, r6, pc}
 800223e:	6863      	ldr	r3, [r4, #4]
 8002240:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002244:	6063      	str	r3, [r4, #4]
 8002246:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800224a:	6463      	str	r3, [r4, #68]	; 0x44
 800224c:	250c      	movs	r5, #12
 800224e:	4628      	mov	r0, r5
 8002250:	4631      	mov	r1, r6
 8002252:	beab      	bkpt	0x00ab
 8002254:	4605      	mov	r5, r0
 8002256:	4628      	mov	r0, r5
 8002258:	f7ff fef8 	bl	800204c <checkerror>
 800225c:	1c43      	adds	r3, r0, #1
 800225e:	bf1c      	itt	ne
 8002260:	6120      	strne	r0, [r4, #16]
 8002262:	2000      	movne	r0, #0
 8002264:	e7ea      	b.n	800223c <_swistat+0x18>

08002266 <_fstat>:
 8002266:	460b      	mov	r3, r1
 8002268:	b510      	push	{r4, lr}
 800226a:	2100      	movs	r1, #0
 800226c:	4604      	mov	r4, r0
 800226e:	2258      	movs	r2, #88	; 0x58
 8002270:	4618      	mov	r0, r3
 8002272:	f7fe ff83 	bl	800117c <memset>
 8002276:	4601      	mov	r1, r0
 8002278:	4620      	mov	r0, r4
 800227a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800227e:	f7ff bfd1 	b.w	8002224 <_swistat>

08002282 <_stat>:
 8002282:	b538      	push	{r3, r4, r5, lr}
 8002284:	460d      	mov	r5, r1
 8002286:	4604      	mov	r4, r0
 8002288:	2258      	movs	r2, #88	; 0x58
 800228a:	2100      	movs	r1, #0
 800228c:	4628      	mov	r0, r5
 800228e:	f7fe ff75 	bl	800117c <memset>
 8002292:	4620      	mov	r0, r4
 8002294:	2100      	movs	r1, #0
 8002296:	f000 f811 	bl	80022bc <_swiopen>
 800229a:	1c43      	adds	r3, r0, #1
 800229c:	4604      	mov	r4, r0
 800229e:	d00b      	beq.n	80022b8 <_stat+0x36>
 80022a0:	686b      	ldr	r3, [r5, #4]
 80022a2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80022a6:	606b      	str	r3, [r5, #4]
 80022a8:	4629      	mov	r1, r5
 80022aa:	f7ff ffbb 	bl	8002224 <_swistat>
 80022ae:	4605      	mov	r5, r0
 80022b0:	4620      	mov	r0, r4
 80022b2:	f7ff ff91 	bl	80021d8 <_close>
 80022b6:	462c      	mov	r4, r5
 80022b8:	4620      	mov	r0, r4
 80022ba:	bd38      	pop	{r3, r4, r5, pc}

080022bc <_swiopen>:
 80022bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80022c0:	4b2b      	ldr	r3, [pc, #172]	; (8002370 <_swiopen+0xb4>)
 80022c2:	b096      	sub	sp, #88	; 0x58
 80022c4:	4682      	mov	sl, r0
 80022c6:	460e      	mov	r6, r1
 80022c8:	2500      	movs	r5, #0
 80022ca:	4698      	mov	r8, r3
 80022cc:	f853 4035 	ldr.w	r4, [r3, r5, lsl #3]
 80022d0:	1c61      	adds	r1, r4, #1
 80022d2:	ea4f 07c5 	mov.w	r7, r5, lsl #3
 80022d6:	d036      	beq.n	8002346 <_swiopen+0x8a>
 80022d8:	3501      	adds	r5, #1
 80022da:	2d14      	cmp	r5, #20
 80022dc:	d1f6      	bne.n	80022cc <_swiopen+0x10>
 80022de:	f7fe ff23 	bl	8001128 <__errno>
 80022e2:	2318      	movs	r3, #24
 80022e4:	6003      	str	r3, [r0, #0]
 80022e6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80022ea:	e03c      	b.n	8002366 <_swiopen+0xaa>
 80022ec:	f3c6 4400 	ubfx	r4, r6, #16, #1
 80022f0:	f240 6301 	movw	r3, #1537	; 0x601
 80022f4:	07b2      	lsls	r2, r6, #30
 80022f6:	bf48      	it	mi
 80022f8:	f044 0402 	orrmi.w	r4, r4, #2
 80022fc:	421e      	tst	r6, r3
 80022fe:	bf18      	it	ne
 8002300:	f044 0404 	orrne.w	r4, r4, #4
 8002304:	0733      	lsls	r3, r6, #28
 8002306:	bf48      	it	mi
 8002308:	f024 0404 	bicmi.w	r4, r4, #4
 800230c:	4650      	mov	r0, sl
 800230e:	bf48      	it	mi
 8002310:	f044 0408 	orrmi.w	r4, r4, #8
 8002314:	f8cd a000 	str.w	sl, [sp]
 8002318:	f7fd ff7a 	bl	8000210 <strlen>
 800231c:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8002320:	2401      	movs	r4, #1
 8002322:	4620      	mov	r0, r4
 8002324:	4649      	mov	r1, r9
 8002326:	beab      	bkpt	0x00ab
 8002328:	4604      	mov	r4, r0
 800232a:	2c00      	cmp	r4, #0
 800232c:	db06      	blt.n	800233c <_swiopen+0x80>
 800232e:	4447      	add	r7, r8
 8002330:	2300      	movs	r3, #0
 8002332:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8002336:	607b      	str	r3, [r7, #4]
 8002338:	462c      	mov	r4, r5
 800233a:	e014      	b.n	8002366 <_swiopen+0xaa>
 800233c:	4620      	mov	r0, r4
 800233e:	f7ff fe95 	bl	800206c <error>
 8002342:	4604      	mov	r4, r0
 8002344:	e00f      	b.n	8002366 <_swiopen+0xaa>
 8002346:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 800234a:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800234e:	46e9      	mov	r9, sp
 8002350:	d1cc      	bne.n	80022ec <_swiopen+0x30>
 8002352:	4649      	mov	r1, r9
 8002354:	4650      	mov	r0, sl
 8002356:	f7ff ff94 	bl	8002282 <_stat>
 800235a:	3001      	adds	r0, #1
 800235c:	d0c6      	beq.n	80022ec <_swiopen+0x30>
 800235e:	f7fe fee3 	bl	8001128 <__errno>
 8002362:	2311      	movs	r3, #17
 8002364:	6003      	str	r3, [r0, #0]
 8002366:	4620      	mov	r0, r4
 8002368:	b016      	add	sp, #88	; 0x58
 800236a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800236e:	bf00      	nop
 8002370:	200000a0 	.word	0x200000a0

08002374 <_get_semihosting_exts>:
 8002374:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002378:	4607      	mov	r7, r0
 800237a:	4688      	mov	r8, r1
 800237c:	4829      	ldr	r0, [pc, #164]	; (8002424 <_get_semihosting_exts+0xb0>)
 800237e:	2100      	movs	r1, #0
 8002380:	4615      	mov	r5, r2
 8002382:	f7ff ff9b 	bl	80022bc <_swiopen>
 8002386:	462a      	mov	r2, r5
 8002388:	4604      	mov	r4, r0
 800238a:	2100      	movs	r1, #0
 800238c:	4638      	mov	r0, r7
 800238e:	f7fe fef5 	bl	800117c <memset>
 8002392:	1c63      	adds	r3, r4, #1
 8002394:	d015      	beq.n	80023c2 <_get_semihosting_exts+0x4e>
 8002396:	4620      	mov	r0, r4
 8002398:	f7ff fe3e 	bl	8002018 <findslot>
 800239c:	260c      	movs	r6, #12
 800239e:	4681      	mov	r9, r0
 80023a0:	4630      	mov	r0, r6
 80023a2:	4649      	mov	r1, r9
 80023a4:	beab      	bkpt	0x00ab
 80023a6:	4606      	mov	r6, r0
 80023a8:	4630      	mov	r0, r6
 80023aa:	f7ff fe4f 	bl	800204c <checkerror>
 80023ae:	2803      	cmp	r0, #3
 80023b0:	dd02      	ble.n	80023b8 <_get_semihosting_exts+0x44>
 80023b2:	3803      	subs	r0, #3
 80023b4:	42a8      	cmp	r0, r5
 80023b6:	dc08      	bgt.n	80023ca <_get_semihosting_exts+0x56>
 80023b8:	4620      	mov	r0, r4
 80023ba:	f7ff ff0d 	bl	80021d8 <_close>
 80023be:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80023c2:	4620      	mov	r0, r4
 80023c4:	b003      	add	sp, #12
 80023c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80023ca:	2204      	movs	r2, #4
 80023cc:	eb0d 0102 	add.w	r1, sp, r2
 80023d0:	4620      	mov	r0, r4
 80023d2:	f7ff fe69 	bl	80020a8 <_read>
 80023d6:	2803      	cmp	r0, #3
 80023d8:	ddee      	ble.n	80023b8 <_get_semihosting_exts+0x44>
 80023da:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80023de:	2b53      	cmp	r3, #83	; 0x53
 80023e0:	d1ea      	bne.n	80023b8 <_get_semihosting_exts+0x44>
 80023e2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80023e6:	2b48      	cmp	r3, #72	; 0x48
 80023e8:	d1e6      	bne.n	80023b8 <_get_semihosting_exts+0x44>
 80023ea:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80023ee:	2b46      	cmp	r3, #70	; 0x46
 80023f0:	d1e2      	bne.n	80023b8 <_get_semihosting_exts+0x44>
 80023f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80023f6:	2b42      	cmp	r3, #66	; 0x42
 80023f8:	d1de      	bne.n	80023b8 <_get_semihosting_exts+0x44>
 80023fa:	2201      	movs	r2, #1
 80023fc:	4641      	mov	r1, r8
 80023fe:	4620      	mov	r0, r4
 8002400:	f7ff fe6c 	bl	80020dc <_swilseek>
 8002404:	2800      	cmp	r0, #0
 8002406:	dbd7      	blt.n	80023b8 <_get_semihosting_exts+0x44>
 8002408:	462a      	mov	r2, r5
 800240a:	4639      	mov	r1, r7
 800240c:	4620      	mov	r0, r4
 800240e:	f7ff fe4b 	bl	80020a8 <_read>
 8002412:	4605      	mov	r5, r0
 8002414:	4620      	mov	r0, r4
 8002416:	f7ff fedf 	bl	80021d8 <_close>
 800241a:	4628      	mov	r0, r5
 800241c:	f7ff fe16 	bl	800204c <checkerror>
 8002420:	4604      	mov	r4, r0
 8002422:	e7ce      	b.n	80023c2 <_get_semihosting_exts+0x4e>
 8002424:	080026a3 	.word	0x080026a3

08002428 <initialise_semihosting_exts>:
 8002428:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800242a:	4d0a      	ldr	r5, [pc, #40]	; (8002454 <initialise_semihosting_exts+0x2c>)
 800242c:	4c0a      	ldr	r4, [pc, #40]	; (8002458 <initialise_semihosting_exts+0x30>)
 800242e:	2100      	movs	r1, #0
 8002430:	2201      	movs	r2, #1
 8002432:	a801      	add	r0, sp, #4
 8002434:	6029      	str	r1, [r5, #0]
 8002436:	6022      	str	r2, [r4, #0]
 8002438:	f7ff ff9c 	bl	8002374 <_get_semihosting_exts>
 800243c:	2800      	cmp	r0, #0
 800243e:	dd07      	ble.n	8002450 <initialise_semihosting_exts+0x28>
 8002440:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002444:	f003 0201 	and.w	r2, r3, #1
 8002448:	f003 0302 	and.w	r3, r3, #2
 800244c:	602a      	str	r2, [r5, #0]
 800244e:	6023      	str	r3, [r4, #0]
 8002450:	b003      	add	sp, #12
 8002452:	bd30      	pop	{r4, r5, pc}
 8002454:	20000064 	.word	0x20000064
 8002458:	20000068 	.word	0x20000068

0800245c <_has_ext_stdout_stderr>:
 800245c:	b510      	push	{r4, lr}
 800245e:	4c04      	ldr	r4, [pc, #16]	; (8002470 <_has_ext_stdout_stderr+0x14>)
 8002460:	6822      	ldr	r2, [r4, #0]
 8002462:	2a00      	cmp	r2, #0
 8002464:	da01      	bge.n	800246a <_has_ext_stdout_stderr+0xe>
 8002466:	f7ff ffdf 	bl	8002428 <initialise_semihosting_exts>
 800246a:	6820      	ldr	r0, [r4, #0]
 800246c:	bd10      	pop	{r4, pc}
 800246e:	bf00      	nop
 8002470:	20000068 	.word	0x20000068

08002474 <initialise_monitor_handles>:
 8002474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002478:	b085      	sub	sp, #20
 800247a:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 800252c <initialise_monitor_handles+0xb8>
 800247e:	f8cd 9004 	str.w	r9, [sp, #4]
 8002482:	2303      	movs	r3, #3
 8002484:	2400      	movs	r4, #0
 8002486:	9303      	str	r3, [sp, #12]
 8002488:	f10d 0804 	add.w	r8, sp, #4
 800248c:	9402      	str	r4, [sp, #8]
 800248e:	2501      	movs	r5, #1
 8002490:	4628      	mov	r0, r5
 8002492:	4641      	mov	r1, r8
 8002494:	beab      	bkpt	0x00ab
 8002496:	4605      	mov	r5, r0
 8002498:	4e20      	ldr	r6, [pc, #128]	; (800251c <initialise_monitor_handles+0xa8>)
 800249a:	4a21      	ldr	r2, [pc, #132]	; (8002520 <initialise_monitor_handles+0xac>)
 800249c:	6035      	str	r5, [r6, #0]
 800249e:	4623      	mov	r3, r4
 80024a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80024a4:	4614      	mov	r4, r2
 80024a6:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 80024aa:	3301      	adds	r3, #1
 80024ac:	2b14      	cmp	r3, #20
 80024ae:	d1fa      	bne.n	80024a6 <initialise_monitor_handles+0x32>
 80024b0:	f7ff ffd4 	bl	800245c <_has_ext_stdout_stderr>
 80024b4:	4d1b      	ldr	r5, [pc, #108]	; (8002524 <initialise_monitor_handles+0xb0>)
 80024b6:	b1d0      	cbz	r0, 80024ee <initialise_monitor_handles+0x7a>
 80024b8:	f04f 0a03 	mov.w	sl, #3
 80024bc:	2304      	movs	r3, #4
 80024be:	f8cd 9004 	str.w	r9, [sp, #4]
 80024c2:	2701      	movs	r7, #1
 80024c4:	f8cd a00c 	str.w	sl, [sp, #12]
 80024c8:	9302      	str	r3, [sp, #8]
 80024ca:	4638      	mov	r0, r7
 80024cc:	4641      	mov	r1, r8
 80024ce:	beab      	bkpt	0x00ab
 80024d0:	4683      	mov	fp, r0
 80024d2:	4b15      	ldr	r3, [pc, #84]	; (8002528 <initialise_monitor_handles+0xb4>)
 80024d4:	f8cd 9004 	str.w	r9, [sp, #4]
 80024d8:	f8c3 b000 	str.w	fp, [r3]
 80024dc:	2308      	movs	r3, #8
 80024de:	f8cd a00c 	str.w	sl, [sp, #12]
 80024e2:	9302      	str	r3, [sp, #8]
 80024e4:	4638      	mov	r0, r7
 80024e6:	4641      	mov	r1, r8
 80024e8:	beab      	bkpt	0x00ab
 80024ea:	4607      	mov	r7, r0
 80024ec:	602f      	str	r7, [r5, #0]
 80024ee:	682b      	ldr	r3, [r5, #0]
 80024f0:	3301      	adds	r3, #1
 80024f2:	bf02      	ittt	eq
 80024f4:	4b0c      	ldreq	r3, [pc, #48]	; (8002528 <initialise_monitor_handles+0xb4>)
 80024f6:	681b      	ldreq	r3, [r3, #0]
 80024f8:	602b      	streq	r3, [r5, #0]
 80024fa:	6833      	ldr	r3, [r6, #0]
 80024fc:	6023      	str	r3, [r4, #0]
 80024fe:	2600      	movs	r6, #0
 8002500:	6066      	str	r6, [r4, #4]
 8002502:	f7ff ffab 	bl	800245c <_has_ext_stdout_stderr>
 8002506:	b130      	cbz	r0, 8002516 <initialise_monitor_handles+0xa2>
 8002508:	4b07      	ldr	r3, [pc, #28]	; (8002528 <initialise_monitor_handles+0xb4>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8002510:	682b      	ldr	r3, [r5, #0]
 8002512:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8002516:	b005      	add	sp, #20
 8002518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800251c:	20000098 	.word	0x20000098
 8002520:	200000a0 	.word	0x200000a0
 8002524:	20000094 	.word	0x20000094
 8002528:	2000009c 	.word	0x2000009c
 800252c:	080026b9 	.word	0x080026b9

08002530 <_isatty>:
 8002530:	b570      	push	{r4, r5, r6, lr}
 8002532:	f7ff fd71 	bl	8002018 <findslot>
 8002536:	2509      	movs	r5, #9
 8002538:	4604      	mov	r4, r0
 800253a:	b920      	cbnz	r0, 8002546 <_isatty+0x16>
 800253c:	f7fe fdf4 	bl	8001128 <__errno>
 8002540:	6005      	str	r5, [r0, #0]
 8002542:	4620      	mov	r0, r4
 8002544:	bd70      	pop	{r4, r5, r6, pc}
 8002546:	4628      	mov	r0, r5
 8002548:	4621      	mov	r1, r4
 800254a:	beab      	bkpt	0x00ab
 800254c:	4604      	mov	r4, r0
 800254e:	2c01      	cmp	r4, #1
 8002550:	d0f7      	beq.n	8002542 <_isatty+0x12>
 8002552:	f7fe fde9 	bl	8001128 <__errno>
 8002556:	2400      	movs	r4, #0
 8002558:	4606      	mov	r6, r0
 800255a:	2513      	movs	r5, #19
 800255c:	4628      	mov	r0, r5
 800255e:	4621      	mov	r1, r4
 8002560:	beab      	bkpt	0x00ab
 8002562:	4605      	mov	r5, r0
 8002564:	6035      	str	r5, [r6, #0]
 8002566:	e7ec      	b.n	8002542 <_isatty+0x12>

08002568 <_init>:
 8002568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800256a:	bf00      	nop
 800256c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800256e:	bc08      	pop	{r3}
 8002570:	469e      	mov	lr, r3
 8002572:	4770      	bx	lr

08002574 <_fini>:
 8002574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002576:	bf00      	nop
 8002578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800257a:	bc08      	pop	{r3}
 800257c:	469e      	mov	lr, r3
 800257e:	4770      	bx	lr
