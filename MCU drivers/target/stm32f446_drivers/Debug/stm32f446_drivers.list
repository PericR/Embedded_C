
stm32f446_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000aa4  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000c68  08000c68  00010c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000c80  08000c80  00010c88  2**0
                  CONTENTS
  4 .ARM          00000000  08000c80  08000c80  00010c88  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000c80  08000c88  00010c88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c80  08000c80  00010c80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000c84  08000c84  00010c84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010c88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000c88  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000c88  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00010c88  2**0
                  CONTENTS, READONLY
 12 .debug_info   000018cb  00000000  00000000  00010cb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000044c  00000000  00000000  0001257d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000130  00000000  00000000  000129d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000f8  00000000  00000000  00012b00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002121  00000000  00000000  00012bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001187  00000000  00000000  00014d19  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00009102  00000000  00000000  00015ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0001efa2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000408  00000000  00000000  0001f020  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000c50 	.word	0x08000c50

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000c50 	.word	0x08000c50

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <delay>:
 */

#include "string.h"
#include "stm32f446.h"

void delay(void){
 8000214:	b480      	push	{r7}
 8000216:	b083      	sub	sp, #12
 8000218:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < 500000; i++);
 800021a:	2300      	movs	r3, #0
 800021c:	607b      	str	r3, [r7, #4]
 800021e:	e002      	b.n	8000226 <delay+0x12>
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	3301      	adds	r3, #1
 8000224:	607b      	str	r3, [r7, #4]
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	4a03      	ldr	r2, [pc, #12]	; (8000238 <delay+0x24>)
 800022a:	4293      	cmp	r3, r2
 800022c:	d9f8      	bls.n	8000220 <delay+0xc>
}
 800022e:	bf00      	nop
 8000230:	370c      	adds	r7, #12
 8000232:	46bd      	mov	sp, r7
 8000234:	bc80      	pop	{r7}
 8000236:	4770      	bx	lr
 8000238:	0007a11f 	.word	0x0007a11f

0800023c <SPI2_GPIO_Inits>:

void SPI2_GPIO_Inits(void){
 800023c:	b580      	push	{r7, lr}
 800023e:	b084      	sub	sp, #16
 8000240:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPI_Pins;
	SPI_Pins.pGPIOx = GPIOB;
 8000242:	4b13      	ldr	r3, [pc, #76]	; (8000290 <SPI2_GPIO_Inits+0x54>)
 8000244:	607b      	str	r3, [r7, #4]

	SPI_Pins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000246:	2302      	movs	r3, #2
 8000248:	727b      	strb	r3, [r7, #9]
	SPI_Pins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 800024a:	2305      	movs	r3, #5
 800024c:	737b      	strb	r3, [r7, #13]
	SPI_Pins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800024e:	2300      	movs	r3, #0
 8000250:	733b      	strb	r3, [r7, #12]
	SPI_Pins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PU;
 8000252:	2301      	movs	r3, #1
 8000254:	72fb      	strb	r3, [r7, #11]
	SPI_Pins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OP_SPEED_FAST;
 8000256:	2302      	movs	r3, #2
 8000258:	72bb      	strb	r3, [r7, #10]

	//GPIOB PCLK enable
	GPIO_PeriClockControl(SPI_Pins.pGPIOx, ENABLE);
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	2101      	movs	r1, #1
 800025e:	4618      	mov	r0, r3
 8000260:	f000 f8d0 	bl	8000404 <GPIO_PeriClockControl>

	//SCLK
	SPI_Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000264:	230d      	movs	r3, #13
 8000266:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPI_Pins);
 8000268:	1d3b      	adds	r3, r7, #4
 800026a:	4618      	mov	r0, r3
 800026c:	f000 f99c 	bl	80005a8 <GPIO_Init>
	//MISO
	//SPI_Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
	//GPIO_Init(&SPI_Pins);

	//MOSI
	SPI_Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 8000270:	230f      	movs	r3, #15
 8000272:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPI_Pins);
 8000274:	1d3b      	adds	r3, r7, #4
 8000276:	4618      	mov	r0, r3
 8000278:	f000 f996 	bl	80005a8 <GPIO_Init>

	//NSS
	SPI_Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 800027c:	230c      	movs	r3, #12
 800027e:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPI_Pins);
 8000280:	1d3b      	adds	r3, r7, #4
 8000282:	4618      	mov	r0, r3
 8000284:	f000 f990 	bl	80005a8 <GPIO_Init>
}
 8000288:	bf00      	nop
 800028a:	3710      	adds	r7, #16
 800028c:	46bd      	mov	sp, r7
 800028e:	bd80      	pop	{r7, pc}
 8000290:	40020400 	.word	0x40020400

08000294 <SPI2_Inits>:

void SPI2_Inits(void){
 8000294:	b580      	push	{r7, lr}
 8000296:	b084      	sub	sp, #16
 8000298:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2_Handle;
	SPI2_Handle.pSPIx = SPI2;
 800029a:	4b0e      	ldr	r3, [pc, #56]	; (80002d4 <SPI2_Inits+0x40>)
 800029c:	607b      	str	r3, [r7, #4]

	SPI2_Handle.SPI_Config.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 800029e:	2301      	movs	r3, #1
 80002a0:	727b      	strb	r3, [r7, #9]
	SPI2_Handle.SPI_Config.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 80002a2:	2301      	movs	r3, #1
 80002a4:	723b      	strb	r3, [r7, #8]
	SPI2_Handle.SPI_Config.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV8;			//Generate SCLK of 2MHz
 80002a6:	2302      	movs	r3, #2
 80002a8:	72bb      	strb	r3, [r7, #10]
	SPI2_Handle.SPI_Config.SPI_DFF = SPI_DFF_8BITS;
 80002aa:	2300      	movs	r3, #0
 80002ac:	72fb      	strb	r3, [r7, #11]
	SPI2_Handle.SPI_Config.SPI_CPOL = SPI_CPOL_LOW;
 80002ae:	2300      	movs	r3, #0
 80002b0:	733b      	strb	r3, [r7, #12]
	SPI2_Handle.SPI_Config.SPI_CPHA = SPI_CPHA_LOW;
 80002b2:	2300      	movs	r3, #0
 80002b4:	737b      	strb	r3, [r7, #13]
	SPI2_Handle.SPI_Config.SPI_SSM = SPI_SSM_DI;						//Hardware slave management enabled
 80002b6:	2300      	movs	r3, #0
 80002b8:	73bb      	strb	r3, [r7, #14]

	SPI_PeriClockControl(SPI2_Handle.pSPIx, ENABLE);
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	2101      	movs	r1, #1
 80002be:	4618      	mov	r0, r3
 80002c0:	f000 fb5a 	bl	8000978 <SPI_PeriClockControl>

	SPI_Init(&SPI2_Handle);
 80002c4:	1d3b      	adds	r3, r7, #4
 80002c6:	4618      	mov	r0, r3
 80002c8:	f000 fbc8 	bl	8000a5c <SPI_Init>
}
 80002cc:	bf00      	nop
 80002ce:	3710      	adds	r7, #16
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	40003800 	.word	0x40003800

080002d8 <GPIO_Button_Init>:

void GPIO_Button_Init(){
 80002d8:	b580      	push	{r7, lr}
 80002da:	b084      	sub	sp, #16
 80002dc:	af00      	add	r7, sp, #0
	GPIO_Handle_t gpioc_button;
	gpioc_button.pGPIOx = GPIOC;
 80002de:	4b09      	ldr	r3, [pc, #36]	; (8000304 <GPIO_Button_Init+0x2c>)
 80002e0:	607b      	str	r3, [r7, #4]

	gpioc_button.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 80002e2:	230d      	movs	r3, #13
 80002e4:	723b      	strb	r3, [r7, #8]
	gpioc_button.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 80002e6:	2300      	movs	r3, #0
 80002e8:	727b      	strb	r3, [r7, #9]

	GPIO_PeriClockControl(gpioc_button.pGPIOx, ENABLE);
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	2101      	movs	r1, #1
 80002ee:	4618      	mov	r0, r3
 80002f0:	f000 f888 	bl	8000404 <GPIO_PeriClockControl>
	GPIO_Init(&gpioc_button);
 80002f4:	1d3b      	adds	r3, r7, #4
 80002f6:	4618      	mov	r0, r3
 80002f8:	f000 f956 	bl	80005a8 <GPIO_Init>
}
 80002fc:	bf00      	nop
 80002fe:	3710      	adds	r7, #16
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}
 8000304:	40020800 	.word	0x40020800

08000308 <main>:

int main(void)
{
 8000308:	b5b0      	push	{r4, r5, r7, lr}
 800030a:	b088      	sub	sp, #32
 800030c:	af00      	add	r7, sp, #0
	char userData[] = "Hello Debeli Kume :P";
 800030e:	4b25      	ldr	r3, [pc, #148]	; (80003a4 <main+0x9c>)
 8000310:	f107 0408 	add.w	r4, r7, #8
 8000314:	461d      	mov	r5, r3
 8000316:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000318:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800031a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800031e:	6020      	str	r0, [r4, #0]
 8000320:	3404      	adds	r4, #4
 8000322:	7021      	strb	r1, [r4, #0]

	//Initialize GPIO pins to behave as SPI pins
	SPI2_GPIO_Inits();
 8000324:	f7ff ff8a 	bl	800023c <SPI2_GPIO_Inits>

	GPIO_Button_Init();
 8000328:	f7ff ffd6 	bl	80002d8 <GPIO_Button_Init>

	SPI2_Inits();
 800032c:	f7ff ffb2 	bl	8000294 <SPI2_Inits>

	/*
	 * Enabling SSOE makes NSS automatically managed by hardware
	 * Which means that enabling SPI peripheral will make NSS 0, and disabling will make it 1
	 */
	SPI_SSOE_Config(SPI2, ENABLE);
 8000330:	2101      	movs	r1, #1
 8000332:	481d      	ldr	r0, [pc, #116]	; (80003a8 <main+0xa0>)
 8000334:	f000 fc4c 	bl	8000bd0 <SPI_SSOE_Config>

	while(1){
		while(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13)){};
 8000338:	bf00      	nop
 800033a:	210d      	movs	r1, #13
 800033c:	481b      	ldr	r0, [pc, #108]	; (80003ac <main+0xa4>)
 800033e:	f000 fb05 	bl	800094c <GPIO_ReadFromInputPin>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	d1f8      	bne.n	800033a <main+0x32>
			//Enable SPI peripheral
			SPI_PeripheralControl(SPI2, ENABLE);
 8000348:	2101      	movs	r1, #1
 800034a:	4817      	ldr	r0, [pc, #92]	; (80003a8 <main+0xa0>)
 800034c:	f000 fc25 	bl	8000b9a <SPI_PeripheralControl>

			//first send length of data
			uint8_t data_length = strlen(userData);
 8000350:	f107 0308 	add.w	r3, r7, #8
 8000354:	4618      	mov	r0, r3
 8000356:	f7ff ff55 	bl	8000204 <strlen>
 800035a:	4603      	mov	r3, r0
 800035c:	b2db      	uxtb	r3, r3
 800035e:	71fb      	strb	r3, [r7, #7]
			SPI_SendData(SPI2, &data_length, 1);
 8000360:	1dfb      	adds	r3, r7, #7
 8000362:	2201      	movs	r2, #1
 8000364:	4619      	mov	r1, r3
 8000366:	4810      	ldr	r0, [pc, #64]	; (80003a8 <main+0xa0>)
 8000368:	f000 fbe1 	bl	8000b2e <SPI_SendData>

			SPI_SendData(SPI2, (uint8_t*)userData, strlen(userData));
 800036c:	f107 0308 	add.w	r3, r7, #8
 8000370:	4618      	mov	r0, r3
 8000372:	f7ff ff47 	bl	8000204 <strlen>
 8000376:	4602      	mov	r2, r0
 8000378:	f107 0308 	add.w	r3, r7, #8
 800037c:	4619      	mov	r1, r3
 800037e:	480a      	ldr	r0, [pc, #40]	; (80003a8 <main+0xa0>)
 8000380:	f000 fbd5 	bl	8000b2e <SPI_SendData>

			//check till SPI is finished with transmission
			while(SPI_GetFlagStatus(SPI2, SPI_BSY_FLAG)){};
 8000384:	bf00      	nop
 8000386:	2180      	movs	r1, #128	; 0x80
 8000388:	4807      	ldr	r0, [pc, #28]	; (80003a8 <main+0xa0>)
 800038a:	f000 fbbd 	bl	8000b08 <SPI_GetFlagStatus>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d1f8      	bne.n	8000386 <main+0x7e>

			SPI_PeripheralControl(SPI2, DISABLE);
 8000394:	2100      	movs	r1, #0
 8000396:	4804      	ldr	r0, [pc, #16]	; (80003a8 <main+0xa0>)
 8000398:	f000 fbff 	bl	8000b9a <SPI_PeripheralControl>
			delay();
 800039c:	f7ff ff3a 	bl	8000214 <delay>
	while(1){
 80003a0:	e7ca      	b.n	8000338 <main+0x30>
 80003a2:	bf00      	nop
 80003a4:	08000c68 	.word	0x08000c68
 80003a8:	40003800 	.word	0x40003800
 80003ac:	40020800 	.word	0x40020800

080003b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003b0:	480d      	ldr	r0, [pc, #52]	; (80003e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003b2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003b4:	480d      	ldr	r0, [pc, #52]	; (80003ec <LoopForever+0x6>)
  ldr r1, =_edata
 80003b6:	490e      	ldr	r1, [pc, #56]	; (80003f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003b8:	4a0e      	ldr	r2, [pc, #56]	; (80003f4 <LoopForever+0xe>)
  movs r3, #0
 80003ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003bc:	e002      	b.n	80003c4 <LoopCopyDataInit>

080003be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003c2:	3304      	adds	r3, #4

080003c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003c8:	d3f9      	bcc.n	80003be <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ca:	4a0b      	ldr	r2, [pc, #44]	; (80003f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003cc:	4c0b      	ldr	r4, [pc, #44]	; (80003fc <LoopForever+0x16>)
  movs r3, #0
 80003ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003d0:	e001      	b.n	80003d6 <LoopFillZerobss>

080003d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003d4:	3204      	adds	r2, #4

080003d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003d8:	d3fb      	bcc.n	80003d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80003da:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 80003de:	f000 fc13 	bl	8000c08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003e2:	f7ff ff91 	bl	8000308 <main>

080003e6 <LoopForever>:

LoopForever:
    b LoopForever
 80003e6:	e7fe      	b.n	80003e6 <LoopForever>
  ldr   r0, =_estack
 80003e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003f0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003f4:	08000c88 	.word	0x08000c88
  ldr r2, =_sbss
 80003f8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003fc:	2000001c 	.word	0x2000001c

08000400 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000400:	e7fe      	b.n	8000400 <ADC_IRQHandler>
	...

08000404 <GPIO_PeriClockControl>:
 * @return				- none
 *
 * @note				- none
 *
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
 8000404:	b480      	push	{r7}
 8000406:	b083      	sub	sp, #12
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
 800040c:	460b      	mov	r3, r1
 800040e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8000410:	78fb      	ldrb	r3, [r7, #3]
 8000412:	2b01      	cmp	r3, #1
 8000414:	d157      	bne.n	80004c6 <GPIO_PeriClockControl+0xc2>
		if(pGPIOx == GPIOA){
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	4a5a      	ldr	r2, [pc, #360]	; (8000584 <GPIO_PeriClockControl+0x180>)
 800041a:	4293      	cmp	r3, r2
 800041c:	d106      	bne.n	800042c <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 800041e:	4b5a      	ldr	r3, [pc, #360]	; (8000588 <GPIO_PeriClockControl+0x184>)
 8000420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000422:	4a59      	ldr	r2, [pc, #356]	; (8000588 <GPIO_PeriClockControl+0x184>)
 8000424:	f043 0301 	orr.w	r3, r3, #1
 8000428:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOG_PCLK_DI();
		} else if(pGPIOx == GPIOH){
			GPIOH_PCLK_DI();
		}
	}
}
 800042a:	e0a6      	b.n	800057a <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOB){
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	4a57      	ldr	r2, [pc, #348]	; (800058c <GPIO_PeriClockControl+0x188>)
 8000430:	4293      	cmp	r3, r2
 8000432:	d106      	bne.n	8000442 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000434:	4b54      	ldr	r3, [pc, #336]	; (8000588 <GPIO_PeriClockControl+0x184>)
 8000436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000438:	4a53      	ldr	r2, [pc, #332]	; (8000588 <GPIO_PeriClockControl+0x184>)
 800043a:	f043 0302 	orr.w	r3, r3, #2
 800043e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000440:	e09b      	b.n	800057a <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOC){
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	4a52      	ldr	r2, [pc, #328]	; (8000590 <GPIO_PeriClockControl+0x18c>)
 8000446:	4293      	cmp	r3, r2
 8000448:	d106      	bne.n	8000458 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800044a:	4b4f      	ldr	r3, [pc, #316]	; (8000588 <GPIO_PeriClockControl+0x184>)
 800044c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800044e:	4a4e      	ldr	r2, [pc, #312]	; (8000588 <GPIO_PeriClockControl+0x184>)
 8000450:	f043 0304 	orr.w	r3, r3, #4
 8000454:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000456:	e090      	b.n	800057a <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOD){
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	4a4e      	ldr	r2, [pc, #312]	; (8000594 <GPIO_PeriClockControl+0x190>)
 800045c:	4293      	cmp	r3, r2
 800045e:	d106      	bne.n	800046e <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000460:	4b49      	ldr	r3, [pc, #292]	; (8000588 <GPIO_PeriClockControl+0x184>)
 8000462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000464:	4a48      	ldr	r2, [pc, #288]	; (8000588 <GPIO_PeriClockControl+0x184>)
 8000466:	f043 0308 	orr.w	r3, r3, #8
 800046a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800046c:	e085      	b.n	800057a <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOE){
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	4a49      	ldr	r2, [pc, #292]	; (8000598 <GPIO_PeriClockControl+0x194>)
 8000472:	4293      	cmp	r3, r2
 8000474:	d106      	bne.n	8000484 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000476:	4b44      	ldr	r3, [pc, #272]	; (8000588 <GPIO_PeriClockControl+0x184>)
 8000478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800047a:	4a43      	ldr	r2, [pc, #268]	; (8000588 <GPIO_PeriClockControl+0x184>)
 800047c:	f043 0310 	orr.w	r3, r3, #16
 8000480:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000482:	e07a      	b.n	800057a <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOF){
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	4a45      	ldr	r2, [pc, #276]	; (800059c <GPIO_PeriClockControl+0x198>)
 8000488:	4293      	cmp	r3, r2
 800048a:	d106      	bne.n	800049a <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 800048c:	4b3e      	ldr	r3, [pc, #248]	; (8000588 <GPIO_PeriClockControl+0x184>)
 800048e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000490:	4a3d      	ldr	r2, [pc, #244]	; (8000588 <GPIO_PeriClockControl+0x184>)
 8000492:	f043 0320 	orr.w	r3, r3, #32
 8000496:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000498:	e06f      	b.n	800057a <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOG){
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	4a40      	ldr	r2, [pc, #256]	; (80005a0 <GPIO_PeriClockControl+0x19c>)
 800049e:	4293      	cmp	r3, r2
 80004a0:	d106      	bne.n	80004b0 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80004a2:	4b39      	ldr	r3, [pc, #228]	; (8000588 <GPIO_PeriClockControl+0x184>)
 80004a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004a6:	4a38      	ldr	r2, [pc, #224]	; (8000588 <GPIO_PeriClockControl+0x184>)
 80004a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004ac:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004ae:	e064      	b.n	800057a <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOH){
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	4a3c      	ldr	r2, [pc, #240]	; (80005a4 <GPIO_PeriClockControl+0x1a0>)
 80004b4:	4293      	cmp	r3, r2
 80004b6:	d160      	bne.n	800057a <GPIO_PeriClockControl+0x176>
			GPIOH_PCLK_EN();
 80004b8:	4b33      	ldr	r3, [pc, #204]	; (8000588 <GPIO_PeriClockControl+0x184>)
 80004ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004bc:	4a32      	ldr	r2, [pc, #200]	; (8000588 <GPIO_PeriClockControl+0x184>)
 80004be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004c2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004c4:	e059      	b.n	800057a <GPIO_PeriClockControl+0x176>
	} else if(EnorDi == DISABLE){
 80004c6:	78fb      	ldrb	r3, [r7, #3]
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d156      	bne.n	800057a <GPIO_PeriClockControl+0x176>
		if(pGPIOx == GPIOA){
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	4a2d      	ldr	r2, [pc, #180]	; (8000584 <GPIO_PeriClockControl+0x180>)
 80004d0:	4293      	cmp	r3, r2
 80004d2:	d106      	bne.n	80004e2 <GPIO_PeriClockControl+0xde>
			GPIOA_PCLK_DI();
 80004d4:	4b2c      	ldr	r3, [pc, #176]	; (8000588 <GPIO_PeriClockControl+0x184>)
 80004d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004d8:	4a2b      	ldr	r2, [pc, #172]	; (8000588 <GPIO_PeriClockControl+0x184>)
 80004da:	f023 0301 	bic.w	r3, r3, #1
 80004de:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004e0:	e04b      	b.n	800057a <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOB){
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	4a29      	ldr	r2, [pc, #164]	; (800058c <GPIO_PeriClockControl+0x188>)
 80004e6:	4293      	cmp	r3, r2
 80004e8:	d106      	bne.n	80004f8 <GPIO_PeriClockControl+0xf4>
			GPIOB_PCLK_DI();
 80004ea:	4b27      	ldr	r3, [pc, #156]	; (8000588 <GPIO_PeriClockControl+0x184>)
 80004ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ee:	4a26      	ldr	r2, [pc, #152]	; (8000588 <GPIO_PeriClockControl+0x184>)
 80004f0:	f023 0302 	bic.w	r3, r3, #2
 80004f4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004f6:	e040      	b.n	800057a <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOC){
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	4a25      	ldr	r2, [pc, #148]	; (8000590 <GPIO_PeriClockControl+0x18c>)
 80004fc:	4293      	cmp	r3, r2
 80004fe:	d106      	bne.n	800050e <GPIO_PeriClockControl+0x10a>
			GPIOC_PCLK_DI();
 8000500:	4b21      	ldr	r3, [pc, #132]	; (8000588 <GPIO_PeriClockControl+0x184>)
 8000502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000504:	4a20      	ldr	r2, [pc, #128]	; (8000588 <GPIO_PeriClockControl+0x184>)
 8000506:	f023 0304 	bic.w	r3, r3, #4
 800050a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800050c:	e035      	b.n	800057a <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOD){
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	4a20      	ldr	r2, [pc, #128]	; (8000594 <GPIO_PeriClockControl+0x190>)
 8000512:	4293      	cmp	r3, r2
 8000514:	d106      	bne.n	8000524 <GPIO_PeriClockControl+0x120>
			GPIOD_PCLK_DI();
 8000516:	4b1c      	ldr	r3, [pc, #112]	; (8000588 <GPIO_PeriClockControl+0x184>)
 8000518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051a:	4a1b      	ldr	r2, [pc, #108]	; (8000588 <GPIO_PeriClockControl+0x184>)
 800051c:	f023 0308 	bic.w	r3, r3, #8
 8000520:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000522:	e02a      	b.n	800057a <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOE){
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	4a1c      	ldr	r2, [pc, #112]	; (8000598 <GPIO_PeriClockControl+0x194>)
 8000528:	4293      	cmp	r3, r2
 800052a:	d106      	bne.n	800053a <GPIO_PeriClockControl+0x136>
			GPIOE_PCLK_DI();
 800052c:	4b16      	ldr	r3, [pc, #88]	; (8000588 <GPIO_PeriClockControl+0x184>)
 800052e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000530:	4a15      	ldr	r2, [pc, #84]	; (8000588 <GPIO_PeriClockControl+0x184>)
 8000532:	f023 0310 	bic.w	r3, r3, #16
 8000536:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000538:	e01f      	b.n	800057a <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOF){
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	4a17      	ldr	r2, [pc, #92]	; (800059c <GPIO_PeriClockControl+0x198>)
 800053e:	4293      	cmp	r3, r2
 8000540:	d106      	bne.n	8000550 <GPIO_PeriClockControl+0x14c>
			GPIOF_PCLK_DI();
 8000542:	4b11      	ldr	r3, [pc, #68]	; (8000588 <GPIO_PeriClockControl+0x184>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000546:	4a10      	ldr	r2, [pc, #64]	; (8000588 <GPIO_PeriClockControl+0x184>)
 8000548:	f023 0320 	bic.w	r3, r3, #32
 800054c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800054e:	e014      	b.n	800057a <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOG){
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	4a13      	ldr	r2, [pc, #76]	; (80005a0 <GPIO_PeriClockControl+0x19c>)
 8000554:	4293      	cmp	r3, r2
 8000556:	d106      	bne.n	8000566 <GPIO_PeriClockControl+0x162>
			GPIOG_PCLK_DI();
 8000558:	4b0b      	ldr	r3, [pc, #44]	; (8000588 <GPIO_PeriClockControl+0x184>)
 800055a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055c:	4a0a      	ldr	r2, [pc, #40]	; (8000588 <GPIO_PeriClockControl+0x184>)
 800055e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000562:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000564:	e009      	b.n	800057a <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOH){
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	4a0e      	ldr	r2, [pc, #56]	; (80005a4 <GPIO_PeriClockControl+0x1a0>)
 800056a:	4293      	cmp	r3, r2
 800056c:	d105      	bne.n	800057a <GPIO_PeriClockControl+0x176>
			GPIOH_PCLK_DI();
 800056e:	4b06      	ldr	r3, [pc, #24]	; (8000588 <GPIO_PeriClockControl+0x184>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000572:	4a05      	ldr	r2, [pc, #20]	; (8000588 <GPIO_PeriClockControl+0x184>)
 8000574:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000578:	6313      	str	r3, [r2, #48]	; 0x30
}
 800057a:	bf00      	nop
 800057c:	370c      	adds	r7, #12
 800057e:	46bd      	mov	sp, r7
 8000580:	bc80      	pop	{r7}
 8000582:	4770      	bx	lr
 8000584:	40020000 	.word	0x40020000
 8000588:	40023800 	.word	0x40023800
 800058c:	40020400 	.word	0x40020400
 8000590:	40020800 	.word	0x40020800
 8000594:	40020c00 	.word	0x40020c00
 8000598:	40021000 	.word	0x40021000
 800059c:	40021400 	.word	0x40021400
 80005a0:	40021800 	.word	0x40021800
 80005a4:	40021c00 	.word	0x40021c00

080005a8 <GPIO_Init>:
 * @return				- none
 *
 * @note				- none
 *
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 80005a8:	b480      	push	{r7}
 80005aa:	b08b      	sub	sp, #44	; 0x2c
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
	uint32_t reset_value = 0;
 80005b0:	2300      	movs	r3, #0
 80005b2:	627b      	str	r3, [r7, #36]	; 0x24

	//reset, then set mode register
	if( pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	795b      	ldrb	r3, [r3, #5]
 80005b8:	2b03      	cmp	r3, #3
 80005ba:	d823      	bhi.n	8000604 <GPIO_Init+0x5c>
		reset_value = (0x3 << ((2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)));
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	791b      	ldrb	r3, [r3, #4]
 80005c0:	005b      	lsls	r3, r3, #1
 80005c2:	2203      	movs	r2, #3
 80005c4:	fa02 f303 	lsl.w	r3, r2, r3
 80005c8:	627b      	str	r3, [r7, #36]	; 0x24
		pGPIOHandle->pGPIOx->MODER &= ~(reset_value);
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	6819      	ldr	r1, [r3, #0]
 80005d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005d2:	43da      	mvns	r2, r3
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	400a      	ands	r2, r1
 80005da:	601a      	str	r2, [r3, #0]
		reset_value = 0;
 80005dc:	2300      	movs	r3, #0
 80005de:	627b      	str	r3, [r7, #36]	; 0x24

		uint32_t moder_value = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	795b      	ldrb	r3, [r3, #5]
 80005e4:	461a      	mov	r2, r3
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	791b      	ldrb	r3, [r3, #4]
 80005ea:	005b      	lsls	r3, r3, #1
 80005ec:	fa02 f303 	lsl.w	r3, r2, r3
 80005f0:	61fb      	str	r3, [r7, #28]
		pGPIOHandle->pGPIOx->MODER |= moder_value;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	6819      	ldr	r1, [r3, #0]
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	69fa      	ldr	r2, [r7, #28]
 80005fe:	430a      	orrs	r2, r1
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	e0ee      	b.n	80007e2 <GPIO_Init+0x23a>
	} else{
		//interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	795b      	ldrb	r3, [r3, #5]
 8000608:	2b04      	cmp	r3, #4
 800060a:	d11a      	bne.n	8000642 <GPIO_Init+0x9a>
			//reset RTSR
			reset_value = (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	791b      	ldrb	r3, [r3, #4]
 8000610:	461a      	mov	r2, r3
 8000612:	2301      	movs	r3, #1
 8000614:	4093      	lsls	r3, r2
 8000616:	627b      	str	r3, [r7, #36]	; 0x24
			EXTI->RTSR &= ~(reset_value);
 8000618:	4b49      	ldr	r3, [pc, #292]	; (8000740 <GPIO_Init+0x198>)
 800061a:	689a      	ldr	r2, [r3, #8]
 800061c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800061e:	43db      	mvns	r3, r3
 8000620:	4947      	ldr	r1, [pc, #284]	; (8000740 <GPIO_Init+0x198>)
 8000622:	4013      	ands	r3, r2
 8000624:	608b      	str	r3, [r1, #8]
			reset_value = 0;
 8000626:	2300      	movs	r3, #0
 8000628:	627b      	str	r3, [r7, #36]	; 0x24

			//configure FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800062a:	4b45      	ldr	r3, [pc, #276]	; (8000740 <GPIO_Init+0x198>)
 800062c:	68db      	ldr	r3, [r3, #12]
 800062e:	687a      	ldr	r2, [r7, #4]
 8000630:	7912      	ldrb	r2, [r2, #4]
 8000632:	4611      	mov	r1, r2
 8000634:	2201      	movs	r2, #1
 8000636:	408a      	lsls	r2, r1
 8000638:	4611      	mov	r1, r2
 800063a:	4a41      	ldr	r2, [pc, #260]	; (8000740 <GPIO_Init+0x198>)
 800063c:	430b      	orrs	r3, r1
 800063e:	60d3      	str	r3, [r2, #12]
 8000640:	e038      	b.n	80006b4 <GPIO_Init+0x10c>
		} else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	795b      	ldrb	r3, [r3, #5]
 8000646:	2b05      	cmp	r3, #5
 8000648:	d11a      	bne.n	8000680 <GPIO_Init+0xd8>
			//reset FTSR
			reset_value = (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	791b      	ldrb	r3, [r3, #4]
 800064e:	461a      	mov	r2, r3
 8000650:	2301      	movs	r3, #1
 8000652:	4093      	lsls	r3, r2
 8000654:	627b      	str	r3, [r7, #36]	; 0x24
			EXTI->FTSR &= ~(reset_value);
 8000656:	4b3a      	ldr	r3, [pc, #232]	; (8000740 <GPIO_Init+0x198>)
 8000658:	68da      	ldr	r2, [r3, #12]
 800065a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800065c:	43db      	mvns	r3, r3
 800065e:	4938      	ldr	r1, [pc, #224]	; (8000740 <GPIO_Init+0x198>)
 8000660:	4013      	ands	r3, r2
 8000662:	60cb      	str	r3, [r1, #12]
			reset_value = 0;
 8000664:	2300      	movs	r3, #0
 8000666:	627b      	str	r3, [r7, #36]	; 0x24

			//configure RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000668:	4b35      	ldr	r3, [pc, #212]	; (8000740 <GPIO_Init+0x198>)
 800066a:	689b      	ldr	r3, [r3, #8]
 800066c:	687a      	ldr	r2, [r7, #4]
 800066e:	7912      	ldrb	r2, [r2, #4]
 8000670:	4611      	mov	r1, r2
 8000672:	2201      	movs	r2, #1
 8000674:	408a      	lsls	r2, r1
 8000676:	4611      	mov	r1, r2
 8000678:	4a31      	ldr	r2, [pc, #196]	; (8000740 <GPIO_Init+0x198>)
 800067a:	430b      	orrs	r3, r1
 800067c:	6093      	str	r3, [r2, #8]
 800067e:	e019      	b.n	80006b4 <GPIO_Init+0x10c>
		} else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	795b      	ldrb	r3, [r3, #5]
 8000684:	2b06      	cmp	r3, #6
 8000686:	d115      	bne.n	80006b4 <GPIO_Init+0x10c>
			//configure RTSR and FTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000688:	4b2d      	ldr	r3, [pc, #180]	; (8000740 <GPIO_Init+0x198>)
 800068a:	689b      	ldr	r3, [r3, #8]
 800068c:	687a      	ldr	r2, [r7, #4]
 800068e:	7912      	ldrb	r2, [r2, #4]
 8000690:	4611      	mov	r1, r2
 8000692:	2201      	movs	r2, #1
 8000694:	408a      	lsls	r2, r1
 8000696:	4611      	mov	r1, r2
 8000698:	4a29      	ldr	r2, [pc, #164]	; (8000740 <GPIO_Init+0x198>)
 800069a:	430b      	orrs	r3, r1
 800069c:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800069e:	4b28      	ldr	r3, [pc, #160]	; (8000740 <GPIO_Init+0x198>)
 80006a0:	68db      	ldr	r3, [r3, #12]
 80006a2:	687a      	ldr	r2, [r7, #4]
 80006a4:	7912      	ldrb	r2, [r2, #4]
 80006a6:	4611      	mov	r1, r2
 80006a8:	2201      	movs	r2, #1
 80006aa:	408a      	lsls	r2, r1
 80006ac:	4611      	mov	r1, r2
 80006ae:	4a24      	ldr	r2, [pc, #144]	; (8000740 <GPIO_Init+0x198>)
 80006b0:	430b      	orrs	r3, r1
 80006b2:	60d3      	str	r3, [r2, #12]
		}

		//configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t index = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4);
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	791b      	ldrb	r3, [r3, #4]
 80006b8:	089b      	lsrs	r3, r3, #2
 80006ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		uint8_t position = ((pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4) * 4);
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	791b      	ldrb	r3, [r3, #4]
 80006c2:	f003 0303 	and.w	r3, r3, #3
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	009b      	lsls	r3, r3, #2
 80006ca:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		uint8_t port_code = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	4a1c      	ldr	r2, [pc, #112]	; (8000744 <GPIO_Init+0x19c>)
 80006d4:	4293      	cmp	r3, r2
 80006d6:	d045      	beq.n	8000764 <GPIO_Init+0x1bc>
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a1a      	ldr	r2, [pc, #104]	; (8000748 <GPIO_Init+0x1a0>)
 80006de:	4293      	cmp	r3, r2
 80006e0:	d02b      	beq.n	800073a <GPIO_Init+0x192>
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	4a19      	ldr	r2, [pc, #100]	; (800074c <GPIO_Init+0x1a4>)
 80006e8:	4293      	cmp	r3, r2
 80006ea:	d024      	beq.n	8000736 <GPIO_Init+0x18e>
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a17      	ldr	r2, [pc, #92]	; (8000750 <GPIO_Init+0x1a8>)
 80006f2:	4293      	cmp	r3, r2
 80006f4:	d01d      	beq.n	8000732 <GPIO_Init+0x18a>
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	4a16      	ldr	r2, [pc, #88]	; (8000754 <GPIO_Init+0x1ac>)
 80006fc:	4293      	cmp	r3, r2
 80006fe:	d016      	beq.n	800072e <GPIO_Init+0x186>
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a14      	ldr	r2, [pc, #80]	; (8000758 <GPIO_Init+0x1b0>)
 8000706:	4293      	cmp	r3, r2
 8000708:	d00f      	beq.n	800072a <GPIO_Init+0x182>
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	4a13      	ldr	r2, [pc, #76]	; (800075c <GPIO_Init+0x1b4>)
 8000710:	4293      	cmp	r3, r2
 8000712:	d008      	beq.n	8000726 <GPIO_Init+0x17e>
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a11      	ldr	r2, [pc, #68]	; (8000760 <GPIO_Init+0x1b8>)
 800071a:	4293      	cmp	r3, r2
 800071c:	d101      	bne.n	8000722 <GPIO_Init+0x17a>
 800071e:	2307      	movs	r3, #7
 8000720:	e021      	b.n	8000766 <GPIO_Init+0x1be>
 8000722:	2300      	movs	r3, #0
 8000724:	e01f      	b.n	8000766 <GPIO_Init+0x1be>
 8000726:	2306      	movs	r3, #6
 8000728:	e01d      	b.n	8000766 <GPIO_Init+0x1be>
 800072a:	2305      	movs	r3, #5
 800072c:	e01b      	b.n	8000766 <GPIO_Init+0x1be>
 800072e:	2304      	movs	r3, #4
 8000730:	e019      	b.n	8000766 <GPIO_Init+0x1be>
 8000732:	2303      	movs	r3, #3
 8000734:	e017      	b.n	8000766 <GPIO_Init+0x1be>
 8000736:	2302      	movs	r3, #2
 8000738:	e015      	b.n	8000766 <GPIO_Init+0x1be>
 800073a:	2301      	movs	r3, #1
 800073c:	e013      	b.n	8000766 <GPIO_Init+0x1be>
 800073e:	bf00      	nop
 8000740:	40013c00 	.word	0x40013c00
 8000744:	40020000 	.word	0x40020000
 8000748:	40020400 	.word	0x40020400
 800074c:	40020800 	.word	0x40020800
 8000750:	40020c00 	.word	0x40020c00
 8000754:	40021000 	.word	0x40021000
 8000758:	40021400 	.word	0x40021400
 800075c:	40021800 	.word	0x40021800
 8000760:	40021c00 	.word	0x40021c00
 8000764:	2300      	movs	r3, #0
 8000766:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

		SYSCFG_PCLK_EN();
 800076a:	4b75      	ldr	r3, [pc, #468]	; (8000940 <GPIO_Init+0x398>)
 800076c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800076e:	4a74      	ldr	r2, [pc, #464]	; (8000940 <GPIO_Init+0x398>)
 8000770:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000774:	6453      	str	r3, [r2, #68]	; 0x44

		reset_value = (0xF << position);
 8000776:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800077a:	220f      	movs	r2, #15
 800077c:	fa02 f303 	lsl.w	r3, r2, r3
 8000780:	627b      	str	r3, [r7, #36]	; 0x24
		SYSCFG->EXTICR[index] &= ~(reset_value);
 8000782:	4a70      	ldr	r2, [pc, #448]	; (8000944 <GPIO_Init+0x39c>)
 8000784:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000788:	3302      	adds	r3, #2
 800078a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800078e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000790:	43da      	mvns	r2, r3
 8000792:	486c      	ldr	r0, [pc, #432]	; (8000944 <GPIO_Init+0x39c>)
 8000794:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000798:	400a      	ands	r2, r1
 800079a:	3302      	adds	r3, #2
 800079c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		reset_value = 0;
 80007a0:	2300      	movs	r3, #0
 80007a2:	627b      	str	r3, [r7, #36]	; 0x24

		SYSCFG->EXTICR[index] |= (port_code << position);
 80007a4:	4a67      	ldr	r2, [pc, #412]	; (8000944 <GPIO_Init+0x39c>)
 80007a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80007aa:	3302      	adds	r3, #2
 80007ac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007b0:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 80007b4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80007b8:	fa01 f303 	lsl.w	r3, r1, r3
 80007bc:	4618      	mov	r0, r3
 80007be:	4961      	ldr	r1, [pc, #388]	; (8000944 <GPIO_Init+0x39c>)
 80007c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80007c4:	4302      	orrs	r2, r0
 80007c6:	3302      	adds	r3, #2
 80007c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		//enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007cc:	4b5e      	ldr	r3, [pc, #376]	; (8000948 <GPIO_Init+0x3a0>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	687a      	ldr	r2, [r7, #4]
 80007d2:	7912      	ldrb	r2, [r2, #4]
 80007d4:	4611      	mov	r1, r2
 80007d6:	2201      	movs	r2, #1
 80007d8:	408a      	lsls	r2, r1
 80007da:	4611      	mov	r1, r2
 80007dc:	4a5a      	ldr	r2, [pc, #360]	; (8000948 <GPIO_Init+0x3a0>)
 80007de:	430b      	orrs	r3, r1
 80007e0:	6013      	str	r3, [r2, #0]
	}

	// reset, then set speed register
	reset_value = (0x3 << ((2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)));
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	791b      	ldrb	r3, [r3, #4]
 80007e6:	005b      	lsls	r3, r3, #1
 80007e8:	2203      	movs	r2, #3
 80007ea:	fa02 f303 	lsl.w	r3, r2, r3
 80007ee:	627b      	str	r3, [r7, #36]	; 0x24
	pGPIOHandle->pGPIOx->OSPEEDER &= ~(reset_value);
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	6899      	ldr	r1, [r3, #8]
 80007f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007f8:	43da      	mvns	r2, r3
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	400a      	ands	r2, r1
 8000800:	609a      	str	r2, [r3, #8]
	reset_value = 0;
 8000802:	2300      	movs	r3, #0
 8000804:	627b      	str	r3, [r7, #36]	; 0x24

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_OUT){
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	795b      	ldrb	r3, [r3, #5]
 800080a:	2b01      	cmp	r3, #1
 800080c:	d110      	bne.n	8000830 <GPIO_Init+0x288>
		uint32_t ospeedr_value = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	799b      	ldrb	r3, [r3, #6]
 8000812:	461a      	mov	r2, r3
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	791b      	ldrb	r3, [r3, #4]
 8000818:	005b      	lsls	r3, r3, #1
 800081a:	fa02 f303 	lsl.w	r3, r2, r3
 800081e:	61bb      	str	r3, [r7, #24]
		pGPIOHandle->pGPIOx->OSPEEDER |= ospeedr_value;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	6899      	ldr	r1, [r3, #8]
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	69ba      	ldr	r2, [r7, #24]
 800082c:	430a      	orrs	r2, r1
 800082e:	609a      	str	r2, [r3, #8]
	}
	//reset, then set pupd register
	reset_value = (0x3 << ((2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)));
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	791b      	ldrb	r3, [r3, #4]
 8000834:	005b      	lsls	r3, r3, #1
 8000836:	2203      	movs	r2, #3
 8000838:	fa02 f303 	lsl.w	r3, r2, r3
 800083c:	627b      	str	r3, [r7, #36]	; 0x24
	pGPIOHandle->pGPIOx->PUPDR &= ~(reset_value);
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	68d9      	ldr	r1, [r3, #12]
 8000844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000846:	43da      	mvns	r2, r3
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	400a      	ands	r2, r1
 800084e:	60da      	str	r2, [r3, #12]
	reset_value = 0;
 8000850:	2300      	movs	r3, #0
 8000852:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t pupdr_value = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	79db      	ldrb	r3, [r3, #7]
 8000858:	461a      	mov	r2, r3
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	791b      	ldrb	r3, [r3, #4]
 800085e:	005b      	lsls	r3, r3, #1
 8000860:	fa02 f303 	lsl.w	r3, r2, r3
 8000864:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR |= pupdr_value;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	68d9      	ldr	r1, [r3, #12]
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	697a      	ldr	r2, [r7, #20]
 8000872:	430a      	orrs	r2, r1
 8000874:	60da      	str	r2, [r3, #12]

	//reset, then set output type register
	reset_value = (0x1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	791b      	ldrb	r3, [r3, #4]
 800087a:	461a      	mov	r2, r3
 800087c:	2301      	movs	r3, #1
 800087e:	4093      	lsls	r3, r2
 8000880:	627b      	str	r3, [r7, #36]	; 0x24
	pGPIOHandle->pGPIOx->OTYPER &= ~(reset_value);
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	6859      	ldr	r1, [r3, #4]
 8000888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800088a:	43da      	mvns	r2, r3
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	400a      	ands	r2, r1
 8000892:	605a      	str	r2, [r3, #4]
	reset_value = 0;
 8000894:	2300      	movs	r3, #0
 8000896:	627b      	str	r3, [r7, #36]	; 0x24

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_OUT){
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	795b      	ldrb	r3, [r3, #5]
 800089c:	2b01      	cmp	r3, #1
 800089e:	d10f      	bne.n	80008c0 <GPIO_Init+0x318>
		uint32_t optyper_value = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	7a1b      	ldrb	r3, [r3, #8]
 80008a4:	461a      	mov	r2, r3
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	791b      	ldrb	r3, [r3, #4]
 80008aa:	fa02 f303 	lsl.w	r3, r2, r3
 80008ae:	613b      	str	r3, [r7, #16]
		pGPIOHandle->pGPIOx->OTYPER |= optyper_value;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	6859      	ldr	r1, [r3, #4]
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	693a      	ldr	r2, [r7, #16]
 80008bc:	430a      	orrs	r2, r1
 80008be:	605a      	str	r2, [r3, #4]
	}
	//reset, then set altfn register
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	795b      	ldrb	r3, [r3, #5]
 80008c4:	2b02      	cmp	r3, #2
 80008c6:	d135      	bne.n	8000934 <GPIO_Init+0x38c>
		uint8_t index = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	791b      	ldrb	r3, [r3, #4]
 80008cc:	08db      	lsrs	r3, r3, #3
 80008ce:	73fb      	strb	r3, [r7, #15]
		uint8_t position = ((pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8) * 4);
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	791b      	ldrb	r3, [r3, #4]
 80008d4:	f003 0307 	and.w	r3, r3, #7
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	009b      	lsls	r3, r3, #2
 80008dc:	73bb      	strb	r3, [r7, #14]

		//reset
		reset_value = (0xF << position);
 80008de:	7bbb      	ldrb	r3, [r7, #14]
 80008e0:	220f      	movs	r2, #15
 80008e2:	fa02 f303 	lsl.w	r3, r2, r3
 80008e6:	627b      	str	r3, [r7, #36]	; 0x24
		pGPIOHandle->pGPIOx->AFR[index] &= ~(reset_value);
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	7bfa      	ldrb	r2, [r7, #15]
 80008ee:	3208      	adds	r2, #8
 80008f0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80008f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008f6:	43d9      	mvns	r1, r3
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	7bfa      	ldrb	r2, [r7, #15]
 80008fe:	4001      	ands	r1, r0
 8000900:	3208      	adds	r2, #8
 8000902:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		reset_value = 0;
 8000906:	2300      	movs	r3, #0
 8000908:	627b      	str	r3, [r7, #36]	; 0x24

		//set
		uint32_t afr_value = (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << position);
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	7a5b      	ldrb	r3, [r3, #9]
 800090e:	461a      	mov	r2, r3
 8000910:	7bbb      	ldrb	r3, [r7, #14]
 8000912:	fa02 f303 	lsl.w	r3, r2, r3
 8000916:	60bb      	str	r3, [r7, #8]
		pGPIOHandle->pGPIOx->AFR[index] |= afr_value;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	7bfa      	ldrb	r2, [r7, #15]
 800091e:	3208      	adds	r2, #8
 8000920:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	7bfa      	ldrb	r2, [r7, #15]
 800092a:	68b9      	ldr	r1, [r7, #8]
 800092c:	4301      	orrs	r1, r0
 800092e:	3208      	adds	r2, #8
 8000930:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8000934:	bf00      	nop
 8000936:	372c      	adds	r7, #44	; 0x2c
 8000938:	46bd      	mov	sp, r7
 800093a:	bc80      	pop	{r7}
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	40023800 	.word	0x40023800
 8000944:	40013800 	.word	0x40013800
 8000948:	40013c00 	.word	0x40013c00

0800094c <GPIO_ReadFromInputPin>:
 * @return				- 0 or 1
 *
 * @note				- none
 *
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber){
 800094c:	b480      	push	{r7}
 800094e:	b085      	sub	sp, #20
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
 8000954:	460b      	mov	r3, r1
 8000956:	70fb      	strb	r3, [r7, #3]
	uint8_t value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x00000001);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	691a      	ldr	r2, [r3, #16]
 800095c:	78fb      	ldrb	r3, [r7, #3]
 800095e:	fa22 f303 	lsr.w	r3, r2, r3
 8000962:	b2db      	uxtb	r3, r3
 8000964:	f003 0301 	and.w	r3, r3, #1
 8000968:	73fb      	strb	r3, [r7, #15]
	return value;
 800096a:	7bfb      	ldrb	r3, [r7, #15]
}
 800096c:	4618      	mov	r0, r3
 800096e:	3714      	adds	r7, #20
 8000970:	46bd      	mov	sp, r7
 8000972:	bc80      	pop	{r7}
 8000974:	4770      	bx	lr
	...

08000978 <SPI_PeriClockControl>:
 * @return				- none
 *
 * @note				- none
 *
 */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi){
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
 8000980:	460b      	mov	r3, r1
 8000982:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8000984:	78fb      	ldrb	r3, [r7, #3]
 8000986:	2b01      	cmp	r3, #1
 8000988:	d12b      	bne.n	80009e2 <SPI_PeriClockControl+0x6a>
		if(pSPIx == SPI1){
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4a2e      	ldr	r2, [pc, #184]	; (8000a48 <SPI_PeriClockControl+0xd0>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d106      	bne.n	80009a0 <SPI_PeriClockControl+0x28>
			SPI1_PCLK_EN();
 8000992:	4b2e      	ldr	r3, [pc, #184]	; (8000a4c <SPI_PeriClockControl+0xd4>)
 8000994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000996:	4a2d      	ldr	r2, [pc, #180]	; (8000a4c <SPI_PeriClockControl+0xd4>)
 8000998:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800099c:	6453      	str	r3, [r2, #68]	; 0x44
			SPI3_PCLK_DI();
		} else if(pSPIx == SPI4){
			SPI4_PCLK_DI();
		}
	}
}
 800099e:	e04e      	b.n	8000a3e <SPI_PeriClockControl+0xc6>
		} else if(pSPIx == SPI2){
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	4a2b      	ldr	r2, [pc, #172]	; (8000a50 <SPI_PeriClockControl+0xd8>)
 80009a4:	4293      	cmp	r3, r2
 80009a6:	d106      	bne.n	80009b6 <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 80009a8:	4b28      	ldr	r3, [pc, #160]	; (8000a4c <SPI_PeriClockControl+0xd4>)
 80009aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ac:	4a27      	ldr	r2, [pc, #156]	; (8000a4c <SPI_PeriClockControl+0xd4>)
 80009ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009b2:	6413      	str	r3, [r2, #64]	; 0x40
}
 80009b4:	e043      	b.n	8000a3e <SPI_PeriClockControl+0xc6>
		} else if(pSPIx == SPI3){
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	4a26      	ldr	r2, [pc, #152]	; (8000a54 <SPI_PeriClockControl+0xdc>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d106      	bne.n	80009cc <SPI_PeriClockControl+0x54>
			SPI3_PCLK_EN();
 80009be:	4b23      	ldr	r3, [pc, #140]	; (8000a4c <SPI_PeriClockControl+0xd4>)
 80009c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c2:	4a22      	ldr	r2, [pc, #136]	; (8000a4c <SPI_PeriClockControl+0xd4>)
 80009c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009c8:	6413      	str	r3, [r2, #64]	; 0x40
}
 80009ca:	e038      	b.n	8000a3e <SPI_PeriClockControl+0xc6>
		} else if(pSPIx == SPI4){
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	4a22      	ldr	r2, [pc, #136]	; (8000a58 <SPI_PeriClockControl+0xe0>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d134      	bne.n	8000a3e <SPI_PeriClockControl+0xc6>
			SPI4_PCLK_EN();
 80009d4:	4b1d      	ldr	r3, [pc, #116]	; (8000a4c <SPI_PeriClockControl+0xd4>)
 80009d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d8:	4a1c      	ldr	r2, [pc, #112]	; (8000a4c <SPI_PeriClockControl+0xd4>)
 80009da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80009de:	6453      	str	r3, [r2, #68]	; 0x44
}
 80009e0:	e02d      	b.n	8000a3e <SPI_PeriClockControl+0xc6>
	} else if(EnorDi == DISABLE){
 80009e2:	78fb      	ldrb	r3, [r7, #3]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d12a      	bne.n	8000a3e <SPI_PeriClockControl+0xc6>
		if(pSPIx == SPI1){
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	4a17      	ldr	r2, [pc, #92]	; (8000a48 <SPI_PeriClockControl+0xd0>)
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d106      	bne.n	80009fe <SPI_PeriClockControl+0x86>
			SPI1_PCLK_DI();
 80009f0:	4b16      	ldr	r3, [pc, #88]	; (8000a4c <SPI_PeriClockControl+0xd4>)
 80009f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f4:	4a15      	ldr	r2, [pc, #84]	; (8000a4c <SPI_PeriClockControl+0xd4>)
 80009f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80009fa:	6453      	str	r3, [r2, #68]	; 0x44
}
 80009fc:	e01f      	b.n	8000a3e <SPI_PeriClockControl+0xc6>
		} else if(pSPIx == SPI2){
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4a13      	ldr	r2, [pc, #76]	; (8000a50 <SPI_PeriClockControl+0xd8>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d106      	bne.n	8000a14 <SPI_PeriClockControl+0x9c>
			SPI2_PCLK_DI();
 8000a06:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <SPI_PeriClockControl+0xd4>)
 8000a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0a:	4a10      	ldr	r2, [pc, #64]	; (8000a4c <SPI_PeriClockControl+0xd4>)
 8000a0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000a10:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a12:	e014      	b.n	8000a3e <SPI_PeriClockControl+0xc6>
		} else if(pSPIx == SPI3){
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	4a0f      	ldr	r2, [pc, #60]	; (8000a54 <SPI_PeriClockControl+0xdc>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d106      	bne.n	8000a2a <SPI_PeriClockControl+0xb2>
			SPI3_PCLK_DI();
 8000a1c:	4b0b      	ldr	r3, [pc, #44]	; (8000a4c <SPI_PeriClockControl+0xd4>)
 8000a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a20:	4a0a      	ldr	r2, [pc, #40]	; (8000a4c <SPI_PeriClockControl+0xd4>)
 8000a22:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000a26:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a28:	e009      	b.n	8000a3e <SPI_PeriClockControl+0xc6>
		} else if(pSPIx == SPI4){
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	4a0a      	ldr	r2, [pc, #40]	; (8000a58 <SPI_PeriClockControl+0xe0>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d105      	bne.n	8000a3e <SPI_PeriClockControl+0xc6>
			SPI4_PCLK_DI();
 8000a32:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <SPI_PeriClockControl+0xd4>)
 8000a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a36:	4a05      	ldr	r2, [pc, #20]	; (8000a4c <SPI_PeriClockControl+0xd4>)
 8000a38:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000a3c:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000a3e:	bf00      	nop
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bc80      	pop	{r7}
 8000a46:	4770      	bx	lr
 8000a48:	40013000 	.word	0x40013000
 8000a4c:	40023800 	.word	0x40023800
 8000a50:	40003800 	.word	0x40003800
 8000a54:	40003c00 	.word	0x40003c00
 8000a58:	40013400 	.word	0x40013400

08000a5c <SPI_Init>:
 * @return				- none
 *
 * @note				- none
 *
 */
void SPI_Init(SPI_Handle_t *pSPIHandle){
 8000a5c:	b480      	push	{r7}
 8000a5e:	b085      	sub	sp, #20
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
	uint32_t ControlReg1 = 0;
 8000a64:	2300      	movs	r3, #0
 8000a66:	60fb      	str	r3, [r7, #12]

	//configure device mode
	ControlReg1 |= pSPIHandle->SPI_Config.SPI_DeviceMode << 2;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	791b      	ldrb	r3, [r3, #4]
 8000a6c:	009b      	lsls	r3, r3, #2
 8000a6e:	461a      	mov	r2, r3
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	4313      	orrs	r3, r2
 8000a74:	60fb      	str	r3, [r7, #12]

	//Bus Configuration
	if(pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CONFIG_FD){
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	795b      	ldrb	r3, [r3, #5]
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	d104      	bne.n	8000a88 <SPI_Init+0x2c>
		//bidi mode should be cleared
		ControlReg1 &= ~(1 << SPI_CR1_BIDIMODE);
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000a84:	60fb      	str	r3, [r7, #12]
 8000a86:	e014      	b.n	8000ab2 <SPI_Init+0x56>
	} else if(pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CONFIG_HD){
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	795b      	ldrb	r3, [r3, #5]
 8000a8c:	2b02      	cmp	r3, #2
 8000a8e:	d104      	bne.n	8000a9a <SPI_Init+0x3e>
		//bidi mode should be set
		ControlReg1 |= (1 << SPI_CR1_BIDIMODE);
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	e00b      	b.n	8000ab2 <SPI_Init+0x56>
	} else if(pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY){
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	795b      	ldrb	r3, [r3, #5]
 8000a9e:	2b03      	cmp	r3, #3
 8000aa0:	d107      	bne.n	8000ab2 <SPI_Init+0x56>
		//bidi mode should be cleared
		ControlReg1 &= ~(1 << SPI_CR1_BIDIMODE);
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000aa8:	60fb      	str	r3, [r7, #12]
		//rxonly bit must be set
		ControlReg1 |= (1 << SPI_CR1_RXONLY);
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ab0:	60fb      	str	r3, [r7, #12]
	}

	//Serial clk Configuration
	ControlReg1 |= (pSPIHandle->SPI_Config.SPI_SclkSpeed << SPI_CR1_BR);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	799b      	ldrb	r3, [r3, #6]
 8000ab6:	00db      	lsls	r3, r3, #3
 8000ab8:	461a      	mov	r2, r3
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	60fb      	str	r3, [r7, #12]

	//Data Frame Format Configuration
	ControlReg1 |= (pSPIHandle->SPI_Config.SPI_DFF << SPI_CR1_DFF);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	79db      	ldrb	r3, [r3, #7]
 8000ac4:	02db      	lsls	r3, r3, #11
 8000ac6:	461a      	mov	r2, r3
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	4313      	orrs	r3, r2
 8000acc:	60fb      	str	r3, [r7, #12]

	//CPOL Configuration
	ControlReg1 |= (pSPIHandle->SPI_Config.SPI_CPOL << SPI_CR1_CPOL);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	7a1b      	ldrb	r3, [r3, #8]
 8000ad2:	005b      	lsls	r3, r3, #1
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	60fb      	str	r3, [r7, #12]

	//CPHA Configuration
	ControlReg1 |= (pSPIHandle->SPI_Config.SPI_CPHA << SPI_CR1_CPHA);
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	7a5b      	ldrb	r3, [r3, #9]
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	60fb      	str	r3, [r7, #12]

	//Software Slave Select Configuration
	ControlReg1 |= (pSPIHandle->SPI_Config.SPI_SSM << SPI_CR1_SSM);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	7a9b      	ldrb	r3, [r3, #10]
 8000aec:	025b      	lsls	r3, r3, #9
 8000aee:	461a      	mov	r2, r3
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	4313      	orrs	r3, r2
 8000af4:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = ControlReg1;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	68fa      	ldr	r2, [r7, #12]
 8000afc:	601a      	str	r2, [r3, #0]
}
 8000afe:	bf00      	nop
 8000b00:	3714      	adds	r7, #20
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bc80      	pop	{r7}
 8000b06:	4770      	bx	lr

08000b08 <SPI_GetFlagStatus>:

/*
 * 	Data Send and Receive
 */

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName){
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
 8000b10:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & FlagName){
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	689a      	ldr	r2, [r3, #8]
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	4013      	ands	r3, r2
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <SPI_GetFlagStatus+0x1a>
		return FLAG_SET;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	e000      	b.n	8000b24 <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000b22:	2300      	movs	r3, #0
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	370c      	adds	r7, #12
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bc80      	pop	{r7}
 8000b2c:	4770      	bx	lr

08000b2e <SPI_SendData>:
 * @return				- none
 *
 * @note				- This is blocking call
 *
 */
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len){
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	b084      	sub	sp, #16
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	60f8      	str	r0, [r7, #12]
 8000b36:	60b9      	str	r1, [r7, #8]
 8000b38:	607a      	str	r2, [r7, #4]
	while(Len > 0){
 8000b3a:	e027      	b.n	8000b8c <SPI_SendData+0x5e>
		//Wait until TX is set
		while(SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET);
 8000b3c:	bf00      	nop
 8000b3e:	2102      	movs	r1, #2
 8000b40:	68f8      	ldr	r0, [r7, #12]
 8000b42:	f7ff ffe1 	bl	8000b08 <SPI_GetFlagStatus>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d0f8      	beq.n	8000b3e <SPI_SendData+0x10>
		//Check DFF bit in CR1
		if(pSPIx->CR1 & (1 << SPI_CR1_DFF)){
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d00e      	beq.n	8000b76 <SPI_SendData+0x48>
			//16 bit data frame format
			pSPIx->DR = *((uint16_t*) pTxBuffer);
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	881b      	ldrh	r3, [r3, #0]
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	60da      	str	r2, [r3, #12]
			Len--;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	3b01      	subs	r3, #1
 8000b66:	607b      	str	r3, [r7, #4]
			Len--;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	3b01      	subs	r3, #1
 8000b6c:	607b      	str	r3, [r7, #4]
			(uint16_t*) pTxBuffer++;
 8000b6e:	68bb      	ldr	r3, [r7, #8]
 8000b70:	3301      	adds	r3, #1
 8000b72:	60bb      	str	r3, [r7, #8]
 8000b74:	e00a      	b.n	8000b8c <SPI_SendData+0x5e>
		} else{
			//8 bit data frame format
			pSPIx->DR = *pTxBuffer;
 8000b76:	68bb      	ldr	r3, [r7, #8]
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	60da      	str	r2, [r3, #12]
			Len--;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	3b01      	subs	r3, #1
 8000b84:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 8000b86:	68bb      	ldr	r3, [r7, #8]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	60bb      	str	r3, [r7, #8]
	while(Len > 0){
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d1d4      	bne.n	8000b3c <SPI_SendData+0xe>
		}
	}
}
 8000b92:	bf00      	nop
 8000b94:	3710      	adds	r7, #16
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <SPI_PeripheralControl>:
 * @return				- none
 *
 * @note				- none
 *
 */
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi){
 8000b9a:	b480      	push	{r7}
 8000b9c:	b083      	sub	sp, #12
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	6078      	str	r0, [r7, #4]
 8000ba2:	460b      	mov	r3, r1
 8000ba4:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE){
 8000ba6:	78fb      	ldrb	r3, [r7, #3]
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	d106      	bne.n	8000bba <SPI_PeripheralControl+0x20>
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	601a      	str	r2, [r3, #0]
	} else{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}
 8000bb8:	e005      	b.n	8000bc6 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	601a      	str	r2, [r3, #0]
}
 8000bc6:	bf00      	nop
 8000bc8:	370c      	adds	r7, #12
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bc80      	pop	{r7}
 8000bce:	4770      	bx	lr

08000bd0 <SPI_SSOE_Config>:
 * @return				- none
 *
 * @note				- none
 *
 */
void SPI_SSOE_Config(SPI_RegDef_t *pSPIx, uint8_t EnOrDi){
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	460b      	mov	r3, r1
 8000bda:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE){
 8000bdc:	78fb      	ldrb	r3, [r7, #3]
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d106      	bne.n	8000bf0 <SPI_SSOE_Config+0x20>
		pSPIx->CR2 |= (1 << SPI_CR2_SSOE);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	f043 0204 	orr.w	r2, r3, #4
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	605a      	str	r2, [r3, #4]
	} else{
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
	}
}
 8000bee:	e005      	b.n	8000bfc <SPI_SSOE_Config+0x2c>
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	f023 0204 	bic.w	r2, r3, #4
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	605a      	str	r2, [r3, #4]
}
 8000bfc:	bf00      	nop
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bc80      	pop	{r7}
 8000c04:	4770      	bx	lr
	...

08000c08 <__libc_init_array>:
 8000c08:	b570      	push	{r4, r5, r6, lr}
 8000c0a:	4e0d      	ldr	r6, [pc, #52]	; (8000c40 <__libc_init_array+0x38>)
 8000c0c:	4c0d      	ldr	r4, [pc, #52]	; (8000c44 <__libc_init_array+0x3c>)
 8000c0e:	1ba4      	subs	r4, r4, r6
 8000c10:	10a4      	asrs	r4, r4, #2
 8000c12:	2500      	movs	r5, #0
 8000c14:	42a5      	cmp	r5, r4
 8000c16:	d109      	bne.n	8000c2c <__libc_init_array+0x24>
 8000c18:	4e0b      	ldr	r6, [pc, #44]	; (8000c48 <__libc_init_array+0x40>)
 8000c1a:	4c0c      	ldr	r4, [pc, #48]	; (8000c4c <__libc_init_array+0x44>)
 8000c1c:	f000 f818 	bl	8000c50 <_init>
 8000c20:	1ba4      	subs	r4, r4, r6
 8000c22:	10a4      	asrs	r4, r4, #2
 8000c24:	2500      	movs	r5, #0
 8000c26:	42a5      	cmp	r5, r4
 8000c28:	d105      	bne.n	8000c36 <__libc_init_array+0x2e>
 8000c2a:	bd70      	pop	{r4, r5, r6, pc}
 8000c2c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c30:	4798      	blx	r3
 8000c32:	3501      	adds	r5, #1
 8000c34:	e7ee      	b.n	8000c14 <__libc_init_array+0xc>
 8000c36:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c3a:	4798      	blx	r3
 8000c3c:	3501      	adds	r5, #1
 8000c3e:	e7f2      	b.n	8000c26 <__libc_init_array+0x1e>
 8000c40:	08000c80 	.word	0x08000c80
 8000c44:	08000c80 	.word	0x08000c80
 8000c48:	08000c80 	.word	0x08000c80
 8000c4c:	08000c84 	.word	0x08000c84

08000c50 <_init>:
 8000c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c52:	bf00      	nop
 8000c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c56:	bc08      	pop	{r3}
 8000c58:	469e      	mov	lr, r3
 8000c5a:	4770      	bx	lr

08000c5c <_fini>:
 8000c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c5e:	bf00      	nop
 8000c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c62:	bc08      	pop	{r3}
 8000c64:	469e      	mov	lr, r3
 8000c66:	4770      	bx	lr
