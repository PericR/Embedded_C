
stm32f446_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001cec  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08001eb0  08001eb0  00011eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001f34  08001f34  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001f34  08001f34  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001f34  08001f34  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001f34  08001f34  00011f34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001f38  08001f38  00011f38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001f3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000005c  20000064  08001fa0  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  08001fa0  000200c0  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000027a0  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000006f5  00000000  00000000  0002282e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001e8  00000000  00000000  00022f28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000001a0  00000000  00000000  00023110  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002fc9  00000000  00000000  000232b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001ae2  00000000  00000000  00026279  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000b5b2  00000000  00000000  00027d5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0003330d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d6c  00000000  00000000  00033388  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         0000009c  00000000  00000000  000340f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000014d  00000000  00000000  00034190  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000064 	.word	0x20000064
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08001e98 	.word	0x08001e98

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000068 	.word	0x20000068
 8000200:	08001e98 	.word	0x08001e98

08000204 <delay>:
#define LEN_COMMAND		0x51
#define	DATA_COMMAND	0x52

I2C_Handle_t I2C1_handle;

void delay(void){
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < 500000; i++);
 800020a:	2300      	movs	r3, #0
 800020c:	607b      	str	r3, [r7, #4]
 800020e:	e002      	b.n	8000216 <delay+0x12>
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	3301      	adds	r3, #1
 8000214:	607b      	str	r3, [r7, #4]
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	4a03      	ldr	r2, [pc, #12]	; (8000228 <delay+0x24>)
 800021a:	4293      	cmp	r3, r2
 800021c:	d9f8      	bls.n	8000210 <delay+0xc>
}
 800021e:	bf00      	nop
 8000220:	370c      	adds	r7, #12
 8000222:	46bd      	mov	sp, r7
 8000224:	bc80      	pop	{r7}
 8000226:	4770      	bx	lr
 8000228:	0007a11f 	.word	0x0007a11f

0800022c <GPIO_Button_Init>:

void GPIO_Button_Init(){
 800022c:	b580      	push	{r7, lr}
 800022e:	b084      	sub	sp, #16
 8000230:	af00      	add	r7, sp, #0
	GPIO_Handle_t gpioc_button;
	gpioc_button.pGPIOx = GPIOC;
 8000232:	4b09      	ldr	r3, [pc, #36]	; (8000258 <GPIO_Button_Init+0x2c>)
 8000234:	607b      	str	r3, [r7, #4]

	gpioc_button.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000236:	230d      	movs	r3, #13
 8000238:	723b      	strb	r3, [r7, #8]
	gpioc_button.GPIO_PinConfig.GPIO_PinMode = GPIO_PIN_MODE_IN;
 800023a:	2300      	movs	r3, #0
 800023c:	727b      	strb	r3, [r7, #9]

	GPIO_PeriClockControl(gpioc_button.pGPIOx, ENABLE);
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	2101      	movs	r1, #1
 8000242:	4618      	mov	r0, r3
 8000244:	f000 f944 	bl	80004d0 <GPIO_PeriClockControl>
	GPIO_Init(&gpioc_button);
 8000248:	1d3b      	adds	r3, r7, #4
 800024a:	4618      	mov	r0, r3
 800024c:	f000 fa12 	bl	8000674 <GPIO_Init>
}
 8000250:	bf00      	nop
 8000252:	3710      	adds	r7, #16
 8000254:	46bd      	mov	sp, r7
 8000256:	bd80      	pop	{r7, pc}
 8000258:	40020800 	.word	0x40020800

0800025c <I2C1_GPIOInits>:

void I2C1_GPIOInits(void){
 800025c:	b580      	push	{r7, lr}
 800025e:	b084      	sub	sp, #16
 8000260:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2C_pins;
	I2C_pins.pGPIOx = GPIOB;
 8000262:	4b10      	ldr	r3, [pc, #64]	; (80002a4 <I2C1_GPIOInits+0x48>)
 8000264:	607b      	str	r3, [r7, #4]

	I2C_pins.GPIO_PinConfig.GPIO_PinMode = GPIO_PIN_MODE_ALTFN;
 8000266:	2302      	movs	r3, #2
 8000268:	727b      	strb	r3, [r7, #9]
	I2C_pins.GPIO_PinConfig.GPIO_PinAltFunMode = GPIO_PIN_ALT_FUN_4;
 800026a:	2304      	movs	r3, #4
 800026c:	737b      	strb	r3, [r7, #13]
	I2C_pins.GPIO_PinConfig.GPIO_PinOPType = GPIO_PIN_OP_TYPE_OD;
 800026e:	2301      	movs	r3, #1
 8000270:	733b      	strb	r3, [r7, #12]
	I2C_pins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000272:	2301      	movs	r3, #1
 8000274:	72fb      	strb	r3, [r7, #11]
	I2C_pins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_PIN_OP_SPEED_FAST;
 8000276:	2302      	movs	r3, #2
 8000278:	72bb      	strb	r3, [r7, #10]

	//Start GPIO peripheral clock
	GPIO_PeriClockControl(I2C_pins.pGPIOx, ENABLE);
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	2101      	movs	r1, #1
 800027e:	4618      	mov	r0, r3
 8000280:	f000 f926 	bl	80004d0 <GPIO_PeriClockControl>

	//Configure I2C1_SCL
	I2C_pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 8000284:	2306      	movs	r3, #6
 8000286:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2C_pins);
 8000288:	1d3b      	adds	r3, r7, #4
 800028a:	4618      	mov	r0, r3
 800028c:	f000 f9f2 	bl	8000674 <GPIO_Init>

	//Configure I2C1_SDA
	I2C_pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 8000290:	2307      	movs	r3, #7
 8000292:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2C_pins);
 8000294:	1d3b      	adds	r3, r7, #4
 8000296:	4618      	mov	r0, r3
 8000298:	f000 f9ec 	bl	8000674 <GPIO_Init>
}
 800029c:	bf00      	nop
 800029e:	3710      	adds	r7, #16
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	40020400 	.word	0x40020400

080002a8 <I2C1_Inits>:

void I2C1_Inits(void){
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0
	I2C1_handle.pI2Cx = I2C1;
 80002ac:	4b09      	ldr	r3, [pc, #36]	; (80002d4 <I2C1_Inits+0x2c>)
 80002ae:	4a0a      	ldr	r2, [pc, #40]	; (80002d8 <I2C1_Inits+0x30>)
 80002b0:	601a      	str	r2, [r3, #0]

	I2C1_handle.I2C_Config.I2C_ACKControl = I2C_ACK_ENABLE;
 80002b2:	4b08      	ldr	r3, [pc, #32]	; (80002d4 <I2C1_Inits+0x2c>)
 80002b4:	2201      	movs	r2, #1
 80002b6:	60da      	str	r2, [r3, #12]
	I2C1_handle.I2C_Config.I2C_DeviceAddress = MY_ADDR;
 80002b8:	4b06      	ldr	r3, [pc, #24]	; (80002d4 <I2C1_Inits+0x2c>)
 80002ba:	2261      	movs	r2, #97	; 0x61
 80002bc:	721a      	strb	r2, [r3, #8]
	I2C1_handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 80002be:	4b05      	ldr	r3, [pc, #20]	; (80002d4 <I2C1_Inits+0x2c>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	611a      	str	r2, [r3, #16]
	I2C1_handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 80002c4:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <I2C1_Inits+0x2c>)
 80002c6:	4a05      	ldr	r2, [pc, #20]	; (80002dc <I2C1_Inits+0x34>)
 80002c8:	605a      	str	r2, [r3, #4]

	I2C_Init(&I2C1_handle);
 80002ca:	4802      	ldr	r0, [pc, #8]	; (80002d4 <I2C1_Inits+0x2c>)
 80002cc:	f000 fd64 	bl	8000d98 <I2C_Init>
}
 80002d0:	bf00      	nop
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	2000008c 	.word	0x2000008c
 80002d8:	40005400 	.word	0x40005400
 80002dc:	000186a0 	.word	0x000186a0

080002e0 <main>:

int main(void){
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b08c      	sub	sp, #48	; 0x30
 80002e4:	af02      	add	r7, sp, #8
	GPIO_Button_Init();
 80002e6:	f7ff ffa1 	bl	800022c <GPIO_Button_Init>
	I2C1_GPIOInits();
 80002ea:	f7ff ffb7 	bl	800025c <I2C1_GPIOInits>
	I2C1_Inits();
 80002ee:	f7ff ffdb 	bl	80002a8 <I2C1_Inits>

	I2C_IRQInterruptConfig(IRQ_NO_I2C1_EV, ENABLE);
 80002f2:	2101      	movs	r1, #1
 80002f4:	201f      	movs	r0, #31
 80002f6:	f000 fe99 	bl	800102c <I2C_IRQInterruptConfig>
	I2C_IRQInterruptConfig(IRQ_NO_I2C1_ER, ENABLE);
 80002fa:	2101      	movs	r1, #1
 80002fc:	2020      	movs	r0, #32
 80002fe:	f000 fe95 	bl	800102c <I2C_IRQInterruptConfig>

	uint8_t rcv_buf[32];
	uint8_t len = 0;
 8000302:	2300      	movs	r3, #0
 8000304:	71fb      	strb	r3, [r7, #7]
	uint8_t command_code = 0;
 8000306:	2300      	movs	r3, #0
 8000308:	71bb      	strb	r3, [r7, #6]

	while(1){
		//Button press and de-bouncing delay
		while(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13)){};
 800030a:	bf00      	nop
 800030c:	210d      	movs	r1, #13
 800030e:	4823      	ldr	r0, [pc, #140]	; (800039c <main+0xbc>)
 8000310:	f000 fb7a 	bl	8000a08 <GPIO_ReadFromInputPin>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d1f8      	bne.n	800030c <main+0x2c>
		delay();
 800031a:	f7ff ff73 	bl	8000204 <delay>

		//Send Len command and receive Len
		command_code = LEN_COMMAND;
 800031e:	2351      	movs	r3, #81	; 0x51
 8000320:	71bb      	strb	r3, [r7, #6]
		while(I2C_MasterSendData_IT(&I2C1_handle, &command_code, 1, SLAVE_ADDR, I2C_ENABLE_SR) != I2C_READY);
 8000322:	bf00      	nop
 8000324:	1db9      	adds	r1, r7, #6
 8000326:	2301      	movs	r3, #1
 8000328:	9300      	str	r3, [sp, #0]
 800032a:	2366      	movs	r3, #102	; 0x66
 800032c:	2201      	movs	r2, #1
 800032e:	481c      	ldr	r0, [pc, #112]	; (80003a0 <main+0xc0>)
 8000330:	f000 fdee 	bl	8000f10 <I2C_MasterSendData_IT>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d1f4      	bne.n	8000324 <main+0x44>
		while(I2C_MasterReceiveData_IT(&I2C1_handle, &len, 1, SLAVE_ADDR, I2C_ENABLE_SR) != I2C_READY);
 800033a:	bf00      	nop
 800033c:	1df9      	adds	r1, r7, #7
 800033e:	2301      	movs	r3, #1
 8000340:	9300      	str	r3, [sp, #0]
 8000342:	2366      	movs	r3, #102	; 0x66
 8000344:	2201      	movs	r2, #1
 8000346:	4816      	ldr	r0, [pc, #88]	; (80003a0 <main+0xc0>)
 8000348:	f000 fe27 	bl	8000f9a <I2C_MasterReceiveData_IT>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d1f4      	bne.n	800033c <main+0x5c>

		//Send data command and receive data
		command_code = DATA_COMMAND;
 8000352:	2352      	movs	r3, #82	; 0x52
 8000354:	71bb      	strb	r3, [r7, #6]
		while(I2C_MasterSendData_IT(&I2C1_handle, &command_code, 1, SLAVE_ADDR, I2C_ENABLE_SR) != I2C_READY);
 8000356:	bf00      	nop
 8000358:	1db9      	adds	r1, r7, #6
 800035a:	2301      	movs	r3, #1
 800035c:	9300      	str	r3, [sp, #0]
 800035e:	2366      	movs	r3, #102	; 0x66
 8000360:	2201      	movs	r2, #1
 8000362:	480f      	ldr	r0, [pc, #60]	; (80003a0 <main+0xc0>)
 8000364:	f000 fdd4 	bl	8000f10 <I2C_MasterSendData_IT>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d1f4      	bne.n	8000358 <main+0x78>
		while(I2C_MasterReceiveData_IT(&I2C1_handle, rcv_buf, len, SLAVE_ADDR, I2C_DISABLE_SR) != I2C_READY);
 800036e:	bf00      	nop
 8000370:	79fb      	ldrb	r3, [r7, #7]
 8000372:	461a      	mov	r2, r3
 8000374:	f107 0108 	add.w	r1, r7, #8
 8000378:	2300      	movs	r3, #0
 800037a:	9300      	str	r3, [sp, #0]
 800037c:	2366      	movs	r3, #102	; 0x66
 800037e:	4808      	ldr	r0, [pc, #32]	; (80003a0 <main+0xc0>)
 8000380:	f000 fe0b 	bl	8000f9a <I2C_MasterReceiveData_IT>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d1f2      	bne.n	8000370 <main+0x90>

		rcv_buf[len] = '\0';
 800038a:	79fb      	ldrb	r3, [r7, #7]
 800038c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000390:	4413      	add	r3, r2
 8000392:	2200      	movs	r2, #0
 8000394:	f803 2c20 	strb.w	r2, [r3, #-32]
		while(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13)){};
 8000398:	e7b7      	b.n	800030a <main+0x2a>
 800039a:	bf00      	nop
 800039c:	40020800 	.word	0x40020800
 80003a0:	2000008c 	.word	0x2000008c

080003a4 <I2C1_EV_IRQHandler>:
	}
}

void I2C1_EV_IRQHandler(void){
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
	I2C_EV_IRQHandling(&I2C1_handle);
 80003a8:	4802      	ldr	r0, [pc, #8]	; (80003b4 <I2C1_EV_IRQHandler+0x10>)
 80003aa:	f000 ff24 	bl	80011f6 <I2C_EV_IRQHandling>
}
 80003ae:	bf00      	nop
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	2000008c 	.word	0x2000008c

080003b8 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void){
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
	I2C_ER_IRQHandling(&I2C1_handle);
 80003bc:	4802      	ldr	r0, [pc, #8]	; (80003c8 <I2C1_ER_IRQHandler+0x10>)
 80003be:	f000 ffe4 	bl	800138a <I2C_ER_IRQHandling>
}
 80003c2:	bf00      	nop
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	2000008c 	.word	0x2000008c

080003cc <I2C_ApplicationEventCallback>:

void I2C_ApplicationEventCallback(I2C_Handle_t *pI2CHandle, uint8_t AppEv){
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b082      	sub	sp, #8
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
 80003d4:	460b      	mov	r3, r1
 80003d6:	70fb      	strb	r3, [r7, #3]
	if(AppEv == I2C_EV_TX_CMPLT){
 80003d8:	78fb      	ldrb	r3, [r7, #3]
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d103      	bne.n	80003e6 <I2C_ApplicationEventCallback+0x1a>
		printf("Tx is completed\n");
 80003de:	480f      	ldr	r0, [pc, #60]	; (800041c <I2C_ApplicationEventCallback+0x50>)
 80003e0:	f001 f91e 	bl	8001620 <puts>
		I2C_CloseRx(pI2CHandle);
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);

		while(1);
	}
}
 80003e4:	e015      	b.n	8000412 <I2C_ApplicationEventCallback+0x46>
	} else if(AppEv == I2C_EV_RX_CMPLT){
 80003e6:	78fb      	ldrb	r3, [r7, #3]
 80003e8:	2b01      	cmp	r3, #1
 80003ea:	d103      	bne.n	80003f4 <I2C_ApplicationEventCallback+0x28>
		printf("Rx is completed\n");
 80003ec:	480c      	ldr	r0, [pc, #48]	; (8000420 <I2C_ApplicationEventCallback+0x54>)
 80003ee:	f001 f917 	bl	8001620 <puts>
}
 80003f2:	e00e      	b.n	8000412 <I2C_ApplicationEventCallback+0x46>
	} else if(AppEv == I2C_ERROR_AF){
 80003f4:	78fb      	ldrb	r3, [r7, #3]
 80003f6:	2b05      	cmp	r3, #5
 80003f8:	d10b      	bne.n	8000412 <I2C_ApplicationEventCallback+0x46>
		I2C_CloseTx(pI2CHandle);
 80003fa:	6878      	ldr	r0, [r7, #4]
 80003fc:	f000 fec9 	bl	8001192 <I2C_CloseTx>
		I2C_CloseRx(pI2CHandle);
 8000400:	6878      	ldr	r0, [r7, #4]
 8000402:	f000 fe97 	bl	8001134 <I2C_CloseRx>
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	4618      	mov	r0, r3
 800040c:	f000 fee4 	bl	80011d8 <I2C_GenerateStopCondition>
		while(1);
 8000410:	e7fe      	b.n	8000410 <I2C_ApplicationEventCallback+0x44>
}
 8000412:	bf00      	nop
 8000414:	3708      	adds	r7, #8
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	08001eb0 	.word	0x08001eb0
 8000420:	08001ec0 	.word	0x08001ec0

08000424 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b084      	sub	sp, #16
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800042c:	4b11      	ldr	r3, [pc, #68]	; (8000474 <_sbrk+0x50>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	2b00      	cmp	r3, #0
 8000432:	d102      	bne.n	800043a <_sbrk+0x16>
		heap_end = &end;
 8000434:	4b0f      	ldr	r3, [pc, #60]	; (8000474 <_sbrk+0x50>)
 8000436:	4a10      	ldr	r2, [pc, #64]	; (8000478 <_sbrk+0x54>)
 8000438:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800043a:	4b0e      	ldr	r3, [pc, #56]	; (8000474 <_sbrk+0x50>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000440:	4b0c      	ldr	r3, [pc, #48]	; (8000474 <_sbrk+0x50>)
 8000442:	681a      	ldr	r2, [r3, #0]
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	4413      	add	r3, r2
 8000448:	466a      	mov	r2, sp
 800044a:	4293      	cmp	r3, r2
 800044c:	d907      	bls.n	800045e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800044e:	f001 f859 	bl	8001504 <__errno>
 8000452:	4602      	mov	r2, r0
 8000454:	230c      	movs	r3, #12
 8000456:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000458:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800045c:	e006      	b.n	800046c <_sbrk+0x48>
	}

	heap_end += incr;
 800045e:	4b05      	ldr	r3, [pc, #20]	; (8000474 <_sbrk+0x50>)
 8000460:	681a      	ldr	r2, [r3, #0]
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	4413      	add	r3, r2
 8000466:	4a03      	ldr	r2, [pc, #12]	; (8000474 <_sbrk+0x50>)
 8000468:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800046a:	68fb      	ldr	r3, [r7, #12]
}
 800046c:	4618      	mov	r0, r3
 800046e:	3710      	adds	r7, #16
 8000470:	46bd      	mov	sp, r7
 8000472:	bd80      	pop	{r7, pc}
 8000474:	20000080 	.word	0x20000080
 8000478:	200000c0 	.word	0x200000c0

0800047c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800047c:	480d      	ldr	r0, [pc, #52]	; (80004b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800047e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000480:	480d      	ldr	r0, [pc, #52]	; (80004b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000482:	490e      	ldr	r1, [pc, #56]	; (80004bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000484:	4a0e      	ldr	r2, [pc, #56]	; (80004c0 <LoopForever+0xe>)
  movs r3, #0
 8000486:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000488:	e002      	b.n	8000490 <LoopCopyDataInit>

0800048a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800048a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800048c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800048e:	3304      	adds	r3, #4

08000490 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000490:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000492:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000494:	d3f9      	bcc.n	800048a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000496:	4a0b      	ldr	r2, [pc, #44]	; (80004c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000498:	4c0b      	ldr	r4, [pc, #44]	; (80004c8 <LoopForever+0x16>)
  movs r3, #0
 800049a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800049c:	e001      	b.n	80004a2 <LoopFillZerobss>

0800049e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800049e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004a0:	3204      	adds	r2, #4

080004a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004a4:	d3fb      	bcc.n	800049e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80004a6:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 80004aa:	f001 f831 	bl	8001510 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004ae:	f7ff ff17 	bl	80002e0 <main>

080004b2 <LoopForever>:

LoopForever:
    b LoopForever
 80004b2:	e7fe      	b.n	80004b2 <LoopForever>
  ldr   r0, =_estack
 80004b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004bc:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80004c0:	08001f3c 	.word	0x08001f3c
  ldr r2, =_sbss
 80004c4:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80004c8:	200000c0 	.word	0x200000c0

080004cc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004cc:	e7fe      	b.n	80004cc <ADC_IRQHandler>
	...

080004d0 <GPIO_PeriClockControl>:
 * @return				- none
 *
 * @note				- none
 *
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
 80004d8:	460b      	mov	r3, r1
 80004da:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 80004dc:	78fb      	ldrb	r3, [r7, #3]
 80004de:	2b01      	cmp	r3, #1
 80004e0:	d157      	bne.n	8000592 <GPIO_PeriClockControl+0xc2>
		if(pGPIOx == GPIOA){
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	4a5a      	ldr	r2, [pc, #360]	; (8000650 <GPIO_PeriClockControl+0x180>)
 80004e6:	4293      	cmp	r3, r2
 80004e8:	d106      	bne.n	80004f8 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 80004ea:	4b5a      	ldr	r3, [pc, #360]	; (8000654 <GPIO_PeriClockControl+0x184>)
 80004ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ee:	4a59      	ldr	r2, [pc, #356]	; (8000654 <GPIO_PeriClockControl+0x184>)
 80004f0:	f043 0301 	orr.w	r3, r3, #1
 80004f4:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOG_PCLK_DI();
		} else if(pGPIOx == GPIOH){
			GPIOH_PCLK_DI();
		}
	}
}
 80004f6:	e0a6      	b.n	8000646 <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOB){
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	4a57      	ldr	r2, [pc, #348]	; (8000658 <GPIO_PeriClockControl+0x188>)
 80004fc:	4293      	cmp	r3, r2
 80004fe:	d106      	bne.n	800050e <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000500:	4b54      	ldr	r3, [pc, #336]	; (8000654 <GPIO_PeriClockControl+0x184>)
 8000502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000504:	4a53      	ldr	r2, [pc, #332]	; (8000654 <GPIO_PeriClockControl+0x184>)
 8000506:	f043 0302 	orr.w	r3, r3, #2
 800050a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800050c:	e09b      	b.n	8000646 <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOC){
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	4a52      	ldr	r2, [pc, #328]	; (800065c <GPIO_PeriClockControl+0x18c>)
 8000512:	4293      	cmp	r3, r2
 8000514:	d106      	bne.n	8000524 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000516:	4b4f      	ldr	r3, [pc, #316]	; (8000654 <GPIO_PeriClockControl+0x184>)
 8000518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051a:	4a4e      	ldr	r2, [pc, #312]	; (8000654 <GPIO_PeriClockControl+0x184>)
 800051c:	f043 0304 	orr.w	r3, r3, #4
 8000520:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000522:	e090      	b.n	8000646 <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOD){
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	4a4e      	ldr	r2, [pc, #312]	; (8000660 <GPIO_PeriClockControl+0x190>)
 8000528:	4293      	cmp	r3, r2
 800052a:	d106      	bne.n	800053a <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 800052c:	4b49      	ldr	r3, [pc, #292]	; (8000654 <GPIO_PeriClockControl+0x184>)
 800052e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000530:	4a48      	ldr	r2, [pc, #288]	; (8000654 <GPIO_PeriClockControl+0x184>)
 8000532:	f043 0308 	orr.w	r3, r3, #8
 8000536:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000538:	e085      	b.n	8000646 <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOE){
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	4a49      	ldr	r2, [pc, #292]	; (8000664 <GPIO_PeriClockControl+0x194>)
 800053e:	4293      	cmp	r3, r2
 8000540:	d106      	bne.n	8000550 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000542:	4b44      	ldr	r3, [pc, #272]	; (8000654 <GPIO_PeriClockControl+0x184>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000546:	4a43      	ldr	r2, [pc, #268]	; (8000654 <GPIO_PeriClockControl+0x184>)
 8000548:	f043 0310 	orr.w	r3, r3, #16
 800054c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800054e:	e07a      	b.n	8000646 <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOF){
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	4a45      	ldr	r2, [pc, #276]	; (8000668 <GPIO_PeriClockControl+0x198>)
 8000554:	4293      	cmp	r3, r2
 8000556:	d106      	bne.n	8000566 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000558:	4b3e      	ldr	r3, [pc, #248]	; (8000654 <GPIO_PeriClockControl+0x184>)
 800055a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055c:	4a3d      	ldr	r2, [pc, #244]	; (8000654 <GPIO_PeriClockControl+0x184>)
 800055e:	f043 0320 	orr.w	r3, r3, #32
 8000562:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000564:	e06f      	b.n	8000646 <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOG){
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	4a40      	ldr	r2, [pc, #256]	; (800066c <GPIO_PeriClockControl+0x19c>)
 800056a:	4293      	cmp	r3, r2
 800056c:	d106      	bne.n	800057c <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 800056e:	4b39      	ldr	r3, [pc, #228]	; (8000654 <GPIO_PeriClockControl+0x184>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000572:	4a38      	ldr	r2, [pc, #224]	; (8000654 <GPIO_PeriClockControl+0x184>)
 8000574:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000578:	6313      	str	r3, [r2, #48]	; 0x30
}
 800057a:	e064      	b.n	8000646 <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOH){
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	4a3c      	ldr	r2, [pc, #240]	; (8000670 <GPIO_PeriClockControl+0x1a0>)
 8000580:	4293      	cmp	r3, r2
 8000582:	d160      	bne.n	8000646 <GPIO_PeriClockControl+0x176>
			GPIOH_PCLK_EN();
 8000584:	4b33      	ldr	r3, [pc, #204]	; (8000654 <GPIO_PeriClockControl+0x184>)
 8000586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000588:	4a32      	ldr	r2, [pc, #200]	; (8000654 <GPIO_PeriClockControl+0x184>)
 800058a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800058e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000590:	e059      	b.n	8000646 <GPIO_PeriClockControl+0x176>
	} else if(EnorDi == DISABLE){
 8000592:	78fb      	ldrb	r3, [r7, #3]
 8000594:	2b00      	cmp	r3, #0
 8000596:	d156      	bne.n	8000646 <GPIO_PeriClockControl+0x176>
		if(pGPIOx == GPIOA){
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	4a2d      	ldr	r2, [pc, #180]	; (8000650 <GPIO_PeriClockControl+0x180>)
 800059c:	4293      	cmp	r3, r2
 800059e:	d106      	bne.n	80005ae <GPIO_PeriClockControl+0xde>
			GPIOA_PCLK_DI();
 80005a0:	4b2c      	ldr	r3, [pc, #176]	; (8000654 <GPIO_PeriClockControl+0x184>)
 80005a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a4:	4a2b      	ldr	r2, [pc, #172]	; (8000654 <GPIO_PeriClockControl+0x184>)
 80005a6:	f023 0301 	bic.w	r3, r3, #1
 80005aa:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005ac:	e04b      	b.n	8000646 <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOB){
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	4a29      	ldr	r2, [pc, #164]	; (8000658 <GPIO_PeriClockControl+0x188>)
 80005b2:	4293      	cmp	r3, r2
 80005b4:	d106      	bne.n	80005c4 <GPIO_PeriClockControl+0xf4>
			GPIOB_PCLK_DI();
 80005b6:	4b27      	ldr	r3, [pc, #156]	; (8000654 <GPIO_PeriClockControl+0x184>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ba:	4a26      	ldr	r2, [pc, #152]	; (8000654 <GPIO_PeriClockControl+0x184>)
 80005bc:	f023 0302 	bic.w	r3, r3, #2
 80005c0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005c2:	e040      	b.n	8000646 <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOC){
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	4a25      	ldr	r2, [pc, #148]	; (800065c <GPIO_PeriClockControl+0x18c>)
 80005c8:	4293      	cmp	r3, r2
 80005ca:	d106      	bne.n	80005da <GPIO_PeriClockControl+0x10a>
			GPIOC_PCLK_DI();
 80005cc:	4b21      	ldr	r3, [pc, #132]	; (8000654 <GPIO_PeriClockControl+0x184>)
 80005ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d0:	4a20      	ldr	r2, [pc, #128]	; (8000654 <GPIO_PeriClockControl+0x184>)
 80005d2:	f023 0304 	bic.w	r3, r3, #4
 80005d6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005d8:	e035      	b.n	8000646 <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOD){
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	4a20      	ldr	r2, [pc, #128]	; (8000660 <GPIO_PeriClockControl+0x190>)
 80005de:	4293      	cmp	r3, r2
 80005e0:	d106      	bne.n	80005f0 <GPIO_PeriClockControl+0x120>
			GPIOD_PCLK_DI();
 80005e2:	4b1c      	ldr	r3, [pc, #112]	; (8000654 <GPIO_PeriClockControl+0x184>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	4a1b      	ldr	r2, [pc, #108]	; (8000654 <GPIO_PeriClockControl+0x184>)
 80005e8:	f023 0308 	bic.w	r3, r3, #8
 80005ec:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005ee:	e02a      	b.n	8000646 <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOE){
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	4a1c      	ldr	r2, [pc, #112]	; (8000664 <GPIO_PeriClockControl+0x194>)
 80005f4:	4293      	cmp	r3, r2
 80005f6:	d106      	bne.n	8000606 <GPIO_PeriClockControl+0x136>
			GPIOE_PCLK_DI();
 80005f8:	4b16      	ldr	r3, [pc, #88]	; (8000654 <GPIO_PeriClockControl+0x184>)
 80005fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fc:	4a15      	ldr	r2, [pc, #84]	; (8000654 <GPIO_PeriClockControl+0x184>)
 80005fe:	f023 0310 	bic.w	r3, r3, #16
 8000602:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000604:	e01f      	b.n	8000646 <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOF){
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	4a17      	ldr	r2, [pc, #92]	; (8000668 <GPIO_PeriClockControl+0x198>)
 800060a:	4293      	cmp	r3, r2
 800060c:	d106      	bne.n	800061c <GPIO_PeriClockControl+0x14c>
			GPIOF_PCLK_DI();
 800060e:	4b11      	ldr	r3, [pc, #68]	; (8000654 <GPIO_PeriClockControl+0x184>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	4a10      	ldr	r2, [pc, #64]	; (8000654 <GPIO_PeriClockControl+0x184>)
 8000614:	f023 0320 	bic.w	r3, r3, #32
 8000618:	6313      	str	r3, [r2, #48]	; 0x30
}
 800061a:	e014      	b.n	8000646 <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOG){
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	4a13      	ldr	r2, [pc, #76]	; (800066c <GPIO_PeriClockControl+0x19c>)
 8000620:	4293      	cmp	r3, r2
 8000622:	d106      	bne.n	8000632 <GPIO_PeriClockControl+0x162>
			GPIOG_PCLK_DI();
 8000624:	4b0b      	ldr	r3, [pc, #44]	; (8000654 <GPIO_PeriClockControl+0x184>)
 8000626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000628:	4a0a      	ldr	r2, [pc, #40]	; (8000654 <GPIO_PeriClockControl+0x184>)
 800062a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800062e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000630:	e009      	b.n	8000646 <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOH){
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	4a0e      	ldr	r2, [pc, #56]	; (8000670 <GPIO_PeriClockControl+0x1a0>)
 8000636:	4293      	cmp	r3, r2
 8000638:	d105      	bne.n	8000646 <GPIO_PeriClockControl+0x176>
			GPIOH_PCLK_DI();
 800063a:	4b06      	ldr	r3, [pc, #24]	; (8000654 <GPIO_PeriClockControl+0x184>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	4a05      	ldr	r2, [pc, #20]	; (8000654 <GPIO_PeriClockControl+0x184>)
 8000640:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000644:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000646:	bf00      	nop
 8000648:	370c      	adds	r7, #12
 800064a:	46bd      	mov	sp, r7
 800064c:	bc80      	pop	{r7}
 800064e:	4770      	bx	lr
 8000650:	40020000 	.word	0x40020000
 8000654:	40023800 	.word	0x40023800
 8000658:	40020400 	.word	0x40020400
 800065c:	40020800 	.word	0x40020800
 8000660:	40020c00 	.word	0x40020c00
 8000664:	40021000 	.word	0x40021000
 8000668:	40021400 	.word	0x40021400
 800066c:	40021800 	.word	0x40021800
 8000670:	40021c00 	.word	0x40021c00

08000674 <GPIO_Init>:
 * @return				- none
 *
 * @note				- none
 *
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8000674:	b480      	push	{r7}
 8000676:	b08b      	sub	sp, #44	; 0x2c
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
	uint32_t reset_value = 0;
 800067c:	2300      	movs	r3, #0
 800067e:	627b      	str	r3, [r7, #36]	; 0x24

	//reset, then set mode register
	if( pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_PIN_MODE_ANALOG){
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	795b      	ldrb	r3, [r3, #5]
 8000684:	2b03      	cmp	r3, #3
 8000686:	d823      	bhi.n	80006d0 <GPIO_Init+0x5c>
		reset_value = (0x3 << ((2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)));
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	791b      	ldrb	r3, [r3, #4]
 800068c:	005b      	lsls	r3, r3, #1
 800068e:	2203      	movs	r2, #3
 8000690:	fa02 f303 	lsl.w	r3, r2, r3
 8000694:	627b      	str	r3, [r7, #36]	; 0x24
		pGPIOHandle->pGPIOx->MODER &= ~(reset_value);
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	6819      	ldr	r1, [r3, #0]
 800069c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800069e:	43da      	mvns	r2, r3
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	400a      	ands	r2, r1
 80006a6:	601a      	str	r2, [r3, #0]
		reset_value = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	627b      	str	r3, [r7, #36]	; 0x24

		uint32_t moder_value = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	795b      	ldrb	r3, [r3, #5]
 80006b0:	461a      	mov	r2, r3
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	791b      	ldrb	r3, [r3, #4]
 80006b6:	005b      	lsls	r3, r3, #1
 80006b8:	fa02 f303 	lsl.w	r3, r2, r3
 80006bc:	61fb      	str	r3, [r7, #28]
		pGPIOHandle->pGPIOx->MODER |= moder_value;
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	6819      	ldr	r1, [r3, #0]
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	69fa      	ldr	r2, [r7, #28]
 80006ca:	430a      	orrs	r2, r1
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	e0ee      	b.n	80008ae <GPIO_Init+0x23a>
	} else{
		//interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_PIN_MODE_IT_FT){
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	795b      	ldrb	r3, [r3, #5]
 80006d4:	2b04      	cmp	r3, #4
 80006d6:	d11a      	bne.n	800070e <GPIO_Init+0x9a>
			//reset RTSR
			reset_value = (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	791b      	ldrb	r3, [r3, #4]
 80006dc:	461a      	mov	r2, r3
 80006de:	2301      	movs	r3, #1
 80006e0:	4093      	lsls	r3, r2
 80006e2:	627b      	str	r3, [r7, #36]	; 0x24
			EXTI->RTSR &= ~(reset_value);
 80006e4:	4b49      	ldr	r3, [pc, #292]	; (800080c <GPIO_Init+0x198>)
 80006e6:	689a      	ldr	r2, [r3, #8]
 80006e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ea:	43db      	mvns	r3, r3
 80006ec:	4947      	ldr	r1, [pc, #284]	; (800080c <GPIO_Init+0x198>)
 80006ee:	4013      	ands	r3, r2
 80006f0:	608b      	str	r3, [r1, #8]
			reset_value = 0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	627b      	str	r3, [r7, #36]	; 0x24

			//configure FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006f6:	4b45      	ldr	r3, [pc, #276]	; (800080c <GPIO_Init+0x198>)
 80006f8:	68db      	ldr	r3, [r3, #12]
 80006fa:	687a      	ldr	r2, [r7, #4]
 80006fc:	7912      	ldrb	r2, [r2, #4]
 80006fe:	4611      	mov	r1, r2
 8000700:	2201      	movs	r2, #1
 8000702:	408a      	lsls	r2, r1
 8000704:	4611      	mov	r1, r2
 8000706:	4a41      	ldr	r2, [pc, #260]	; (800080c <GPIO_Init+0x198>)
 8000708:	430b      	orrs	r3, r1
 800070a:	60d3      	str	r3, [r2, #12]
 800070c:	e038      	b.n	8000780 <GPIO_Init+0x10c>
		} else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_PIN_MODE_IT_RT){
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	795b      	ldrb	r3, [r3, #5]
 8000712:	2b05      	cmp	r3, #5
 8000714:	d11a      	bne.n	800074c <GPIO_Init+0xd8>
			//reset FTSR
			reset_value = (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	791b      	ldrb	r3, [r3, #4]
 800071a:	461a      	mov	r2, r3
 800071c:	2301      	movs	r3, #1
 800071e:	4093      	lsls	r3, r2
 8000720:	627b      	str	r3, [r7, #36]	; 0x24
			EXTI->FTSR &= ~(reset_value);
 8000722:	4b3a      	ldr	r3, [pc, #232]	; (800080c <GPIO_Init+0x198>)
 8000724:	68da      	ldr	r2, [r3, #12]
 8000726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000728:	43db      	mvns	r3, r3
 800072a:	4938      	ldr	r1, [pc, #224]	; (800080c <GPIO_Init+0x198>)
 800072c:	4013      	ands	r3, r2
 800072e:	60cb      	str	r3, [r1, #12]
			reset_value = 0;
 8000730:	2300      	movs	r3, #0
 8000732:	627b      	str	r3, [r7, #36]	; 0x24

			//configure RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000734:	4b35      	ldr	r3, [pc, #212]	; (800080c <GPIO_Init+0x198>)
 8000736:	689b      	ldr	r3, [r3, #8]
 8000738:	687a      	ldr	r2, [r7, #4]
 800073a:	7912      	ldrb	r2, [r2, #4]
 800073c:	4611      	mov	r1, r2
 800073e:	2201      	movs	r2, #1
 8000740:	408a      	lsls	r2, r1
 8000742:	4611      	mov	r1, r2
 8000744:	4a31      	ldr	r2, [pc, #196]	; (800080c <GPIO_Init+0x198>)
 8000746:	430b      	orrs	r3, r1
 8000748:	6093      	str	r3, [r2, #8]
 800074a:	e019      	b.n	8000780 <GPIO_Init+0x10c>
		} else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_PIN_MODE_IT_RFT){
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	795b      	ldrb	r3, [r3, #5]
 8000750:	2b06      	cmp	r3, #6
 8000752:	d115      	bne.n	8000780 <GPIO_Init+0x10c>
			//configure RTSR and FTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000754:	4b2d      	ldr	r3, [pc, #180]	; (800080c <GPIO_Init+0x198>)
 8000756:	689b      	ldr	r3, [r3, #8]
 8000758:	687a      	ldr	r2, [r7, #4]
 800075a:	7912      	ldrb	r2, [r2, #4]
 800075c:	4611      	mov	r1, r2
 800075e:	2201      	movs	r2, #1
 8000760:	408a      	lsls	r2, r1
 8000762:	4611      	mov	r1, r2
 8000764:	4a29      	ldr	r2, [pc, #164]	; (800080c <GPIO_Init+0x198>)
 8000766:	430b      	orrs	r3, r1
 8000768:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800076a:	4b28      	ldr	r3, [pc, #160]	; (800080c <GPIO_Init+0x198>)
 800076c:	68db      	ldr	r3, [r3, #12]
 800076e:	687a      	ldr	r2, [r7, #4]
 8000770:	7912      	ldrb	r2, [r2, #4]
 8000772:	4611      	mov	r1, r2
 8000774:	2201      	movs	r2, #1
 8000776:	408a      	lsls	r2, r1
 8000778:	4611      	mov	r1, r2
 800077a:	4a24      	ldr	r2, [pc, #144]	; (800080c <GPIO_Init+0x198>)
 800077c:	430b      	orrs	r3, r1
 800077e:	60d3      	str	r3, [r2, #12]
		}

		//configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t index = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	791b      	ldrb	r3, [r3, #4]
 8000784:	089b      	lsrs	r3, r3, #2
 8000786:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		uint8_t position = ((pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4) * 4);
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	791b      	ldrb	r3, [r3, #4]
 800078e:	f003 0303 	and.w	r3, r3, #3
 8000792:	b2db      	uxtb	r3, r3
 8000794:	009b      	lsls	r3, r3, #2
 8000796:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		uint8_t port_code = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4a1c      	ldr	r2, [pc, #112]	; (8000810 <GPIO_Init+0x19c>)
 80007a0:	4293      	cmp	r3, r2
 80007a2:	d045      	beq.n	8000830 <GPIO_Init+0x1bc>
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a1a      	ldr	r2, [pc, #104]	; (8000814 <GPIO_Init+0x1a0>)
 80007aa:	4293      	cmp	r3, r2
 80007ac:	d02b      	beq.n	8000806 <GPIO_Init+0x192>
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4a19      	ldr	r2, [pc, #100]	; (8000818 <GPIO_Init+0x1a4>)
 80007b4:	4293      	cmp	r3, r2
 80007b6:	d024      	beq.n	8000802 <GPIO_Init+0x18e>
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a17      	ldr	r2, [pc, #92]	; (800081c <GPIO_Init+0x1a8>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d01d      	beq.n	80007fe <GPIO_Init+0x18a>
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	4a16      	ldr	r2, [pc, #88]	; (8000820 <GPIO_Init+0x1ac>)
 80007c8:	4293      	cmp	r3, r2
 80007ca:	d016      	beq.n	80007fa <GPIO_Init+0x186>
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a14      	ldr	r2, [pc, #80]	; (8000824 <GPIO_Init+0x1b0>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d00f      	beq.n	80007f6 <GPIO_Init+0x182>
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4a13      	ldr	r2, [pc, #76]	; (8000828 <GPIO_Init+0x1b4>)
 80007dc:	4293      	cmp	r3, r2
 80007de:	d008      	beq.n	80007f2 <GPIO_Init+0x17e>
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a11      	ldr	r2, [pc, #68]	; (800082c <GPIO_Init+0x1b8>)
 80007e6:	4293      	cmp	r3, r2
 80007e8:	d101      	bne.n	80007ee <GPIO_Init+0x17a>
 80007ea:	2307      	movs	r3, #7
 80007ec:	e021      	b.n	8000832 <GPIO_Init+0x1be>
 80007ee:	2300      	movs	r3, #0
 80007f0:	e01f      	b.n	8000832 <GPIO_Init+0x1be>
 80007f2:	2306      	movs	r3, #6
 80007f4:	e01d      	b.n	8000832 <GPIO_Init+0x1be>
 80007f6:	2305      	movs	r3, #5
 80007f8:	e01b      	b.n	8000832 <GPIO_Init+0x1be>
 80007fa:	2304      	movs	r3, #4
 80007fc:	e019      	b.n	8000832 <GPIO_Init+0x1be>
 80007fe:	2303      	movs	r3, #3
 8000800:	e017      	b.n	8000832 <GPIO_Init+0x1be>
 8000802:	2302      	movs	r3, #2
 8000804:	e015      	b.n	8000832 <GPIO_Init+0x1be>
 8000806:	2301      	movs	r3, #1
 8000808:	e013      	b.n	8000832 <GPIO_Init+0x1be>
 800080a:	bf00      	nop
 800080c:	40013c00 	.word	0x40013c00
 8000810:	40020000 	.word	0x40020000
 8000814:	40020400 	.word	0x40020400
 8000818:	40020800 	.word	0x40020800
 800081c:	40020c00 	.word	0x40020c00
 8000820:	40021000 	.word	0x40021000
 8000824:	40021400 	.word	0x40021400
 8000828:	40021800 	.word	0x40021800
 800082c:	40021c00 	.word	0x40021c00
 8000830:	2300      	movs	r3, #0
 8000832:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

		SYSCFG_PCLK_EN();
 8000836:	4b71      	ldr	r3, [pc, #452]	; (80009fc <GPIO_Init+0x388>)
 8000838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800083a:	4a70      	ldr	r2, [pc, #448]	; (80009fc <GPIO_Init+0x388>)
 800083c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000840:	6453      	str	r3, [r2, #68]	; 0x44

		reset_value = (0xF << position);
 8000842:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000846:	220f      	movs	r2, #15
 8000848:	fa02 f303 	lsl.w	r3, r2, r3
 800084c:	627b      	str	r3, [r7, #36]	; 0x24
		SYSCFG->EXTICR[index] &= ~(reset_value);
 800084e:	4a6c      	ldr	r2, [pc, #432]	; (8000a00 <GPIO_Init+0x38c>)
 8000850:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000854:	3302      	adds	r3, #2
 8000856:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800085a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800085c:	43da      	mvns	r2, r3
 800085e:	4868      	ldr	r0, [pc, #416]	; (8000a00 <GPIO_Init+0x38c>)
 8000860:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000864:	400a      	ands	r2, r1
 8000866:	3302      	adds	r3, #2
 8000868:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		reset_value = 0;
 800086c:	2300      	movs	r3, #0
 800086e:	627b      	str	r3, [r7, #36]	; 0x24

		SYSCFG->EXTICR[index] |= (port_code << position);
 8000870:	4a63      	ldr	r2, [pc, #396]	; (8000a00 <GPIO_Init+0x38c>)
 8000872:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000876:	3302      	adds	r3, #2
 8000878:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800087c:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 8000880:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000884:	fa01 f303 	lsl.w	r3, r1, r3
 8000888:	4618      	mov	r0, r3
 800088a:	495d      	ldr	r1, [pc, #372]	; (8000a00 <GPIO_Init+0x38c>)
 800088c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000890:	4302      	orrs	r2, r0
 8000892:	3302      	adds	r3, #2
 8000894:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		//enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000898:	4b5a      	ldr	r3, [pc, #360]	; (8000a04 <GPIO_Init+0x390>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	687a      	ldr	r2, [r7, #4]
 800089e:	7912      	ldrb	r2, [r2, #4]
 80008a0:	4611      	mov	r1, r2
 80008a2:	2201      	movs	r2, #1
 80008a4:	408a      	lsls	r2, r1
 80008a6:	4611      	mov	r1, r2
 80008a8:	4a56      	ldr	r2, [pc, #344]	; (8000a04 <GPIO_Init+0x390>)
 80008aa:	430b      	orrs	r3, r1
 80008ac:	6013      	str	r3, [r2, #0]
	}

	// reset, then set speed register
	reset_value = (0x3 << ((2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)));
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	791b      	ldrb	r3, [r3, #4]
 80008b2:	005b      	lsls	r3, r3, #1
 80008b4:	2203      	movs	r2, #3
 80008b6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ba:	627b      	str	r3, [r7, #36]	; 0x24
	pGPIOHandle->pGPIOx->OSPEEDER &= ~(reset_value);
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	6899      	ldr	r1, [r3, #8]
 80008c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008c4:	43da      	mvns	r2, r3
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	400a      	ands	r2, r1
 80008cc:	609a      	str	r2, [r3, #8]
	reset_value = 0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ospeedr_value = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	799b      	ldrb	r3, [r3, #6]
 80008d6:	461a      	mov	r2, r3
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	791b      	ldrb	r3, [r3, #4]
 80008dc:	005b      	lsls	r3, r3, #1
 80008de:	fa02 f303 	lsl.w	r3, r2, r3
 80008e2:	61bb      	str	r3, [r7, #24]
	pGPIOHandle->pGPIOx->OSPEEDER |= ospeedr_value;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	6899      	ldr	r1, [r3, #8]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	69ba      	ldr	r2, [r7, #24]
 80008f0:	430a      	orrs	r2, r1
 80008f2:	609a      	str	r2, [r3, #8]

	//reset, then set pupd register
	reset_value = (0x3 << ((2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)));
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	791b      	ldrb	r3, [r3, #4]
 80008f8:	005b      	lsls	r3, r3, #1
 80008fa:	2203      	movs	r2, #3
 80008fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
	pGPIOHandle->pGPIOx->PUPDR &= ~(reset_value);
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	68d9      	ldr	r1, [r3, #12]
 8000908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800090a:	43da      	mvns	r2, r3
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	400a      	ands	r2, r1
 8000912:	60da      	str	r2, [r3, #12]
	reset_value = 0;
 8000914:	2300      	movs	r3, #0
 8000916:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t pupdr_value = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	79db      	ldrb	r3, [r3, #7]
 800091c:	461a      	mov	r2, r3
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	791b      	ldrb	r3, [r3, #4]
 8000922:	005b      	lsls	r3, r3, #1
 8000924:	fa02 f303 	lsl.w	r3, r2, r3
 8000928:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR |= pupdr_value;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	68d9      	ldr	r1, [r3, #12]
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	697a      	ldr	r2, [r7, #20]
 8000936:	430a      	orrs	r2, r1
 8000938:	60da      	str	r2, [r3, #12]

	//reset, then set output type register
	reset_value = (0x1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	791b      	ldrb	r3, [r3, #4]
 800093e:	461a      	mov	r2, r3
 8000940:	2301      	movs	r3, #1
 8000942:	4093      	lsls	r3, r2
 8000944:	627b      	str	r3, [r7, #36]	; 0x24
	pGPIOHandle->pGPIOx->OTYPER &= ~(reset_value);
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	6859      	ldr	r1, [r3, #4]
 800094c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800094e:	43da      	mvns	r2, r3
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	400a      	ands	r2, r1
 8000956:	605a      	str	r2, [r3, #4]
	reset_value = 0;
 8000958:	2300      	movs	r3, #0
 800095a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t optyper_value = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	7a1b      	ldrb	r3, [r3, #8]
 8000960:	461a      	mov	r2, r3
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	791b      	ldrb	r3, [r3, #4]
 8000966:	fa02 f303 	lsl.w	r3, r2, r3
 800096a:	613b      	str	r3, [r7, #16]
	pGPIOHandle->pGPIOx->OTYPER |= optyper_value;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	6859      	ldr	r1, [r3, #4]
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	693a      	ldr	r2, [r7, #16]
 8000978:	430a      	orrs	r2, r1
 800097a:	605a      	str	r2, [r3, #4]

	//reset, then set altfn register
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_PIN_MODE_ALTFN){
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	795b      	ldrb	r3, [r3, #5]
 8000980:	2b02      	cmp	r3, #2
 8000982:	d135      	bne.n	80009f0 <GPIO_Init+0x37c>
		uint8_t index = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8);
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	791b      	ldrb	r3, [r3, #4]
 8000988:	08db      	lsrs	r3, r3, #3
 800098a:	73fb      	strb	r3, [r7, #15]
		uint8_t position = ((pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8) * 4);
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	791b      	ldrb	r3, [r3, #4]
 8000990:	f003 0307 	and.w	r3, r3, #7
 8000994:	b2db      	uxtb	r3, r3
 8000996:	009b      	lsls	r3, r3, #2
 8000998:	73bb      	strb	r3, [r7, #14]

		//reset
		reset_value = (0xF << position);
 800099a:	7bbb      	ldrb	r3, [r7, #14]
 800099c:	220f      	movs	r2, #15
 800099e:	fa02 f303 	lsl.w	r3, r2, r3
 80009a2:	627b      	str	r3, [r7, #36]	; 0x24
		pGPIOHandle->pGPIOx->AFR[index] &= ~(reset_value);
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	7bfa      	ldrb	r2, [r7, #15]
 80009aa:	3208      	adds	r2, #8
 80009ac:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80009b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009b2:	43d9      	mvns	r1, r3
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	7bfa      	ldrb	r2, [r7, #15]
 80009ba:	4001      	ands	r1, r0
 80009bc:	3208      	adds	r2, #8
 80009be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		reset_value = 0;
 80009c2:	2300      	movs	r3, #0
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24

		//set
		uint32_t afr_value = (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << position);
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	7a5b      	ldrb	r3, [r3, #9]
 80009ca:	461a      	mov	r2, r3
 80009cc:	7bbb      	ldrb	r3, [r7, #14]
 80009ce:	fa02 f303 	lsl.w	r3, r2, r3
 80009d2:	60bb      	str	r3, [r7, #8]
		pGPIOHandle->pGPIOx->AFR[index] |= afr_value;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	7bfa      	ldrb	r2, [r7, #15]
 80009da:	3208      	adds	r2, #8
 80009dc:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	7bfa      	ldrb	r2, [r7, #15]
 80009e6:	68b9      	ldr	r1, [r7, #8]
 80009e8:	4301      	orrs	r1, r0
 80009ea:	3208      	adds	r2, #8
 80009ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 80009f0:	bf00      	nop
 80009f2:	372c      	adds	r7, #44	; 0x2c
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bc80      	pop	{r7}
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	40023800 	.word	0x40023800
 8000a00:	40013800 	.word	0x40013800
 8000a04:	40013c00 	.word	0x40013c00

08000a08 <GPIO_ReadFromInputPin>:
 * @return				- 0 or 1
 *
 * @note				- none
 *
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber){
 8000a08:	b480      	push	{r7}
 8000a0a:	b085      	sub	sp, #20
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
 8000a10:	460b      	mov	r3, r1
 8000a12:	70fb      	strb	r3, [r7, #3]
	uint8_t value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x00000001);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	691a      	ldr	r2, [r3, #16]
 8000a18:	78fb      	ldrb	r3, [r7, #3]
 8000a1a:	fa22 f303 	lsr.w	r3, r2, r3
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	f003 0301 	and.w	r3, r3, #1
 8000a24:	73fb      	strb	r3, [r7, #15]
	return value;
 8000a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	3714      	adds	r7, #20
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bc80      	pop	{r7}
 8000a30:	4770      	bx	lr

08000a32 <I2C_GenerateStartCondition>:
 * @return				- none
 *
 * @note				- none
 *
 */
static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx){
 8000a32:	b480      	push	{r7}
 8000a34:	b083      	sub	sp, #12
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_START);
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	601a      	str	r2, [r3, #0]
}
 8000a46:	bf00      	nop
 8000a48:	370c      	adds	r7, #12
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bc80      	pop	{r7}
 8000a4e:	4770      	bx	lr

08000a50 <I2C_ExecuteAddressPhaseWrite>:
 * @return				- none
 *
 * @note				- none
 *
 */
static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr){
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
 8000a58:	460b      	mov	r3, r1
 8000a5a:	70fb      	strb	r3, [r7, #3]
	//Make sure there is space for r/w bit
	SlaveAddr = SlaveAddr << 1;
 8000a5c:	78fb      	ldrb	r3, [r7, #3]
 8000a5e:	005b      	lsls	r3, r3, #1
 8000a60:	70fb      	strb	r3, [r7, #3]
	//Clear 0th bit so r/w is set to write
	SlaveAddr &= ~(1 << 0);
 8000a62:	78fb      	ldrb	r3, [r7, #3]
 8000a64:	f023 0301 	bic.w	r3, r3, #1
 8000a68:	70fb      	strb	r3, [r7, #3]
	//Place address into Data Register
	pI2Cx->DR = SlaveAddr;
 8000a6a:	78fa      	ldrb	r2, [r7, #3]
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	611a      	str	r2, [r3, #16]
}
 8000a70:	bf00      	nop
 8000a72:	370c      	adds	r7, #12
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bc80      	pop	{r7}
 8000a78:	4770      	bx	lr

08000a7a <I2C_ExecuteAddressPhaseRead>:
 * @return				- none
 *
 * @note				- none
 *
 */
static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr){
 8000a7a:	b480      	push	{r7}
 8000a7c:	b083      	sub	sp, #12
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	6078      	str	r0, [r7, #4]
 8000a82:	460b      	mov	r3, r1
 8000a84:	70fb      	strb	r3, [r7, #3]
	//Make sure there is space for r/w bit
	SlaveAddr = SlaveAddr << 1;
 8000a86:	78fb      	ldrb	r3, [r7, #3]
 8000a88:	005b      	lsls	r3, r3, #1
 8000a8a:	70fb      	strb	r3, [r7, #3]
	//Clear 0th bit so r/w is set to read
	SlaveAddr |= (1 << 0);
 8000a8c:	78fb      	ldrb	r3, [r7, #3]
 8000a8e:	f043 0301 	orr.w	r3, r3, #1
 8000a92:	70fb      	strb	r3, [r7, #3]
	//Place address into Data Register
	pI2Cx->DR = SlaveAddr;
 8000a94:	78fa      	ldrb	r2, [r7, #3]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	611a      	str	r2, [r3, #16]
}
 8000a9a:	bf00      	nop
 8000a9c:	370c      	adds	r7, #12
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bc80      	pop	{r7}
 8000aa2:	4770      	bx	lr

08000aa4 <I2C_ClearADDRFlag>:
 * @return				- none
 *
 * @note				- none
 *
 */
static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle){
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
	uint8_t dummy_read;

	//Check for device mode (MASTER/SLAVE)
	if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL)){
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	699b      	ldr	r3, [r3, #24]
 8000ab2:	f003 0301 	and.w	r3, r3, #1
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d020      	beq.n	8000afc <I2C_ClearADDRFlag+0x58>
		//MASTER mode
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX){
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000ac0:	2b01      	cmp	r3, #1
 8000ac2:	d112      	bne.n	8000aea <I2C_ClearADDRFlag+0x46>
			if(pI2CHandle->RxSize == 1){
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	d11f      	bne.n	8000b0c <I2C_ClearADDRFlag+0x68>
				//First disable ACK
				I2C_ManageAcking(pI2CHandle->pI2Cx, DISABLE);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f000 fcfa 	bl	80014cc <I2C_ManageAcking>

				//Clear ADDR FLAG (Read SR1, Read SR2)
				dummy_read = pI2CHandle->pI2Cx->SR1;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	695b      	ldr	r3, [r3, #20]
 8000ade:	73fb      	strb	r3, [r7, #15]
				dummy_read = pI2CHandle->pI2Cx->SR2;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	699b      	ldr	r3, [r3, #24]
 8000ae6:	73fb      	strb	r3, [r7, #15]
		//Clear ADDR FLAG (Read SR1, Read SR2)
		dummy_read = pI2CHandle->pI2Cx->SR1;
		dummy_read = pI2CHandle->pI2Cx->SR2;
		(void)dummy_read;
	}
}
 8000ae8:	e010      	b.n	8000b0c <I2C_ClearADDRFlag+0x68>
			dummy_read = pI2CHandle->pI2Cx->SR1;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	695b      	ldr	r3, [r3, #20]
 8000af0:	73fb      	strb	r3, [r7, #15]
			dummy_read = pI2CHandle->pI2Cx->SR2;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	699b      	ldr	r3, [r3, #24]
 8000af8:	73fb      	strb	r3, [r7, #15]
}
 8000afa:	e007      	b.n	8000b0c <I2C_ClearADDRFlag+0x68>
		dummy_read = pI2CHandle->pI2Cx->SR1;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	695b      	ldr	r3, [r3, #20]
 8000b02:	73fb      	strb	r3, [r7, #15]
		dummy_read = pI2CHandle->pI2Cx->SR2;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	699b      	ldr	r3, [r3, #24]
 8000b0a:	73fb      	strb	r3, [r7, #15]
}
 8000b0c:	bf00      	nop
 8000b0e:	3710      	adds	r7, #16
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <I2C_MasterHandleTXEInterrupt>:
 * @return				- none
 *
 * @note				- none
 *
 */
void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle){
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
	if(pI2CHandle->TxLen > 0){
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	69db      	ldr	r3, [r3, #28]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d00f      	beq.n	8000b44 <I2C_MasterHandleTXEInterrupt+0x30>
		//load data in DR
		pI2CHandle->pI2Cx->DR = *(pI2CHandle->pTxBuffer);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	695b      	ldr	r3, [r3, #20]
 8000b28:	781a      	ldrb	r2, [r3, #0]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	611a      	str	r2, [r3, #16]

		//Decrement the LEN
		pI2CHandle->TxLen--;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	69db      	ldr	r3, [r3, #28]
 8000b34:	1e5a      	subs	r2, r3, #1
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	61da      	str	r2, [r3, #28]

		//Increment the buffer
		pI2CHandle->pTxBuffer++;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	695b      	ldr	r3, [r3, #20]
 8000b3e:	1c5a      	adds	r2, r3, #1
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	615a      	str	r2, [r3, #20]
	}
}
 8000b44:	bf00      	nop
 8000b46:	370c      	adds	r7, #12
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bc80      	pop	{r7}
 8000b4c:	4770      	bx	lr

08000b4e <I2C_MasterHandleRXNEInterrupt>:
 * @return				- none
 *
 * @note				- none
 *
 */
void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle){
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	b082      	sub	sp, #8
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	6078      	str	r0, [r7, #4]
	//We have to do the data reception
	if(pI2CHandle->RxSize == 1){
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b5a:	2b01      	cmp	r3, #1
 8000b5c:	d10b      	bne.n	8000b76 <I2C_MasterHandleRXNEInterrupt+0x28>
		*pI2CHandle->pRxBuffer = pI2CHandle->pI2Cx->DR;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	691a      	ldr	r2, [r3, #16]
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	699b      	ldr	r3, [r3, #24]
 8000b68:	b2d2      	uxtb	r2, r2
 8000b6a:	701a      	strb	r2, [r3, #0]
		pI2CHandle->RxLen--;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	6a1b      	ldr	r3, [r3, #32]
 8000b70:	1e5a      	subs	r2, r3, #1
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	621a      	str	r2, [r3, #32]
	}

	if(pI2CHandle->RxSize > 1){
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b7a:	2b01      	cmp	r3, #1
 8000b7c:	d91a      	bls.n	8000bb4 <I2C_MasterHandleRXNEInterrupt+0x66>
		if(pI2CHandle->RxLen == 2){
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	6a1b      	ldr	r3, [r3, #32]
 8000b82:	2b02      	cmp	r3, #2
 8000b84:	d105      	bne.n	8000b92 <I2C_MasterHandleRXNEInterrupt+0x44>
			//Disable ACKing
			I2C_ManageAcking(pI2CHandle->pI2Cx, ENABLE);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	2101      	movs	r1, #1
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f000 fc9d 	bl	80014cc <I2C_ManageAcking>
		}

		//Read DR
		*pI2CHandle->pRxBuffer = pI2CHandle->pI2Cx->DR;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	691a      	ldr	r2, [r3, #16]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	699b      	ldr	r3, [r3, #24]
 8000b9c:	b2d2      	uxtb	r2, r2
 8000b9e:	701a      	strb	r2, [r3, #0]
		pI2CHandle->pRxBuffer++;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	699b      	ldr	r3, [r3, #24]
 8000ba4:	1c5a      	adds	r2, r3, #1
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	619a      	str	r2, [r3, #24]
		pI2CHandle->RxLen--;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6a1b      	ldr	r3, [r3, #32]
 8000bae:	1e5a      	subs	r2, r3, #1
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	621a      	str	r2, [r3, #32]
	}

	if(pI2CHandle->RxLen == 0){
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	6a1b      	ldr	r3, [r3, #32]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d10f      	bne.n	8000bdc <I2C_MasterHandleRXNEInterrupt+0x8e>
		//Close the I2C data reception and notify the application

		//Generate the STOP condition
		if(pI2CHandle->Sr == I2C_DISABLE_SR){
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d104      	bne.n	8000bce <I2C_MasterHandleRXNEInterrupt+0x80>
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f000 fb05 	bl	80011d8 <I2C_GenerateStopCondition>
		}

		//Close the I2C Rx
		I2C_CloseRx(pI2CHandle);
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f000 fab0 	bl	8001134 <I2C_CloseRx>

		//Notify the application about transmission complete
		I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_RX_CMPLT);
 8000bd4:	2101      	movs	r1, #1
 8000bd6:	6878      	ldr	r0, [r7, #4]
 8000bd8:	f7ff fbf8 	bl	80003cc <I2C_ApplicationEventCallback>
	}
}
 8000bdc:	bf00      	nop
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <RCC_GetPCLK1Value>:
 * @return				- peripheral clock speed for I2C peripherals
 *
 * @note				- none
 *
 */
uint32_t RCC_GetPCLK1Value(void){
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
	uint32_t pclk1;
	uint8_t clksrc, ahbprescaler, apb1prescaler;

	clksrc = (RCC->CFGR >> 2) & 0x3;
 8000bea:	4b3d      	ldr	r3, [pc, #244]	; (8000ce0 <RCC_GetPCLK1Value+0xfc>)
 8000bec:	689b      	ldr	r3, [r3, #8]
 8000bee:	089b      	lsrs	r3, r3, #2
 8000bf0:	b2db      	uxtb	r3, r3
 8000bf2:	f003 0303 	and.w	r3, r3, #3
 8000bf6:	70fb      	strb	r3, [r7, #3]
	if(clksrc == 0){
 8000bf8:	78fb      	ldrb	r3, [r7, #3]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d102      	bne.n	8000c04 <RCC_GetPCLK1Value+0x20>
		pclk1 = 16000000;
 8000bfe:	4b39      	ldr	r3, [pc, #228]	; (8000ce4 <RCC_GetPCLK1Value+0x100>)
 8000c00:	607b      	str	r3, [r7, #4]
 8000c02:	e001      	b.n	8000c08 <RCC_GetPCLK1Value+0x24>
	} else{
		pclk1 = 0; //I wont use other clocks for now (i don't have external clock)
 8000c04:	2300      	movs	r3, #0
 8000c06:	607b      	str	r3, [r7, #4]
	}

	ahbprescaler = (RCC->CFGR >> 4) & 0xF;
 8000c08:	4b35      	ldr	r3, [pc, #212]	; (8000ce0 <RCC_GetPCLK1Value+0xfc>)
 8000c0a:	689b      	ldr	r3, [r3, #8]
 8000c0c:	091b      	lsrs	r3, r3, #4
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	f003 030f 	and.w	r3, r3, #15
 8000c14:	70bb      	strb	r3, [r7, #2]
	if(ahbprescaler < 8){
 8000c16:	78bb      	ldrb	r3, [r7, #2]
 8000c18:	2b07      	cmp	r3, #7
 8000c1a:	d936      	bls.n	8000c8a <RCC_GetPCLK1Value+0xa6>
		//clock wont be divided
	}else if(ahbprescaler == 8){
 8000c1c:	78bb      	ldrb	r3, [r7, #2]
 8000c1e:	2b08      	cmp	r3, #8
 8000c20:	d103      	bne.n	8000c2a <RCC_GetPCLK1Value+0x46>
		pclk1 /= 2;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	085b      	lsrs	r3, r3, #1
 8000c26:	607b      	str	r3, [r7, #4]
 8000c28:	e02f      	b.n	8000c8a <RCC_GetPCLK1Value+0xa6>
	}else if(ahbprescaler == 9){
 8000c2a:	78bb      	ldrb	r3, [r7, #2]
 8000c2c:	2b09      	cmp	r3, #9
 8000c2e:	d103      	bne.n	8000c38 <RCC_GetPCLK1Value+0x54>
		pclk1 /= 4;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	089b      	lsrs	r3, r3, #2
 8000c34:	607b      	str	r3, [r7, #4]
 8000c36:	e028      	b.n	8000c8a <RCC_GetPCLK1Value+0xa6>
	}else if(ahbprescaler == 10){
 8000c38:	78bb      	ldrb	r3, [r7, #2]
 8000c3a:	2b0a      	cmp	r3, #10
 8000c3c:	d103      	bne.n	8000c46 <RCC_GetPCLK1Value+0x62>
		pclk1 /= 8;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	08db      	lsrs	r3, r3, #3
 8000c42:	607b      	str	r3, [r7, #4]
 8000c44:	e021      	b.n	8000c8a <RCC_GetPCLK1Value+0xa6>
	}else if(ahbprescaler == 11){
 8000c46:	78bb      	ldrb	r3, [r7, #2]
 8000c48:	2b0b      	cmp	r3, #11
 8000c4a:	d103      	bne.n	8000c54 <RCC_GetPCLK1Value+0x70>
		pclk1 /= 16;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	091b      	lsrs	r3, r3, #4
 8000c50:	607b      	str	r3, [r7, #4]
 8000c52:	e01a      	b.n	8000c8a <RCC_GetPCLK1Value+0xa6>
	}else if(ahbprescaler == 12){
 8000c54:	78bb      	ldrb	r3, [r7, #2]
 8000c56:	2b0c      	cmp	r3, #12
 8000c58:	d103      	bne.n	8000c62 <RCC_GetPCLK1Value+0x7e>
		pclk1 /= 64;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	099b      	lsrs	r3, r3, #6
 8000c5e:	607b      	str	r3, [r7, #4]
 8000c60:	e013      	b.n	8000c8a <RCC_GetPCLK1Value+0xa6>
	}else if(ahbprescaler == 13){
 8000c62:	78bb      	ldrb	r3, [r7, #2]
 8000c64:	2b0d      	cmp	r3, #13
 8000c66:	d103      	bne.n	8000c70 <RCC_GetPCLK1Value+0x8c>
		pclk1 /= 128;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	09db      	lsrs	r3, r3, #7
 8000c6c:	607b      	str	r3, [r7, #4]
 8000c6e:	e00c      	b.n	8000c8a <RCC_GetPCLK1Value+0xa6>
	}else if(ahbprescaler == 14){
 8000c70:	78bb      	ldrb	r3, [r7, #2]
 8000c72:	2b0e      	cmp	r3, #14
 8000c74:	d103      	bne.n	8000c7e <RCC_GetPCLK1Value+0x9a>
		pclk1 /= 256;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	0a1b      	lsrs	r3, r3, #8
 8000c7a:	607b      	str	r3, [r7, #4]
 8000c7c:	e005      	b.n	8000c8a <RCC_GetPCLK1Value+0xa6>
	}else if(ahbprescaler == 15){
 8000c7e:	78bb      	ldrb	r3, [r7, #2]
 8000c80:	2b0f      	cmp	r3, #15
 8000c82:	d102      	bne.n	8000c8a <RCC_GetPCLK1Value+0xa6>
		pclk1 /= 512;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	0a5b      	lsrs	r3, r3, #9
 8000c88:	607b      	str	r3, [r7, #4]
	}

	apb1prescaler = (RCC->CFGR >> 10) & 0x7;
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <RCC_GetPCLK1Value+0xfc>)
 8000c8c:	689b      	ldr	r3, [r3, #8]
 8000c8e:	0a9b      	lsrs	r3, r3, #10
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	f003 0307 	and.w	r3, r3, #7
 8000c96:	707b      	strb	r3, [r7, #1]
	if(apb1prescaler < 4){
 8000c98:	787b      	ldrb	r3, [r7, #1]
 8000c9a:	2b03      	cmp	r3, #3
 8000c9c:	d91a      	bls.n	8000cd4 <RCC_GetPCLK1Value+0xf0>
		//clk not divided
	} else if(apb1prescaler == 4){
 8000c9e:	787b      	ldrb	r3, [r7, #1]
 8000ca0:	2b04      	cmp	r3, #4
 8000ca2:	d103      	bne.n	8000cac <RCC_GetPCLK1Value+0xc8>
		pclk1 /= 2;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	085b      	lsrs	r3, r3, #1
 8000ca8:	607b      	str	r3, [r7, #4]
 8000caa:	e013      	b.n	8000cd4 <RCC_GetPCLK1Value+0xf0>
	} else if(apb1prescaler == 5){
 8000cac:	787b      	ldrb	r3, [r7, #1]
 8000cae:	2b05      	cmp	r3, #5
 8000cb0:	d103      	bne.n	8000cba <RCC_GetPCLK1Value+0xd6>
		pclk1 /= 4;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	089b      	lsrs	r3, r3, #2
 8000cb6:	607b      	str	r3, [r7, #4]
 8000cb8:	e00c      	b.n	8000cd4 <RCC_GetPCLK1Value+0xf0>
	} else if(apb1prescaler == 6){
 8000cba:	787b      	ldrb	r3, [r7, #1]
 8000cbc:	2b06      	cmp	r3, #6
 8000cbe:	d103      	bne.n	8000cc8 <RCC_GetPCLK1Value+0xe4>
		pclk1 /= 8;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	08db      	lsrs	r3, r3, #3
 8000cc4:	607b      	str	r3, [r7, #4]
 8000cc6:	e005      	b.n	8000cd4 <RCC_GetPCLK1Value+0xf0>
	} else if(apb1prescaler == 7){
 8000cc8:	787b      	ldrb	r3, [r7, #1]
 8000cca:	2b07      	cmp	r3, #7
 8000ccc:	d102      	bne.n	8000cd4 <RCC_GetPCLK1Value+0xf0>
		pclk1 /= 16;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	091b      	lsrs	r3, r3, #4
 8000cd2:	607b      	str	r3, [r7, #4]
	}

	return pclk1;
 8000cd4:	687b      	ldr	r3, [r7, #4]
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	370c      	adds	r7, #12
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bc80      	pop	{r7}
 8000cde:	4770      	bx	lr
 8000ce0:	40023800 	.word	0x40023800
 8000ce4:	00f42400 	.word	0x00f42400

08000ce8 <I2C_PeriClockControl>:
 * @return				- none
 *
 * @note				- none
 *
 */
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi){
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	460b      	mov	r3, r1
 8000cf2:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8000cf4:	78fb      	ldrb	r3, [r7, #3]
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d120      	bne.n	8000d3c <I2C_PeriClockControl+0x54>
		if(pI2Cx == I2C1){
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4a22      	ldr	r2, [pc, #136]	; (8000d88 <I2C_PeriClockControl+0xa0>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d106      	bne.n	8000d10 <I2C_PeriClockControl+0x28>
			I2C1_PCLK_EN();
 8000d02:	4b22      	ldr	r3, [pc, #136]	; (8000d8c <I2C_PeriClockControl+0xa4>)
 8000d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d06:	4a21      	ldr	r2, [pc, #132]	; (8000d8c <I2C_PeriClockControl+0xa4>)
 8000d08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d0c:	6413      	str	r3, [r2, #64]	; 0x40
			I2C2_PCLK_DI();
		} else if (pI2Cx == I2C3){
			I2C3_PCLK_DI();
		}
	}
}
 8000d0e:	e035      	b.n	8000d7c <I2C_PeriClockControl+0x94>
		} else if (pI2Cx == I2C2){
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	4a1f      	ldr	r2, [pc, #124]	; (8000d90 <I2C_PeriClockControl+0xa8>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d106      	bne.n	8000d26 <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 8000d18:	4b1c      	ldr	r3, [pc, #112]	; (8000d8c <I2C_PeriClockControl+0xa4>)
 8000d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1c:	4a1b      	ldr	r2, [pc, #108]	; (8000d8c <I2C_PeriClockControl+0xa4>)
 8000d1e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d22:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000d24:	e02a      	b.n	8000d7c <I2C_PeriClockControl+0x94>
		} else if (pI2Cx == I2C3){
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4a1a      	ldr	r2, [pc, #104]	; (8000d94 <I2C_PeriClockControl+0xac>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d126      	bne.n	8000d7c <I2C_PeriClockControl+0x94>
			I2C3_PCLK_EN();
 8000d2e:	4b17      	ldr	r3, [pc, #92]	; (8000d8c <I2C_PeriClockControl+0xa4>)
 8000d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d32:	4a16      	ldr	r2, [pc, #88]	; (8000d8c <I2C_PeriClockControl+0xa4>)
 8000d34:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000d38:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000d3a:	e01f      	b.n	8000d7c <I2C_PeriClockControl+0x94>
		if(pI2Cx == I2C1){
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	4a12      	ldr	r2, [pc, #72]	; (8000d88 <I2C_PeriClockControl+0xa0>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d106      	bne.n	8000d52 <I2C_PeriClockControl+0x6a>
			I2C1_PCLK_DI();
 8000d44:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <I2C_PeriClockControl+0xa4>)
 8000d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d48:	4a10      	ldr	r2, [pc, #64]	; (8000d8c <I2C_PeriClockControl+0xa4>)
 8000d4a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000d4e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000d50:	e014      	b.n	8000d7c <I2C_PeriClockControl+0x94>
		} else if (pI2Cx == I2C2){
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4a0e      	ldr	r2, [pc, #56]	; (8000d90 <I2C_PeriClockControl+0xa8>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d106      	bne.n	8000d68 <I2C_PeriClockControl+0x80>
			I2C2_PCLK_DI();
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <I2C_PeriClockControl+0xa4>)
 8000d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5e:	4a0b      	ldr	r2, [pc, #44]	; (8000d8c <I2C_PeriClockControl+0xa4>)
 8000d60:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000d64:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000d66:	e009      	b.n	8000d7c <I2C_PeriClockControl+0x94>
		} else if (pI2Cx == I2C3){
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	4a0a      	ldr	r2, [pc, #40]	; (8000d94 <I2C_PeriClockControl+0xac>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d105      	bne.n	8000d7c <I2C_PeriClockControl+0x94>
			I2C3_PCLK_DI();
 8000d70:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <I2C_PeriClockControl+0xa4>)
 8000d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d74:	4a05      	ldr	r2, [pc, #20]	; (8000d8c <I2C_PeriClockControl+0xa4>)
 8000d76:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000d7a:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000d7c:	bf00      	nop
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bc80      	pop	{r7}
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	40005400 	.word	0x40005400
 8000d8c:	40023800 	.word	0x40023800
 8000d90:	40005800 	.word	0x40005800
 8000d94:	40005c00 	.word	0x40005c00

08000d98 <I2C_Init>:
 * @return				- none
 *
 * @note				- none
 *
 */
void I2C_Init(I2C_Handle_t *pI2CHandle){
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b088      	sub	sp, #32
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
	uint32_t i2c_cr2 = 0;
 8000da0:	2300      	movs	r3, #0
 8000da2:	61bb      	str	r3, [r7, #24]
	uint32_t i2c_oar1 = 0;
 8000da4:	2300      	movs	r3, #0
 8000da6:	617b      	str	r3, [r7, #20]
	uint32_t i2c_ccr = 0;
 8000da8:	2300      	movs	r3, #0
 8000daa:	613b      	str	r3, [r7, #16]
	uint32_t i2c_trise = 0;
 8000dac:	2300      	movs	r3, #0
 8000dae:	60fb      	str	r3, [r7, #12]

	//enable the clock for the i2cx peripheral
	I2C_PeriClockControl(pI2CHandle->pI2Cx,ENABLE);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	2101      	movs	r1, #1
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff ff96 	bl	8000ce8 <I2C_PeriClockControl>
	I2C_PeripheralControl(pI2CHandle->pI2Cx, ENABLE);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	2101      	movs	r1, #1
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f000 fb67 	bl	8001496 <I2C_PeripheralControl>
	//ack bit configuration
	pI2CHandle->pI2Cx->CR1 |= (pI2CHandle->I2C_Config.I2C_ACKControl << I2C_CR1_ACK);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	6819      	ldr	r1, [r3, #0]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	68db      	ldr	r3, [r3, #12]
 8000dd2:	029a      	lsls	r2, r3, #10
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	430a      	orrs	r2, r1
 8000dda:	601a      	str	r2, [r3, #0]


	//configure the FREQ bits of CR2
	i2c_cr2 |= ((RCC_GetPCLK1Value() /1000000U ) << I2C_CR2_FREQ);
 8000ddc:	f7ff ff02 	bl	8000be4 <RCC_GetPCLK1Value>
 8000de0:	4602      	mov	r2, r0
 8000de2:	4b48      	ldr	r3, [pc, #288]	; (8000f04 <I2C_Init+0x16c>)
 8000de4:	fba3 2302 	umull	r2, r3, r3, r2
 8000de8:	0c9b      	lsrs	r3, r3, #18
 8000dea:	69ba      	ldr	r2, [r7, #24]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	61bb      	str	r3, [r7, #24]
	pI2CHandle->pI2Cx->CR2 = (i2c_cr2 & 0x3F);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	69ba      	ldr	r2, [r7, #24]
 8000df6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000dfa:	605a      	str	r2, [r3, #4]

	//configure own address for slave mode when using 7 bit address
	i2c_oar1 |= (pI2CHandle->I2C_Config.I2C_DeviceAddress << I2C_OAR1_ADD7_1);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	7a1b      	ldrb	r3, [r3, #8]
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	461a      	mov	r2, r3
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	4313      	orrs	r3, r2
 8000e08:	617b      	str	r3, [r7, #20]
	i2c_oar1 |= (1 << 14);
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e10:	617b      	str	r3, [r7, #20]
	pI2CHandle->pI2Cx->OAR1 = i2c_oar1;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	697a      	ldr	r2, [r7, #20]
 8000e18:	609a      	str	r2, [r3, #8]

	//configure CCR register
	uint16_t ccr_value = 0;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	83fb      	strh	r3, [r7, #30]
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM){
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	4a39      	ldr	r2, [pc, #228]	; (8000f08 <I2C_Init+0x170>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d811      	bhi.n	8000e4c <I2C_Init+0xb4>
		//mode is standard mode so we don't have to touch 15th and 14th bits
		ccr_value = RCC_GetPCLK1Value() / (2 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8000e28:	f7ff fedc 	bl	8000be4 <RCC_GetPCLK1Value>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e38:	83fb      	strh	r3, [r7, #30]
		i2c_ccr |= (ccr_value << I2C_CCR_CCR);
 8000e3a:	8bfb      	ldrh	r3, [r7, #30]
 8000e3c:	693a      	ldr	r2, [r7, #16]
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	613b      	str	r3, [r7, #16]

		pI2CHandle->pI2Cx->CCR = i2c_ccr;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	61da      	str	r2, [r3, #28]
 8000e4a:	e02e      	b.n	8000eaa <I2C_Init+0x112>
	}else {
		//Fast mode
		i2c_ccr |= (1 << I2C_CCR_FS);
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e52:	613b      	str	r3, [r7, #16]
		i2c_ccr |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << I2C_CCR_DUTY);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	691b      	ldr	r3, [r3, #16]
 8000e58:	039b      	lsls	r3, r3, #14
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]

		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2){
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	691b      	ldr	r3, [r3, #16]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d10b      	bne.n	8000e80 <I2C_Init+0xe8>
			ccr_value = RCC_GetPCLK1Value() / (3 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8000e68:	f7ff febc 	bl	8000be4 <RCC_GetPCLK1Value>
 8000e6c:	4601      	mov	r1, r0
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	685a      	ldr	r2, [r3, #4]
 8000e72:	4613      	mov	r3, r2
 8000e74:	005b      	lsls	r3, r3, #1
 8000e76:	4413      	add	r3, r2
 8000e78:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e7c:	83fb      	strh	r3, [r7, #30]
 8000e7e:	e00c      	b.n	8000e9a <I2C_Init+0x102>
		}else {
			ccr_value = RCC_GetPCLK1Value() / (25 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8000e80:	f7ff feb0 	bl	8000be4 <RCC_GetPCLK1Value>
 8000e84:	4601      	mov	r1, r0
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	685a      	ldr	r2, [r3, #4]
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	4413      	add	r3, r2
 8000e90:	009a      	lsls	r2, r3, #2
 8000e92:	4413      	add	r3, r2
 8000e94:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e98:	83fb      	strh	r3, [r7, #30]
		}
		i2c_ccr |= (ccr_value << I2C_CCR_CCR);
 8000e9a:	8bfb      	ldrh	r3, [r7, #30]
 8000e9c:	693a      	ldr	r2, [r7, #16]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	613b      	str	r3, [r7, #16]

		pI2CHandle->pI2Cx->CCR = i2c_ccr;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	61da      	str	r2, [r3, #28]
	}

	//Configure TRISE register
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM){
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	4a16      	ldr	r2, [pc, #88]	; (8000f08 <I2C_Init+0x170>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d80f      	bhi.n	8000ed4 <I2C_Init+0x13c>
		//Standard mode
		i2c_trise = (RCC_GetPCLK1Value() / 1000000U) + 1;
 8000eb4:	f7ff fe96 	bl	8000be4 <RCC_GetPCLK1Value>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	4b12      	ldr	r3, [pc, #72]	; (8000f04 <I2C_Init+0x16c>)
 8000ebc:	fba3 2302 	umull	r2, r3, r3, r2
 8000ec0:	0c9b      	lsrs	r3, r3, #18
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	60fb      	str	r3, [r7, #12]
		pI2CHandle->pI2Cx->TRISE = i2c_trise & 0x3F;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	68fa      	ldr	r2, [r7, #12]
 8000ecc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000ed0:	621a      	str	r2, [r3, #32]
		//Fast mode
		i2c_trise = ((RCC_GetPCLK1Value() * 300) / 1000000000U) + 1;
		pI2CHandle->pI2Cx->TRISE = i2c_trise & 0x3F;
	}

}
 8000ed2:	e013      	b.n	8000efc <I2C_Init+0x164>
		i2c_trise = ((RCC_GetPCLK1Value() * 300) / 1000000000U) + 1;
 8000ed4:	f7ff fe86 	bl	8000be4 <RCC_GetPCLK1Value>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000ede:	fb03 f302 	mul.w	r3, r3, r2
 8000ee2:	0a5b      	lsrs	r3, r3, #9
 8000ee4:	4a09      	ldr	r2, [pc, #36]	; (8000f0c <I2C_Init+0x174>)
 8000ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8000eea:	09db      	lsrs	r3, r3, #7
 8000eec:	3301      	adds	r3, #1
 8000eee:	60fb      	str	r3, [r7, #12]
		pI2CHandle->pI2Cx->TRISE = i2c_trise & 0x3F;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	68fa      	ldr	r2, [r7, #12]
 8000ef6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000efa:	621a      	str	r2, [r3, #32]
}
 8000efc:	bf00      	nop
 8000efe:	3720      	adds	r7, #32
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	431bde83 	.word	0x431bde83
 8000f08:	000186a0 	.word	0x000186a0
 8000f0c:	00044b83 	.word	0x00044b83

08000f10 <I2C_MasterSendData_IT>:
 * @return				- Application state
 *
 * @note				- none
 *
 */
uint8_t I2C_MasterSendData_IT(I2C_Handle_t *pI2CHandle, uint8_t *pTxbuffer, uint32_t Len, uint8_t SlaveAddr, uint8_t Sr){
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
 8000f1c:	70fb      	strb	r3, [r7, #3]
	uint8_t busy_state = pI2CHandle->TxRxState;
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f24:	75fb      	strb	r3, [r7, #23]

	if( (busy_state != I2C_BUSY_IN_TX) && (busy_state != I2C_BUSY_IN_RX) ){
 8000f26:	7dfb      	ldrb	r3, [r7, #23]
 8000f28:	2b02      	cmp	r3, #2
 8000f2a:	d031      	beq.n	8000f90 <I2C_MasterSendData_IT+0x80>
 8000f2c:	7dfb      	ldrb	r3, [r7, #23]
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d02e      	beq.n	8000f90 <I2C_MasterSendData_IT+0x80>
		pI2CHandle->pTxBuffer = pTxbuffer;
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	68ba      	ldr	r2, [r7, #8]
 8000f36:	615a      	str	r2, [r3, #20]
		pI2CHandle->TxLen = Len;
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	687a      	ldr	r2, [r7, #4]
 8000f3c:	61da      	str	r2, [r3, #28]
		pI2CHandle->TxRxState = I2C_BUSY_IN_TX;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	2202      	movs	r2, #2
 8000f42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		pI2CHandle->DevAddress = SlaveAddr;
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	78fa      	ldrb	r2, [r7, #3]
 8000f4a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		pI2CHandle->Sr = Sr;
 8000f4e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	62da      	str	r2, [r3, #44]	; 0x2c

		//Generate START condition
		I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff fd69 	bl	8000a32 <I2C_GenerateStartCondition>

		//Enable ITBUFEN control bit
		pI2CHandle->pI2Cx->CR2 |= (1 << I2C_CR2_ITBUFEN);
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	685a      	ldr	r2, [r3, #4]
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000f6e:	605a      	str	r2, [r3, #4]

		//Enable ITEVFEN control bit
		pI2CHandle->pI2Cx->CR2 |= (1 << I2C_CR2_ITEVTEN);
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	685a      	ldr	r2, [r3, #4]
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f7e:	605a      	str	r2, [r3, #4]

		//Enable ITERREN control bit
		pI2CHandle->pI2Cx->CR2 |= (1 << I2C_CR2_ITERREN);
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	685a      	ldr	r2, [r3, #4]
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f8e:	605a      	str	r2, [r3, #4]
	}

	return busy_state;
 8000f90:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3718      	adds	r7, #24
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <I2C_MasterReceiveData_IT>:
 * @return				- Application state
 *
 * @note				- none
 *
 */
uint8_t I2C_MasterReceiveData_IT(I2C_Handle_t *pI2CHandle, uint8_t *pRxbuffer, uint32_t Len, uint8_t SlaveAddr, uint8_t Sr){
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b086      	sub	sp, #24
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	60f8      	str	r0, [r7, #12]
 8000fa2:	60b9      	str	r1, [r7, #8]
 8000fa4:	607a      	str	r2, [r7, #4]
 8000fa6:	70fb      	strb	r3, [r7, #3]
	uint8_t busy_state = pI2CHandle->TxRxState;
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000fae:	75fb      	strb	r3, [r7, #23]

	if((busy_state != I2C_BUSY_IN_TX) && (busy_state != I2C_BUSY_IN_RX)){
 8000fb0:	7dfb      	ldrb	r3, [r7, #23]
 8000fb2:	2b02      	cmp	r3, #2
 8000fb4:	d034      	beq.n	8001020 <I2C_MasterReceiveData_IT+0x86>
 8000fb6:	7dfb      	ldrb	r3, [r7, #23]
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d031      	beq.n	8001020 <I2C_MasterReceiveData_IT+0x86>
		pI2CHandle->pRxBuffer = pRxbuffer;
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	68ba      	ldr	r2, [r7, #8]
 8000fc0:	619a      	str	r2, [r3, #24]
		pI2CHandle->RxLen = Len;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	687a      	ldr	r2, [r7, #4]
 8000fc6:	621a      	str	r2, [r3, #32]
		pI2CHandle->TxRxState = I2C_BUSY_IN_RX;
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	2201      	movs	r2, #1
 8000fcc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		pI2CHandle->RxSize = Len;					//RxSize is used in ISR code to manage data reception
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	629a      	str	r2, [r3, #40]	; 0x28
		pI2CHandle->DevAddress = SlaveAddr;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	78fa      	ldrb	r2, [r7, #3]
 8000fda:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		pI2CHandle->Sr = Sr;
 8000fde:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	62da      	str	r2, [r3, #44]	; 0x2c

		//Generate START condition
		I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff fd21 	bl	8000a32 <I2C_GenerateStartCondition>

		//Enable ITBUFEN control bit
		pI2CHandle->pI2Cx->CR2 |= (1 << I2C_CR2_ITBUFEN);
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	685a      	ldr	r2, [r3, #4]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000ffe:	605a      	str	r2, [r3, #4]

		//Enable ITEVFEN control bit
		pI2CHandle->pI2Cx->CR2 |= (1 << I2C_CR2_ITEVTEN);
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	685a      	ldr	r2, [r3, #4]
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800100e:	605a      	str	r2, [r3, #4]

		//Enable ITERREN control bit
		pI2CHandle->pI2Cx->CR2 |= (1 << I2C_CR2_ITERREN);
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	685a      	ldr	r2, [r3, #4]
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800101e:	605a      	str	r2, [r3, #4]
	}

	return busy_state;
 8001020:	7dfb      	ldrb	r3, [r7, #23]
}
 8001022:	4618      	mov	r0, r3
 8001024:	3718      	adds	r7, #24
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
	...

0800102c <I2C_IRQInterruptConfig>:
 * @return				- none
 *
 * @note				- none
 *
 */
void I2C_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi){
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	460a      	mov	r2, r1
 8001036:	71fb      	strb	r3, [r7, #7]
 8001038:	4613      	mov	r3, r2
 800103a:	71bb      	strb	r3, [r7, #6]
	if(EnorDi == ENABLE){
 800103c:	79bb      	ldrb	r3, [r7, #6]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d133      	bne.n	80010aa <I2C_IRQInterruptConfig+0x7e>
		if(IRQNumber <= 31){
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	2b1f      	cmp	r3, #31
 8001046:	d80a      	bhi.n	800105e <I2C_IRQInterruptConfig+0x32>
			*NVIC_ISER0 |= (1 << IRQNumber);
 8001048:	4b34      	ldr	r3, [pc, #208]	; (800111c <I2C_IRQInterruptConfig+0xf0>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	79fa      	ldrb	r2, [r7, #7]
 800104e:	2101      	movs	r1, #1
 8001050:	fa01 f202 	lsl.w	r2, r1, r2
 8001054:	4611      	mov	r1, r2
 8001056:	4a31      	ldr	r2, [pc, #196]	; (800111c <I2C_IRQInterruptConfig+0xf0>)
 8001058:	430b      	orrs	r3, r1
 800105a:	6013      	str	r3, [r2, #0]
			*NVIC_ICER1 |= (1 << IRQNumber % 32);
		}else if(IRQNumber > 63 && IRQNumber < 96){
			*NVIC_ICER2 |= (1 << IRQNumber % 32);
		}
	}
}
 800105c:	e059      	b.n	8001112 <I2C_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber <= 63){
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	2b1f      	cmp	r3, #31
 8001062:	d90f      	bls.n	8001084 <I2C_IRQInterruptConfig+0x58>
 8001064:	79fb      	ldrb	r3, [r7, #7]
 8001066:	2b3f      	cmp	r3, #63	; 0x3f
 8001068:	d80c      	bhi.n	8001084 <I2C_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 800106a:	4b2d      	ldr	r3, [pc, #180]	; (8001120 <I2C_IRQInterruptConfig+0xf4>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	79fa      	ldrb	r2, [r7, #7]
 8001070:	f002 021f 	and.w	r2, r2, #31
 8001074:	2101      	movs	r1, #1
 8001076:	fa01 f202 	lsl.w	r2, r1, r2
 800107a:	4611      	mov	r1, r2
 800107c:	4a28      	ldr	r2, [pc, #160]	; (8001120 <I2C_IRQInterruptConfig+0xf4>)
 800107e:	430b      	orrs	r3, r1
 8001080:	6013      	str	r3, [r2, #0]
 8001082:	e046      	b.n	8001112 <I2C_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 63 && IRQNumber < 96){
 8001084:	79fb      	ldrb	r3, [r7, #7]
 8001086:	2b3f      	cmp	r3, #63	; 0x3f
 8001088:	d943      	bls.n	8001112 <I2C_IRQInterruptConfig+0xe6>
 800108a:	79fb      	ldrb	r3, [r7, #7]
 800108c:	2b5f      	cmp	r3, #95	; 0x5f
 800108e:	d840      	bhi.n	8001112 <I2C_IRQInterruptConfig+0xe6>
			*NVIC_ISER2 |= (1 << (IRQNumber % 32));
 8001090:	4b24      	ldr	r3, [pc, #144]	; (8001124 <I2C_IRQInterruptConfig+0xf8>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	79fa      	ldrb	r2, [r7, #7]
 8001096:	f002 021f 	and.w	r2, r2, #31
 800109a:	2101      	movs	r1, #1
 800109c:	fa01 f202 	lsl.w	r2, r1, r2
 80010a0:	4611      	mov	r1, r2
 80010a2:	4a20      	ldr	r2, [pc, #128]	; (8001124 <I2C_IRQInterruptConfig+0xf8>)
 80010a4:	430b      	orrs	r3, r1
 80010a6:	6013      	str	r3, [r2, #0]
}
 80010a8:	e033      	b.n	8001112 <I2C_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31){
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	2b1f      	cmp	r3, #31
 80010ae:	d80a      	bhi.n	80010c6 <I2C_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= (1 << IRQNumber);
 80010b0:	4b1d      	ldr	r3, [pc, #116]	; (8001128 <I2C_IRQInterruptConfig+0xfc>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	79fa      	ldrb	r2, [r7, #7]
 80010b6:	2101      	movs	r1, #1
 80010b8:	fa01 f202 	lsl.w	r2, r1, r2
 80010bc:	4611      	mov	r1, r2
 80010be:	4a1a      	ldr	r2, [pc, #104]	; (8001128 <I2C_IRQInterruptConfig+0xfc>)
 80010c0:	430b      	orrs	r3, r1
 80010c2:	6013      	str	r3, [r2, #0]
}
 80010c4:	e025      	b.n	8001112 <I2C_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber <= 63){
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	2b1f      	cmp	r3, #31
 80010ca:	d90f      	bls.n	80010ec <I2C_IRQInterruptConfig+0xc0>
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	2b3f      	cmp	r3, #63	; 0x3f
 80010d0:	d80c      	bhi.n	80010ec <I2C_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= (1 << IRQNumber % 32);
 80010d2:	4b16      	ldr	r3, [pc, #88]	; (800112c <I2C_IRQInterruptConfig+0x100>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	79fa      	ldrb	r2, [r7, #7]
 80010d8:	f002 021f 	and.w	r2, r2, #31
 80010dc:	2101      	movs	r1, #1
 80010de:	fa01 f202 	lsl.w	r2, r1, r2
 80010e2:	4611      	mov	r1, r2
 80010e4:	4a11      	ldr	r2, [pc, #68]	; (800112c <I2C_IRQInterruptConfig+0x100>)
 80010e6:	430b      	orrs	r3, r1
 80010e8:	6013      	str	r3, [r2, #0]
 80010ea:	e012      	b.n	8001112 <I2C_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 63 && IRQNumber < 96){
 80010ec:	79fb      	ldrb	r3, [r7, #7]
 80010ee:	2b3f      	cmp	r3, #63	; 0x3f
 80010f0:	d90f      	bls.n	8001112 <I2C_IRQInterruptConfig+0xe6>
 80010f2:	79fb      	ldrb	r3, [r7, #7]
 80010f4:	2b5f      	cmp	r3, #95	; 0x5f
 80010f6:	d80c      	bhi.n	8001112 <I2C_IRQInterruptConfig+0xe6>
			*NVIC_ICER2 |= (1 << IRQNumber % 32);
 80010f8:	4b0d      	ldr	r3, [pc, #52]	; (8001130 <I2C_IRQInterruptConfig+0x104>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	79fa      	ldrb	r2, [r7, #7]
 80010fe:	f002 021f 	and.w	r2, r2, #31
 8001102:	2101      	movs	r1, #1
 8001104:	fa01 f202 	lsl.w	r2, r1, r2
 8001108:	4611      	mov	r1, r2
 800110a:	4a09      	ldr	r2, [pc, #36]	; (8001130 <I2C_IRQInterruptConfig+0x104>)
 800110c:	430b      	orrs	r3, r1
 800110e:	6013      	str	r3, [r2, #0]
}
 8001110:	e7ff      	b.n	8001112 <I2C_IRQInterruptConfig+0xe6>
 8001112:	bf00      	nop
 8001114:	370c      	adds	r7, #12
 8001116:	46bd      	mov	sp, r7
 8001118:	bc80      	pop	{r7}
 800111a:	4770      	bx	lr
 800111c:	e000e100 	.word	0xe000e100
 8001120:	e000e104 	.word	0xe000e104
 8001124:	e000e108 	.word	0xe000e108
 8001128:	e000e180 	.word	0xe000e180
 800112c:	e000e184 	.word	0xe000e184
 8001130:	e000e188 	.word	0xe000e188

08001134 <I2C_CloseRx>:
 * @return				- none
 *
 * @note				- none
 *
 */
void I2C_CloseRx(I2C_Handle_t *pI2CHandle){
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
	//Disable interrupt registers
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	685a      	ldr	r2, [r3, #4]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800114a:	605a      	str	r2, [r3, #4]
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	685a      	ldr	r2, [r3, #4]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800115a:	605a      	str	r2, [r3, #4]

	pI2CHandle->TxRxState = I2C_READY;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2200      	movs	r2, #0
 8001160:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pI2CHandle->pRxBuffer = NULL;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2200      	movs	r2, #0
 8001168:	619a      	str	r2, [r3, #24]
	pI2CHandle->RxLen = 0;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2200      	movs	r2, #0
 800116e:	621a      	str	r2, [r3, #32]
	pI2CHandle->RxSize = 0;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2200      	movs	r2, #0
 8001174:	629a      	str	r2, [r3, #40]	; 0x28

	if(pI2CHandle->I2C_Config.I2C_ACKControl == I2C_ACK_ENABLE){
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	68db      	ldr	r3, [r3, #12]
 800117a:	2b01      	cmp	r3, #1
 800117c:	d105      	bne.n	800118a <I2C_CloseRx+0x56>
		I2C_ManageAcking(pI2CHandle->pI2Cx, ENABLE);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	2101      	movs	r1, #1
 8001184:	4618      	mov	r0, r3
 8001186:	f000 f9a1 	bl	80014cc <I2C_ManageAcking>
	}
}
 800118a:	bf00      	nop
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <I2C_CloseTx>:
 * @return				- none
 *
 * @note				- none
 *
 */
void I2C_CloseTx(I2C_Handle_t *pI2CHandle){
 8001192:	b480      	push	{r7}
 8001194:	b083      	sub	sp, #12
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
	//Disable interrupt registers
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	685a      	ldr	r2, [r3, #4]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80011a8:	605a      	str	r2, [r3, #4]
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	685a      	ldr	r2, [r3, #4]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80011b8:	605a      	str	r2, [r3, #4]

	pI2CHandle->TxRxState = I2C_READY;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2200      	movs	r2, #0
 80011be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pI2CHandle->pTxBuffer = NULL;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2200      	movs	r2, #0
 80011c6:	615a      	str	r2, [r3, #20]
	pI2CHandle->TxLen = 0;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2200      	movs	r2, #0
 80011cc:	61da      	str	r2, [r3, #28]

}
 80011ce:	bf00      	nop
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bc80      	pop	{r7}
 80011d6:	4770      	bx	lr

080011d8 <I2C_GenerateStopCondition>:
 * @return				- none
 *
 * @note				- none
 *
 */
void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx){
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	601a      	str	r2, [r3, #0]
}
 80011ec:	bf00      	nop
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bc80      	pop	{r7}
 80011f4:	4770      	bx	lr

080011f6 <I2C_EV_IRQHandling>:
 * @return				- none
 *
 * @note				- none
 *
 */
void I2C_EV_IRQHandling(I2C_Handle_t *pI2CHandle){
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b08a      	sub	sp, #40	; 0x28
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
	//Interrupt handling for both master and slave devices

	uint32_t i2c_cr2_itevten, i2c_cr2_itbufen;
	uint32_t i2c_flag_sb, i2c_flag_addr, i2c_flag_btf, i2c_flag_stopf, i2c_flag_txe, i2c_flag_rxne;

	i2c_cr2_itevten = pI2CHandle->pI2Cx->CR2 & (1 << I2C_CR2_ITEVTEN);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001208:	627b      	str	r3, [r7, #36]	; 0x24

	//Handle for interrupt generated by SB event (only applicable in MASTER mode, for SLAVE SB is always 0)
	i2c_flag_sb = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_SB);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	695b      	ldr	r3, [r3, #20]
 8001210:	f003 0301 	and.w	r3, r3, #1
 8001214:	623b      	str	r3, [r7, #32]
	if(i2c_cr2_itevten && i2c_flag_sb){
 8001216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001218:	2b00      	cmp	r3, #0
 800121a:	d01f      	beq.n	800125c <I2C_EV_IRQHandling+0x66>
 800121c:	6a3b      	ldr	r3, [r7, #32]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d01c      	beq.n	800125c <I2C_EV_IRQHandling+0x66>
		//Check to see if application is in Tx or Rx
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX){
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001228:	2b02      	cmp	r3, #2
 800122a:	d109      	bne.n	8001240 <I2C_EV_IRQHandling+0x4a>
			I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx, pI2CHandle->DevAddress);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001236:	4619      	mov	r1, r3
 8001238:	4610      	mov	r0, r2
 800123a:	f7ff fc09 	bl	8000a50 <I2C_ExecuteAddressPhaseWrite>
 800123e:	e00d      	b.n	800125c <I2C_EV_IRQHandling+0x66>
		}else if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX){
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001246:	2b01      	cmp	r3, #1
 8001248:	d108      	bne.n	800125c <I2C_EV_IRQHandling+0x66>
			I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx, pI2CHandle->DevAddress);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001254:	4619      	mov	r1, r3
 8001256:	4610      	mov	r0, r2
 8001258:	f7ff fc0f 	bl	8000a7a <I2C_ExecuteAddressPhaseRead>
	}

	//Handle for interrupt generated by ADDR event
	//MASTER: Address is sent
	//SLAVE: Address is matched
	i2c_flag_addr = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_ADDR);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	695b      	ldr	r3, [r3, #20]
 8001262:	f003 0302 	and.w	r3, r3, #2
 8001266:	61fb      	str	r3, [r7, #28]
	if(i2c_cr2_itevten && i2c_flag_addr){
 8001268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126a:	2b00      	cmp	r3, #0
 800126c:	d005      	beq.n	800127a <I2C_EV_IRQHandling+0x84>
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d002      	beq.n	800127a <I2C_EV_IRQHandling+0x84>
		//Interrupt is generated because of ADDR flag
		//Clear ADDR flag
		I2C_ClearADDRFlag(pI2CHandle);
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f7ff fc15 	bl	8000aa4 <I2C_ClearADDRFlag>
	}

	//Handle for interrupt generated by BTF event (Byte transfer finished)
	i2c_flag_btf = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_BTF);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	695b      	ldr	r3, [r3, #20]
 8001280:	f003 0304 	and.w	r3, r3, #4
 8001284:	61bb      	str	r3, [r7, #24]
	if(i2c_cr2_itevten && i2c_flag_btf){
 8001286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001288:	2b00      	cmp	r3, #0
 800128a:	d022      	beq.n	80012d2 <I2C_EV_IRQHandling+0xdc>
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d01f      	beq.n	80012d2 <I2C_EV_IRQHandling+0xdc>
		//Check to see if application is in Tx or Rx
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX){
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001298:	2b02      	cmp	r3, #2
 800129a:	d11a      	bne.n	80012d2 <I2C_EV_IRQHandling+0xdc>
			//make sure TXE is SET
			if(pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_TxE)){
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	695b      	ldr	r3, [r3, #20]
 80012a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d013      	beq.n	80012d2 <I2C_EV_IRQHandling+0xdc>

				if(pI2CHandle->TxLen == 0){
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	69db      	ldr	r3, [r3, #28]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d10f      	bne.n	80012d2 <I2C_EV_IRQHandling+0xdc>
					//Generate STOP condition
					if(pI2CHandle->Sr == I2C_DISABLE_SR){
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d104      	bne.n	80012c4 <I2C_EV_IRQHandling+0xce>
						I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff ff8a 	bl	80011d8 <I2C_GenerateStopCondition>
					}

					//Reset all the members elements of handle structure
					I2C_CloseTx(pI2CHandle);
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f7ff ff64 	bl	8001192 <I2C_CloseTx>

					//Notify the application about transmission complete
					I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_TX_CMPLT);
 80012ca:	2100      	movs	r1, #0
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f7ff f87d 	bl	80003cc <I2C_ApplicationEventCallback>
		}
	}

	//Handle for interrupt generated by STOPF event
	//Stop detection flag is applicable only in SLAVE mode, for MASTER this flag will never be SET
	i2c_flag_stopf = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_STOPF);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	695b      	ldr	r3, [r3, #20]
 80012d8:	f003 0310 	and.w	r3, r3, #16
 80012dc:	617b      	str	r3, [r7, #20]
	if(i2c_cr2_itevten && i2c_flag_stopf){
 80012de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d00c      	beq.n	80012fe <I2C_EV_IRQHandling+0x108>
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d009      	beq.n	80012fe <I2C_EV_IRQHandling+0x108>
		//Clear the STOPF flag by reading SR1(already done), then writing to CR1
		pI2CHandle->pI2Cx->CR1 |= 0x0000;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	6812      	ldr	r2, [r2, #0]
 80012f4:	601a      	str	r2, [r3, #0]

		//Notify the application that STOP is detected
		I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_STOP);
 80012f6:	2102      	movs	r1, #2
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f7ff f867 	bl	80003cc <I2C_ApplicationEventCallback>
	}

	i2c_cr2_itbufen = pI2CHandle->pI2Cx->CR2 & (1 << I2C_CR2_ITBUFEN);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001308:	613b      	str	r3, [r7, #16]
	//Handle for interrupt generated by TXE event (Transmission buffer empty)
	i2c_flag_txe = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_TxE);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	695b      	ldr	r3, [r3, #20]
 8001310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001314:	60fb      	str	r3, [r7, #12]
	if(i2c_cr2_itevten && i2c_cr2_itbufen && i2c_flag_txe){
 8001316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001318:	2b00      	cmp	r3, #0
 800131a:	d014      	beq.n	8001346 <I2C_EV_IRQHandling+0x150>
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d011      	beq.n	8001346 <I2C_EV_IRQHandling+0x150>
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d00e      	beq.n	8001346 <I2C_EV_IRQHandling+0x150>
		//Check for device mode
		if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL)){
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	699b      	ldr	r3, [r3, #24]
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	2b00      	cmp	r3, #0
 8001334:	d007      	beq.n	8001346 <I2C_EV_IRQHandling+0x150>
			//We have to do the data Transmission
			if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX){
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800133c:	2b02      	cmp	r3, #2
 800133e:	d102      	bne.n	8001346 <I2C_EV_IRQHandling+0x150>
				I2C_MasterHandleTXEInterrupt(pI2CHandle);
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f7ff fbe7 	bl	8000b14 <I2C_MasterHandleTXEInterrupt>
			}
		}
	}

	//Handle for interrupt generated by RXNE event (Receiver buffer not empty)
	i2c_flag_rxne = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_RxNE);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	695b      	ldr	r3, [r3, #20]
 800134c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001350:	60bb      	str	r3, [r7, #8]
	if(i2c_cr2_itevten && i2c_cr2_itbufen && i2c_flag_rxne){
 8001352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001354:	2b00      	cmp	r3, #0
 8001356:	d014      	beq.n	8001382 <I2C_EV_IRQHandling+0x18c>
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d011      	beq.n	8001382 <I2C_EV_IRQHandling+0x18c>
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d00e      	beq.n	8001382 <I2C_EV_IRQHandling+0x18c>
		//Check for device mode (MASTER/SLAVE)
		if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL)){
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	699b      	ldr	r3, [r3, #24]
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	2b00      	cmp	r3, #0
 8001370:	d007      	beq.n	8001382 <I2C_EV_IRQHandling+0x18c>
			if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX){
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001378:	2b01      	cmp	r3, #1
 800137a:	d102      	bne.n	8001382 <I2C_EV_IRQHandling+0x18c>
				I2C_MasterHandleRXNEInterrupt(pI2CHandle);
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f7ff fbe6 	bl	8000b4e <I2C_MasterHandleRXNEInterrupt>
			}
		}
	}
}
 8001382:	bf00      	nop
 8001384:	3728      	adds	r7, #40	; 0x28
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}

0800138a <I2C_ER_IRQHandling>:
 *
 * @note				- none
 *
 */
void I2C_ER_IRQHandling(I2C_Handle_t *pI2CHandle)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	b084      	sub	sp, #16
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]

	uint32_t sr1_error_bit, cr2_iterren_bit;

    //Know the status of  ITERREN control bit in the CR2
	cr2_iterren_bit = (pI2CHandle->pI2Cx->CR2) & ( 1 << I2C_CR2_ITERREN);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800139c:	60fb      	str	r3, [r7, #12]


/***********************Check for Bus error************************************/
	sr1_error_bit = (pI2CHandle->pI2Cx->SR1) & ( 1<< I2C_SR1_BERR);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	695b      	ldr	r3, [r3, #20]
 80013a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013a8:	60bb      	str	r3, [r7, #8]
	if(sr1_error_bit  && cr2_iterren_bit )
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d00e      	beq.n	80013ce <I2C_ER_IRQHandling+0x44>
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d00b      	beq.n	80013ce <I2C_ER_IRQHandling+0x44>
	{
		//This is Bus error
		//Implement the code to clear the buss error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_BERR);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	695a      	ldr	r2, [r3, #20]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013c4:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_BERR);
 80013c6:	2103      	movs	r1, #3
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f7fe ffff 	bl	80003cc <I2C_ApplicationEventCallback>
	}

/***********************Check for arbitration lost error************************************/
	sr1_error_bit = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_ARLO );
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	695b      	ldr	r3, [r3, #20]
 80013d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013d8:	60bb      	str	r3, [r7, #8]
	if(sr1_error_bit  && cr2_iterren_bit)
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d00e      	beq.n	80013fe <I2C_ER_IRQHandling+0x74>
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d00b      	beq.n	80013fe <I2C_ER_IRQHandling+0x74>
	{
		//This is arbitration lost error
		//Implement the code to clear the arbitration lost error flag
		pI2CHandle->pI2Cx->SR1 &= ~(1 << I2C_SR1_ARLO);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	695a      	ldr	r2, [r3, #20]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80013f4:	615a      	str	r2, [r3, #20]
		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle, I2C_ERROR_ARLO);
 80013f6:	2104      	movs	r1, #4
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f7fe ffe7 	bl	80003cc <I2C_ApplicationEventCallback>
	}

/***********************Check for ACK failure  error************************************/

	sr1_error_bit = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_AF);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	695b      	ldr	r3, [r3, #20]
 8001404:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001408:	60bb      	str	r3, [r7, #8]
	if(sr1_error_bit  && cr2_iterren_bit)
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d00e      	beq.n	800142e <I2C_ER_IRQHandling+0xa4>
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d00b      	beq.n	800142e <I2C_ER_IRQHandling+0xa4>
	{
		//This is ACK failure error
	    //Implement the code to clear the ACK failure error flag
		pI2CHandle->pI2Cx->SR1 &= ~(1 << I2C_SR1_AF);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	695a      	ldr	r2, [r3, #20]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001424:	615a      	str	r2, [r3, #20]
		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle, I2C_ERROR_AF);
 8001426:	2105      	movs	r1, #5
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f7fe ffcf 	bl	80003cc <I2C_ApplicationEventCallback>
	}

/***********************Check for Overrun/underrun error************************************/
	sr1_error_bit = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_OVR);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	695b      	ldr	r3, [r3, #20]
 8001434:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001438:	60bb      	str	r3, [r7, #8]
	if(sr1_error_bit  && cr2_iterren_bit)
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d00e      	beq.n	800145e <I2C_ER_IRQHandling+0xd4>
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d00b      	beq.n	800145e <I2C_ER_IRQHandling+0xd4>
	{
		//This is Overrun/underrun
	    //Implement the code to clear the Overrun/underrun error flag
		pI2CHandle->pI2Cx->SR1 &= ~(1 << I2C_SR1_OVR);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	695a      	ldr	r2, [r3, #20]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001454:	615a      	str	r2, [r3, #20]
		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle, I2C_ERROR_OVR);
 8001456:	2106      	movs	r1, #6
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f7fe ffb7 	bl	80003cc <I2C_ApplicationEventCallback>
	}

/***********************Check for Time out error************************************/
	sr1_error_bit = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_TIMEOUT);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	695b      	ldr	r3, [r3, #20]
 8001464:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001468:	60bb      	str	r3, [r7, #8]
	if(sr1_error_bit  && cr2_iterren_bit)
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d00e      	beq.n	800148e <I2C_ER_IRQHandling+0x104>
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d00b      	beq.n	800148e <I2C_ER_IRQHandling+0x104>
	{
		//This is Time out error
	    //Implement the code to clear the Time out error flag
		pI2CHandle->pI2Cx->SR1 &= ~(1 << I2C_SR1_TIMEOUT);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	695a      	ldr	r2, [r3, #20]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001484:	615a      	str	r2, [r3, #20]
		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle, I2C_ERROR_TIMEOUT);
 8001486:	2107      	movs	r1, #7
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f7fe ff9f 	bl	80003cc <I2C_ApplicationEventCallback>
	}

}
 800148e:	bf00      	nop
 8001490:	3710      	adds	r7, #16
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <I2C_PeripheralControl>:
 * @return				- none
 *
 * @note				- none
 *
 */
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi){
 8001496:	b480      	push	{r7}
 8001498:	b083      	sub	sp, #12
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
 800149e:	460b      	mov	r3, r1
 80014a0:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE){
 80014a2:	78fb      	ldrb	r3, [r7, #3]
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d106      	bne.n	80014b6 <I2C_PeripheralControl+0x20>
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f043 0201 	orr.w	r2, r3, #1
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	601a      	str	r2, [r3, #0]
	} else{
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
	}
}
 80014b4:	e005      	b.n	80014c2 <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f023 0201 	bic.w	r2, r3, #1
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	601a      	str	r2, [r3, #0]
}
 80014c2:	bf00      	nop
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bc80      	pop	{r7}
 80014ca:	4770      	bx	lr

080014cc <I2C_ManageAcking>:
 * @return				- none
 *
 * @note				- none
 *
 */
void I2C_ManageAcking(I2C_RegDef_t *pI2CX, uint8_t EnOrDi){
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	460b      	mov	r3, r1
 80014d6:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == I2C_ACK_ENABLE){
 80014d8:	78fb      	ldrb	r3, [r7, #3]
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d106      	bne.n	80014ec <I2C_ManageAcking+0x20>
		pI2CX->CR1 |= (1 << I2C_CR1_ACK);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	601a      	str	r2, [r3, #0]
	}else{
		pI2CX->CR1 &= ~(1 << I2C_CR1_ACK);
	}
}
 80014ea:	e005      	b.n	80014f8 <I2C_ManageAcking+0x2c>
		pI2CX->CR1 &= ~(1 << I2C_CR1_ACK);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	601a      	str	r2, [r3, #0]
}
 80014f8:	bf00      	nop
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bc80      	pop	{r7}
 8001500:	4770      	bx	lr
	...

08001504 <__errno>:
 8001504:	4b01      	ldr	r3, [pc, #4]	; (800150c <__errno+0x8>)
 8001506:	6818      	ldr	r0, [r3, #0]
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	20000000 	.word	0x20000000

08001510 <__libc_init_array>:
 8001510:	b570      	push	{r4, r5, r6, lr}
 8001512:	4e0d      	ldr	r6, [pc, #52]	; (8001548 <__libc_init_array+0x38>)
 8001514:	4c0d      	ldr	r4, [pc, #52]	; (800154c <__libc_init_array+0x3c>)
 8001516:	1ba4      	subs	r4, r4, r6
 8001518:	10a4      	asrs	r4, r4, #2
 800151a:	2500      	movs	r5, #0
 800151c:	42a5      	cmp	r5, r4
 800151e:	d109      	bne.n	8001534 <__libc_init_array+0x24>
 8001520:	4e0b      	ldr	r6, [pc, #44]	; (8001550 <__libc_init_array+0x40>)
 8001522:	4c0c      	ldr	r4, [pc, #48]	; (8001554 <__libc_init_array+0x44>)
 8001524:	f000 fcb8 	bl	8001e98 <_init>
 8001528:	1ba4      	subs	r4, r4, r6
 800152a:	10a4      	asrs	r4, r4, #2
 800152c:	2500      	movs	r5, #0
 800152e:	42a5      	cmp	r5, r4
 8001530:	d105      	bne.n	800153e <__libc_init_array+0x2e>
 8001532:	bd70      	pop	{r4, r5, r6, pc}
 8001534:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001538:	4798      	blx	r3
 800153a:	3501      	adds	r5, #1
 800153c:	e7ee      	b.n	800151c <__libc_init_array+0xc>
 800153e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001542:	4798      	blx	r3
 8001544:	3501      	adds	r5, #1
 8001546:	e7f2      	b.n	800152e <__libc_init_array+0x1e>
 8001548:	08001f34 	.word	0x08001f34
 800154c:	08001f34 	.word	0x08001f34
 8001550:	08001f34 	.word	0x08001f34
 8001554:	08001f38 	.word	0x08001f38

08001558 <memset>:
 8001558:	4402      	add	r2, r0
 800155a:	4603      	mov	r3, r0
 800155c:	4293      	cmp	r3, r2
 800155e:	d100      	bne.n	8001562 <memset+0xa>
 8001560:	4770      	bx	lr
 8001562:	f803 1b01 	strb.w	r1, [r3], #1
 8001566:	e7f9      	b.n	800155c <memset+0x4>

08001568 <_puts_r>:
 8001568:	b570      	push	{r4, r5, r6, lr}
 800156a:	460e      	mov	r6, r1
 800156c:	4605      	mov	r5, r0
 800156e:	b118      	cbz	r0, 8001578 <_puts_r+0x10>
 8001570:	6983      	ldr	r3, [r0, #24]
 8001572:	b90b      	cbnz	r3, 8001578 <_puts_r+0x10>
 8001574:	f000 fa0c 	bl	8001990 <__sinit>
 8001578:	69ab      	ldr	r3, [r5, #24]
 800157a:	68ac      	ldr	r4, [r5, #8]
 800157c:	b913      	cbnz	r3, 8001584 <_puts_r+0x1c>
 800157e:	4628      	mov	r0, r5
 8001580:	f000 fa06 	bl	8001990 <__sinit>
 8001584:	4b23      	ldr	r3, [pc, #140]	; (8001614 <_puts_r+0xac>)
 8001586:	429c      	cmp	r4, r3
 8001588:	d117      	bne.n	80015ba <_puts_r+0x52>
 800158a:	686c      	ldr	r4, [r5, #4]
 800158c:	89a3      	ldrh	r3, [r4, #12]
 800158e:	071b      	lsls	r3, r3, #28
 8001590:	d51d      	bpl.n	80015ce <_puts_r+0x66>
 8001592:	6923      	ldr	r3, [r4, #16]
 8001594:	b1db      	cbz	r3, 80015ce <_puts_r+0x66>
 8001596:	3e01      	subs	r6, #1
 8001598:	68a3      	ldr	r3, [r4, #8]
 800159a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800159e:	3b01      	subs	r3, #1
 80015a0:	60a3      	str	r3, [r4, #8]
 80015a2:	b9e9      	cbnz	r1, 80015e0 <_puts_r+0x78>
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	da2e      	bge.n	8001606 <_puts_r+0x9e>
 80015a8:	4622      	mov	r2, r4
 80015aa:	210a      	movs	r1, #10
 80015ac:	4628      	mov	r0, r5
 80015ae:	f000 f83f 	bl	8001630 <__swbuf_r>
 80015b2:	3001      	adds	r0, #1
 80015b4:	d011      	beq.n	80015da <_puts_r+0x72>
 80015b6:	200a      	movs	r0, #10
 80015b8:	e011      	b.n	80015de <_puts_r+0x76>
 80015ba:	4b17      	ldr	r3, [pc, #92]	; (8001618 <_puts_r+0xb0>)
 80015bc:	429c      	cmp	r4, r3
 80015be:	d101      	bne.n	80015c4 <_puts_r+0x5c>
 80015c0:	68ac      	ldr	r4, [r5, #8]
 80015c2:	e7e3      	b.n	800158c <_puts_r+0x24>
 80015c4:	4b15      	ldr	r3, [pc, #84]	; (800161c <_puts_r+0xb4>)
 80015c6:	429c      	cmp	r4, r3
 80015c8:	bf08      	it	eq
 80015ca:	68ec      	ldreq	r4, [r5, #12]
 80015cc:	e7de      	b.n	800158c <_puts_r+0x24>
 80015ce:	4621      	mov	r1, r4
 80015d0:	4628      	mov	r0, r5
 80015d2:	f000 f87f 	bl	80016d4 <__swsetup_r>
 80015d6:	2800      	cmp	r0, #0
 80015d8:	d0dd      	beq.n	8001596 <_puts_r+0x2e>
 80015da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015de:	bd70      	pop	{r4, r5, r6, pc}
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	da04      	bge.n	80015ee <_puts_r+0x86>
 80015e4:	69a2      	ldr	r2, [r4, #24]
 80015e6:	429a      	cmp	r2, r3
 80015e8:	dc06      	bgt.n	80015f8 <_puts_r+0x90>
 80015ea:	290a      	cmp	r1, #10
 80015ec:	d004      	beq.n	80015f8 <_puts_r+0x90>
 80015ee:	6823      	ldr	r3, [r4, #0]
 80015f0:	1c5a      	adds	r2, r3, #1
 80015f2:	6022      	str	r2, [r4, #0]
 80015f4:	7019      	strb	r1, [r3, #0]
 80015f6:	e7cf      	b.n	8001598 <_puts_r+0x30>
 80015f8:	4622      	mov	r2, r4
 80015fa:	4628      	mov	r0, r5
 80015fc:	f000 f818 	bl	8001630 <__swbuf_r>
 8001600:	3001      	adds	r0, #1
 8001602:	d1c9      	bne.n	8001598 <_puts_r+0x30>
 8001604:	e7e9      	b.n	80015da <_puts_r+0x72>
 8001606:	6823      	ldr	r3, [r4, #0]
 8001608:	200a      	movs	r0, #10
 800160a:	1c5a      	adds	r2, r3, #1
 800160c:	6022      	str	r2, [r4, #0]
 800160e:	7018      	strb	r0, [r3, #0]
 8001610:	e7e5      	b.n	80015de <_puts_r+0x76>
 8001612:	bf00      	nop
 8001614:	08001ef4 	.word	0x08001ef4
 8001618:	08001f14 	.word	0x08001f14
 800161c:	08001ed4 	.word	0x08001ed4

08001620 <puts>:
 8001620:	4b02      	ldr	r3, [pc, #8]	; (800162c <puts+0xc>)
 8001622:	4601      	mov	r1, r0
 8001624:	6818      	ldr	r0, [r3, #0]
 8001626:	f7ff bf9f 	b.w	8001568 <_puts_r>
 800162a:	bf00      	nop
 800162c:	20000000 	.word	0x20000000

08001630 <__swbuf_r>:
 8001630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001632:	460e      	mov	r6, r1
 8001634:	4614      	mov	r4, r2
 8001636:	4605      	mov	r5, r0
 8001638:	b118      	cbz	r0, 8001642 <__swbuf_r+0x12>
 800163a:	6983      	ldr	r3, [r0, #24]
 800163c:	b90b      	cbnz	r3, 8001642 <__swbuf_r+0x12>
 800163e:	f000 f9a7 	bl	8001990 <__sinit>
 8001642:	4b21      	ldr	r3, [pc, #132]	; (80016c8 <__swbuf_r+0x98>)
 8001644:	429c      	cmp	r4, r3
 8001646:	d12a      	bne.n	800169e <__swbuf_r+0x6e>
 8001648:	686c      	ldr	r4, [r5, #4]
 800164a:	69a3      	ldr	r3, [r4, #24]
 800164c:	60a3      	str	r3, [r4, #8]
 800164e:	89a3      	ldrh	r3, [r4, #12]
 8001650:	071a      	lsls	r2, r3, #28
 8001652:	d52e      	bpl.n	80016b2 <__swbuf_r+0x82>
 8001654:	6923      	ldr	r3, [r4, #16]
 8001656:	b363      	cbz	r3, 80016b2 <__swbuf_r+0x82>
 8001658:	6923      	ldr	r3, [r4, #16]
 800165a:	6820      	ldr	r0, [r4, #0]
 800165c:	1ac0      	subs	r0, r0, r3
 800165e:	6963      	ldr	r3, [r4, #20]
 8001660:	b2f6      	uxtb	r6, r6
 8001662:	4283      	cmp	r3, r0
 8001664:	4637      	mov	r7, r6
 8001666:	dc04      	bgt.n	8001672 <__swbuf_r+0x42>
 8001668:	4621      	mov	r1, r4
 800166a:	4628      	mov	r0, r5
 800166c:	f000 f926 	bl	80018bc <_fflush_r>
 8001670:	bb28      	cbnz	r0, 80016be <__swbuf_r+0x8e>
 8001672:	68a3      	ldr	r3, [r4, #8]
 8001674:	3b01      	subs	r3, #1
 8001676:	60a3      	str	r3, [r4, #8]
 8001678:	6823      	ldr	r3, [r4, #0]
 800167a:	1c5a      	adds	r2, r3, #1
 800167c:	6022      	str	r2, [r4, #0]
 800167e:	701e      	strb	r6, [r3, #0]
 8001680:	6963      	ldr	r3, [r4, #20]
 8001682:	3001      	adds	r0, #1
 8001684:	4283      	cmp	r3, r0
 8001686:	d004      	beq.n	8001692 <__swbuf_r+0x62>
 8001688:	89a3      	ldrh	r3, [r4, #12]
 800168a:	07db      	lsls	r3, r3, #31
 800168c:	d519      	bpl.n	80016c2 <__swbuf_r+0x92>
 800168e:	2e0a      	cmp	r6, #10
 8001690:	d117      	bne.n	80016c2 <__swbuf_r+0x92>
 8001692:	4621      	mov	r1, r4
 8001694:	4628      	mov	r0, r5
 8001696:	f000 f911 	bl	80018bc <_fflush_r>
 800169a:	b190      	cbz	r0, 80016c2 <__swbuf_r+0x92>
 800169c:	e00f      	b.n	80016be <__swbuf_r+0x8e>
 800169e:	4b0b      	ldr	r3, [pc, #44]	; (80016cc <__swbuf_r+0x9c>)
 80016a0:	429c      	cmp	r4, r3
 80016a2:	d101      	bne.n	80016a8 <__swbuf_r+0x78>
 80016a4:	68ac      	ldr	r4, [r5, #8]
 80016a6:	e7d0      	b.n	800164a <__swbuf_r+0x1a>
 80016a8:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <__swbuf_r+0xa0>)
 80016aa:	429c      	cmp	r4, r3
 80016ac:	bf08      	it	eq
 80016ae:	68ec      	ldreq	r4, [r5, #12]
 80016b0:	e7cb      	b.n	800164a <__swbuf_r+0x1a>
 80016b2:	4621      	mov	r1, r4
 80016b4:	4628      	mov	r0, r5
 80016b6:	f000 f80d 	bl	80016d4 <__swsetup_r>
 80016ba:	2800      	cmp	r0, #0
 80016bc:	d0cc      	beq.n	8001658 <__swbuf_r+0x28>
 80016be:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80016c2:	4638      	mov	r0, r7
 80016c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80016c6:	bf00      	nop
 80016c8:	08001ef4 	.word	0x08001ef4
 80016cc:	08001f14 	.word	0x08001f14
 80016d0:	08001ed4 	.word	0x08001ed4

080016d4 <__swsetup_r>:
 80016d4:	4b32      	ldr	r3, [pc, #200]	; (80017a0 <__swsetup_r+0xcc>)
 80016d6:	b570      	push	{r4, r5, r6, lr}
 80016d8:	681d      	ldr	r5, [r3, #0]
 80016da:	4606      	mov	r6, r0
 80016dc:	460c      	mov	r4, r1
 80016de:	b125      	cbz	r5, 80016ea <__swsetup_r+0x16>
 80016e0:	69ab      	ldr	r3, [r5, #24]
 80016e2:	b913      	cbnz	r3, 80016ea <__swsetup_r+0x16>
 80016e4:	4628      	mov	r0, r5
 80016e6:	f000 f953 	bl	8001990 <__sinit>
 80016ea:	4b2e      	ldr	r3, [pc, #184]	; (80017a4 <__swsetup_r+0xd0>)
 80016ec:	429c      	cmp	r4, r3
 80016ee:	d10f      	bne.n	8001710 <__swsetup_r+0x3c>
 80016f0:	686c      	ldr	r4, [r5, #4]
 80016f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80016f6:	b29a      	uxth	r2, r3
 80016f8:	0715      	lsls	r5, r2, #28
 80016fa:	d42c      	bmi.n	8001756 <__swsetup_r+0x82>
 80016fc:	06d0      	lsls	r0, r2, #27
 80016fe:	d411      	bmi.n	8001724 <__swsetup_r+0x50>
 8001700:	2209      	movs	r2, #9
 8001702:	6032      	str	r2, [r6, #0]
 8001704:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001708:	81a3      	strh	r3, [r4, #12]
 800170a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800170e:	e03e      	b.n	800178e <__swsetup_r+0xba>
 8001710:	4b25      	ldr	r3, [pc, #148]	; (80017a8 <__swsetup_r+0xd4>)
 8001712:	429c      	cmp	r4, r3
 8001714:	d101      	bne.n	800171a <__swsetup_r+0x46>
 8001716:	68ac      	ldr	r4, [r5, #8]
 8001718:	e7eb      	b.n	80016f2 <__swsetup_r+0x1e>
 800171a:	4b24      	ldr	r3, [pc, #144]	; (80017ac <__swsetup_r+0xd8>)
 800171c:	429c      	cmp	r4, r3
 800171e:	bf08      	it	eq
 8001720:	68ec      	ldreq	r4, [r5, #12]
 8001722:	e7e6      	b.n	80016f2 <__swsetup_r+0x1e>
 8001724:	0751      	lsls	r1, r2, #29
 8001726:	d512      	bpl.n	800174e <__swsetup_r+0x7a>
 8001728:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800172a:	b141      	cbz	r1, 800173e <__swsetup_r+0x6a>
 800172c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001730:	4299      	cmp	r1, r3
 8001732:	d002      	beq.n	800173a <__swsetup_r+0x66>
 8001734:	4630      	mov	r0, r6
 8001736:	f000 fa19 	bl	8001b6c <_free_r>
 800173a:	2300      	movs	r3, #0
 800173c:	6363      	str	r3, [r4, #52]	; 0x34
 800173e:	89a3      	ldrh	r3, [r4, #12]
 8001740:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001744:	81a3      	strh	r3, [r4, #12]
 8001746:	2300      	movs	r3, #0
 8001748:	6063      	str	r3, [r4, #4]
 800174a:	6923      	ldr	r3, [r4, #16]
 800174c:	6023      	str	r3, [r4, #0]
 800174e:	89a3      	ldrh	r3, [r4, #12]
 8001750:	f043 0308 	orr.w	r3, r3, #8
 8001754:	81a3      	strh	r3, [r4, #12]
 8001756:	6923      	ldr	r3, [r4, #16]
 8001758:	b94b      	cbnz	r3, 800176e <__swsetup_r+0x9a>
 800175a:	89a3      	ldrh	r3, [r4, #12]
 800175c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001760:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001764:	d003      	beq.n	800176e <__swsetup_r+0x9a>
 8001766:	4621      	mov	r1, r4
 8001768:	4630      	mov	r0, r6
 800176a:	f000 f9bf 	bl	8001aec <__smakebuf_r>
 800176e:	89a2      	ldrh	r2, [r4, #12]
 8001770:	f012 0301 	ands.w	r3, r2, #1
 8001774:	d00c      	beq.n	8001790 <__swsetup_r+0xbc>
 8001776:	2300      	movs	r3, #0
 8001778:	60a3      	str	r3, [r4, #8]
 800177a:	6963      	ldr	r3, [r4, #20]
 800177c:	425b      	negs	r3, r3
 800177e:	61a3      	str	r3, [r4, #24]
 8001780:	6923      	ldr	r3, [r4, #16]
 8001782:	b953      	cbnz	r3, 800179a <__swsetup_r+0xc6>
 8001784:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001788:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800178c:	d1ba      	bne.n	8001704 <__swsetup_r+0x30>
 800178e:	bd70      	pop	{r4, r5, r6, pc}
 8001790:	0792      	lsls	r2, r2, #30
 8001792:	bf58      	it	pl
 8001794:	6963      	ldrpl	r3, [r4, #20]
 8001796:	60a3      	str	r3, [r4, #8]
 8001798:	e7f2      	b.n	8001780 <__swsetup_r+0xac>
 800179a:	2000      	movs	r0, #0
 800179c:	e7f7      	b.n	800178e <__swsetup_r+0xba>
 800179e:	bf00      	nop
 80017a0:	20000000 	.word	0x20000000
 80017a4:	08001ef4 	.word	0x08001ef4
 80017a8:	08001f14 	.word	0x08001f14
 80017ac:	08001ed4 	.word	0x08001ed4

080017b0 <__sflush_r>:
 80017b0:	898a      	ldrh	r2, [r1, #12]
 80017b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017b6:	4605      	mov	r5, r0
 80017b8:	0710      	lsls	r0, r2, #28
 80017ba:	460c      	mov	r4, r1
 80017bc:	d458      	bmi.n	8001870 <__sflush_r+0xc0>
 80017be:	684b      	ldr	r3, [r1, #4]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	dc05      	bgt.n	80017d0 <__sflush_r+0x20>
 80017c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	dc02      	bgt.n	80017d0 <__sflush_r+0x20>
 80017ca:	2000      	movs	r0, #0
 80017cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80017d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80017d2:	2e00      	cmp	r6, #0
 80017d4:	d0f9      	beq.n	80017ca <__sflush_r+0x1a>
 80017d6:	2300      	movs	r3, #0
 80017d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80017dc:	682f      	ldr	r7, [r5, #0]
 80017de:	6a21      	ldr	r1, [r4, #32]
 80017e0:	602b      	str	r3, [r5, #0]
 80017e2:	d032      	beq.n	800184a <__sflush_r+0x9a>
 80017e4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80017e6:	89a3      	ldrh	r3, [r4, #12]
 80017e8:	075a      	lsls	r2, r3, #29
 80017ea:	d505      	bpl.n	80017f8 <__sflush_r+0x48>
 80017ec:	6863      	ldr	r3, [r4, #4]
 80017ee:	1ac0      	subs	r0, r0, r3
 80017f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80017f2:	b10b      	cbz	r3, 80017f8 <__sflush_r+0x48>
 80017f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80017f6:	1ac0      	subs	r0, r0, r3
 80017f8:	2300      	movs	r3, #0
 80017fa:	4602      	mov	r2, r0
 80017fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80017fe:	6a21      	ldr	r1, [r4, #32]
 8001800:	4628      	mov	r0, r5
 8001802:	47b0      	blx	r6
 8001804:	1c43      	adds	r3, r0, #1
 8001806:	89a3      	ldrh	r3, [r4, #12]
 8001808:	d106      	bne.n	8001818 <__sflush_r+0x68>
 800180a:	6829      	ldr	r1, [r5, #0]
 800180c:	291d      	cmp	r1, #29
 800180e:	d848      	bhi.n	80018a2 <__sflush_r+0xf2>
 8001810:	4a29      	ldr	r2, [pc, #164]	; (80018b8 <__sflush_r+0x108>)
 8001812:	40ca      	lsrs	r2, r1
 8001814:	07d6      	lsls	r6, r2, #31
 8001816:	d544      	bpl.n	80018a2 <__sflush_r+0xf2>
 8001818:	2200      	movs	r2, #0
 800181a:	6062      	str	r2, [r4, #4]
 800181c:	04d9      	lsls	r1, r3, #19
 800181e:	6922      	ldr	r2, [r4, #16]
 8001820:	6022      	str	r2, [r4, #0]
 8001822:	d504      	bpl.n	800182e <__sflush_r+0x7e>
 8001824:	1c42      	adds	r2, r0, #1
 8001826:	d101      	bne.n	800182c <__sflush_r+0x7c>
 8001828:	682b      	ldr	r3, [r5, #0]
 800182a:	b903      	cbnz	r3, 800182e <__sflush_r+0x7e>
 800182c:	6560      	str	r0, [r4, #84]	; 0x54
 800182e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001830:	602f      	str	r7, [r5, #0]
 8001832:	2900      	cmp	r1, #0
 8001834:	d0c9      	beq.n	80017ca <__sflush_r+0x1a>
 8001836:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800183a:	4299      	cmp	r1, r3
 800183c:	d002      	beq.n	8001844 <__sflush_r+0x94>
 800183e:	4628      	mov	r0, r5
 8001840:	f000 f994 	bl	8001b6c <_free_r>
 8001844:	2000      	movs	r0, #0
 8001846:	6360      	str	r0, [r4, #52]	; 0x34
 8001848:	e7c0      	b.n	80017cc <__sflush_r+0x1c>
 800184a:	2301      	movs	r3, #1
 800184c:	4628      	mov	r0, r5
 800184e:	47b0      	blx	r6
 8001850:	1c41      	adds	r1, r0, #1
 8001852:	d1c8      	bne.n	80017e6 <__sflush_r+0x36>
 8001854:	682b      	ldr	r3, [r5, #0]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d0c5      	beq.n	80017e6 <__sflush_r+0x36>
 800185a:	2b1d      	cmp	r3, #29
 800185c:	d001      	beq.n	8001862 <__sflush_r+0xb2>
 800185e:	2b16      	cmp	r3, #22
 8001860:	d101      	bne.n	8001866 <__sflush_r+0xb6>
 8001862:	602f      	str	r7, [r5, #0]
 8001864:	e7b1      	b.n	80017ca <__sflush_r+0x1a>
 8001866:	89a3      	ldrh	r3, [r4, #12]
 8001868:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800186c:	81a3      	strh	r3, [r4, #12]
 800186e:	e7ad      	b.n	80017cc <__sflush_r+0x1c>
 8001870:	690f      	ldr	r7, [r1, #16]
 8001872:	2f00      	cmp	r7, #0
 8001874:	d0a9      	beq.n	80017ca <__sflush_r+0x1a>
 8001876:	0793      	lsls	r3, r2, #30
 8001878:	680e      	ldr	r6, [r1, #0]
 800187a:	bf08      	it	eq
 800187c:	694b      	ldreq	r3, [r1, #20]
 800187e:	600f      	str	r7, [r1, #0]
 8001880:	bf18      	it	ne
 8001882:	2300      	movne	r3, #0
 8001884:	eba6 0807 	sub.w	r8, r6, r7
 8001888:	608b      	str	r3, [r1, #8]
 800188a:	f1b8 0f00 	cmp.w	r8, #0
 800188e:	dd9c      	ble.n	80017ca <__sflush_r+0x1a>
 8001890:	4643      	mov	r3, r8
 8001892:	463a      	mov	r2, r7
 8001894:	6a21      	ldr	r1, [r4, #32]
 8001896:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001898:	4628      	mov	r0, r5
 800189a:	47b0      	blx	r6
 800189c:	2800      	cmp	r0, #0
 800189e:	dc06      	bgt.n	80018ae <__sflush_r+0xfe>
 80018a0:	89a3      	ldrh	r3, [r4, #12]
 80018a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018a6:	81a3      	strh	r3, [r4, #12]
 80018a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018ac:	e78e      	b.n	80017cc <__sflush_r+0x1c>
 80018ae:	4407      	add	r7, r0
 80018b0:	eba8 0800 	sub.w	r8, r8, r0
 80018b4:	e7e9      	b.n	800188a <__sflush_r+0xda>
 80018b6:	bf00      	nop
 80018b8:	20400001 	.word	0x20400001

080018bc <_fflush_r>:
 80018bc:	b538      	push	{r3, r4, r5, lr}
 80018be:	690b      	ldr	r3, [r1, #16]
 80018c0:	4605      	mov	r5, r0
 80018c2:	460c      	mov	r4, r1
 80018c4:	b1db      	cbz	r3, 80018fe <_fflush_r+0x42>
 80018c6:	b118      	cbz	r0, 80018d0 <_fflush_r+0x14>
 80018c8:	6983      	ldr	r3, [r0, #24]
 80018ca:	b90b      	cbnz	r3, 80018d0 <_fflush_r+0x14>
 80018cc:	f000 f860 	bl	8001990 <__sinit>
 80018d0:	4b0c      	ldr	r3, [pc, #48]	; (8001904 <_fflush_r+0x48>)
 80018d2:	429c      	cmp	r4, r3
 80018d4:	d109      	bne.n	80018ea <_fflush_r+0x2e>
 80018d6:	686c      	ldr	r4, [r5, #4]
 80018d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80018dc:	b17b      	cbz	r3, 80018fe <_fflush_r+0x42>
 80018de:	4621      	mov	r1, r4
 80018e0:	4628      	mov	r0, r5
 80018e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80018e6:	f7ff bf63 	b.w	80017b0 <__sflush_r>
 80018ea:	4b07      	ldr	r3, [pc, #28]	; (8001908 <_fflush_r+0x4c>)
 80018ec:	429c      	cmp	r4, r3
 80018ee:	d101      	bne.n	80018f4 <_fflush_r+0x38>
 80018f0:	68ac      	ldr	r4, [r5, #8]
 80018f2:	e7f1      	b.n	80018d8 <_fflush_r+0x1c>
 80018f4:	4b05      	ldr	r3, [pc, #20]	; (800190c <_fflush_r+0x50>)
 80018f6:	429c      	cmp	r4, r3
 80018f8:	bf08      	it	eq
 80018fa:	68ec      	ldreq	r4, [r5, #12]
 80018fc:	e7ec      	b.n	80018d8 <_fflush_r+0x1c>
 80018fe:	2000      	movs	r0, #0
 8001900:	bd38      	pop	{r3, r4, r5, pc}
 8001902:	bf00      	nop
 8001904:	08001ef4 	.word	0x08001ef4
 8001908:	08001f14 	.word	0x08001f14
 800190c:	08001ed4 	.word	0x08001ed4

08001910 <std>:
 8001910:	2300      	movs	r3, #0
 8001912:	b510      	push	{r4, lr}
 8001914:	4604      	mov	r4, r0
 8001916:	e9c0 3300 	strd	r3, r3, [r0]
 800191a:	6083      	str	r3, [r0, #8]
 800191c:	8181      	strh	r1, [r0, #12]
 800191e:	6643      	str	r3, [r0, #100]	; 0x64
 8001920:	81c2      	strh	r2, [r0, #14]
 8001922:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001926:	6183      	str	r3, [r0, #24]
 8001928:	4619      	mov	r1, r3
 800192a:	2208      	movs	r2, #8
 800192c:	305c      	adds	r0, #92	; 0x5c
 800192e:	f7ff fe13 	bl	8001558 <memset>
 8001932:	4b05      	ldr	r3, [pc, #20]	; (8001948 <std+0x38>)
 8001934:	6263      	str	r3, [r4, #36]	; 0x24
 8001936:	4b05      	ldr	r3, [pc, #20]	; (800194c <std+0x3c>)
 8001938:	62a3      	str	r3, [r4, #40]	; 0x28
 800193a:	4b05      	ldr	r3, [pc, #20]	; (8001950 <std+0x40>)
 800193c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800193e:	4b05      	ldr	r3, [pc, #20]	; (8001954 <std+0x44>)
 8001940:	6224      	str	r4, [r4, #32]
 8001942:	6323      	str	r3, [r4, #48]	; 0x30
 8001944:	bd10      	pop	{r4, pc}
 8001946:	bf00      	nop
 8001948:	08001cdd 	.word	0x08001cdd
 800194c:	08001cff 	.word	0x08001cff
 8001950:	08001d37 	.word	0x08001d37
 8001954:	08001d5b 	.word	0x08001d5b

08001958 <_cleanup_r>:
 8001958:	4901      	ldr	r1, [pc, #4]	; (8001960 <_cleanup_r+0x8>)
 800195a:	f000 b885 	b.w	8001a68 <_fwalk_reent>
 800195e:	bf00      	nop
 8001960:	080018bd 	.word	0x080018bd

08001964 <__sfmoreglue>:
 8001964:	b570      	push	{r4, r5, r6, lr}
 8001966:	1e4a      	subs	r2, r1, #1
 8001968:	2568      	movs	r5, #104	; 0x68
 800196a:	4355      	muls	r5, r2
 800196c:	460e      	mov	r6, r1
 800196e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001972:	f000 f949 	bl	8001c08 <_malloc_r>
 8001976:	4604      	mov	r4, r0
 8001978:	b140      	cbz	r0, 800198c <__sfmoreglue+0x28>
 800197a:	2100      	movs	r1, #0
 800197c:	e9c0 1600 	strd	r1, r6, [r0]
 8001980:	300c      	adds	r0, #12
 8001982:	60a0      	str	r0, [r4, #8]
 8001984:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001988:	f7ff fde6 	bl	8001558 <memset>
 800198c:	4620      	mov	r0, r4
 800198e:	bd70      	pop	{r4, r5, r6, pc}

08001990 <__sinit>:
 8001990:	6983      	ldr	r3, [r0, #24]
 8001992:	b510      	push	{r4, lr}
 8001994:	4604      	mov	r4, r0
 8001996:	bb33      	cbnz	r3, 80019e6 <__sinit+0x56>
 8001998:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800199c:	6503      	str	r3, [r0, #80]	; 0x50
 800199e:	4b12      	ldr	r3, [pc, #72]	; (80019e8 <__sinit+0x58>)
 80019a0:	4a12      	ldr	r2, [pc, #72]	; (80019ec <__sinit+0x5c>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	6282      	str	r2, [r0, #40]	; 0x28
 80019a6:	4298      	cmp	r0, r3
 80019a8:	bf04      	itt	eq
 80019aa:	2301      	moveq	r3, #1
 80019ac:	6183      	streq	r3, [r0, #24]
 80019ae:	f000 f81f 	bl	80019f0 <__sfp>
 80019b2:	6060      	str	r0, [r4, #4]
 80019b4:	4620      	mov	r0, r4
 80019b6:	f000 f81b 	bl	80019f0 <__sfp>
 80019ba:	60a0      	str	r0, [r4, #8]
 80019bc:	4620      	mov	r0, r4
 80019be:	f000 f817 	bl	80019f0 <__sfp>
 80019c2:	2200      	movs	r2, #0
 80019c4:	60e0      	str	r0, [r4, #12]
 80019c6:	2104      	movs	r1, #4
 80019c8:	6860      	ldr	r0, [r4, #4]
 80019ca:	f7ff ffa1 	bl	8001910 <std>
 80019ce:	2201      	movs	r2, #1
 80019d0:	2109      	movs	r1, #9
 80019d2:	68a0      	ldr	r0, [r4, #8]
 80019d4:	f7ff ff9c 	bl	8001910 <std>
 80019d8:	2202      	movs	r2, #2
 80019da:	2112      	movs	r1, #18
 80019dc:	68e0      	ldr	r0, [r4, #12]
 80019de:	f7ff ff97 	bl	8001910 <std>
 80019e2:	2301      	movs	r3, #1
 80019e4:	61a3      	str	r3, [r4, #24]
 80019e6:	bd10      	pop	{r4, pc}
 80019e8:	08001ed0 	.word	0x08001ed0
 80019ec:	08001959 	.word	0x08001959

080019f0 <__sfp>:
 80019f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019f2:	4b1b      	ldr	r3, [pc, #108]	; (8001a60 <__sfp+0x70>)
 80019f4:	681e      	ldr	r6, [r3, #0]
 80019f6:	69b3      	ldr	r3, [r6, #24]
 80019f8:	4607      	mov	r7, r0
 80019fa:	b913      	cbnz	r3, 8001a02 <__sfp+0x12>
 80019fc:	4630      	mov	r0, r6
 80019fe:	f7ff ffc7 	bl	8001990 <__sinit>
 8001a02:	3648      	adds	r6, #72	; 0x48
 8001a04:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001a08:	3b01      	subs	r3, #1
 8001a0a:	d503      	bpl.n	8001a14 <__sfp+0x24>
 8001a0c:	6833      	ldr	r3, [r6, #0]
 8001a0e:	b133      	cbz	r3, 8001a1e <__sfp+0x2e>
 8001a10:	6836      	ldr	r6, [r6, #0]
 8001a12:	e7f7      	b.n	8001a04 <__sfp+0x14>
 8001a14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001a18:	b16d      	cbz	r5, 8001a36 <__sfp+0x46>
 8001a1a:	3468      	adds	r4, #104	; 0x68
 8001a1c:	e7f4      	b.n	8001a08 <__sfp+0x18>
 8001a1e:	2104      	movs	r1, #4
 8001a20:	4638      	mov	r0, r7
 8001a22:	f7ff ff9f 	bl	8001964 <__sfmoreglue>
 8001a26:	6030      	str	r0, [r6, #0]
 8001a28:	2800      	cmp	r0, #0
 8001a2a:	d1f1      	bne.n	8001a10 <__sfp+0x20>
 8001a2c:	230c      	movs	r3, #12
 8001a2e:	603b      	str	r3, [r7, #0]
 8001a30:	4604      	mov	r4, r0
 8001a32:	4620      	mov	r0, r4
 8001a34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a36:	4b0b      	ldr	r3, [pc, #44]	; (8001a64 <__sfp+0x74>)
 8001a38:	6665      	str	r5, [r4, #100]	; 0x64
 8001a3a:	e9c4 5500 	strd	r5, r5, [r4]
 8001a3e:	60a5      	str	r5, [r4, #8]
 8001a40:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8001a44:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8001a48:	2208      	movs	r2, #8
 8001a4a:	4629      	mov	r1, r5
 8001a4c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001a50:	f7ff fd82 	bl	8001558 <memset>
 8001a54:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001a58:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001a5c:	e7e9      	b.n	8001a32 <__sfp+0x42>
 8001a5e:	bf00      	nop
 8001a60:	08001ed0 	.word	0x08001ed0
 8001a64:	ffff0001 	.word	0xffff0001

08001a68 <_fwalk_reent>:
 8001a68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001a6c:	4680      	mov	r8, r0
 8001a6e:	4689      	mov	r9, r1
 8001a70:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001a74:	2600      	movs	r6, #0
 8001a76:	b914      	cbnz	r4, 8001a7e <_fwalk_reent+0x16>
 8001a78:	4630      	mov	r0, r6
 8001a7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001a7e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8001a82:	3f01      	subs	r7, #1
 8001a84:	d501      	bpl.n	8001a8a <_fwalk_reent+0x22>
 8001a86:	6824      	ldr	r4, [r4, #0]
 8001a88:	e7f5      	b.n	8001a76 <_fwalk_reent+0xe>
 8001a8a:	89ab      	ldrh	r3, [r5, #12]
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d907      	bls.n	8001aa0 <_fwalk_reent+0x38>
 8001a90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001a94:	3301      	adds	r3, #1
 8001a96:	d003      	beq.n	8001aa0 <_fwalk_reent+0x38>
 8001a98:	4629      	mov	r1, r5
 8001a9a:	4640      	mov	r0, r8
 8001a9c:	47c8      	blx	r9
 8001a9e:	4306      	orrs	r6, r0
 8001aa0:	3568      	adds	r5, #104	; 0x68
 8001aa2:	e7ee      	b.n	8001a82 <_fwalk_reent+0x1a>

08001aa4 <__swhatbuf_r>:
 8001aa4:	b570      	push	{r4, r5, r6, lr}
 8001aa6:	460e      	mov	r6, r1
 8001aa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001aac:	2900      	cmp	r1, #0
 8001aae:	b096      	sub	sp, #88	; 0x58
 8001ab0:	4614      	mov	r4, r2
 8001ab2:	461d      	mov	r5, r3
 8001ab4:	da07      	bge.n	8001ac6 <__swhatbuf_r+0x22>
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	602b      	str	r3, [r5, #0]
 8001aba:	89b3      	ldrh	r3, [r6, #12]
 8001abc:	061a      	lsls	r2, r3, #24
 8001abe:	d410      	bmi.n	8001ae2 <__swhatbuf_r+0x3e>
 8001ac0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ac4:	e00e      	b.n	8001ae4 <__swhatbuf_r+0x40>
 8001ac6:	466a      	mov	r2, sp
 8001ac8:	f000 f96e 	bl	8001da8 <_fstat_r>
 8001acc:	2800      	cmp	r0, #0
 8001ace:	dbf2      	blt.n	8001ab6 <__swhatbuf_r+0x12>
 8001ad0:	9a01      	ldr	r2, [sp, #4]
 8001ad2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001ad6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001ada:	425a      	negs	r2, r3
 8001adc:	415a      	adcs	r2, r3
 8001ade:	602a      	str	r2, [r5, #0]
 8001ae0:	e7ee      	b.n	8001ac0 <__swhatbuf_r+0x1c>
 8001ae2:	2340      	movs	r3, #64	; 0x40
 8001ae4:	2000      	movs	r0, #0
 8001ae6:	6023      	str	r3, [r4, #0]
 8001ae8:	b016      	add	sp, #88	; 0x58
 8001aea:	bd70      	pop	{r4, r5, r6, pc}

08001aec <__smakebuf_r>:
 8001aec:	898b      	ldrh	r3, [r1, #12]
 8001aee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001af0:	079d      	lsls	r5, r3, #30
 8001af2:	4606      	mov	r6, r0
 8001af4:	460c      	mov	r4, r1
 8001af6:	d507      	bpl.n	8001b08 <__smakebuf_r+0x1c>
 8001af8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001afc:	6023      	str	r3, [r4, #0]
 8001afe:	6123      	str	r3, [r4, #16]
 8001b00:	2301      	movs	r3, #1
 8001b02:	6163      	str	r3, [r4, #20]
 8001b04:	b002      	add	sp, #8
 8001b06:	bd70      	pop	{r4, r5, r6, pc}
 8001b08:	ab01      	add	r3, sp, #4
 8001b0a:	466a      	mov	r2, sp
 8001b0c:	f7ff ffca 	bl	8001aa4 <__swhatbuf_r>
 8001b10:	9900      	ldr	r1, [sp, #0]
 8001b12:	4605      	mov	r5, r0
 8001b14:	4630      	mov	r0, r6
 8001b16:	f000 f877 	bl	8001c08 <_malloc_r>
 8001b1a:	b948      	cbnz	r0, 8001b30 <__smakebuf_r+0x44>
 8001b1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001b20:	059a      	lsls	r2, r3, #22
 8001b22:	d4ef      	bmi.n	8001b04 <__smakebuf_r+0x18>
 8001b24:	f023 0303 	bic.w	r3, r3, #3
 8001b28:	f043 0302 	orr.w	r3, r3, #2
 8001b2c:	81a3      	strh	r3, [r4, #12]
 8001b2e:	e7e3      	b.n	8001af8 <__smakebuf_r+0xc>
 8001b30:	4b0d      	ldr	r3, [pc, #52]	; (8001b68 <__smakebuf_r+0x7c>)
 8001b32:	62b3      	str	r3, [r6, #40]	; 0x28
 8001b34:	89a3      	ldrh	r3, [r4, #12]
 8001b36:	6020      	str	r0, [r4, #0]
 8001b38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b3c:	81a3      	strh	r3, [r4, #12]
 8001b3e:	9b00      	ldr	r3, [sp, #0]
 8001b40:	6163      	str	r3, [r4, #20]
 8001b42:	9b01      	ldr	r3, [sp, #4]
 8001b44:	6120      	str	r0, [r4, #16]
 8001b46:	b15b      	cbz	r3, 8001b60 <__smakebuf_r+0x74>
 8001b48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001b4c:	4630      	mov	r0, r6
 8001b4e:	f000 f93d 	bl	8001dcc <_isatty_r>
 8001b52:	b128      	cbz	r0, 8001b60 <__smakebuf_r+0x74>
 8001b54:	89a3      	ldrh	r3, [r4, #12]
 8001b56:	f023 0303 	bic.w	r3, r3, #3
 8001b5a:	f043 0301 	orr.w	r3, r3, #1
 8001b5e:	81a3      	strh	r3, [r4, #12]
 8001b60:	89a3      	ldrh	r3, [r4, #12]
 8001b62:	431d      	orrs	r5, r3
 8001b64:	81a5      	strh	r5, [r4, #12]
 8001b66:	e7cd      	b.n	8001b04 <__smakebuf_r+0x18>
 8001b68:	08001959 	.word	0x08001959

08001b6c <_free_r>:
 8001b6c:	b538      	push	{r3, r4, r5, lr}
 8001b6e:	4605      	mov	r5, r0
 8001b70:	2900      	cmp	r1, #0
 8001b72:	d045      	beq.n	8001c00 <_free_r+0x94>
 8001b74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001b78:	1f0c      	subs	r4, r1, #4
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	bfb8      	it	lt
 8001b7e:	18e4      	addlt	r4, r4, r3
 8001b80:	f000 f946 	bl	8001e10 <__malloc_lock>
 8001b84:	4a1f      	ldr	r2, [pc, #124]	; (8001c04 <_free_r+0x98>)
 8001b86:	6813      	ldr	r3, [r2, #0]
 8001b88:	4610      	mov	r0, r2
 8001b8a:	b933      	cbnz	r3, 8001b9a <_free_r+0x2e>
 8001b8c:	6063      	str	r3, [r4, #4]
 8001b8e:	6014      	str	r4, [r2, #0]
 8001b90:	4628      	mov	r0, r5
 8001b92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001b96:	f000 b93c 	b.w	8001e12 <__malloc_unlock>
 8001b9a:	42a3      	cmp	r3, r4
 8001b9c:	d90c      	bls.n	8001bb8 <_free_r+0x4c>
 8001b9e:	6821      	ldr	r1, [r4, #0]
 8001ba0:	1862      	adds	r2, r4, r1
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	bf04      	itt	eq
 8001ba6:	681a      	ldreq	r2, [r3, #0]
 8001ba8:	685b      	ldreq	r3, [r3, #4]
 8001baa:	6063      	str	r3, [r4, #4]
 8001bac:	bf04      	itt	eq
 8001bae:	1852      	addeq	r2, r2, r1
 8001bb0:	6022      	streq	r2, [r4, #0]
 8001bb2:	6004      	str	r4, [r0, #0]
 8001bb4:	e7ec      	b.n	8001b90 <_free_r+0x24>
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	685a      	ldr	r2, [r3, #4]
 8001bba:	b10a      	cbz	r2, 8001bc0 <_free_r+0x54>
 8001bbc:	42a2      	cmp	r2, r4
 8001bbe:	d9fa      	bls.n	8001bb6 <_free_r+0x4a>
 8001bc0:	6819      	ldr	r1, [r3, #0]
 8001bc2:	1858      	adds	r0, r3, r1
 8001bc4:	42a0      	cmp	r0, r4
 8001bc6:	d10b      	bne.n	8001be0 <_free_r+0x74>
 8001bc8:	6820      	ldr	r0, [r4, #0]
 8001bca:	4401      	add	r1, r0
 8001bcc:	1858      	adds	r0, r3, r1
 8001bce:	4282      	cmp	r2, r0
 8001bd0:	6019      	str	r1, [r3, #0]
 8001bd2:	d1dd      	bne.n	8001b90 <_free_r+0x24>
 8001bd4:	6810      	ldr	r0, [r2, #0]
 8001bd6:	6852      	ldr	r2, [r2, #4]
 8001bd8:	605a      	str	r2, [r3, #4]
 8001bda:	4401      	add	r1, r0
 8001bdc:	6019      	str	r1, [r3, #0]
 8001bde:	e7d7      	b.n	8001b90 <_free_r+0x24>
 8001be0:	d902      	bls.n	8001be8 <_free_r+0x7c>
 8001be2:	230c      	movs	r3, #12
 8001be4:	602b      	str	r3, [r5, #0]
 8001be6:	e7d3      	b.n	8001b90 <_free_r+0x24>
 8001be8:	6820      	ldr	r0, [r4, #0]
 8001bea:	1821      	adds	r1, r4, r0
 8001bec:	428a      	cmp	r2, r1
 8001bee:	bf04      	itt	eq
 8001bf0:	6811      	ldreq	r1, [r2, #0]
 8001bf2:	6852      	ldreq	r2, [r2, #4]
 8001bf4:	6062      	str	r2, [r4, #4]
 8001bf6:	bf04      	itt	eq
 8001bf8:	1809      	addeq	r1, r1, r0
 8001bfa:	6021      	streq	r1, [r4, #0]
 8001bfc:	605c      	str	r4, [r3, #4]
 8001bfe:	e7c7      	b.n	8001b90 <_free_r+0x24>
 8001c00:	bd38      	pop	{r3, r4, r5, pc}
 8001c02:	bf00      	nop
 8001c04:	20000084 	.word	0x20000084

08001c08 <_malloc_r>:
 8001c08:	b570      	push	{r4, r5, r6, lr}
 8001c0a:	1ccd      	adds	r5, r1, #3
 8001c0c:	f025 0503 	bic.w	r5, r5, #3
 8001c10:	3508      	adds	r5, #8
 8001c12:	2d0c      	cmp	r5, #12
 8001c14:	bf38      	it	cc
 8001c16:	250c      	movcc	r5, #12
 8001c18:	2d00      	cmp	r5, #0
 8001c1a:	4606      	mov	r6, r0
 8001c1c:	db01      	blt.n	8001c22 <_malloc_r+0x1a>
 8001c1e:	42a9      	cmp	r1, r5
 8001c20:	d903      	bls.n	8001c2a <_malloc_r+0x22>
 8001c22:	230c      	movs	r3, #12
 8001c24:	6033      	str	r3, [r6, #0]
 8001c26:	2000      	movs	r0, #0
 8001c28:	bd70      	pop	{r4, r5, r6, pc}
 8001c2a:	f000 f8f1 	bl	8001e10 <__malloc_lock>
 8001c2e:	4a21      	ldr	r2, [pc, #132]	; (8001cb4 <_malloc_r+0xac>)
 8001c30:	6814      	ldr	r4, [r2, #0]
 8001c32:	4621      	mov	r1, r4
 8001c34:	b991      	cbnz	r1, 8001c5c <_malloc_r+0x54>
 8001c36:	4c20      	ldr	r4, [pc, #128]	; (8001cb8 <_malloc_r+0xb0>)
 8001c38:	6823      	ldr	r3, [r4, #0]
 8001c3a:	b91b      	cbnz	r3, 8001c44 <_malloc_r+0x3c>
 8001c3c:	4630      	mov	r0, r6
 8001c3e:	f000 f83d 	bl	8001cbc <_sbrk_r>
 8001c42:	6020      	str	r0, [r4, #0]
 8001c44:	4629      	mov	r1, r5
 8001c46:	4630      	mov	r0, r6
 8001c48:	f000 f838 	bl	8001cbc <_sbrk_r>
 8001c4c:	1c43      	adds	r3, r0, #1
 8001c4e:	d124      	bne.n	8001c9a <_malloc_r+0x92>
 8001c50:	230c      	movs	r3, #12
 8001c52:	6033      	str	r3, [r6, #0]
 8001c54:	4630      	mov	r0, r6
 8001c56:	f000 f8dc 	bl	8001e12 <__malloc_unlock>
 8001c5a:	e7e4      	b.n	8001c26 <_malloc_r+0x1e>
 8001c5c:	680b      	ldr	r3, [r1, #0]
 8001c5e:	1b5b      	subs	r3, r3, r5
 8001c60:	d418      	bmi.n	8001c94 <_malloc_r+0x8c>
 8001c62:	2b0b      	cmp	r3, #11
 8001c64:	d90f      	bls.n	8001c86 <_malloc_r+0x7e>
 8001c66:	600b      	str	r3, [r1, #0]
 8001c68:	50cd      	str	r5, [r1, r3]
 8001c6a:	18cc      	adds	r4, r1, r3
 8001c6c:	4630      	mov	r0, r6
 8001c6e:	f000 f8d0 	bl	8001e12 <__malloc_unlock>
 8001c72:	f104 000b 	add.w	r0, r4, #11
 8001c76:	1d23      	adds	r3, r4, #4
 8001c78:	f020 0007 	bic.w	r0, r0, #7
 8001c7c:	1ac3      	subs	r3, r0, r3
 8001c7e:	d0d3      	beq.n	8001c28 <_malloc_r+0x20>
 8001c80:	425a      	negs	r2, r3
 8001c82:	50e2      	str	r2, [r4, r3]
 8001c84:	e7d0      	b.n	8001c28 <_malloc_r+0x20>
 8001c86:	428c      	cmp	r4, r1
 8001c88:	684b      	ldr	r3, [r1, #4]
 8001c8a:	bf16      	itet	ne
 8001c8c:	6063      	strne	r3, [r4, #4]
 8001c8e:	6013      	streq	r3, [r2, #0]
 8001c90:	460c      	movne	r4, r1
 8001c92:	e7eb      	b.n	8001c6c <_malloc_r+0x64>
 8001c94:	460c      	mov	r4, r1
 8001c96:	6849      	ldr	r1, [r1, #4]
 8001c98:	e7cc      	b.n	8001c34 <_malloc_r+0x2c>
 8001c9a:	1cc4      	adds	r4, r0, #3
 8001c9c:	f024 0403 	bic.w	r4, r4, #3
 8001ca0:	42a0      	cmp	r0, r4
 8001ca2:	d005      	beq.n	8001cb0 <_malloc_r+0xa8>
 8001ca4:	1a21      	subs	r1, r4, r0
 8001ca6:	4630      	mov	r0, r6
 8001ca8:	f000 f808 	bl	8001cbc <_sbrk_r>
 8001cac:	3001      	adds	r0, #1
 8001cae:	d0cf      	beq.n	8001c50 <_malloc_r+0x48>
 8001cb0:	6025      	str	r5, [r4, #0]
 8001cb2:	e7db      	b.n	8001c6c <_malloc_r+0x64>
 8001cb4:	20000084 	.word	0x20000084
 8001cb8:	20000088 	.word	0x20000088

08001cbc <_sbrk_r>:
 8001cbc:	b538      	push	{r3, r4, r5, lr}
 8001cbe:	4c06      	ldr	r4, [pc, #24]	; (8001cd8 <_sbrk_r+0x1c>)
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	4605      	mov	r5, r0
 8001cc4:	4608      	mov	r0, r1
 8001cc6:	6023      	str	r3, [r4, #0]
 8001cc8:	f7fe fbac 	bl	8000424 <_sbrk>
 8001ccc:	1c43      	adds	r3, r0, #1
 8001cce:	d102      	bne.n	8001cd6 <_sbrk_r+0x1a>
 8001cd0:	6823      	ldr	r3, [r4, #0]
 8001cd2:	b103      	cbz	r3, 8001cd6 <_sbrk_r+0x1a>
 8001cd4:	602b      	str	r3, [r5, #0]
 8001cd6:	bd38      	pop	{r3, r4, r5, pc}
 8001cd8:	200000bc 	.word	0x200000bc

08001cdc <__sread>:
 8001cdc:	b510      	push	{r4, lr}
 8001cde:	460c      	mov	r4, r1
 8001ce0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ce4:	f000 f896 	bl	8001e14 <_read_r>
 8001ce8:	2800      	cmp	r0, #0
 8001cea:	bfab      	itete	ge
 8001cec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001cee:	89a3      	ldrhlt	r3, [r4, #12]
 8001cf0:	181b      	addge	r3, r3, r0
 8001cf2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001cf6:	bfac      	ite	ge
 8001cf8:	6563      	strge	r3, [r4, #84]	; 0x54
 8001cfa:	81a3      	strhlt	r3, [r4, #12]
 8001cfc:	bd10      	pop	{r4, pc}

08001cfe <__swrite>:
 8001cfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d02:	461f      	mov	r7, r3
 8001d04:	898b      	ldrh	r3, [r1, #12]
 8001d06:	05db      	lsls	r3, r3, #23
 8001d08:	4605      	mov	r5, r0
 8001d0a:	460c      	mov	r4, r1
 8001d0c:	4616      	mov	r6, r2
 8001d0e:	d505      	bpl.n	8001d1c <__swrite+0x1e>
 8001d10:	2302      	movs	r3, #2
 8001d12:	2200      	movs	r2, #0
 8001d14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d18:	f000 f868 	bl	8001dec <_lseek_r>
 8001d1c:	89a3      	ldrh	r3, [r4, #12]
 8001d1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001d22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001d26:	81a3      	strh	r3, [r4, #12]
 8001d28:	4632      	mov	r2, r6
 8001d2a:	463b      	mov	r3, r7
 8001d2c:	4628      	mov	r0, r5
 8001d2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001d32:	f000 b817 	b.w	8001d64 <_write_r>

08001d36 <__sseek>:
 8001d36:	b510      	push	{r4, lr}
 8001d38:	460c      	mov	r4, r1
 8001d3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d3e:	f000 f855 	bl	8001dec <_lseek_r>
 8001d42:	1c43      	adds	r3, r0, #1
 8001d44:	89a3      	ldrh	r3, [r4, #12]
 8001d46:	bf15      	itete	ne
 8001d48:	6560      	strne	r0, [r4, #84]	; 0x54
 8001d4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001d4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001d52:	81a3      	strheq	r3, [r4, #12]
 8001d54:	bf18      	it	ne
 8001d56:	81a3      	strhne	r3, [r4, #12]
 8001d58:	bd10      	pop	{r4, pc}

08001d5a <__sclose>:
 8001d5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d5e:	f000 b813 	b.w	8001d88 <_close_r>
	...

08001d64 <_write_r>:
 8001d64:	b538      	push	{r3, r4, r5, lr}
 8001d66:	4c07      	ldr	r4, [pc, #28]	; (8001d84 <_write_r+0x20>)
 8001d68:	4605      	mov	r5, r0
 8001d6a:	4608      	mov	r0, r1
 8001d6c:	4611      	mov	r1, r2
 8001d6e:	2200      	movs	r2, #0
 8001d70:	6022      	str	r2, [r4, #0]
 8001d72:	461a      	mov	r2, r3
 8001d74:	f000 f888 	bl	8001e88 <_write>
 8001d78:	1c43      	adds	r3, r0, #1
 8001d7a:	d102      	bne.n	8001d82 <_write_r+0x1e>
 8001d7c:	6823      	ldr	r3, [r4, #0]
 8001d7e:	b103      	cbz	r3, 8001d82 <_write_r+0x1e>
 8001d80:	602b      	str	r3, [r5, #0]
 8001d82:	bd38      	pop	{r3, r4, r5, pc}
 8001d84:	200000bc 	.word	0x200000bc

08001d88 <_close_r>:
 8001d88:	b538      	push	{r3, r4, r5, lr}
 8001d8a:	4c06      	ldr	r4, [pc, #24]	; (8001da4 <_close_r+0x1c>)
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	4605      	mov	r5, r0
 8001d90:	4608      	mov	r0, r1
 8001d92:	6023      	str	r3, [r4, #0]
 8001d94:	f000 f850 	bl	8001e38 <_close>
 8001d98:	1c43      	adds	r3, r0, #1
 8001d9a:	d102      	bne.n	8001da2 <_close_r+0x1a>
 8001d9c:	6823      	ldr	r3, [r4, #0]
 8001d9e:	b103      	cbz	r3, 8001da2 <_close_r+0x1a>
 8001da0:	602b      	str	r3, [r5, #0]
 8001da2:	bd38      	pop	{r3, r4, r5, pc}
 8001da4:	200000bc 	.word	0x200000bc

08001da8 <_fstat_r>:
 8001da8:	b538      	push	{r3, r4, r5, lr}
 8001daa:	4c07      	ldr	r4, [pc, #28]	; (8001dc8 <_fstat_r+0x20>)
 8001dac:	2300      	movs	r3, #0
 8001dae:	4605      	mov	r5, r0
 8001db0:	4608      	mov	r0, r1
 8001db2:	4611      	mov	r1, r2
 8001db4:	6023      	str	r3, [r4, #0]
 8001db6:	f000 f847 	bl	8001e48 <_fstat>
 8001dba:	1c43      	adds	r3, r0, #1
 8001dbc:	d102      	bne.n	8001dc4 <_fstat_r+0x1c>
 8001dbe:	6823      	ldr	r3, [r4, #0]
 8001dc0:	b103      	cbz	r3, 8001dc4 <_fstat_r+0x1c>
 8001dc2:	602b      	str	r3, [r5, #0]
 8001dc4:	bd38      	pop	{r3, r4, r5, pc}
 8001dc6:	bf00      	nop
 8001dc8:	200000bc 	.word	0x200000bc

08001dcc <_isatty_r>:
 8001dcc:	b538      	push	{r3, r4, r5, lr}
 8001dce:	4c06      	ldr	r4, [pc, #24]	; (8001de8 <_isatty_r+0x1c>)
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	4605      	mov	r5, r0
 8001dd4:	4608      	mov	r0, r1
 8001dd6:	6023      	str	r3, [r4, #0]
 8001dd8:	f000 f83e 	bl	8001e58 <_isatty>
 8001ddc:	1c43      	adds	r3, r0, #1
 8001dde:	d102      	bne.n	8001de6 <_isatty_r+0x1a>
 8001de0:	6823      	ldr	r3, [r4, #0]
 8001de2:	b103      	cbz	r3, 8001de6 <_isatty_r+0x1a>
 8001de4:	602b      	str	r3, [r5, #0]
 8001de6:	bd38      	pop	{r3, r4, r5, pc}
 8001de8:	200000bc 	.word	0x200000bc

08001dec <_lseek_r>:
 8001dec:	b538      	push	{r3, r4, r5, lr}
 8001dee:	4c07      	ldr	r4, [pc, #28]	; (8001e0c <_lseek_r+0x20>)
 8001df0:	4605      	mov	r5, r0
 8001df2:	4608      	mov	r0, r1
 8001df4:	4611      	mov	r1, r2
 8001df6:	2200      	movs	r2, #0
 8001df8:	6022      	str	r2, [r4, #0]
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	f000 f834 	bl	8001e68 <_lseek>
 8001e00:	1c43      	adds	r3, r0, #1
 8001e02:	d102      	bne.n	8001e0a <_lseek_r+0x1e>
 8001e04:	6823      	ldr	r3, [r4, #0]
 8001e06:	b103      	cbz	r3, 8001e0a <_lseek_r+0x1e>
 8001e08:	602b      	str	r3, [r5, #0]
 8001e0a:	bd38      	pop	{r3, r4, r5, pc}
 8001e0c:	200000bc 	.word	0x200000bc

08001e10 <__malloc_lock>:
 8001e10:	4770      	bx	lr

08001e12 <__malloc_unlock>:
 8001e12:	4770      	bx	lr

08001e14 <_read_r>:
 8001e14:	b538      	push	{r3, r4, r5, lr}
 8001e16:	4c07      	ldr	r4, [pc, #28]	; (8001e34 <_read_r+0x20>)
 8001e18:	4605      	mov	r5, r0
 8001e1a:	4608      	mov	r0, r1
 8001e1c:	4611      	mov	r1, r2
 8001e1e:	2200      	movs	r2, #0
 8001e20:	6022      	str	r2, [r4, #0]
 8001e22:	461a      	mov	r2, r3
 8001e24:	f000 f828 	bl	8001e78 <_read>
 8001e28:	1c43      	adds	r3, r0, #1
 8001e2a:	d102      	bne.n	8001e32 <_read_r+0x1e>
 8001e2c:	6823      	ldr	r3, [r4, #0]
 8001e2e:	b103      	cbz	r3, 8001e32 <_read_r+0x1e>
 8001e30:	602b      	str	r3, [r5, #0]
 8001e32:	bd38      	pop	{r3, r4, r5, pc}
 8001e34:	200000bc 	.word	0x200000bc

08001e38 <_close>:
 8001e38:	4b02      	ldr	r3, [pc, #8]	; (8001e44 <_close+0xc>)
 8001e3a:	2258      	movs	r2, #88	; 0x58
 8001e3c:	601a      	str	r2, [r3, #0]
 8001e3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e42:	4770      	bx	lr
 8001e44:	200000bc 	.word	0x200000bc

08001e48 <_fstat>:
 8001e48:	4b02      	ldr	r3, [pc, #8]	; (8001e54 <_fstat+0xc>)
 8001e4a:	2258      	movs	r2, #88	; 0x58
 8001e4c:	601a      	str	r2, [r3, #0]
 8001e4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e52:	4770      	bx	lr
 8001e54:	200000bc 	.word	0x200000bc

08001e58 <_isatty>:
 8001e58:	4b02      	ldr	r3, [pc, #8]	; (8001e64 <_isatty+0xc>)
 8001e5a:	2258      	movs	r2, #88	; 0x58
 8001e5c:	601a      	str	r2, [r3, #0]
 8001e5e:	2000      	movs	r0, #0
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	200000bc 	.word	0x200000bc

08001e68 <_lseek>:
 8001e68:	4b02      	ldr	r3, [pc, #8]	; (8001e74 <_lseek+0xc>)
 8001e6a:	2258      	movs	r2, #88	; 0x58
 8001e6c:	601a      	str	r2, [r3, #0]
 8001e6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e72:	4770      	bx	lr
 8001e74:	200000bc 	.word	0x200000bc

08001e78 <_read>:
 8001e78:	4b02      	ldr	r3, [pc, #8]	; (8001e84 <_read+0xc>)
 8001e7a:	2258      	movs	r2, #88	; 0x58
 8001e7c:	601a      	str	r2, [r3, #0]
 8001e7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e82:	4770      	bx	lr
 8001e84:	200000bc 	.word	0x200000bc

08001e88 <_write>:
 8001e88:	4b02      	ldr	r3, [pc, #8]	; (8001e94 <_write+0xc>)
 8001e8a:	2258      	movs	r2, #88	; 0x58
 8001e8c:	601a      	str	r2, [r3, #0]
 8001e8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e92:	4770      	bx	lr
 8001e94:	200000bc 	.word	0x200000bc

08001e98 <_init>:
 8001e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e9a:	bf00      	nop
 8001e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e9e:	bc08      	pop	{r3}
 8001ea0:	469e      	mov	lr, r3
 8001ea2:	4770      	bx	lr

08001ea4 <_fini>:
 8001ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ea6:	bf00      	nop
 8001ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001eaa:	bc08      	pop	{r3}
 8001eac:	469e      	mov	lr, r3
 8001eae:	4770      	bx	lr
