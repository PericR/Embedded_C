
stm32f446_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000dc4  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000f88  08000f88  00020400  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000f88  08000f88  00020400  2**0
                  CONTENTS
  4 .ARM          00000000  08000f88  08000f88  00020400  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f88  08000f88  00020400  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f88  08000f88  00010f88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000f8c  08000f8c  00010f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000400  20000000  08000f90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  20000400  08001390  00020400  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000440  08001390  00020440  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020400  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001e30  00000000  00000000  0002042a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000005d8  00000000  00000000  0002225a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000180  00000000  00000000  00022838  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000138  00000000  00000000  000229b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000029ea  00000000  00000000  00022af0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000183f  00000000  00000000  000254da  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000a90c  00000000  00000000  00026d19  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00031625  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000514  00000000  00000000  000316a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000400 	.word	0x20000400
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000f70 	.word	0x08000f70

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000404 	.word	0x20000404
 8000200:	08000f70 	.word	0x08000f70

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <delay>:

USART_Handle_t usart2_handle;

uint8_t msg[1024] = "STM 32 UART mode test..\n\r";

void delay(void){
 8000214:	b480      	push	{r7}
 8000216:	b083      	sub	sp, #12
 8000218:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < 500000; i++);
 800021a:	2300      	movs	r3, #0
 800021c:	607b      	str	r3, [r7, #4]
 800021e:	e002      	b.n	8000226 <delay+0x12>
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	3301      	adds	r3, #1
 8000224:	607b      	str	r3, [r7, #4]
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	4a03      	ldr	r2, [pc, #12]	; (8000238 <delay+0x24>)
 800022a:	4293      	cmp	r3, r2
 800022c:	d9f8      	bls.n	8000220 <delay+0xc>
}
 800022e:	bf00      	nop
 8000230:	370c      	adds	r7, #12
 8000232:	46bd      	mov	sp, r7
 8000234:	bc80      	pop	{r7}
 8000236:	4770      	bx	lr
 8000238:	0007a11f 	.word	0x0007a11f

0800023c <GPIO_Button_Init>:

void GPIO_Button_Init(){
 800023c:	b580      	push	{r7, lr}
 800023e:	b084      	sub	sp, #16
 8000240:	af00      	add	r7, sp, #0
	GPIO_Handle_t gpioc_button;
	gpioc_button.pGPIOx = GPIOC;
 8000242:	4b09      	ldr	r3, [pc, #36]	; (8000268 <GPIO_Button_Init+0x2c>)
 8000244:	607b      	str	r3, [r7, #4]

	gpioc_button.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000246:	230d      	movs	r3, #13
 8000248:	723b      	strb	r3, [r7, #8]
	gpioc_button.GPIO_PinConfig.GPIO_PinMode = GPIO_PIN_MODE_IN;
 800024a:	2300      	movs	r3, #0
 800024c:	727b      	strb	r3, [r7, #9]

	GPIO_PeriClockControl(gpioc_button.pGPIOx, ENABLE);
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	2101      	movs	r1, #1
 8000252:	4618      	mov	r0, r3
 8000254:	f000 f8a8 	bl	80003a8 <GPIO_PeriClockControl>
	GPIO_Init(&gpioc_button);
 8000258:	1d3b      	adds	r3, r7, #4
 800025a:	4618      	mov	r0, r3
 800025c:	f000 f976 	bl	800054c <GPIO_Init>
}
 8000260:	bf00      	nop
 8000262:	3710      	adds	r7, #16
 8000264:	46bd      	mov	sp, r7
 8000266:	bd80      	pop	{r7, pc}
 8000268:	40020800 	.word	0x40020800

0800026c <USART2_GPIOInits>:


void USART2_GPIOInits(void){
 800026c:	b580      	push	{r7, lr}
 800026e:	b084      	sub	sp, #16
 8000270:	af00      	add	r7, sp, #0
	GPIO_Handle_t USART2_pins;
	USART2_pins.pGPIOx = GPIOC;
 8000272:	4b10      	ldr	r3, [pc, #64]	; (80002b4 <USART2_GPIOInits+0x48>)
 8000274:	607b      	str	r3, [r7, #4]

	USART2_pins.GPIO_PinConfig.GPIO_PinMode = GPIO_PIN_MODE_ALTFN;
 8000276:	2302      	movs	r3, #2
 8000278:	727b      	strb	r3, [r7, #9]
	USART2_pins.GPIO_PinConfig.GPIO_PinAltFunMode = GPIO_PIN_ALT_FUN_8;
 800027a:	2308      	movs	r3, #8
 800027c:	737b      	strb	r3, [r7, #13]
	USART2_pins.GPIO_PinConfig.GPIO_PinOPType = GPIO_PIN_OP_TYPE_PP;
 800027e:	2300      	movs	r3, #0
 8000280:	733b      	strb	r3, [r7, #12]
	USART2_pins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000282:	2301      	movs	r3, #1
 8000284:	72fb      	strb	r3, [r7, #11]
	USART2_pins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_PIN_OP_SPEED_FAST;
 8000286:	2302      	movs	r3, #2
 8000288:	72bb      	strb	r3, [r7, #10]

	//Start GPIO peripheral clock
	GPIO_PeriClockControl(USART2_pins.pGPIOx, ENABLE);
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	2101      	movs	r1, #1
 800028e:	4618      	mov	r0, r3
 8000290:	f000 f88a 	bl	80003a8 <GPIO_PeriClockControl>

	//Configure USART_TX
	USART2_pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 8000294:	2306      	movs	r3, #6
 8000296:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&USART2_pins);
 8000298:	1d3b      	adds	r3, r7, #4
 800029a:	4618      	mov	r0, r3
 800029c:	f000 f956 	bl	800054c <GPIO_Init>

	//Configure USART_RX
	USART2_pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 80002a0:	2307      	movs	r3, #7
 80002a2:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&USART2_pins);
 80002a4:	1d3b      	adds	r3, r7, #4
 80002a6:	4618      	mov	r0, r3
 80002a8:	f000 f950 	bl	800054c <GPIO_Init>
}
 80002ac:	bf00      	nop
 80002ae:	3710      	adds	r7, #16
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bd80      	pop	{r7, pc}
 80002b4:	40020800 	.word	0x40020800

080002b8 <USART2_Init>:

void USART2_Init(void){
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
	usart2_handle.pUSARTx = USART6;
 80002bc:	4b0d      	ldr	r3, [pc, #52]	; (80002f4 <USART2_Init+0x3c>)
 80002be:	4a0e      	ldr	r2, [pc, #56]	; (80002f8 <USART2_Init+0x40>)
 80002c0:	601a      	str	r2, [r3, #0]

	usart2_handle.USART_Config.USART_Baud = USART_STD_BAUD_115200;
 80002c2:	4b0c      	ldr	r3, [pc, #48]	; (80002f4 <USART2_Init+0x3c>)
 80002c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002c8:	609a      	str	r2, [r3, #8]
	usart2_handle.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 80002ca:	4b0a      	ldr	r3, [pc, #40]	; (80002f4 <USART2_Init+0x3c>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	73da      	strb	r2, [r3, #15]
	usart2_handle.USART_Config.USART_Mode = USART_MODE_ONLY_TX;
 80002d0:	4b08      	ldr	r3, [pc, #32]	; (80002f4 <USART2_Init+0x3c>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	711a      	strb	r2, [r3, #4]
	usart2_handle.USART_Config.USART_NoOfStopBits = USART_STOPBITS_1;
 80002d6:	4b07      	ldr	r3, [pc, #28]	; (80002f4 <USART2_Init+0x3c>)
 80002d8:	2200      	movs	r2, #0
 80002da:	731a      	strb	r2, [r3, #12]
	usart2_handle.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 80002dc:	4b05      	ldr	r3, [pc, #20]	; (80002f4 <USART2_Init+0x3c>)
 80002de:	2200      	movs	r2, #0
 80002e0:	739a      	strb	r2, [r3, #14]
	usart2_handle.USART_Config.USART_WordLength = USART_WORDLEN_8BITS;
 80002e2:	4b04      	ldr	r3, [pc, #16]	; (80002f4 <USART2_Init+0x3c>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	735a      	strb	r2, [r3, #13]

	USART_Init(&usart2_handle);
 80002e8:	4802      	ldr	r0, [pc, #8]	; (80002f4 <USART2_Init+0x3c>)
 80002ea:	f000 fcb3 	bl	8000c54 <USART_Init>
}
 80002ee:	bf00      	nop
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	2000041c 	.word	0x2000041c
 80002f8:	40011400 	.word	0x40011400

080002fc <main>:

int main(void){
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
	GPIO_Button_Init();
 8000300:	f7ff ff9c 	bl	800023c <GPIO_Button_Init>

	USART2_GPIOInits();
 8000304:	f7ff ffb2 	bl	800026c <USART2_GPIOInits>
	USART2_Init();
 8000308:	f7ff ffd6 	bl	80002b8 <USART2_Init>

	while(1){
		while(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13)){};
 800030c:	bf00      	nop
 800030e:	210d      	movs	r1, #13
 8000310:	480c      	ldr	r0, [pc, #48]	; (8000344 <main+0x48>)
 8000312:	f000 fae5 	bl	80008e0 <GPIO_ReadFromInputPin>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d1f8      	bne.n	800030e <main+0x12>
		delay();
 800031c:	f7ff ff7a 	bl	8000214 <delay>

		USART_PeripheralControl(USART6, ENABLE);
 8000320:	2101      	movs	r1, #1
 8000322:	4809      	ldr	r0, [pc, #36]	; (8000348 <main+0x4c>)
 8000324:	f000 fd66 	bl	8000df4 <USART_PeripheralControl>

		USART_SendData(&usart2_handle, (uint8_t*)msg, strlen((char*)msg));
 8000328:	4808      	ldr	r0, [pc, #32]	; (800034c <main+0x50>)
 800032a:	f7ff ff6b 	bl	8000204 <strlen>
 800032e:	4603      	mov	r3, r0
 8000330:	461a      	mov	r2, r3
 8000332:	4906      	ldr	r1, [pc, #24]	; (800034c <main+0x50>)
 8000334:	4806      	ldr	r0, [pc, #24]	; (8000350 <main+0x54>)
 8000336:	f000 fd10 	bl	8000d5a <USART_SendData>

		USART_PeripheralControl(USART6, DISABLE);
 800033a:	2100      	movs	r1, #0
 800033c:	4802      	ldr	r0, [pc, #8]	; (8000348 <main+0x4c>)
 800033e:	f000 fd59 	bl	8000df4 <USART_PeripheralControl>
		while(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13)){};
 8000342:	e7e3      	b.n	800030c <main+0x10>
 8000344:	40020800 	.word	0x40020800
 8000348:	40011400 	.word	0x40011400
 800034c:	20000000 	.word	0x20000000
 8000350:	2000041c 	.word	0x2000041c

08000354 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000354:	480d      	ldr	r0, [pc, #52]	; (800038c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000356:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000358:	480d      	ldr	r0, [pc, #52]	; (8000390 <LoopForever+0x6>)
  ldr r1, =_edata
 800035a:	490e      	ldr	r1, [pc, #56]	; (8000394 <LoopForever+0xa>)
  ldr r2, =_sidata
 800035c:	4a0e      	ldr	r2, [pc, #56]	; (8000398 <LoopForever+0xe>)
  movs r3, #0
 800035e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000360:	e002      	b.n	8000368 <LoopCopyDataInit>

08000362 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000362:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000364:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000366:	3304      	adds	r3, #4

08000368 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000368:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800036a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800036c:	d3f9      	bcc.n	8000362 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800036e:	4a0b      	ldr	r2, [pc, #44]	; (800039c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000370:	4c0b      	ldr	r4, [pc, #44]	; (80003a0 <LoopForever+0x16>)
  movs r3, #0
 8000372:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000374:	e001      	b.n	800037a <LoopFillZerobss>

08000376 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000376:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000378:	3204      	adds	r2, #4

0800037a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800037a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800037c:	d3fb      	bcc.n	8000376 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800037e:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8000382:	f000 fdd1 	bl	8000f28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000386:	f7ff ffb9 	bl	80002fc <main>

0800038a <LoopForever>:

LoopForever:
    b LoopForever
 800038a:	e7fe      	b.n	800038a <LoopForever>
  ldr   r0, =_estack
 800038c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000390:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000394:	20000400 	.word	0x20000400
  ldr r2, =_sidata
 8000398:	08000f90 	.word	0x08000f90
  ldr r2, =_sbss
 800039c:	20000400 	.word	0x20000400
  ldr r4, =_ebss
 80003a0:	20000440 	.word	0x20000440

080003a4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003a4:	e7fe      	b.n	80003a4 <ADC_IRQHandler>
	...

080003a8 <GPIO_PeriClockControl>:
 * @return				- none
 *
 * @note				- none
 *
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
 80003a8:	b480      	push	{r7}
 80003aa:	b083      	sub	sp, #12
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
 80003b0:	460b      	mov	r3, r1
 80003b2:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 80003b4:	78fb      	ldrb	r3, [r7, #3]
 80003b6:	2b01      	cmp	r3, #1
 80003b8:	d157      	bne.n	800046a <GPIO_PeriClockControl+0xc2>
		if(pGPIOx == GPIOA){
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	4a5a      	ldr	r2, [pc, #360]	; (8000528 <GPIO_PeriClockControl+0x180>)
 80003be:	4293      	cmp	r3, r2
 80003c0:	d106      	bne.n	80003d0 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 80003c2:	4b5a      	ldr	r3, [pc, #360]	; (800052c <GPIO_PeriClockControl+0x184>)
 80003c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003c6:	4a59      	ldr	r2, [pc, #356]	; (800052c <GPIO_PeriClockControl+0x184>)
 80003c8:	f043 0301 	orr.w	r3, r3, #1
 80003cc:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOG_PCLK_DI();
		} else if(pGPIOx == GPIOH){
			GPIOH_PCLK_DI();
		}
	}
}
 80003ce:	e0a6      	b.n	800051e <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOB){
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	4a57      	ldr	r2, [pc, #348]	; (8000530 <GPIO_PeriClockControl+0x188>)
 80003d4:	4293      	cmp	r3, r2
 80003d6:	d106      	bne.n	80003e6 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80003d8:	4b54      	ldr	r3, [pc, #336]	; (800052c <GPIO_PeriClockControl+0x184>)
 80003da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003dc:	4a53      	ldr	r2, [pc, #332]	; (800052c <GPIO_PeriClockControl+0x184>)
 80003de:	f043 0302 	orr.w	r3, r3, #2
 80003e2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003e4:	e09b      	b.n	800051e <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOC){
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	4a52      	ldr	r2, [pc, #328]	; (8000534 <GPIO_PeriClockControl+0x18c>)
 80003ea:	4293      	cmp	r3, r2
 80003ec:	d106      	bne.n	80003fc <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80003ee:	4b4f      	ldr	r3, [pc, #316]	; (800052c <GPIO_PeriClockControl+0x184>)
 80003f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f2:	4a4e      	ldr	r2, [pc, #312]	; (800052c <GPIO_PeriClockControl+0x184>)
 80003f4:	f043 0304 	orr.w	r3, r3, #4
 80003f8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003fa:	e090      	b.n	800051e <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOD){
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	4a4e      	ldr	r2, [pc, #312]	; (8000538 <GPIO_PeriClockControl+0x190>)
 8000400:	4293      	cmp	r3, r2
 8000402:	d106      	bne.n	8000412 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000404:	4b49      	ldr	r3, [pc, #292]	; (800052c <GPIO_PeriClockControl+0x184>)
 8000406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000408:	4a48      	ldr	r2, [pc, #288]	; (800052c <GPIO_PeriClockControl+0x184>)
 800040a:	f043 0308 	orr.w	r3, r3, #8
 800040e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000410:	e085      	b.n	800051e <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOE){
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	4a49      	ldr	r2, [pc, #292]	; (800053c <GPIO_PeriClockControl+0x194>)
 8000416:	4293      	cmp	r3, r2
 8000418:	d106      	bne.n	8000428 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800041a:	4b44      	ldr	r3, [pc, #272]	; (800052c <GPIO_PeriClockControl+0x184>)
 800041c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800041e:	4a43      	ldr	r2, [pc, #268]	; (800052c <GPIO_PeriClockControl+0x184>)
 8000420:	f043 0310 	orr.w	r3, r3, #16
 8000424:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000426:	e07a      	b.n	800051e <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOF){
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	4a45      	ldr	r2, [pc, #276]	; (8000540 <GPIO_PeriClockControl+0x198>)
 800042c:	4293      	cmp	r3, r2
 800042e:	d106      	bne.n	800043e <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000430:	4b3e      	ldr	r3, [pc, #248]	; (800052c <GPIO_PeriClockControl+0x184>)
 8000432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000434:	4a3d      	ldr	r2, [pc, #244]	; (800052c <GPIO_PeriClockControl+0x184>)
 8000436:	f043 0320 	orr.w	r3, r3, #32
 800043a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800043c:	e06f      	b.n	800051e <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOG){
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	4a40      	ldr	r2, [pc, #256]	; (8000544 <GPIO_PeriClockControl+0x19c>)
 8000442:	4293      	cmp	r3, r2
 8000444:	d106      	bne.n	8000454 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000446:	4b39      	ldr	r3, [pc, #228]	; (800052c <GPIO_PeriClockControl+0x184>)
 8000448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800044a:	4a38      	ldr	r2, [pc, #224]	; (800052c <GPIO_PeriClockControl+0x184>)
 800044c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000450:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000452:	e064      	b.n	800051e <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOH){
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	4a3c      	ldr	r2, [pc, #240]	; (8000548 <GPIO_PeriClockControl+0x1a0>)
 8000458:	4293      	cmp	r3, r2
 800045a:	d160      	bne.n	800051e <GPIO_PeriClockControl+0x176>
			GPIOH_PCLK_EN();
 800045c:	4b33      	ldr	r3, [pc, #204]	; (800052c <GPIO_PeriClockControl+0x184>)
 800045e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000460:	4a32      	ldr	r2, [pc, #200]	; (800052c <GPIO_PeriClockControl+0x184>)
 8000462:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000466:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000468:	e059      	b.n	800051e <GPIO_PeriClockControl+0x176>
	} else if(EnorDi == DISABLE){
 800046a:	78fb      	ldrb	r3, [r7, #3]
 800046c:	2b00      	cmp	r3, #0
 800046e:	d156      	bne.n	800051e <GPIO_PeriClockControl+0x176>
		if(pGPIOx == GPIOA){
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	4a2d      	ldr	r2, [pc, #180]	; (8000528 <GPIO_PeriClockControl+0x180>)
 8000474:	4293      	cmp	r3, r2
 8000476:	d106      	bne.n	8000486 <GPIO_PeriClockControl+0xde>
			GPIOA_PCLK_DI();
 8000478:	4b2c      	ldr	r3, [pc, #176]	; (800052c <GPIO_PeriClockControl+0x184>)
 800047a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800047c:	4a2b      	ldr	r2, [pc, #172]	; (800052c <GPIO_PeriClockControl+0x184>)
 800047e:	f023 0301 	bic.w	r3, r3, #1
 8000482:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000484:	e04b      	b.n	800051e <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOB){
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	4a29      	ldr	r2, [pc, #164]	; (8000530 <GPIO_PeriClockControl+0x188>)
 800048a:	4293      	cmp	r3, r2
 800048c:	d106      	bne.n	800049c <GPIO_PeriClockControl+0xf4>
			GPIOB_PCLK_DI();
 800048e:	4b27      	ldr	r3, [pc, #156]	; (800052c <GPIO_PeriClockControl+0x184>)
 8000490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000492:	4a26      	ldr	r2, [pc, #152]	; (800052c <GPIO_PeriClockControl+0x184>)
 8000494:	f023 0302 	bic.w	r3, r3, #2
 8000498:	6313      	str	r3, [r2, #48]	; 0x30
}
 800049a:	e040      	b.n	800051e <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOC){
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	4a25      	ldr	r2, [pc, #148]	; (8000534 <GPIO_PeriClockControl+0x18c>)
 80004a0:	4293      	cmp	r3, r2
 80004a2:	d106      	bne.n	80004b2 <GPIO_PeriClockControl+0x10a>
			GPIOC_PCLK_DI();
 80004a4:	4b21      	ldr	r3, [pc, #132]	; (800052c <GPIO_PeriClockControl+0x184>)
 80004a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004a8:	4a20      	ldr	r2, [pc, #128]	; (800052c <GPIO_PeriClockControl+0x184>)
 80004aa:	f023 0304 	bic.w	r3, r3, #4
 80004ae:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004b0:	e035      	b.n	800051e <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOD){
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	4a20      	ldr	r2, [pc, #128]	; (8000538 <GPIO_PeriClockControl+0x190>)
 80004b6:	4293      	cmp	r3, r2
 80004b8:	d106      	bne.n	80004c8 <GPIO_PeriClockControl+0x120>
			GPIOD_PCLK_DI();
 80004ba:	4b1c      	ldr	r3, [pc, #112]	; (800052c <GPIO_PeriClockControl+0x184>)
 80004bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004be:	4a1b      	ldr	r2, [pc, #108]	; (800052c <GPIO_PeriClockControl+0x184>)
 80004c0:	f023 0308 	bic.w	r3, r3, #8
 80004c4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004c6:	e02a      	b.n	800051e <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOE){
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	4a1c      	ldr	r2, [pc, #112]	; (800053c <GPIO_PeriClockControl+0x194>)
 80004cc:	4293      	cmp	r3, r2
 80004ce:	d106      	bne.n	80004de <GPIO_PeriClockControl+0x136>
			GPIOE_PCLK_DI();
 80004d0:	4b16      	ldr	r3, [pc, #88]	; (800052c <GPIO_PeriClockControl+0x184>)
 80004d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004d4:	4a15      	ldr	r2, [pc, #84]	; (800052c <GPIO_PeriClockControl+0x184>)
 80004d6:	f023 0310 	bic.w	r3, r3, #16
 80004da:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004dc:	e01f      	b.n	800051e <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOF){
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	4a17      	ldr	r2, [pc, #92]	; (8000540 <GPIO_PeriClockControl+0x198>)
 80004e2:	4293      	cmp	r3, r2
 80004e4:	d106      	bne.n	80004f4 <GPIO_PeriClockControl+0x14c>
			GPIOF_PCLK_DI();
 80004e6:	4b11      	ldr	r3, [pc, #68]	; (800052c <GPIO_PeriClockControl+0x184>)
 80004e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ea:	4a10      	ldr	r2, [pc, #64]	; (800052c <GPIO_PeriClockControl+0x184>)
 80004ec:	f023 0320 	bic.w	r3, r3, #32
 80004f0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004f2:	e014      	b.n	800051e <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOG){
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	4a13      	ldr	r2, [pc, #76]	; (8000544 <GPIO_PeriClockControl+0x19c>)
 80004f8:	4293      	cmp	r3, r2
 80004fa:	d106      	bne.n	800050a <GPIO_PeriClockControl+0x162>
			GPIOG_PCLK_DI();
 80004fc:	4b0b      	ldr	r3, [pc, #44]	; (800052c <GPIO_PeriClockControl+0x184>)
 80004fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000500:	4a0a      	ldr	r2, [pc, #40]	; (800052c <GPIO_PeriClockControl+0x184>)
 8000502:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000506:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000508:	e009      	b.n	800051e <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOH){
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	4a0e      	ldr	r2, [pc, #56]	; (8000548 <GPIO_PeriClockControl+0x1a0>)
 800050e:	4293      	cmp	r3, r2
 8000510:	d105      	bne.n	800051e <GPIO_PeriClockControl+0x176>
			GPIOH_PCLK_DI();
 8000512:	4b06      	ldr	r3, [pc, #24]	; (800052c <GPIO_PeriClockControl+0x184>)
 8000514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000516:	4a05      	ldr	r2, [pc, #20]	; (800052c <GPIO_PeriClockControl+0x184>)
 8000518:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800051c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800051e:	bf00      	nop
 8000520:	370c      	adds	r7, #12
 8000522:	46bd      	mov	sp, r7
 8000524:	bc80      	pop	{r7}
 8000526:	4770      	bx	lr
 8000528:	40020000 	.word	0x40020000
 800052c:	40023800 	.word	0x40023800
 8000530:	40020400 	.word	0x40020400
 8000534:	40020800 	.word	0x40020800
 8000538:	40020c00 	.word	0x40020c00
 800053c:	40021000 	.word	0x40021000
 8000540:	40021400 	.word	0x40021400
 8000544:	40021800 	.word	0x40021800
 8000548:	40021c00 	.word	0x40021c00

0800054c <GPIO_Init>:
 * @return				- none
 *
 * @note				- none
 *
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 800054c:	b480      	push	{r7}
 800054e:	b08b      	sub	sp, #44	; 0x2c
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
	uint32_t reset_value = 0;
 8000554:	2300      	movs	r3, #0
 8000556:	627b      	str	r3, [r7, #36]	; 0x24

	//reset, then set mode register
	if( pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_PIN_MODE_ANALOG){
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	795b      	ldrb	r3, [r3, #5]
 800055c:	2b03      	cmp	r3, #3
 800055e:	d823      	bhi.n	80005a8 <GPIO_Init+0x5c>
		reset_value = (0x3 << ((2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)));
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	791b      	ldrb	r3, [r3, #4]
 8000564:	005b      	lsls	r3, r3, #1
 8000566:	2203      	movs	r2, #3
 8000568:	fa02 f303 	lsl.w	r3, r2, r3
 800056c:	627b      	str	r3, [r7, #36]	; 0x24
		pGPIOHandle->pGPIOx->MODER &= ~(reset_value);
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	6819      	ldr	r1, [r3, #0]
 8000574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000576:	43da      	mvns	r2, r3
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	400a      	ands	r2, r1
 800057e:	601a      	str	r2, [r3, #0]
		reset_value = 0;
 8000580:	2300      	movs	r3, #0
 8000582:	627b      	str	r3, [r7, #36]	; 0x24

		uint32_t moder_value = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	795b      	ldrb	r3, [r3, #5]
 8000588:	461a      	mov	r2, r3
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	791b      	ldrb	r3, [r3, #4]
 800058e:	005b      	lsls	r3, r3, #1
 8000590:	fa02 f303 	lsl.w	r3, r2, r3
 8000594:	61fb      	str	r3, [r7, #28]
		pGPIOHandle->pGPIOx->MODER |= moder_value;
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	6819      	ldr	r1, [r3, #0]
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	69fa      	ldr	r2, [r7, #28]
 80005a2:	430a      	orrs	r2, r1
 80005a4:	601a      	str	r2, [r3, #0]
 80005a6:	e0ee      	b.n	8000786 <GPIO_Init+0x23a>
	} else{
		//interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_PIN_MODE_IT_FT){
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	795b      	ldrb	r3, [r3, #5]
 80005ac:	2b04      	cmp	r3, #4
 80005ae:	d11a      	bne.n	80005e6 <GPIO_Init+0x9a>
			//reset RTSR
			reset_value = (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	791b      	ldrb	r3, [r3, #4]
 80005b4:	461a      	mov	r2, r3
 80005b6:	2301      	movs	r3, #1
 80005b8:	4093      	lsls	r3, r2
 80005ba:	627b      	str	r3, [r7, #36]	; 0x24
			EXTI->RTSR &= ~(reset_value);
 80005bc:	4b49      	ldr	r3, [pc, #292]	; (80006e4 <GPIO_Init+0x198>)
 80005be:	689a      	ldr	r2, [r3, #8]
 80005c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005c2:	43db      	mvns	r3, r3
 80005c4:	4947      	ldr	r1, [pc, #284]	; (80006e4 <GPIO_Init+0x198>)
 80005c6:	4013      	ands	r3, r2
 80005c8:	608b      	str	r3, [r1, #8]
			reset_value = 0;
 80005ca:	2300      	movs	r3, #0
 80005cc:	627b      	str	r3, [r7, #36]	; 0x24

			//configure FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005ce:	4b45      	ldr	r3, [pc, #276]	; (80006e4 <GPIO_Init+0x198>)
 80005d0:	68db      	ldr	r3, [r3, #12]
 80005d2:	687a      	ldr	r2, [r7, #4]
 80005d4:	7912      	ldrb	r2, [r2, #4]
 80005d6:	4611      	mov	r1, r2
 80005d8:	2201      	movs	r2, #1
 80005da:	408a      	lsls	r2, r1
 80005dc:	4611      	mov	r1, r2
 80005de:	4a41      	ldr	r2, [pc, #260]	; (80006e4 <GPIO_Init+0x198>)
 80005e0:	430b      	orrs	r3, r1
 80005e2:	60d3      	str	r3, [r2, #12]
 80005e4:	e038      	b.n	8000658 <GPIO_Init+0x10c>
		} else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_PIN_MODE_IT_RT){
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	795b      	ldrb	r3, [r3, #5]
 80005ea:	2b05      	cmp	r3, #5
 80005ec:	d11a      	bne.n	8000624 <GPIO_Init+0xd8>
			//reset FTSR
			reset_value = (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	791b      	ldrb	r3, [r3, #4]
 80005f2:	461a      	mov	r2, r3
 80005f4:	2301      	movs	r3, #1
 80005f6:	4093      	lsls	r3, r2
 80005f8:	627b      	str	r3, [r7, #36]	; 0x24
			EXTI->FTSR &= ~(reset_value);
 80005fa:	4b3a      	ldr	r3, [pc, #232]	; (80006e4 <GPIO_Init+0x198>)
 80005fc:	68da      	ldr	r2, [r3, #12]
 80005fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000600:	43db      	mvns	r3, r3
 8000602:	4938      	ldr	r1, [pc, #224]	; (80006e4 <GPIO_Init+0x198>)
 8000604:	4013      	ands	r3, r2
 8000606:	60cb      	str	r3, [r1, #12]
			reset_value = 0;
 8000608:	2300      	movs	r3, #0
 800060a:	627b      	str	r3, [r7, #36]	; 0x24

			//configure RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800060c:	4b35      	ldr	r3, [pc, #212]	; (80006e4 <GPIO_Init+0x198>)
 800060e:	689b      	ldr	r3, [r3, #8]
 8000610:	687a      	ldr	r2, [r7, #4]
 8000612:	7912      	ldrb	r2, [r2, #4]
 8000614:	4611      	mov	r1, r2
 8000616:	2201      	movs	r2, #1
 8000618:	408a      	lsls	r2, r1
 800061a:	4611      	mov	r1, r2
 800061c:	4a31      	ldr	r2, [pc, #196]	; (80006e4 <GPIO_Init+0x198>)
 800061e:	430b      	orrs	r3, r1
 8000620:	6093      	str	r3, [r2, #8]
 8000622:	e019      	b.n	8000658 <GPIO_Init+0x10c>
		} else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_PIN_MODE_IT_RFT){
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	795b      	ldrb	r3, [r3, #5]
 8000628:	2b06      	cmp	r3, #6
 800062a:	d115      	bne.n	8000658 <GPIO_Init+0x10c>
			//configure RTSR and FTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800062c:	4b2d      	ldr	r3, [pc, #180]	; (80006e4 <GPIO_Init+0x198>)
 800062e:	689b      	ldr	r3, [r3, #8]
 8000630:	687a      	ldr	r2, [r7, #4]
 8000632:	7912      	ldrb	r2, [r2, #4]
 8000634:	4611      	mov	r1, r2
 8000636:	2201      	movs	r2, #1
 8000638:	408a      	lsls	r2, r1
 800063a:	4611      	mov	r1, r2
 800063c:	4a29      	ldr	r2, [pc, #164]	; (80006e4 <GPIO_Init+0x198>)
 800063e:	430b      	orrs	r3, r1
 8000640:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000642:	4b28      	ldr	r3, [pc, #160]	; (80006e4 <GPIO_Init+0x198>)
 8000644:	68db      	ldr	r3, [r3, #12]
 8000646:	687a      	ldr	r2, [r7, #4]
 8000648:	7912      	ldrb	r2, [r2, #4]
 800064a:	4611      	mov	r1, r2
 800064c:	2201      	movs	r2, #1
 800064e:	408a      	lsls	r2, r1
 8000650:	4611      	mov	r1, r2
 8000652:	4a24      	ldr	r2, [pc, #144]	; (80006e4 <GPIO_Init+0x198>)
 8000654:	430b      	orrs	r3, r1
 8000656:	60d3      	str	r3, [r2, #12]
		}

		//configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t index = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4);
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	791b      	ldrb	r3, [r3, #4]
 800065c:	089b      	lsrs	r3, r3, #2
 800065e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		uint8_t position = ((pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4) * 4);
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	791b      	ldrb	r3, [r3, #4]
 8000666:	f003 0303 	and.w	r3, r3, #3
 800066a:	b2db      	uxtb	r3, r3
 800066c:	009b      	lsls	r3, r3, #2
 800066e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		uint8_t port_code = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4a1c      	ldr	r2, [pc, #112]	; (80006e8 <GPIO_Init+0x19c>)
 8000678:	4293      	cmp	r3, r2
 800067a:	d045      	beq.n	8000708 <GPIO_Init+0x1bc>
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a1a      	ldr	r2, [pc, #104]	; (80006ec <GPIO_Init+0x1a0>)
 8000682:	4293      	cmp	r3, r2
 8000684:	d02b      	beq.n	80006de <GPIO_Init+0x192>
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4a19      	ldr	r2, [pc, #100]	; (80006f0 <GPIO_Init+0x1a4>)
 800068c:	4293      	cmp	r3, r2
 800068e:	d024      	beq.n	80006da <GPIO_Init+0x18e>
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a17      	ldr	r2, [pc, #92]	; (80006f4 <GPIO_Init+0x1a8>)
 8000696:	4293      	cmp	r3, r2
 8000698:	d01d      	beq.n	80006d6 <GPIO_Init+0x18a>
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	4a16      	ldr	r2, [pc, #88]	; (80006f8 <GPIO_Init+0x1ac>)
 80006a0:	4293      	cmp	r3, r2
 80006a2:	d016      	beq.n	80006d2 <GPIO_Init+0x186>
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a14      	ldr	r2, [pc, #80]	; (80006fc <GPIO_Init+0x1b0>)
 80006aa:	4293      	cmp	r3, r2
 80006ac:	d00f      	beq.n	80006ce <GPIO_Init+0x182>
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4a13      	ldr	r2, [pc, #76]	; (8000700 <GPIO_Init+0x1b4>)
 80006b4:	4293      	cmp	r3, r2
 80006b6:	d008      	beq.n	80006ca <GPIO_Init+0x17e>
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a11      	ldr	r2, [pc, #68]	; (8000704 <GPIO_Init+0x1b8>)
 80006be:	4293      	cmp	r3, r2
 80006c0:	d101      	bne.n	80006c6 <GPIO_Init+0x17a>
 80006c2:	2307      	movs	r3, #7
 80006c4:	e021      	b.n	800070a <GPIO_Init+0x1be>
 80006c6:	2300      	movs	r3, #0
 80006c8:	e01f      	b.n	800070a <GPIO_Init+0x1be>
 80006ca:	2306      	movs	r3, #6
 80006cc:	e01d      	b.n	800070a <GPIO_Init+0x1be>
 80006ce:	2305      	movs	r3, #5
 80006d0:	e01b      	b.n	800070a <GPIO_Init+0x1be>
 80006d2:	2304      	movs	r3, #4
 80006d4:	e019      	b.n	800070a <GPIO_Init+0x1be>
 80006d6:	2303      	movs	r3, #3
 80006d8:	e017      	b.n	800070a <GPIO_Init+0x1be>
 80006da:	2302      	movs	r3, #2
 80006dc:	e015      	b.n	800070a <GPIO_Init+0x1be>
 80006de:	2301      	movs	r3, #1
 80006e0:	e013      	b.n	800070a <GPIO_Init+0x1be>
 80006e2:	bf00      	nop
 80006e4:	40013c00 	.word	0x40013c00
 80006e8:	40020000 	.word	0x40020000
 80006ec:	40020400 	.word	0x40020400
 80006f0:	40020800 	.word	0x40020800
 80006f4:	40020c00 	.word	0x40020c00
 80006f8:	40021000 	.word	0x40021000
 80006fc:	40021400 	.word	0x40021400
 8000700:	40021800 	.word	0x40021800
 8000704:	40021c00 	.word	0x40021c00
 8000708:	2300      	movs	r3, #0
 800070a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

		SYSCFG_PCLK_EN();
 800070e:	4b71      	ldr	r3, [pc, #452]	; (80008d4 <GPIO_Init+0x388>)
 8000710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000712:	4a70      	ldr	r2, [pc, #448]	; (80008d4 <GPIO_Init+0x388>)
 8000714:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000718:	6453      	str	r3, [r2, #68]	; 0x44

		reset_value = (0xF << position);
 800071a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800071e:	220f      	movs	r2, #15
 8000720:	fa02 f303 	lsl.w	r3, r2, r3
 8000724:	627b      	str	r3, [r7, #36]	; 0x24
		SYSCFG->EXTICR[index] &= ~(reset_value);
 8000726:	4a6c      	ldr	r2, [pc, #432]	; (80008d8 <GPIO_Init+0x38c>)
 8000728:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800072c:	3302      	adds	r3, #2
 800072e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000734:	43da      	mvns	r2, r3
 8000736:	4868      	ldr	r0, [pc, #416]	; (80008d8 <GPIO_Init+0x38c>)
 8000738:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800073c:	400a      	ands	r2, r1
 800073e:	3302      	adds	r3, #2
 8000740:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		reset_value = 0;
 8000744:	2300      	movs	r3, #0
 8000746:	627b      	str	r3, [r7, #36]	; 0x24

		SYSCFG->EXTICR[index] |= (port_code << position);
 8000748:	4a63      	ldr	r2, [pc, #396]	; (80008d8 <GPIO_Init+0x38c>)
 800074a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800074e:	3302      	adds	r3, #2
 8000750:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000754:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 8000758:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800075c:	fa01 f303 	lsl.w	r3, r1, r3
 8000760:	4618      	mov	r0, r3
 8000762:	495d      	ldr	r1, [pc, #372]	; (80008d8 <GPIO_Init+0x38c>)
 8000764:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000768:	4302      	orrs	r2, r0
 800076a:	3302      	adds	r3, #2
 800076c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		//enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000770:	4b5a      	ldr	r3, [pc, #360]	; (80008dc <GPIO_Init+0x390>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	687a      	ldr	r2, [r7, #4]
 8000776:	7912      	ldrb	r2, [r2, #4]
 8000778:	4611      	mov	r1, r2
 800077a:	2201      	movs	r2, #1
 800077c:	408a      	lsls	r2, r1
 800077e:	4611      	mov	r1, r2
 8000780:	4a56      	ldr	r2, [pc, #344]	; (80008dc <GPIO_Init+0x390>)
 8000782:	430b      	orrs	r3, r1
 8000784:	6013      	str	r3, [r2, #0]
	}

	// reset, then set speed register
	reset_value = (0x3 << ((2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)));
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	791b      	ldrb	r3, [r3, #4]
 800078a:	005b      	lsls	r3, r3, #1
 800078c:	2203      	movs	r2, #3
 800078e:	fa02 f303 	lsl.w	r3, r2, r3
 8000792:	627b      	str	r3, [r7, #36]	; 0x24
	pGPIOHandle->pGPIOx->OSPEEDER &= ~(reset_value);
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	6899      	ldr	r1, [r3, #8]
 800079a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800079c:	43da      	mvns	r2, r3
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	400a      	ands	r2, r1
 80007a4:	609a      	str	r2, [r3, #8]
	reset_value = 0;
 80007a6:	2300      	movs	r3, #0
 80007a8:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ospeedr_value = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	799b      	ldrb	r3, [r3, #6]
 80007ae:	461a      	mov	r2, r3
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	791b      	ldrb	r3, [r3, #4]
 80007b4:	005b      	lsls	r3, r3, #1
 80007b6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ba:	61bb      	str	r3, [r7, #24]
	pGPIOHandle->pGPIOx->OSPEEDER |= ospeedr_value;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	6899      	ldr	r1, [r3, #8]
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	69ba      	ldr	r2, [r7, #24]
 80007c8:	430a      	orrs	r2, r1
 80007ca:	609a      	str	r2, [r3, #8]

	//reset, then set pupd register
	reset_value = (0x3 << ((2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)));
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	791b      	ldrb	r3, [r3, #4]
 80007d0:	005b      	lsls	r3, r3, #1
 80007d2:	2203      	movs	r2, #3
 80007d4:	fa02 f303 	lsl.w	r3, r2, r3
 80007d8:	627b      	str	r3, [r7, #36]	; 0x24
	pGPIOHandle->pGPIOx->PUPDR &= ~(reset_value);
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	68d9      	ldr	r1, [r3, #12]
 80007e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007e2:	43da      	mvns	r2, r3
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	400a      	ands	r2, r1
 80007ea:	60da      	str	r2, [r3, #12]
	reset_value = 0;
 80007ec:	2300      	movs	r3, #0
 80007ee:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t pupdr_value = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	79db      	ldrb	r3, [r3, #7]
 80007f4:	461a      	mov	r2, r3
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	791b      	ldrb	r3, [r3, #4]
 80007fa:	005b      	lsls	r3, r3, #1
 80007fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000800:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR |= pupdr_value;
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	68d9      	ldr	r1, [r3, #12]
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	697a      	ldr	r2, [r7, #20]
 800080e:	430a      	orrs	r2, r1
 8000810:	60da      	str	r2, [r3, #12]

	//reset, then set output type register
	reset_value = (0x1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	791b      	ldrb	r3, [r3, #4]
 8000816:	461a      	mov	r2, r3
 8000818:	2301      	movs	r3, #1
 800081a:	4093      	lsls	r3, r2
 800081c:	627b      	str	r3, [r7, #36]	; 0x24
	pGPIOHandle->pGPIOx->OTYPER &= ~(reset_value);
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	6859      	ldr	r1, [r3, #4]
 8000824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000826:	43da      	mvns	r2, r3
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	400a      	ands	r2, r1
 800082e:	605a      	str	r2, [r3, #4]
	reset_value = 0;
 8000830:	2300      	movs	r3, #0
 8000832:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t optyper_value = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	7a1b      	ldrb	r3, [r3, #8]
 8000838:	461a      	mov	r2, r3
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	791b      	ldrb	r3, [r3, #4]
 800083e:	fa02 f303 	lsl.w	r3, r2, r3
 8000842:	613b      	str	r3, [r7, #16]
	pGPIOHandle->pGPIOx->OTYPER |= optyper_value;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	6859      	ldr	r1, [r3, #4]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	693a      	ldr	r2, [r7, #16]
 8000850:	430a      	orrs	r2, r1
 8000852:	605a      	str	r2, [r3, #4]

	//reset, then set altfn register
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_PIN_MODE_ALTFN){
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	795b      	ldrb	r3, [r3, #5]
 8000858:	2b02      	cmp	r3, #2
 800085a:	d135      	bne.n	80008c8 <GPIO_Init+0x37c>
		uint8_t index = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8);
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	791b      	ldrb	r3, [r3, #4]
 8000860:	08db      	lsrs	r3, r3, #3
 8000862:	73fb      	strb	r3, [r7, #15]
		uint8_t position = ((pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8) * 4);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	791b      	ldrb	r3, [r3, #4]
 8000868:	f003 0307 	and.w	r3, r3, #7
 800086c:	b2db      	uxtb	r3, r3
 800086e:	009b      	lsls	r3, r3, #2
 8000870:	73bb      	strb	r3, [r7, #14]

		//reset
		reset_value = (0xF << position);
 8000872:	7bbb      	ldrb	r3, [r7, #14]
 8000874:	220f      	movs	r2, #15
 8000876:	fa02 f303 	lsl.w	r3, r2, r3
 800087a:	627b      	str	r3, [r7, #36]	; 0x24
		pGPIOHandle->pGPIOx->AFR[index] &= ~(reset_value);
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	7bfa      	ldrb	r2, [r7, #15]
 8000882:	3208      	adds	r2, #8
 8000884:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800088a:	43d9      	mvns	r1, r3
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	7bfa      	ldrb	r2, [r7, #15]
 8000892:	4001      	ands	r1, r0
 8000894:	3208      	adds	r2, #8
 8000896:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		reset_value = 0;
 800089a:	2300      	movs	r3, #0
 800089c:	627b      	str	r3, [r7, #36]	; 0x24

		//set
		uint32_t afr_value = (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << position);
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	7a5b      	ldrb	r3, [r3, #9]
 80008a2:	461a      	mov	r2, r3
 80008a4:	7bbb      	ldrb	r3, [r7, #14]
 80008a6:	fa02 f303 	lsl.w	r3, r2, r3
 80008aa:	60bb      	str	r3, [r7, #8]
		pGPIOHandle->pGPIOx->AFR[index] |= afr_value;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	7bfa      	ldrb	r2, [r7, #15]
 80008b2:	3208      	adds	r2, #8
 80008b4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	7bfa      	ldrb	r2, [r7, #15]
 80008be:	68b9      	ldr	r1, [r7, #8]
 80008c0:	4301      	orrs	r1, r0
 80008c2:	3208      	adds	r2, #8
 80008c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 80008c8:	bf00      	nop
 80008ca:	372c      	adds	r7, #44	; 0x2c
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bc80      	pop	{r7}
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	40023800 	.word	0x40023800
 80008d8:	40013800 	.word	0x40013800
 80008dc:	40013c00 	.word	0x40013c00

080008e0 <GPIO_ReadFromInputPin>:
 * @return				- 0 or 1
 *
 * @note				- none
 *
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber){
 80008e0:	b480      	push	{r7}
 80008e2:	b085      	sub	sp, #20
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
 80008e8:	460b      	mov	r3, r1
 80008ea:	70fb      	strb	r3, [r7, #3]
	uint8_t value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x00000001);
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	691a      	ldr	r2, [r3, #16]
 80008f0:	78fb      	ldrb	r3, [r7, #3]
 80008f2:	fa22 f303 	lsr.w	r3, r2, r3
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	f003 0301 	and.w	r3, r3, #1
 80008fc:	73fb      	strb	r3, [r7, #15]
	return value;
 80008fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000900:	4618      	mov	r0, r3
 8000902:	3714      	adds	r7, #20
 8000904:	46bd      	mov	sp, r7
 8000906:	bc80      	pop	{r7}
 8000908:	4770      	bx	lr
	...

0800090c <RCC_GetPCLK1Value>:
 * @return				- peripheral clock speed for I2C peripherals
 *
 * @note				- none
 *
 */
uint32_t RCC_GetPCLK1Value(void){
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
	uint32_t pclk1;
	uint8_t clksrc, ahbprescaler, apb1prescaler;

	clksrc = (RCC->CFGR >> 2) & 0x3;
 8000912:	4b3d      	ldr	r3, [pc, #244]	; (8000a08 <RCC_GetPCLK1Value+0xfc>)
 8000914:	689b      	ldr	r3, [r3, #8]
 8000916:	089b      	lsrs	r3, r3, #2
 8000918:	b2db      	uxtb	r3, r3
 800091a:	f003 0303 	and.w	r3, r3, #3
 800091e:	70fb      	strb	r3, [r7, #3]
	if(clksrc == 0){
 8000920:	78fb      	ldrb	r3, [r7, #3]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d102      	bne.n	800092c <RCC_GetPCLK1Value+0x20>
		pclk1 = 16000000;
 8000926:	4b39      	ldr	r3, [pc, #228]	; (8000a0c <RCC_GetPCLK1Value+0x100>)
 8000928:	607b      	str	r3, [r7, #4]
 800092a:	e001      	b.n	8000930 <RCC_GetPCLK1Value+0x24>
	} else{
		pclk1 = 0; //I wont use other clocks for now (i don't have external clock)
 800092c:	2300      	movs	r3, #0
 800092e:	607b      	str	r3, [r7, #4]
	}

	ahbprescaler = (RCC->CFGR >> 4) & 0xF;
 8000930:	4b35      	ldr	r3, [pc, #212]	; (8000a08 <RCC_GetPCLK1Value+0xfc>)
 8000932:	689b      	ldr	r3, [r3, #8]
 8000934:	091b      	lsrs	r3, r3, #4
 8000936:	b2db      	uxtb	r3, r3
 8000938:	f003 030f 	and.w	r3, r3, #15
 800093c:	70bb      	strb	r3, [r7, #2]
	if(ahbprescaler < 8){
 800093e:	78bb      	ldrb	r3, [r7, #2]
 8000940:	2b07      	cmp	r3, #7
 8000942:	d936      	bls.n	80009b2 <RCC_GetPCLK1Value+0xa6>
		//clock wont be divided
	}else if(ahbprescaler == 8){
 8000944:	78bb      	ldrb	r3, [r7, #2]
 8000946:	2b08      	cmp	r3, #8
 8000948:	d103      	bne.n	8000952 <RCC_GetPCLK1Value+0x46>
		pclk1 /= 2;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	085b      	lsrs	r3, r3, #1
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	e02f      	b.n	80009b2 <RCC_GetPCLK1Value+0xa6>
	}else if(ahbprescaler == 9){
 8000952:	78bb      	ldrb	r3, [r7, #2]
 8000954:	2b09      	cmp	r3, #9
 8000956:	d103      	bne.n	8000960 <RCC_GetPCLK1Value+0x54>
		pclk1 /= 4;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	089b      	lsrs	r3, r3, #2
 800095c:	607b      	str	r3, [r7, #4]
 800095e:	e028      	b.n	80009b2 <RCC_GetPCLK1Value+0xa6>
	}else if(ahbprescaler == 10){
 8000960:	78bb      	ldrb	r3, [r7, #2]
 8000962:	2b0a      	cmp	r3, #10
 8000964:	d103      	bne.n	800096e <RCC_GetPCLK1Value+0x62>
		pclk1 /= 8;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	08db      	lsrs	r3, r3, #3
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	e021      	b.n	80009b2 <RCC_GetPCLK1Value+0xa6>
	}else if(ahbprescaler == 11){
 800096e:	78bb      	ldrb	r3, [r7, #2]
 8000970:	2b0b      	cmp	r3, #11
 8000972:	d103      	bne.n	800097c <RCC_GetPCLK1Value+0x70>
		pclk1 /= 16;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	091b      	lsrs	r3, r3, #4
 8000978:	607b      	str	r3, [r7, #4]
 800097a:	e01a      	b.n	80009b2 <RCC_GetPCLK1Value+0xa6>
	}else if(ahbprescaler == 12){
 800097c:	78bb      	ldrb	r3, [r7, #2]
 800097e:	2b0c      	cmp	r3, #12
 8000980:	d103      	bne.n	800098a <RCC_GetPCLK1Value+0x7e>
		pclk1 /= 64;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	099b      	lsrs	r3, r3, #6
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	e013      	b.n	80009b2 <RCC_GetPCLK1Value+0xa6>
	}else if(ahbprescaler == 13){
 800098a:	78bb      	ldrb	r3, [r7, #2]
 800098c:	2b0d      	cmp	r3, #13
 800098e:	d103      	bne.n	8000998 <RCC_GetPCLK1Value+0x8c>
		pclk1 /= 128;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	09db      	lsrs	r3, r3, #7
 8000994:	607b      	str	r3, [r7, #4]
 8000996:	e00c      	b.n	80009b2 <RCC_GetPCLK1Value+0xa6>
	}else if(ahbprescaler == 14){
 8000998:	78bb      	ldrb	r3, [r7, #2]
 800099a:	2b0e      	cmp	r3, #14
 800099c:	d103      	bne.n	80009a6 <RCC_GetPCLK1Value+0x9a>
		pclk1 /= 256;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	0a1b      	lsrs	r3, r3, #8
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	e005      	b.n	80009b2 <RCC_GetPCLK1Value+0xa6>
	}else if(ahbprescaler == 15){
 80009a6:	78bb      	ldrb	r3, [r7, #2]
 80009a8:	2b0f      	cmp	r3, #15
 80009aa:	d102      	bne.n	80009b2 <RCC_GetPCLK1Value+0xa6>
		pclk1 /= 512;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	0a5b      	lsrs	r3, r3, #9
 80009b0:	607b      	str	r3, [r7, #4]
	}

	apb1prescaler = (RCC->CFGR >> 10) & 0x7;
 80009b2:	4b15      	ldr	r3, [pc, #84]	; (8000a08 <RCC_GetPCLK1Value+0xfc>)
 80009b4:	689b      	ldr	r3, [r3, #8]
 80009b6:	0a9b      	lsrs	r3, r3, #10
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	f003 0307 	and.w	r3, r3, #7
 80009be:	707b      	strb	r3, [r7, #1]
	if(apb1prescaler < 4){
 80009c0:	787b      	ldrb	r3, [r7, #1]
 80009c2:	2b03      	cmp	r3, #3
 80009c4:	d91a      	bls.n	80009fc <RCC_GetPCLK1Value+0xf0>
		//clk not divided
	} else if(apb1prescaler == 4){
 80009c6:	787b      	ldrb	r3, [r7, #1]
 80009c8:	2b04      	cmp	r3, #4
 80009ca:	d103      	bne.n	80009d4 <RCC_GetPCLK1Value+0xc8>
		pclk1 /= 2;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	085b      	lsrs	r3, r3, #1
 80009d0:	607b      	str	r3, [r7, #4]
 80009d2:	e013      	b.n	80009fc <RCC_GetPCLK1Value+0xf0>
	} else if(apb1prescaler == 5){
 80009d4:	787b      	ldrb	r3, [r7, #1]
 80009d6:	2b05      	cmp	r3, #5
 80009d8:	d103      	bne.n	80009e2 <RCC_GetPCLK1Value+0xd6>
		pclk1 /= 4;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	089b      	lsrs	r3, r3, #2
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	e00c      	b.n	80009fc <RCC_GetPCLK1Value+0xf0>
	} else if(apb1prescaler == 6){
 80009e2:	787b      	ldrb	r3, [r7, #1]
 80009e4:	2b06      	cmp	r3, #6
 80009e6:	d103      	bne.n	80009f0 <RCC_GetPCLK1Value+0xe4>
		pclk1 /= 8;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	08db      	lsrs	r3, r3, #3
 80009ec:	607b      	str	r3, [r7, #4]
 80009ee:	e005      	b.n	80009fc <RCC_GetPCLK1Value+0xf0>
	} else if(apb1prescaler == 7){
 80009f0:	787b      	ldrb	r3, [r7, #1]
 80009f2:	2b07      	cmp	r3, #7
 80009f4:	d102      	bne.n	80009fc <RCC_GetPCLK1Value+0xf0>
		pclk1 /= 16;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	091b      	lsrs	r3, r3, #4
 80009fa:	607b      	str	r3, [r7, #4]
	}

	return pclk1;
 80009fc:	687b      	ldr	r3, [r7, #4]
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	370c      	adds	r7, #12
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bc80      	pop	{r7}
 8000a06:	4770      	bx	lr
 8000a08:	40023800 	.word	0x40023800
 8000a0c:	00f42400 	.word	0x00f42400

08000a10 <RCC_GetPCLK2Value>:
 * @return				- peripheral clock speed for I2C peripherals
 *
 * @note				- none
 *
 */
uint32_t RCC_GetPCLK2Value(void){
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
	uint32_t pclk1;
	uint8_t clksrc, ahbprescaler, apb2prescaler;

	clksrc = (RCC->CFGR >> 2) & 0x3;
 8000a16:	4b3d      	ldr	r3, [pc, #244]	; (8000b0c <RCC_GetPCLK2Value+0xfc>)
 8000a18:	689b      	ldr	r3, [r3, #8]
 8000a1a:	089b      	lsrs	r3, r3, #2
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	f003 0303 	and.w	r3, r3, #3
 8000a22:	70fb      	strb	r3, [r7, #3]
	if(clksrc == 0){
 8000a24:	78fb      	ldrb	r3, [r7, #3]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d102      	bne.n	8000a30 <RCC_GetPCLK2Value+0x20>
		pclk1 = 16000000;
 8000a2a:	4b39      	ldr	r3, [pc, #228]	; (8000b10 <RCC_GetPCLK2Value+0x100>)
 8000a2c:	607b      	str	r3, [r7, #4]
 8000a2e:	e001      	b.n	8000a34 <RCC_GetPCLK2Value+0x24>
	} else{
		pclk1 = 0; //I wont use other clocks for now (i don't have external clock)
 8000a30:	2300      	movs	r3, #0
 8000a32:	607b      	str	r3, [r7, #4]
	}

	ahbprescaler = (RCC->CFGR >> 4) & 0xF;
 8000a34:	4b35      	ldr	r3, [pc, #212]	; (8000b0c <RCC_GetPCLK2Value+0xfc>)
 8000a36:	689b      	ldr	r3, [r3, #8]
 8000a38:	091b      	lsrs	r3, r3, #4
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	f003 030f 	and.w	r3, r3, #15
 8000a40:	70bb      	strb	r3, [r7, #2]
	if(ahbprescaler < 8){
 8000a42:	78bb      	ldrb	r3, [r7, #2]
 8000a44:	2b07      	cmp	r3, #7
 8000a46:	d936      	bls.n	8000ab6 <RCC_GetPCLK2Value+0xa6>
		//clock wont be divided
	}else if(ahbprescaler == 8){
 8000a48:	78bb      	ldrb	r3, [r7, #2]
 8000a4a:	2b08      	cmp	r3, #8
 8000a4c:	d103      	bne.n	8000a56 <RCC_GetPCLK2Value+0x46>
		pclk1 /= 2;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	085b      	lsrs	r3, r3, #1
 8000a52:	607b      	str	r3, [r7, #4]
 8000a54:	e02f      	b.n	8000ab6 <RCC_GetPCLK2Value+0xa6>
	}else if(ahbprescaler == 9){
 8000a56:	78bb      	ldrb	r3, [r7, #2]
 8000a58:	2b09      	cmp	r3, #9
 8000a5a:	d103      	bne.n	8000a64 <RCC_GetPCLK2Value+0x54>
		pclk1 /= 4;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	089b      	lsrs	r3, r3, #2
 8000a60:	607b      	str	r3, [r7, #4]
 8000a62:	e028      	b.n	8000ab6 <RCC_GetPCLK2Value+0xa6>
	}else if(ahbprescaler == 10){
 8000a64:	78bb      	ldrb	r3, [r7, #2]
 8000a66:	2b0a      	cmp	r3, #10
 8000a68:	d103      	bne.n	8000a72 <RCC_GetPCLK2Value+0x62>
		pclk1 /= 8;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	08db      	lsrs	r3, r3, #3
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	e021      	b.n	8000ab6 <RCC_GetPCLK2Value+0xa6>
	}else if(ahbprescaler == 11){
 8000a72:	78bb      	ldrb	r3, [r7, #2]
 8000a74:	2b0b      	cmp	r3, #11
 8000a76:	d103      	bne.n	8000a80 <RCC_GetPCLK2Value+0x70>
		pclk1 /= 16;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	091b      	lsrs	r3, r3, #4
 8000a7c:	607b      	str	r3, [r7, #4]
 8000a7e:	e01a      	b.n	8000ab6 <RCC_GetPCLK2Value+0xa6>
	}else if(ahbprescaler == 12){
 8000a80:	78bb      	ldrb	r3, [r7, #2]
 8000a82:	2b0c      	cmp	r3, #12
 8000a84:	d103      	bne.n	8000a8e <RCC_GetPCLK2Value+0x7e>
		pclk1 /= 64;
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	099b      	lsrs	r3, r3, #6
 8000a8a:	607b      	str	r3, [r7, #4]
 8000a8c:	e013      	b.n	8000ab6 <RCC_GetPCLK2Value+0xa6>
	}else if(ahbprescaler == 13){
 8000a8e:	78bb      	ldrb	r3, [r7, #2]
 8000a90:	2b0d      	cmp	r3, #13
 8000a92:	d103      	bne.n	8000a9c <RCC_GetPCLK2Value+0x8c>
		pclk1 /= 128;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	09db      	lsrs	r3, r3, #7
 8000a98:	607b      	str	r3, [r7, #4]
 8000a9a:	e00c      	b.n	8000ab6 <RCC_GetPCLK2Value+0xa6>
	}else if(ahbprescaler == 14){
 8000a9c:	78bb      	ldrb	r3, [r7, #2]
 8000a9e:	2b0e      	cmp	r3, #14
 8000aa0:	d103      	bne.n	8000aaa <RCC_GetPCLK2Value+0x9a>
		pclk1 /= 256;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	0a1b      	lsrs	r3, r3, #8
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	e005      	b.n	8000ab6 <RCC_GetPCLK2Value+0xa6>
	}else if(ahbprescaler == 15){
 8000aaa:	78bb      	ldrb	r3, [r7, #2]
 8000aac:	2b0f      	cmp	r3, #15
 8000aae:	d102      	bne.n	8000ab6 <RCC_GetPCLK2Value+0xa6>
		pclk1 /= 512;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	0a5b      	lsrs	r3, r3, #9
 8000ab4:	607b      	str	r3, [r7, #4]
	}

	apb2prescaler = (RCC->CFGR >> 13) & 0x7;
 8000ab6:	4b15      	ldr	r3, [pc, #84]	; (8000b0c <RCC_GetPCLK2Value+0xfc>)
 8000ab8:	689b      	ldr	r3, [r3, #8]
 8000aba:	0b5b      	lsrs	r3, r3, #13
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	f003 0307 	and.w	r3, r3, #7
 8000ac2:	707b      	strb	r3, [r7, #1]
	if(apb2prescaler < 4){
 8000ac4:	787b      	ldrb	r3, [r7, #1]
 8000ac6:	2b03      	cmp	r3, #3
 8000ac8:	d91a      	bls.n	8000b00 <RCC_GetPCLK2Value+0xf0>
		//clk not divided
	} else if(apb2prescaler == 4){
 8000aca:	787b      	ldrb	r3, [r7, #1]
 8000acc:	2b04      	cmp	r3, #4
 8000ace:	d103      	bne.n	8000ad8 <RCC_GetPCLK2Value+0xc8>
		pclk1 /= 2;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	085b      	lsrs	r3, r3, #1
 8000ad4:	607b      	str	r3, [r7, #4]
 8000ad6:	e013      	b.n	8000b00 <RCC_GetPCLK2Value+0xf0>
	} else if(apb2prescaler == 5){
 8000ad8:	787b      	ldrb	r3, [r7, #1]
 8000ada:	2b05      	cmp	r3, #5
 8000adc:	d103      	bne.n	8000ae6 <RCC_GetPCLK2Value+0xd6>
		pclk1 /= 4;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	089b      	lsrs	r3, r3, #2
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	e00c      	b.n	8000b00 <RCC_GetPCLK2Value+0xf0>
	} else if(apb2prescaler == 6){
 8000ae6:	787b      	ldrb	r3, [r7, #1]
 8000ae8:	2b06      	cmp	r3, #6
 8000aea:	d103      	bne.n	8000af4 <RCC_GetPCLK2Value+0xe4>
		pclk1 /= 8;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	08db      	lsrs	r3, r3, #3
 8000af0:	607b      	str	r3, [r7, #4]
 8000af2:	e005      	b.n	8000b00 <RCC_GetPCLK2Value+0xf0>
	} else if(apb2prescaler == 7){
 8000af4:	787b      	ldrb	r3, [r7, #1]
 8000af6:	2b07      	cmp	r3, #7
 8000af8:	d102      	bne.n	8000b00 <RCC_GetPCLK2Value+0xf0>
		pclk1 /= 16;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	091b      	lsrs	r3, r3, #4
 8000afe:	607b      	str	r3, [r7, #4]
	}

	return pclk1;
 8000b00:	687b      	ldr	r3, [r7, #4]
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	370c      	adds	r7, #12
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bc80      	pop	{r7}
 8000b0a:	4770      	bx	lr
 8000b0c:	40023800 	.word	0x40023800
 8000b10:	00f42400 	.word	0x00f42400

08000b14 <USART_PeriClockControl>:
 * @return				- none
 *
 * @note				- none
 *
 */
void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi){
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
 8000b1c:	460b      	mov	r3, r1
 8000b1e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8000b20:	78fb      	ldrb	r3, [r7, #3]
 8000b22:	2b01      	cmp	r3, #1
 8000b24:	d141      	bne.n	8000baa <USART_PeriClockControl+0x96>
		if(pUSARTx == USART1){
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4a43      	ldr	r2, [pc, #268]	; (8000c38 <USART_PeriClockControl+0x124>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d106      	bne.n	8000b3c <USART_PeriClockControl+0x28>
			USART1_PCLK_EN();
 8000b2e:	4b43      	ldr	r3, [pc, #268]	; (8000c3c <USART_PeriClockControl+0x128>)
 8000b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b32:	4a42      	ldr	r2, [pc, #264]	; (8000c3c <USART_PeriClockControl+0x128>)
 8000b34:	f043 0310 	orr.w	r3, r3, #16
 8000b38:	6453      	str	r3, [r2, #68]	; 0x44
			UART5_PCLK_DI();
		} else if(pUSARTx == USART6){
			USART6_PCLK_DI();
		}
	}
}
 8000b3a:	e077      	b.n	8000c2c <USART_PeriClockControl+0x118>
		} else if(pUSARTx == USART2){
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	4a40      	ldr	r2, [pc, #256]	; (8000c40 <USART_PeriClockControl+0x12c>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d106      	bne.n	8000b52 <USART_PeriClockControl+0x3e>
			USART2_PCLK_EN();
 8000b44:	4b3d      	ldr	r3, [pc, #244]	; (8000c3c <USART_PeriClockControl+0x128>)
 8000b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b48:	4a3c      	ldr	r2, [pc, #240]	; (8000c3c <USART_PeriClockControl+0x128>)
 8000b4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b4e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b50:	e06c      	b.n	8000c2c <USART_PeriClockControl+0x118>
		} else if(pUSARTx == USART3){
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	4a3b      	ldr	r2, [pc, #236]	; (8000c44 <USART_PeriClockControl+0x130>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d106      	bne.n	8000b68 <USART_PeriClockControl+0x54>
			USART3_PCLK_EN();
 8000b5a:	4b38      	ldr	r3, [pc, #224]	; (8000c3c <USART_PeriClockControl+0x128>)
 8000b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5e:	4a37      	ldr	r2, [pc, #220]	; (8000c3c <USART_PeriClockControl+0x128>)
 8000b60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b64:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b66:	e061      	b.n	8000c2c <USART_PeriClockControl+0x118>
		} else if(pUSARTx == UART4){
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	4a37      	ldr	r2, [pc, #220]	; (8000c48 <USART_PeriClockControl+0x134>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d106      	bne.n	8000b7e <USART_PeriClockControl+0x6a>
			UART4_PCLK_EN();
 8000b70:	4b32      	ldr	r3, [pc, #200]	; (8000c3c <USART_PeriClockControl+0x128>)
 8000b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b74:	4a31      	ldr	r2, [pc, #196]	; (8000c3c <USART_PeriClockControl+0x128>)
 8000b76:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000b7a:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b7c:	e056      	b.n	8000c2c <USART_PeriClockControl+0x118>
		} else if(pUSARTx == UART5){
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4a32      	ldr	r2, [pc, #200]	; (8000c4c <USART_PeriClockControl+0x138>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d106      	bne.n	8000b94 <USART_PeriClockControl+0x80>
			UART5_PCLK_EN();
 8000b86:	4b2d      	ldr	r3, [pc, #180]	; (8000c3c <USART_PeriClockControl+0x128>)
 8000b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8a:	4a2c      	ldr	r2, [pc, #176]	; (8000c3c <USART_PeriClockControl+0x128>)
 8000b8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000b90:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b92:	e04b      	b.n	8000c2c <USART_PeriClockControl+0x118>
		} else if(pUSARTx == USART6){
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	4a2e      	ldr	r2, [pc, #184]	; (8000c50 <USART_PeriClockControl+0x13c>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d147      	bne.n	8000c2c <USART_PeriClockControl+0x118>
			USART6_PCLK_EN();
 8000b9c:	4b27      	ldr	r3, [pc, #156]	; (8000c3c <USART_PeriClockControl+0x128>)
 8000b9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba0:	4a26      	ldr	r2, [pc, #152]	; (8000c3c <USART_PeriClockControl+0x128>)
 8000ba2:	f043 0320 	orr.w	r3, r3, #32
 8000ba6:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000ba8:	e040      	b.n	8000c2c <USART_PeriClockControl+0x118>
		if(pUSARTx == USART1){
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	4a22      	ldr	r2, [pc, #136]	; (8000c38 <USART_PeriClockControl+0x124>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d106      	bne.n	8000bc0 <USART_PeriClockControl+0xac>
			USART1_PCLK_DI();
 8000bb2:	4b22      	ldr	r3, [pc, #136]	; (8000c3c <USART_PeriClockControl+0x128>)
 8000bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb6:	4a21      	ldr	r2, [pc, #132]	; (8000c3c <USART_PeriClockControl+0x128>)
 8000bb8:	f023 0310 	bic.w	r3, r3, #16
 8000bbc:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000bbe:	e035      	b.n	8000c2c <USART_PeriClockControl+0x118>
		} else if(pUSARTx == USART2){
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	4a1f      	ldr	r2, [pc, #124]	; (8000c40 <USART_PeriClockControl+0x12c>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d106      	bne.n	8000bd6 <USART_PeriClockControl+0xc2>
			USART2_PCLK_DI();
 8000bc8:	4b1c      	ldr	r3, [pc, #112]	; (8000c3c <USART_PeriClockControl+0x128>)
 8000bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bcc:	4a1b      	ldr	r2, [pc, #108]	; (8000c3c <USART_PeriClockControl+0x128>)
 8000bce:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000bd2:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000bd4:	e02a      	b.n	8000c2c <USART_PeriClockControl+0x118>
		} else if(pUSARTx == USART3){
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4a1a      	ldr	r2, [pc, #104]	; (8000c44 <USART_PeriClockControl+0x130>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d106      	bne.n	8000bec <USART_PeriClockControl+0xd8>
			USART3_PCLK_DI();
 8000bde:	4b17      	ldr	r3, [pc, #92]	; (8000c3c <USART_PeriClockControl+0x128>)
 8000be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be2:	4a16      	ldr	r2, [pc, #88]	; (8000c3c <USART_PeriClockControl+0x128>)
 8000be4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000be8:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000bea:	e01f      	b.n	8000c2c <USART_PeriClockControl+0x118>
		} else if(pUSARTx == UART4){
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	4a16      	ldr	r2, [pc, #88]	; (8000c48 <USART_PeriClockControl+0x134>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d106      	bne.n	8000c02 <USART_PeriClockControl+0xee>
			UART4_PCLK_DI();
 8000bf4:	4b11      	ldr	r3, [pc, #68]	; (8000c3c <USART_PeriClockControl+0x128>)
 8000bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf8:	4a10      	ldr	r2, [pc, #64]	; (8000c3c <USART_PeriClockControl+0x128>)
 8000bfa:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8000bfe:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000c00:	e014      	b.n	8000c2c <USART_PeriClockControl+0x118>
		} else if(pUSARTx == UART5){
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	4a11      	ldr	r2, [pc, #68]	; (8000c4c <USART_PeriClockControl+0x138>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d106      	bne.n	8000c18 <USART_PeriClockControl+0x104>
			UART5_PCLK_DI();
 8000c0a:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <USART_PeriClockControl+0x128>)
 8000c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0e:	4a0b      	ldr	r2, [pc, #44]	; (8000c3c <USART_PeriClockControl+0x128>)
 8000c10:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000c14:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000c16:	e009      	b.n	8000c2c <USART_PeriClockControl+0x118>
		} else if(pUSARTx == USART6){
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	4a0d      	ldr	r2, [pc, #52]	; (8000c50 <USART_PeriClockControl+0x13c>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d105      	bne.n	8000c2c <USART_PeriClockControl+0x118>
			USART6_PCLK_DI();
 8000c20:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <USART_PeriClockControl+0x128>)
 8000c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c24:	4a05      	ldr	r2, [pc, #20]	; (8000c3c <USART_PeriClockControl+0x128>)
 8000c26:	f023 0320 	bic.w	r3, r3, #32
 8000c2a:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000c2c:	bf00      	nop
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bc80      	pop	{r7}
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	40011000 	.word	0x40011000
 8000c3c:	40023800 	.word	0x40023800
 8000c40:	40004400 	.word	0x40004400
 8000c44:	40004800 	.word	0x40004800
 8000c48:	40004c00 	.word	0x40004c00
 8000c4c:	40005000 	.word	0x40005000
 8000c50:	40011400 	.word	0x40011400

08000c54 <USART_Init>:
 * @return            -
 *
 * @Note              - Resolve all the TODOs

 */
void USART_Init(USART_Handle_t *pUSARTHandle){
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]

	//Temporary variable
	uint32_t usart_cr1, usart_cr2, usart_cr3;

	//Implement the code to enable the Clock for given USART peripheral
	 USART_PeriClockControl(pUSARTHandle->pUSARTx, ENABLE);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	2101      	movs	r1, #1
 8000c62:	4618      	mov	r0, r3
 8000c64:	f7ff ff56 	bl	8000b14 <USART_PeriClockControl>

/******************************** Configuration of CR1******************************************/

	usart_cr1 = 0;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	617b      	str	r3, [r7, #20]

	//Enable USART Tx and Rx engines according to the USART_Mode configuration item
	if ( pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	791b      	ldrb	r3, [r3, #4]
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	d104      	bne.n	8000c7e <USART_Init+0x2a>
	{
		//Implement the code to enable the Receiver bit field
		usart_cr1 |= (1 << USART_CR1_RE);
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	f043 0304 	orr.w	r3, r3, #4
 8000c7a:	617b      	str	r3, [r7, #20]
 8000c7c:	e010      	b.n	8000ca0 <USART_Init+0x4c>
	}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	791b      	ldrb	r3, [r3, #4]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d104      	bne.n	8000c90 <USART_Init+0x3c>
	{
		//Implement the code to enable the Transmitter bit field
		usart_cr1 |= (1 << USART_CR1_TE);
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	f043 0308 	orr.w	r3, r3, #8
 8000c8c:	617b      	str	r3, [r7, #20]
 8000c8e:	e007      	b.n	8000ca0 <USART_Init+0x4c>
	}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	791b      	ldrb	r3, [r3, #4]
 8000c94:	2b02      	cmp	r3, #2
 8000c96:	d103      	bne.n	8000ca0 <USART_Init+0x4c>
	{
		//Implement the code to enable the both Transmitter and Receiver bit fields
		usart_cr1 |= ( ( 1 << USART_CR1_TE) | ( 1 << USART_CR1_RE) );
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	f043 030c 	orr.w	r3, r3, #12
 8000c9e:	617b      	str	r3, [r7, #20]
	}

    //Implement the code to configure the Word length configuration item
	usart_cr1 |= pUSARTHandle->USART_Config.USART_WordLength << USART_CR1_M;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	7b5b      	ldrb	r3, [r3, #13]
 8000ca4:	031b      	lsls	r3, r3, #12
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	4313      	orrs	r3, r2
 8000cac:	617b      	str	r3, [r7, #20]


    //Configuration of parity control bit fields
	if ( pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_EVEN)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	7b9b      	ldrb	r3, [r3, #14]
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	d108      	bne.n	8000cc8 <USART_Init+0x74>
	{
		//Implement the code to enable the parity control
		usart_cr1 |= ( 1 << USART_CR1_PCE);
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cbc:	617b      	str	r3, [r7, #20]

		//Implement the code to enable EVEN parity
		usart_cr1 &= ~( 1 << USART_CR1_PS);
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000cc4:	617b      	str	r3, [r7, #20]
 8000cc6:	e00b      	b.n	8000ce0 <USART_Init+0x8c>

	}else if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_ODD )
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	7b9b      	ldrb	r3, [r3, #14]
 8000ccc:	2b02      	cmp	r3, #2
 8000cce:	d107      	bne.n	8000ce0 <USART_Init+0x8c>
	{
		//Implement the code to enable the parity control
		usart_cr1 |= ( 1 << USART_CR1_PCE);
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cd6:	617b      	str	r3, [r7, #20]

	    //Implement the code to enable ODD parity
		usart_cr1 |= ( 1 << USART_CR1_PS);
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cde:	617b      	str	r3, [r7, #20]

	}

   //Program the CR1 register
	pUSARTHandle->pUSARTx->CR1 = usart_cr1;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	697a      	ldr	r2, [r7, #20]
 8000ce6:	60da      	str	r2, [r3, #12]

/******************************** Configuration of CR2******************************************/

	usart_cr2 = 0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	60fb      	str	r3, [r7, #12]

	//Implement the code to configure the number of stop bits inserted during USART frame transmission
	usart_cr2 |= pUSARTHandle->USART_Config.USART_NoOfStopBits << USART_CR2_STOP;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	7b1b      	ldrb	r3, [r3, #12]
 8000cf0:	031b      	lsls	r3, r3, #12
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	60fb      	str	r3, [r7, #12]

	//Program the CR2 register
	pUSARTHandle->pUSARTx->CR2 = usart_cr2;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	68fa      	ldr	r2, [r7, #12]
 8000d00:	611a      	str	r2, [r3, #16]

/******************************** Configuration of CR3******************************************/

	usart_cr3 = 0;
 8000d02:	2300      	movs	r3, #0
 8000d04:	613b      	str	r3, [r7, #16]

	//Configuration of USART hardware flow control
	if ( pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	7bdb      	ldrb	r3, [r3, #15]
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d104      	bne.n	8000d18 <USART_Init+0xc4>
	{
		//Implement the code to enable CTS flow control
		usart_cr3 |= (1 << USART_CR3_CTSE);
 8000d0e:	693b      	ldr	r3, [r7, #16]
 8000d10:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d14:	613b      	str	r3, [r7, #16]
 8000d16:	e010      	b.n	8000d3a <USART_Init+0xe6>


	}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	7bdb      	ldrb	r3, [r3, #15]
 8000d1c:	2b02      	cmp	r3, #2
 8000d1e:	d104      	bne.n	8000d2a <USART_Init+0xd6>
	{
		//Implement the code to enable RTS flow control
		usart_cr3 |= (1 << USART_CR3_RTSE);
 8000d20:	693b      	ldr	r3, [r7, #16]
 8000d22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d26:	613b      	str	r3, [r7, #16]
 8000d28:	e007      	b.n	8000d3a <USART_Init+0xe6>

	}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	7bdb      	ldrb	r3, [r3, #15]
 8000d2e:	2b03      	cmp	r3, #3
 8000d30:	d103      	bne.n	8000d3a <USART_Init+0xe6>
	{
		//Implement the code to enable both CTS and RTS Flow control
		usart_cr3 |= ((1 << USART_CR3_CTSE) | (1 << USART_CR3_RTSE));
 8000d32:	693b      	ldr	r3, [r7, #16]
 8000d34:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000d38:	613b      	str	r3, [r7, #16]
	}


	pUSARTHandle->pUSARTx->CR3 = usart_cr3;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	693a      	ldr	r2, [r7, #16]
 8000d40:	615a      	str	r2, [r3, #20]

/******************************** Configuration of BRR(Baud rate register)******************************************/

	//Implement the code to configure the baud rate
	USART_SetBaudRate(pUSARTHandle->pUSARTx, pUSARTHandle->USART_Config.USART_Baud);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	689b      	ldr	r3, [r3, #8]
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4610      	mov	r0, r2
 8000d4e:	f000 f879 	bl	8000e44 <USART_SetBaudRate>

}
 8000d52:	bf00      	nop
 8000d54:	3718      	adds	r7, #24
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <USART_SendData>:
 * @return	          -
 *
 * @Note    	      -

 */
void USART_SendData(USART_Handle_t *pUSARTHandle,uint8_t *pTxBuffer, uint32_t Len){
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b086      	sub	sp, #24
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	60f8      	str	r0, [r7, #12]
 8000d62:	60b9      	str	r1, [r7, #8]
 8000d64:	607a      	str	r2, [r7, #4]
	uint16_t *pdata;

   //Loop over until "Len" number of bytes are transferred
	for(uint32_t i = 0 ; i < Len; i++){
 8000d66:	2300      	movs	r3, #0
 8000d68:	617b      	str	r3, [r7, #20]
 8000d6a:	e031      	b.n	8000dd0 <USART_SendData+0x76>
		//Implement the code to wait until TXE flag is set in the SR
		while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx, USART_FLAG_TXE));
 8000d6c:	bf00      	nop
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	2180      	movs	r1, #128	; 0x80
 8000d74:	4618      	mov	r0, r3
 8000d76:	f000 f851 	bl	8000e1c <USART_GetFlagStatus>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d0f6      	beq.n	8000d6e <USART_SendData+0x14>

         //Check the USART_WordLength item for 9BIT or 8BIT in a frame
		if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS){
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	7b5b      	ldrb	r3, [r3, #13]
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d118      	bne.n	8000dba <USART_SendData+0x60>
			//if 9BIT, load the DR with 2bytes masking the bits other than first 9 bits
			pdata = (uint16_t*) pTxBuffer;
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	613b      	str	r3, [r7, #16]
			pUSARTHandle->pUSARTx->DR = (*pdata & (uint16_t)0x01FF);
 8000d8c:	693b      	ldr	r3, [r7, #16]
 8000d8e:	881b      	ldrh	r3, [r3, #0]
 8000d90:	461a      	mov	r2, r3
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000d9a:	605a      	str	r2, [r3, #4]

			//check for USART_ParityControl
			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE){
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	7b9b      	ldrb	r3, [r3, #14]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d106      	bne.n	8000db2 <USART_SendData+0x58>
				//No parity is used in this transfer. so, 9bits of user data will be sent
				//Implement the code to increment pTxBuffer twice
				pTxBuffer++;
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	3301      	adds	r3, #1
 8000da8:	60bb      	str	r3, [r7, #8]
				pTxBuffer++;
 8000daa:	68bb      	ldr	r3, [r7, #8]
 8000dac:	3301      	adds	r3, #1
 8000dae:	60bb      	str	r3, [r7, #8]
 8000db0:	e00b      	b.n	8000dca <USART_SendData+0x70>
			}else{
				//Parity bit is used in this transfer . so , 8bits of user data will be sent
				//The 9th bit will be replaced by parity bit by the hardware
				pTxBuffer++;
 8000db2:	68bb      	ldr	r3, [r7, #8]
 8000db4:	3301      	adds	r3, #1
 8000db6:	60bb      	str	r3, [r7, #8]
 8000db8:	e007      	b.n	8000dca <USART_SendData+0x70>
			}
		}else{
			//This is 8bit data transfer
			pUSARTHandle->pUSARTx->DR = (*pTxBuffer  & (uint8_t)0xFF);
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	781a      	ldrb	r2, [r3, #0]
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	605a      	str	r2, [r3, #4]

			//Implement the code to increment the buffer address
			pTxBuffer++;
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0 ; i < Len; i++){
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	3301      	adds	r3, #1
 8000dce:	617b      	str	r3, [r7, #20]
 8000dd0:	697a      	ldr	r2, [r7, #20]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d3c9      	bcc.n	8000d6c <USART_SendData+0x12>
		}
	}

	//Implement the code to wait till TC flag is set in the SR
	while( ! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TC));
 8000dd8:	bf00      	nop
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	2140      	movs	r1, #64	; 0x40
 8000de0:	4618      	mov	r0, r3
 8000de2:	f000 f81b 	bl	8000e1c <USART_GetFlagStatus>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d0f6      	beq.n	8000dda <USART_SendData+0x80>

}
 8000dec:	bf00      	nop
 8000dee:	3718      	adds	r7, #24
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <USART_PeripheralControl>:
 * @return				- none
 *
 * @note				- none
 *
 */
void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t EnOrDi){
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	460b      	mov	r3, r1
 8000dfe:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE){
 8000e00:	78fb      	ldrb	r3, [r7, #3]
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d105      	bne.n	8000e12 <USART_PeripheralControl+0x1e>
		pUSARTx->CR1 |= (1 << USART_CR1_UE);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	68db      	ldr	r3, [r3, #12]
 8000e0a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	60da      	str	r2, [r3, #12]
	} else {

	}
}
 8000e12:	bf00      	nop
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bc80      	pop	{r7}
 8000e1a:	4770      	bx	lr

08000e1c <USART_GetFlagStatus>:
 * @return				- Flag status (1 or 0)
 *
 * @note				- none
 *
 */
uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx , uint32_t FlagName){
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	6039      	str	r1, [r7, #0]
	if(pUSARTx->SR & FlagName){
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <USART_GetFlagStatus+0x1a>
		return FLAG_SET;
 8000e32:	2301      	movs	r3, #1
 8000e34:	e000      	b.n	8000e38 <USART_GetFlagStatus+0x1c>
	}

	return FLAG_RESET;
 8000e36:	2300      	movs	r3, #0
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bc80      	pop	{r7}
 8000e40:	4770      	bx	lr
	...

08000e44 <USART_SetBaudRate>:
 *
 * @Note              -  Resolve all the TODOs

 */
void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t BaudRate)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b088      	sub	sp, #32
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	6039      	str	r1, [r7, #0]
	uint32_t usartdiv;

	//variables to hold Mantissa and Fraction values
	uint32_t M_part, F_part;

  uint32_t usart_brr = 0;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	613b      	str	r3, [r7, #16]

  //Get the value of APB bus clock in to the variable PCLKx
  if(pUSARTx == USART1 || pUSARTx == USART6)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4a31      	ldr	r2, [pc, #196]	; (8000f1c <USART_SetBaudRate+0xd8>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d003      	beq.n	8000e62 <USART_SetBaudRate+0x1e>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4a30      	ldr	r2, [pc, #192]	; (8000f20 <USART_SetBaudRate+0xdc>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d103      	bne.n	8000e6a <USART_SetBaudRate+0x26>
  {
	   //USART1 and USART6 are hanging on APB2 bus
	   PCLKx = RCC_GetPCLK2Value();
 8000e62:	f7ff fdd5 	bl	8000a10 <RCC_GetPCLK2Value>
 8000e66:	61f8      	str	r0, [r7, #28]
 8000e68:	e002      	b.n	8000e70 <USART_SetBaudRate+0x2c>
  }else
  {
	   PCLKx = RCC_GetPCLK1Value();
 8000e6a:	f7ff fd4f 	bl	800090c <RCC_GetPCLK1Value>
 8000e6e:	61f8      	str	r0, [r7, #28]
  }

  //Check for OVER8 configuration bit
  if(pUSARTx->CR1 & (1 << USART_CR1_OVER8))
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d00b      	beq.n	8000e94 <USART_SetBaudRate+0x50>
  {
	   //OVER8 = 1 , over sampling by 8
	   usartdiv = ((25 * PCLKx) / (2 *BaudRate));
 8000e7c:	69fa      	ldr	r2, [r7, #28]
 8000e7e:	4613      	mov	r3, r2
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	4413      	add	r3, r2
 8000e84:	009a      	lsls	r2, r3, #2
 8000e86:	441a      	add	r2, r3
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e90:	61bb      	str	r3, [r7, #24]
 8000e92:	e00a      	b.n	8000eaa <USART_SetBaudRate+0x66>
  }else
  {
	   //over sampling by 16
	   usartdiv = ((25 * PCLKx) / (4 * BaudRate));
 8000e94:	69fa      	ldr	r2, [r7, #28]
 8000e96:	4613      	mov	r3, r2
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	4413      	add	r3, r2
 8000e9c:	009a      	lsls	r2, r3, #2
 8000e9e:	441a      	add	r2, r3
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ea8:	61bb      	str	r3, [r7, #24]
  }

  //Calculate the Mantissa part
  M_part = usartdiv/100;
 8000eaa:	69bb      	ldr	r3, [r7, #24]
 8000eac:	4a1d      	ldr	r2, [pc, #116]	; (8000f24 <USART_SetBaudRate+0xe0>)
 8000eae:	fba2 2303 	umull	r2, r3, r2, r3
 8000eb2:	095b      	lsrs	r3, r3, #5
 8000eb4:	60fb      	str	r3, [r7, #12]

  //Place the Mantissa part in appropriate bit position . refer USART_BRR
  usart_brr |= M_part << 4;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	011b      	lsls	r3, r3, #4
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	613b      	str	r3, [r7, #16]

  //Extract the fraction part
  F_part = (usartdiv - (M_part * 100));
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	2264      	movs	r2, #100	; 0x64
 8000ec4:	fb02 f303 	mul.w	r3, r2, r3
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	1ad3      	subs	r3, r2, r3
 8000ecc:	617b      	str	r3, [r7, #20]

  //Calculate the final fractional
  if(pUSARTx->CR1 & ( 1 << USART_CR1_OVER8))
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	68db      	ldr	r3, [r3, #12]
 8000ed2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d00a      	beq.n	8000ef0 <USART_SetBaudRate+0xac>
   {
	  //OVER8 = 1 , over sampling by 8
	  F_part = ((( F_part * 8)+ 50) / 100)& ((uint8_t)0x07);
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	00db      	lsls	r3, r3, #3
 8000ede:	3332      	adds	r3, #50	; 0x32
 8000ee0:	4a10      	ldr	r2, [pc, #64]	; (8000f24 <USART_SetBaudRate+0xe0>)
 8000ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ee6:	095b      	lsrs	r3, r3, #5
 8000ee8:	f003 0307 	and.w	r3, r3, #7
 8000eec:	617b      	str	r3, [r7, #20]
 8000eee:	e009      	b.n	8000f04 <USART_SetBaudRate+0xc0>

   }else
   {
	   //over sampling by 16
	   F_part = ((( F_part * 16)+ 50) / 100) & ((uint8_t)0x0F);
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	011b      	lsls	r3, r3, #4
 8000ef4:	3332      	adds	r3, #50	; 0x32
 8000ef6:	4a0b      	ldr	r2, [pc, #44]	; (8000f24 <USART_SetBaudRate+0xe0>)
 8000ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8000efc:	095b      	lsrs	r3, r3, #5
 8000efe:	f003 030f 	and.w	r3, r3, #15
 8000f02:	617b      	str	r3, [r7, #20]

   }

  //Place the fractional part in appropriate bit position . refer USART_BRR
  usart_brr |= F_part << 0;
 8000f04:	693a      	ldr	r2, [r7, #16]
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	613b      	str	r3, [r7, #16]

  //copy the value of tempreg in to BRR register
  pUSARTx->BRR = usart_brr;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	609a      	str	r2, [r3, #8]
}
 8000f12:	bf00      	nop
 8000f14:	3720      	adds	r7, #32
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40011000 	.word	0x40011000
 8000f20:	40011400 	.word	0x40011400
 8000f24:	51eb851f 	.word	0x51eb851f

08000f28 <__libc_init_array>:
 8000f28:	b570      	push	{r4, r5, r6, lr}
 8000f2a:	4e0d      	ldr	r6, [pc, #52]	; (8000f60 <__libc_init_array+0x38>)
 8000f2c:	4c0d      	ldr	r4, [pc, #52]	; (8000f64 <__libc_init_array+0x3c>)
 8000f2e:	1ba4      	subs	r4, r4, r6
 8000f30:	10a4      	asrs	r4, r4, #2
 8000f32:	2500      	movs	r5, #0
 8000f34:	42a5      	cmp	r5, r4
 8000f36:	d109      	bne.n	8000f4c <__libc_init_array+0x24>
 8000f38:	4e0b      	ldr	r6, [pc, #44]	; (8000f68 <__libc_init_array+0x40>)
 8000f3a:	4c0c      	ldr	r4, [pc, #48]	; (8000f6c <__libc_init_array+0x44>)
 8000f3c:	f000 f818 	bl	8000f70 <_init>
 8000f40:	1ba4      	subs	r4, r4, r6
 8000f42:	10a4      	asrs	r4, r4, #2
 8000f44:	2500      	movs	r5, #0
 8000f46:	42a5      	cmp	r5, r4
 8000f48:	d105      	bne.n	8000f56 <__libc_init_array+0x2e>
 8000f4a:	bd70      	pop	{r4, r5, r6, pc}
 8000f4c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f50:	4798      	blx	r3
 8000f52:	3501      	adds	r5, #1
 8000f54:	e7ee      	b.n	8000f34 <__libc_init_array+0xc>
 8000f56:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f5a:	4798      	blx	r3
 8000f5c:	3501      	adds	r5, #1
 8000f5e:	e7f2      	b.n	8000f46 <__libc_init_array+0x1e>
 8000f60:	08000f88 	.word	0x08000f88
 8000f64:	08000f88 	.word	0x08000f88
 8000f68:	08000f88 	.word	0x08000f88
 8000f6c:	08000f8c 	.word	0x08000f8c

08000f70 <_init>:
 8000f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f72:	bf00      	nop
 8000f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f76:	bc08      	pop	{r3}
 8000f78:	469e      	mov	lr, r3
 8000f7a:	4770      	bx	lr

08000f7c <_fini>:
 8000f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f7e:	bf00      	nop
 8000f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f82:	bc08      	pop	{r3}
 8000f84:	469e      	mov	lr, r3
 8000f86:	4770      	bx	lr
