
stm32f446_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002194  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08002364  08002364  00012364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002474  08002474  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002474  08002474  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002474  08002474  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002474  08002474  00012474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002478  08002478  00012478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800247c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000454  20000070  080024ec  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004c4  080024ec  000204c4  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002891  00000000  00000000  0002009a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000078c  00000000  00000000  0002292b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001c0  00000000  00000000  000230b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000168  00000000  00000000  00023278  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000342b  00000000  00000000  000233e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001f08  00000000  00000000  0002680b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000c06b  00000000  00000000  00028713  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0003477e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000de4  00000000  00000000  000347fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         0000009c  00000000  00000000  000355e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000014d  00000000  00000000  0003567c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800234c 	.word	0x0800234c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	0800234c 	.word	0x0800234c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <USART6_Init>:

uint8_t g_data = 0;


void USART6_Init(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	usart6_handle.pUSARTx = USART6;
 80002c4:	4b0d      	ldr	r3, [pc, #52]	; (80002fc <USART6_Init+0x3c>)
 80002c6:	4a0e      	ldr	r2, [pc, #56]	; (8000300 <USART6_Init+0x40>)
 80002c8:	601a      	str	r2, [r3, #0]
	usart6_handle.USART_Config.USART_Baud = USART_STD_BAUD_115200;
 80002ca:	4b0c      	ldr	r3, [pc, #48]	; (80002fc <USART6_Init+0x3c>)
 80002cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002d0:	609a      	str	r2, [r3, #8]
	usart6_handle.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 80002d2:	4b0a      	ldr	r3, [pc, #40]	; (80002fc <USART6_Init+0x3c>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	73da      	strb	r2, [r3, #15]
	usart6_handle.USART_Config.USART_Mode = USART_MODE_TXRX;
 80002d8:	4b08      	ldr	r3, [pc, #32]	; (80002fc <USART6_Init+0x3c>)
 80002da:	2202      	movs	r2, #2
 80002dc:	711a      	strb	r2, [r3, #4]
	usart6_handle.USART_Config.USART_NoOfStopBits = USART_STOPBITS_1;
 80002de:	4b07      	ldr	r3, [pc, #28]	; (80002fc <USART6_Init+0x3c>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	731a      	strb	r2, [r3, #12]
	usart6_handle.USART_Config.USART_WordLength = USART_WORDLEN_8BITS;
 80002e4:	4b05      	ldr	r3, [pc, #20]	; (80002fc <USART6_Init+0x3c>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	735a      	strb	r2, [r3, #13]
	usart6_handle.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 80002ea:	4b04      	ldr	r3, [pc, #16]	; (80002fc <USART6_Init+0x3c>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	739a      	strb	r2, [r3, #14]
	USART_Init(&usart6_handle);
 80002f0:	4802      	ldr	r0, [pc, #8]	; (80002fc <USART6_Init+0x3c>)
 80002f2:	f000 fcc7 	bl	8000c84 <USART_Init>
}
 80002f6:	bf00      	nop
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	2000049c 	.word	0x2000049c
 8000300:	40011400 	.word	0x40011400

08000304 <USART6_GPIOInit>:

void 	USART6_GPIOInit(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b084      	sub	sp, #16
 8000308:	af00      	add	r7, sp, #0
	GPIO_Handle_t usart_gpios;

	usart_gpios.pGPIOx = GPIOC;
 800030a:	4b0e      	ldr	r3, [pc, #56]	; (8000344 <USART6_GPIOInit+0x40>)
 800030c:	607b      	str	r3, [r7, #4]
	usart_gpios.GPIO_PinConfig.GPIO_PinMode = GPIO_PIN_MODE_ALTFN;
 800030e:	2302      	movs	r3, #2
 8000310:	727b      	strb	r3, [r7, #9]
	usart_gpios.GPIO_PinConfig.GPIO_PinOPType = GPIO_PIN_OP_TYPE_PP;
 8000312:	2300      	movs	r3, #0
 8000314:	733b      	strb	r3, [r7, #12]
	usart_gpios.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000316:	2301      	movs	r3, #1
 8000318:	72fb      	strb	r3, [r7, #11]
	usart_gpios.GPIO_PinConfig.GPIO_PinSpeed = GPIO_PIN_OP_SPEED_FAST;
 800031a:	2302      	movs	r3, #2
 800031c:	72bb      	strb	r3, [r7, #10]
	usart_gpios.GPIO_PinConfig.GPIO_PinAltFunMode = 8;
 800031e:	2308      	movs	r3, #8
 8000320:	737b      	strb	r3, [r7, #13]

	usart_gpios.GPIO_PinConfig.GPIO_PinNumber  = GPIO_PIN_NO_6;
 8000322:	2306      	movs	r3, #6
 8000324:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 8000326:	1d3b      	adds	r3, r7, #4
 8000328:	4618      	mov	r0, r3
 800032a:	f000 f917 	bl	800055c <GPIO_Init>

	usart_gpios.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 800032e:	2307      	movs	r3, #7
 8000330:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 8000332:	1d3b      	adds	r3, r7, #4
 8000334:	4618      	mov	r0, r3
 8000336:	f000 f911 	bl	800055c <GPIO_Init>

}
 800033a:	bf00      	nop
 800033c:	3710      	adds	r7, #16
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	40020800 	.word	0x40020800

08000348 <delay>:
	GPIO_Init(&GpioLed);

}

void delay(void)
{
 8000348:	b480      	push	{r7}
 800034a:	b083      	sub	sp, #12
 800034c:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
 800034e:	2300      	movs	r3, #0
 8000350:	607b      	str	r3, [r7, #4]
 8000352:	e002      	b.n	800035a <delay+0x12>
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	3301      	adds	r3, #1
 8000358:	607b      	str	r3, [r7, #4]
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	4a03      	ldr	r2, [pc, #12]	; (800036c <delay+0x24>)
 800035e:	4293      	cmp	r3, r2
 8000360:	d9f8      	bls.n	8000354 <delay+0xc>
}
 8000362:	bf00      	nop
 8000364:	370c      	adds	r7, #12
 8000366:	46bd      	mov	sp, r7
 8000368:	bc80      	pop	{r7}
 800036a:	4770      	bx	lr
 800036c:	0003d08f 	.word	0x0003d08f

08000370 <main>:

int main(void)
{
 8000370:	b590      	push	{r4, r7, lr}
 8000372:	b083      	sub	sp, #12
 8000374:	af00      	add	r7, sp, #0
	uint32_t cnt = 0;
 8000376:	2300      	movs	r3, #0
 8000378:	607b      	str	r3, [r7, #4]

	USART6_GPIOInit();
 800037a:	f7ff ffc3 	bl	8000304 <USART6_GPIOInit>
    USART6_Init();
 800037e:	f7ff ff9f 	bl	80002c0 <USART6_Init>

    USART_IRQInterruptConfig(IRQ_NO_USART6,ENABLE);
 8000382:	2101      	movs	r1, #1
 8000384:	2047      	movs	r0, #71	; 0x47
 8000386:	f000 fd73 	bl	8000e70 <USART_IRQInterruptConfig>

    USART_PeripheralControl(USART6,ENABLE);
 800038a:	2101      	movs	r1, #1
 800038c:	482f      	ldr	r0, [pc, #188]	; (800044c <main+0xdc>)
 800038e:	f000 ff9b 	bl	80012c8 <USART_PeripheralControl>

    printf("Application is running\n");
 8000392:	482f      	ldr	r0, [pc, #188]	; (8000450 <main+0xe0>)
 8000394:	f001 f8d8 	bl	8001548 <puts>

    //do forever
    while(1)
    {
		//wait till button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOC,GPIO_PIN_NO_13) );
 8000398:	bf00      	nop
 800039a:	210d      	movs	r1, #13
 800039c:	482d      	ldr	r0, [pc, #180]	; (8000454 <main+0xe4>)
 800039e:	f000 faa7 	bl	80008f0 <GPIO_ReadFromInputPin>
 80003a2:	4603      	mov	r3, r0
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d0f8      	beq.n	800039a <main+0x2a>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 80003a8:	f7ff ffce 	bl	8000348 <delay>

		// Next message index ; make sure that cnt value doesn't cross 2
		cnt = cnt % 3;
 80003ac:	687a      	ldr	r2, [r7, #4]
 80003ae:	4b2a      	ldr	r3, [pc, #168]	; (8000458 <main+0xe8>)
 80003b0:	fba3 1302 	umull	r1, r3, r3, r2
 80003b4:	0859      	lsrs	r1, r3, #1
 80003b6:	460b      	mov	r3, r1
 80003b8:	005b      	lsls	r3, r3, #1
 80003ba:	440b      	add	r3, r1
 80003bc:	1ad3      	subs	r3, r2, r3
 80003be:	607b      	str	r3, [r7, #4]

		//First lets enable the reception in interrupt mode
		//this code enables the receive interrupt
		while ( USART_ReceiveDataIT(&usart6_handle, &rx_buf,strlen(msg[cnt])) != USART_READY );
 80003c0:	bf00      	nop
 80003c2:	4a26      	ldr	r2, [pc, #152]	; (800045c <main+0xec>)
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003ca:	4618      	mov	r0, r3
 80003cc:	f7ff ff20 	bl	8000210 <strlen>
 80003d0:	4603      	mov	r3, r0
 80003d2:	461a      	mov	r2, r3
 80003d4:	4922      	ldr	r1, [pc, #136]	; (8000460 <main+0xf0>)
 80003d6:	4823      	ldr	r0, [pc, #140]	; (8000464 <main+0xf4>)
 80003d8:	f000 fd24 	bl	8000e24 <USART_ReceiveDataIT>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d1ef      	bne.n	80003c2 <main+0x52>

		//Send the msg indexed by cnt in blocking mode
    	USART_SendData(&usart6_handle,(uint8_t*)msg[cnt],strlen(msg[cnt]));
 80003e2:	4a1e      	ldr	r2, [pc, #120]	; (800045c <main+0xec>)
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80003ea:	4a1c      	ldr	r2, [pc, #112]	; (800045c <main+0xec>)
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003f2:	4618      	mov	r0, r3
 80003f4:	f7ff ff0c 	bl	8000210 <strlen>
 80003f8:	4603      	mov	r3, r0
 80003fa:	461a      	mov	r2, r3
 80003fc:	4621      	mov	r1, r4
 80003fe:	4819      	ldr	r0, [pc, #100]	; (8000464 <main+0xf4>)
 8000400:	f000 fcc3 	bl	8000d8a <USART_SendData>

    	printf("Transmitted : %s\n",msg[cnt]);
 8000404:	4a15      	ldr	r2, [pc, #84]	; (800045c <main+0xec>)
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800040c:	4619      	mov	r1, r3
 800040e:	4816      	ldr	r0, [pc, #88]	; (8000468 <main+0xf8>)
 8000410:	f001 f826 	bl	8001460 <iprintf>


    	//Now lets wait until all the bytes are received from the arduino .
    	//When all the bytes are received rxCmplt will be SET in application callback
    	while(rxCmplt != SET);
 8000414:	bf00      	nop
 8000416:	4b15      	ldr	r3, [pc, #84]	; (800046c <main+0xfc>)
 8000418:	781b      	ldrb	r3, [r3, #0]
 800041a:	2b01      	cmp	r3, #1
 800041c:	d1fb      	bne.n	8000416 <main+0xa6>

    	//just make sure that last byte should be null otherwise %s fails while printing
    	rx_buf[strlen(msg[cnt])+ 1] = '\0';
 800041e:	4a0f      	ldr	r2, [pc, #60]	; (800045c <main+0xec>)
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000426:	4618      	mov	r0, r3
 8000428:	f7ff fef2 	bl	8000210 <strlen>
 800042c:	4603      	mov	r3, r0
 800042e:	3301      	adds	r3, #1
 8000430:	4a0b      	ldr	r2, [pc, #44]	; (8000460 <main+0xf0>)
 8000432:	2100      	movs	r1, #0
 8000434:	54d1      	strb	r1, [r2, r3]

    	//Print what we received from the arduino
    	printf("Received    : %s\n",rx_buf);
 8000436:	490a      	ldr	r1, [pc, #40]	; (8000460 <main+0xf0>)
 8000438:	480d      	ldr	r0, [pc, #52]	; (8000470 <main+0x100>)
 800043a:	f001 f811 	bl	8001460 <iprintf>

    	//invalidate the flag
    	rxCmplt = RESET;
 800043e:	4b0b      	ldr	r3, [pc, #44]	; (800046c <main+0xfc>)
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]

    	//move on to next message indexed in msg[]
    	cnt ++;
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	3301      	adds	r3, #1
 8000448:	607b      	str	r3, [r7, #4]
		while( ! GPIO_ReadFromInputPin(GPIOC,GPIO_PIN_NO_13) );
 800044a:	e7a5      	b.n	8000398 <main+0x28>
 800044c:	40011400 	.word	0x40011400
 8000450:	0800239c 	.word	0x0800239c
 8000454:	40020800 	.word	0x40020800
 8000458:	aaaaaaab 	.word	0xaaaaaaab
 800045c:	20000000 	.word	0x20000000
 8000460:	2000009c 	.word	0x2000009c
 8000464:	2000049c 	.word	0x2000049c
 8000468:	080023b4 	.word	0x080023b4
 800046c:	2000008c 	.word	0x2000008c
 8000470:	080023c8 	.word	0x080023c8

08000474 <USART2_IRQHandler>:
	return 0;
}


void USART2_IRQHandler(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0
	USART_IRQHandling(&usart6_handle);
 8000478:	4802      	ldr	r0, [pc, #8]	; (8000484 <USART2_IRQHandler+0x10>)
 800047a:	f000 fd7d 	bl	8000f78 <USART_IRQHandling>
}
 800047e:	bf00      	nop
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	2000049c 	.word	0x2000049c

08000488 <USART_ApplicationEventCallback>:




void USART_ApplicationEventCallback( USART_Handle_t *pUSARTHandle,uint8_t ApEv)
{
 8000488:	b480      	push	{r7}
 800048a:	b083      	sub	sp, #12
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
 8000490:	460b      	mov	r3, r1
 8000492:	70fb      	strb	r3, [r7, #3]
   if(ApEv == USART_EVENT_RX_CMPLT)
 8000494:	78fb      	ldrb	r3, [r7, #3]
 8000496:	2b01      	cmp	r3, #1
 8000498:	d102      	bne.n	80004a0 <USART_ApplicationEventCallback+0x18>
   {
			rxCmplt = SET;
 800049a:	4b04      	ldr	r3, [pc, #16]	; (80004ac <USART_ApplicationEventCallback+0x24>)
 800049c:	2201      	movs	r2, #1
 800049e:	701a      	strb	r2, [r3, #0]

   }else if (ApEv == USART_EVENT_TX_CMPLT)
   {
	   ;
   }
}
 80004a0:	bf00      	nop
 80004a2:	370c      	adds	r7, #12
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bc80      	pop	{r7}
 80004a8:	4770      	bx	lr
 80004aa:	bf00      	nop
 80004ac:	2000008c 	.word	0x2000008c

080004b0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b084      	sub	sp, #16
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80004b8:	4b11      	ldr	r3, [pc, #68]	; (8000500 <_sbrk+0x50>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d102      	bne.n	80004c6 <_sbrk+0x16>
		heap_end = &end;
 80004c0:	4b0f      	ldr	r3, [pc, #60]	; (8000500 <_sbrk+0x50>)
 80004c2:	4a10      	ldr	r2, [pc, #64]	; (8000504 <_sbrk+0x54>)
 80004c4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80004c6:	4b0e      	ldr	r3, [pc, #56]	; (8000500 <_sbrk+0x50>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80004cc:	4b0c      	ldr	r3, [pc, #48]	; (8000500 <_sbrk+0x50>)
 80004ce:	681a      	ldr	r2, [r3, #0]
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	4413      	add	r3, r2
 80004d4:	466a      	mov	r2, sp
 80004d6:	4293      	cmp	r3, r2
 80004d8:	d907      	bls.n	80004ea <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80004da:	f000 ff8f 	bl	80013fc <__errno>
 80004de:	4602      	mov	r2, r0
 80004e0:	230c      	movs	r3, #12
 80004e2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80004e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80004e8:	e006      	b.n	80004f8 <_sbrk+0x48>
	}

	heap_end += incr;
 80004ea:	4b05      	ldr	r3, [pc, #20]	; (8000500 <_sbrk+0x50>)
 80004ec:	681a      	ldr	r2, [r3, #0]
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	4413      	add	r3, r2
 80004f2:	4a03      	ldr	r2, [pc, #12]	; (8000500 <_sbrk+0x50>)
 80004f4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80004f6:	68fb      	ldr	r3, [r7, #12]
}
 80004f8:	4618      	mov	r0, r3
 80004fa:	3710      	adds	r7, #16
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	20000090 	.word	0x20000090
 8000504:	200004c8 	.word	0x200004c8

08000508 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000508:	480d      	ldr	r0, [pc, #52]	; (8000540 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800050a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800050c:	480d      	ldr	r0, [pc, #52]	; (8000544 <LoopForever+0x6>)
  ldr r1, =_edata
 800050e:	490e      	ldr	r1, [pc, #56]	; (8000548 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000510:	4a0e      	ldr	r2, [pc, #56]	; (800054c <LoopForever+0xe>)
  movs r3, #0
 8000512:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000514:	e002      	b.n	800051c <LoopCopyDataInit>

08000516 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000516:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000518:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800051a:	3304      	adds	r3, #4

0800051c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800051c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800051e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000520:	d3f9      	bcc.n	8000516 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000522:	4a0b      	ldr	r2, [pc, #44]	; (8000550 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000524:	4c0b      	ldr	r4, [pc, #44]	; (8000554 <LoopForever+0x16>)
  movs r3, #0
 8000526:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000528:	e001      	b.n	800052e <LoopFillZerobss>

0800052a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800052a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800052c:	3204      	adds	r2, #4

0800052e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800052e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000530:	d3fb      	bcc.n	800052a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000532:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8000536:	f000 ff67 	bl	8001408 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800053a:	f7ff ff19 	bl	8000370 <main>

0800053e <LoopForever>:

LoopForever:
    b LoopForever
 800053e:	e7fe      	b.n	800053e <LoopForever>
  ldr   r0, =_estack
 8000540:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000544:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000548:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800054c:	0800247c 	.word	0x0800247c
  ldr r2, =_sbss
 8000550:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000554:	200004c4 	.word	0x200004c4

08000558 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000558:	e7fe      	b.n	8000558 <ADC_IRQHandler>
	...

0800055c <GPIO_Init>:
 * @return				- none
 *
 * @note				- none
 *
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 800055c:	b480      	push	{r7}
 800055e:	b08b      	sub	sp, #44	; 0x2c
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
	uint32_t reset_value = 0;
 8000564:	2300      	movs	r3, #0
 8000566:	627b      	str	r3, [r7, #36]	; 0x24

	//reset, then set mode register
	if( pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_PIN_MODE_ANALOG){
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	795b      	ldrb	r3, [r3, #5]
 800056c:	2b03      	cmp	r3, #3
 800056e:	d823      	bhi.n	80005b8 <GPIO_Init+0x5c>
		reset_value = (0x3 << ((2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)));
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	791b      	ldrb	r3, [r3, #4]
 8000574:	005b      	lsls	r3, r3, #1
 8000576:	2203      	movs	r2, #3
 8000578:	fa02 f303 	lsl.w	r3, r2, r3
 800057c:	627b      	str	r3, [r7, #36]	; 0x24
		pGPIOHandle->pGPIOx->MODER &= ~(reset_value);
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	6819      	ldr	r1, [r3, #0]
 8000584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000586:	43da      	mvns	r2, r3
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	400a      	ands	r2, r1
 800058e:	601a      	str	r2, [r3, #0]
		reset_value = 0;
 8000590:	2300      	movs	r3, #0
 8000592:	627b      	str	r3, [r7, #36]	; 0x24

		uint32_t moder_value = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	795b      	ldrb	r3, [r3, #5]
 8000598:	461a      	mov	r2, r3
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	791b      	ldrb	r3, [r3, #4]
 800059e:	005b      	lsls	r3, r3, #1
 80005a0:	fa02 f303 	lsl.w	r3, r2, r3
 80005a4:	61fb      	str	r3, [r7, #28]
		pGPIOHandle->pGPIOx->MODER |= moder_value;
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	6819      	ldr	r1, [r3, #0]
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	69fa      	ldr	r2, [r7, #28]
 80005b2:	430a      	orrs	r2, r1
 80005b4:	601a      	str	r2, [r3, #0]
 80005b6:	e0ee      	b.n	8000796 <GPIO_Init+0x23a>
	} else{
		//interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_PIN_MODE_IT_FT){
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	795b      	ldrb	r3, [r3, #5]
 80005bc:	2b04      	cmp	r3, #4
 80005be:	d11a      	bne.n	80005f6 <GPIO_Init+0x9a>
			//reset RTSR
			reset_value = (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	791b      	ldrb	r3, [r3, #4]
 80005c4:	461a      	mov	r2, r3
 80005c6:	2301      	movs	r3, #1
 80005c8:	4093      	lsls	r3, r2
 80005ca:	627b      	str	r3, [r7, #36]	; 0x24
			EXTI->RTSR &= ~(reset_value);
 80005cc:	4b49      	ldr	r3, [pc, #292]	; (80006f4 <GPIO_Init+0x198>)
 80005ce:	689a      	ldr	r2, [r3, #8]
 80005d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005d2:	43db      	mvns	r3, r3
 80005d4:	4947      	ldr	r1, [pc, #284]	; (80006f4 <GPIO_Init+0x198>)
 80005d6:	4013      	ands	r3, r2
 80005d8:	608b      	str	r3, [r1, #8]
			reset_value = 0;
 80005da:	2300      	movs	r3, #0
 80005dc:	627b      	str	r3, [r7, #36]	; 0x24

			//configure FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005de:	4b45      	ldr	r3, [pc, #276]	; (80006f4 <GPIO_Init+0x198>)
 80005e0:	68db      	ldr	r3, [r3, #12]
 80005e2:	687a      	ldr	r2, [r7, #4]
 80005e4:	7912      	ldrb	r2, [r2, #4]
 80005e6:	4611      	mov	r1, r2
 80005e8:	2201      	movs	r2, #1
 80005ea:	408a      	lsls	r2, r1
 80005ec:	4611      	mov	r1, r2
 80005ee:	4a41      	ldr	r2, [pc, #260]	; (80006f4 <GPIO_Init+0x198>)
 80005f0:	430b      	orrs	r3, r1
 80005f2:	60d3      	str	r3, [r2, #12]
 80005f4:	e038      	b.n	8000668 <GPIO_Init+0x10c>
		} else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_PIN_MODE_IT_RT){
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	795b      	ldrb	r3, [r3, #5]
 80005fa:	2b05      	cmp	r3, #5
 80005fc:	d11a      	bne.n	8000634 <GPIO_Init+0xd8>
			//reset FTSR
			reset_value = (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	791b      	ldrb	r3, [r3, #4]
 8000602:	461a      	mov	r2, r3
 8000604:	2301      	movs	r3, #1
 8000606:	4093      	lsls	r3, r2
 8000608:	627b      	str	r3, [r7, #36]	; 0x24
			EXTI->FTSR &= ~(reset_value);
 800060a:	4b3a      	ldr	r3, [pc, #232]	; (80006f4 <GPIO_Init+0x198>)
 800060c:	68da      	ldr	r2, [r3, #12]
 800060e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000610:	43db      	mvns	r3, r3
 8000612:	4938      	ldr	r1, [pc, #224]	; (80006f4 <GPIO_Init+0x198>)
 8000614:	4013      	ands	r3, r2
 8000616:	60cb      	str	r3, [r1, #12]
			reset_value = 0;
 8000618:	2300      	movs	r3, #0
 800061a:	627b      	str	r3, [r7, #36]	; 0x24

			//configure RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800061c:	4b35      	ldr	r3, [pc, #212]	; (80006f4 <GPIO_Init+0x198>)
 800061e:	689b      	ldr	r3, [r3, #8]
 8000620:	687a      	ldr	r2, [r7, #4]
 8000622:	7912      	ldrb	r2, [r2, #4]
 8000624:	4611      	mov	r1, r2
 8000626:	2201      	movs	r2, #1
 8000628:	408a      	lsls	r2, r1
 800062a:	4611      	mov	r1, r2
 800062c:	4a31      	ldr	r2, [pc, #196]	; (80006f4 <GPIO_Init+0x198>)
 800062e:	430b      	orrs	r3, r1
 8000630:	6093      	str	r3, [r2, #8]
 8000632:	e019      	b.n	8000668 <GPIO_Init+0x10c>
		} else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_PIN_MODE_IT_RFT){
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	795b      	ldrb	r3, [r3, #5]
 8000638:	2b06      	cmp	r3, #6
 800063a:	d115      	bne.n	8000668 <GPIO_Init+0x10c>
			//configure RTSR and FTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800063c:	4b2d      	ldr	r3, [pc, #180]	; (80006f4 <GPIO_Init+0x198>)
 800063e:	689b      	ldr	r3, [r3, #8]
 8000640:	687a      	ldr	r2, [r7, #4]
 8000642:	7912      	ldrb	r2, [r2, #4]
 8000644:	4611      	mov	r1, r2
 8000646:	2201      	movs	r2, #1
 8000648:	408a      	lsls	r2, r1
 800064a:	4611      	mov	r1, r2
 800064c:	4a29      	ldr	r2, [pc, #164]	; (80006f4 <GPIO_Init+0x198>)
 800064e:	430b      	orrs	r3, r1
 8000650:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000652:	4b28      	ldr	r3, [pc, #160]	; (80006f4 <GPIO_Init+0x198>)
 8000654:	68db      	ldr	r3, [r3, #12]
 8000656:	687a      	ldr	r2, [r7, #4]
 8000658:	7912      	ldrb	r2, [r2, #4]
 800065a:	4611      	mov	r1, r2
 800065c:	2201      	movs	r2, #1
 800065e:	408a      	lsls	r2, r1
 8000660:	4611      	mov	r1, r2
 8000662:	4a24      	ldr	r2, [pc, #144]	; (80006f4 <GPIO_Init+0x198>)
 8000664:	430b      	orrs	r3, r1
 8000666:	60d3      	str	r3, [r2, #12]
		}

		//configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t index = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4);
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	791b      	ldrb	r3, [r3, #4]
 800066c:	089b      	lsrs	r3, r3, #2
 800066e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		uint8_t position = ((pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4) * 4);
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	791b      	ldrb	r3, [r3, #4]
 8000676:	f003 0303 	and.w	r3, r3, #3
 800067a:	b2db      	uxtb	r3, r3
 800067c:	009b      	lsls	r3, r3, #2
 800067e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		uint8_t port_code = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4a1c      	ldr	r2, [pc, #112]	; (80006f8 <GPIO_Init+0x19c>)
 8000688:	4293      	cmp	r3, r2
 800068a:	d045      	beq.n	8000718 <GPIO_Init+0x1bc>
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a1a      	ldr	r2, [pc, #104]	; (80006fc <GPIO_Init+0x1a0>)
 8000692:	4293      	cmp	r3, r2
 8000694:	d02b      	beq.n	80006ee <GPIO_Init+0x192>
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4a19      	ldr	r2, [pc, #100]	; (8000700 <GPIO_Init+0x1a4>)
 800069c:	4293      	cmp	r3, r2
 800069e:	d024      	beq.n	80006ea <GPIO_Init+0x18e>
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a17      	ldr	r2, [pc, #92]	; (8000704 <GPIO_Init+0x1a8>)
 80006a6:	4293      	cmp	r3, r2
 80006a8:	d01d      	beq.n	80006e6 <GPIO_Init+0x18a>
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	4a16      	ldr	r2, [pc, #88]	; (8000708 <GPIO_Init+0x1ac>)
 80006b0:	4293      	cmp	r3, r2
 80006b2:	d016      	beq.n	80006e2 <GPIO_Init+0x186>
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a14      	ldr	r2, [pc, #80]	; (800070c <GPIO_Init+0x1b0>)
 80006ba:	4293      	cmp	r3, r2
 80006bc:	d00f      	beq.n	80006de <GPIO_Init+0x182>
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4a13      	ldr	r2, [pc, #76]	; (8000710 <GPIO_Init+0x1b4>)
 80006c4:	4293      	cmp	r3, r2
 80006c6:	d008      	beq.n	80006da <GPIO_Init+0x17e>
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a11      	ldr	r2, [pc, #68]	; (8000714 <GPIO_Init+0x1b8>)
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d101      	bne.n	80006d6 <GPIO_Init+0x17a>
 80006d2:	2307      	movs	r3, #7
 80006d4:	e021      	b.n	800071a <GPIO_Init+0x1be>
 80006d6:	2300      	movs	r3, #0
 80006d8:	e01f      	b.n	800071a <GPIO_Init+0x1be>
 80006da:	2306      	movs	r3, #6
 80006dc:	e01d      	b.n	800071a <GPIO_Init+0x1be>
 80006de:	2305      	movs	r3, #5
 80006e0:	e01b      	b.n	800071a <GPIO_Init+0x1be>
 80006e2:	2304      	movs	r3, #4
 80006e4:	e019      	b.n	800071a <GPIO_Init+0x1be>
 80006e6:	2303      	movs	r3, #3
 80006e8:	e017      	b.n	800071a <GPIO_Init+0x1be>
 80006ea:	2302      	movs	r3, #2
 80006ec:	e015      	b.n	800071a <GPIO_Init+0x1be>
 80006ee:	2301      	movs	r3, #1
 80006f0:	e013      	b.n	800071a <GPIO_Init+0x1be>
 80006f2:	bf00      	nop
 80006f4:	40013c00 	.word	0x40013c00
 80006f8:	40020000 	.word	0x40020000
 80006fc:	40020400 	.word	0x40020400
 8000700:	40020800 	.word	0x40020800
 8000704:	40020c00 	.word	0x40020c00
 8000708:	40021000 	.word	0x40021000
 800070c:	40021400 	.word	0x40021400
 8000710:	40021800 	.word	0x40021800
 8000714:	40021c00 	.word	0x40021c00
 8000718:	2300      	movs	r3, #0
 800071a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

		SYSCFG_PCLK_EN();
 800071e:	4b71      	ldr	r3, [pc, #452]	; (80008e4 <GPIO_Init+0x388>)
 8000720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000722:	4a70      	ldr	r2, [pc, #448]	; (80008e4 <GPIO_Init+0x388>)
 8000724:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000728:	6453      	str	r3, [r2, #68]	; 0x44

		reset_value = (0xF << position);
 800072a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800072e:	220f      	movs	r2, #15
 8000730:	fa02 f303 	lsl.w	r3, r2, r3
 8000734:	627b      	str	r3, [r7, #36]	; 0x24
		SYSCFG->EXTICR[index] &= ~(reset_value);
 8000736:	4a6c      	ldr	r2, [pc, #432]	; (80008e8 <GPIO_Init+0x38c>)
 8000738:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800073c:	3302      	adds	r3, #2
 800073e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000744:	43da      	mvns	r2, r3
 8000746:	4868      	ldr	r0, [pc, #416]	; (80008e8 <GPIO_Init+0x38c>)
 8000748:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800074c:	400a      	ands	r2, r1
 800074e:	3302      	adds	r3, #2
 8000750:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		reset_value = 0;
 8000754:	2300      	movs	r3, #0
 8000756:	627b      	str	r3, [r7, #36]	; 0x24

		SYSCFG->EXTICR[index] |= (port_code << position);
 8000758:	4a63      	ldr	r2, [pc, #396]	; (80008e8 <GPIO_Init+0x38c>)
 800075a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800075e:	3302      	adds	r3, #2
 8000760:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000764:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 8000768:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800076c:	fa01 f303 	lsl.w	r3, r1, r3
 8000770:	4618      	mov	r0, r3
 8000772:	495d      	ldr	r1, [pc, #372]	; (80008e8 <GPIO_Init+0x38c>)
 8000774:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000778:	4302      	orrs	r2, r0
 800077a:	3302      	adds	r3, #2
 800077c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		//enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000780:	4b5a      	ldr	r3, [pc, #360]	; (80008ec <GPIO_Init+0x390>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	687a      	ldr	r2, [r7, #4]
 8000786:	7912      	ldrb	r2, [r2, #4]
 8000788:	4611      	mov	r1, r2
 800078a:	2201      	movs	r2, #1
 800078c:	408a      	lsls	r2, r1
 800078e:	4611      	mov	r1, r2
 8000790:	4a56      	ldr	r2, [pc, #344]	; (80008ec <GPIO_Init+0x390>)
 8000792:	430b      	orrs	r3, r1
 8000794:	6013      	str	r3, [r2, #0]
	}

	// reset, then set speed register
	reset_value = (0x3 << ((2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)));
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	791b      	ldrb	r3, [r3, #4]
 800079a:	005b      	lsls	r3, r3, #1
 800079c:	2203      	movs	r2, #3
 800079e:	fa02 f303 	lsl.w	r3, r2, r3
 80007a2:	627b      	str	r3, [r7, #36]	; 0x24
	pGPIOHandle->pGPIOx->OSPEEDER &= ~(reset_value);
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	6899      	ldr	r1, [r3, #8]
 80007aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ac:	43da      	mvns	r2, r3
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	400a      	ands	r2, r1
 80007b4:	609a      	str	r2, [r3, #8]
	reset_value = 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ospeedr_value = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	799b      	ldrb	r3, [r3, #6]
 80007be:	461a      	mov	r2, r3
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	791b      	ldrb	r3, [r3, #4]
 80007c4:	005b      	lsls	r3, r3, #1
 80007c6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ca:	61bb      	str	r3, [r7, #24]
	pGPIOHandle->pGPIOx->OSPEEDER |= ospeedr_value;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	6899      	ldr	r1, [r3, #8]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	69ba      	ldr	r2, [r7, #24]
 80007d8:	430a      	orrs	r2, r1
 80007da:	609a      	str	r2, [r3, #8]

	//reset, then set pupd register
	reset_value = (0x3 << ((2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)));
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	791b      	ldrb	r3, [r3, #4]
 80007e0:	005b      	lsls	r3, r3, #1
 80007e2:	2203      	movs	r2, #3
 80007e4:	fa02 f303 	lsl.w	r3, r2, r3
 80007e8:	627b      	str	r3, [r7, #36]	; 0x24
	pGPIOHandle->pGPIOx->PUPDR &= ~(reset_value);
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	68d9      	ldr	r1, [r3, #12]
 80007f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007f2:	43da      	mvns	r2, r3
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	400a      	ands	r2, r1
 80007fa:	60da      	str	r2, [r3, #12]
	reset_value = 0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t pupdr_value = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	79db      	ldrb	r3, [r3, #7]
 8000804:	461a      	mov	r2, r3
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	791b      	ldrb	r3, [r3, #4]
 800080a:	005b      	lsls	r3, r3, #1
 800080c:	fa02 f303 	lsl.w	r3, r2, r3
 8000810:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR |= pupdr_value;
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	68d9      	ldr	r1, [r3, #12]
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	697a      	ldr	r2, [r7, #20]
 800081e:	430a      	orrs	r2, r1
 8000820:	60da      	str	r2, [r3, #12]

	//reset, then set output type register
	reset_value = (0x1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	791b      	ldrb	r3, [r3, #4]
 8000826:	461a      	mov	r2, r3
 8000828:	2301      	movs	r3, #1
 800082a:	4093      	lsls	r3, r2
 800082c:	627b      	str	r3, [r7, #36]	; 0x24
	pGPIOHandle->pGPIOx->OTYPER &= ~(reset_value);
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	6859      	ldr	r1, [r3, #4]
 8000834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000836:	43da      	mvns	r2, r3
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	400a      	ands	r2, r1
 800083e:	605a      	str	r2, [r3, #4]
	reset_value = 0;
 8000840:	2300      	movs	r3, #0
 8000842:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t optyper_value = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	7a1b      	ldrb	r3, [r3, #8]
 8000848:	461a      	mov	r2, r3
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	791b      	ldrb	r3, [r3, #4]
 800084e:	fa02 f303 	lsl.w	r3, r2, r3
 8000852:	613b      	str	r3, [r7, #16]
	pGPIOHandle->pGPIOx->OTYPER |= optyper_value;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	6859      	ldr	r1, [r3, #4]
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	693a      	ldr	r2, [r7, #16]
 8000860:	430a      	orrs	r2, r1
 8000862:	605a      	str	r2, [r3, #4]

	//reset, then set altfn register
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_PIN_MODE_ALTFN){
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	795b      	ldrb	r3, [r3, #5]
 8000868:	2b02      	cmp	r3, #2
 800086a:	d135      	bne.n	80008d8 <GPIO_Init+0x37c>
		uint8_t index = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	791b      	ldrb	r3, [r3, #4]
 8000870:	08db      	lsrs	r3, r3, #3
 8000872:	73fb      	strb	r3, [r7, #15]
		uint8_t position = ((pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8) * 4);
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	791b      	ldrb	r3, [r3, #4]
 8000878:	f003 0307 	and.w	r3, r3, #7
 800087c:	b2db      	uxtb	r3, r3
 800087e:	009b      	lsls	r3, r3, #2
 8000880:	73bb      	strb	r3, [r7, #14]

		//reset
		reset_value = (0xF << position);
 8000882:	7bbb      	ldrb	r3, [r7, #14]
 8000884:	220f      	movs	r2, #15
 8000886:	fa02 f303 	lsl.w	r3, r2, r3
 800088a:	627b      	str	r3, [r7, #36]	; 0x24
		pGPIOHandle->pGPIOx->AFR[index] &= ~(reset_value);
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	7bfa      	ldrb	r2, [r7, #15]
 8000892:	3208      	adds	r2, #8
 8000894:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800089a:	43d9      	mvns	r1, r3
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	7bfa      	ldrb	r2, [r7, #15]
 80008a2:	4001      	ands	r1, r0
 80008a4:	3208      	adds	r2, #8
 80008a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		reset_value = 0;
 80008aa:	2300      	movs	r3, #0
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24

		//set
		uint32_t afr_value = (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << position);
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	7a5b      	ldrb	r3, [r3, #9]
 80008b2:	461a      	mov	r2, r3
 80008b4:	7bbb      	ldrb	r3, [r7, #14]
 80008b6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ba:	60bb      	str	r3, [r7, #8]
		pGPIOHandle->pGPIOx->AFR[index] |= afr_value;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	7bfa      	ldrb	r2, [r7, #15]
 80008c2:	3208      	adds	r2, #8
 80008c4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	7bfa      	ldrb	r2, [r7, #15]
 80008ce:	68b9      	ldr	r1, [r7, #8]
 80008d0:	4301      	orrs	r1, r0
 80008d2:	3208      	adds	r2, #8
 80008d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 80008d8:	bf00      	nop
 80008da:	372c      	adds	r7, #44	; 0x2c
 80008dc:	46bd      	mov	sp, r7
 80008de:	bc80      	pop	{r7}
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	40023800 	.word	0x40023800
 80008e8:	40013800 	.word	0x40013800
 80008ec:	40013c00 	.word	0x40013c00

080008f0 <GPIO_ReadFromInputPin>:
 * @return				- 0 or 1
 *
 * @note				- none
 *
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber){
 80008f0:	b480      	push	{r7}
 80008f2:	b085      	sub	sp, #20
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
 80008f8:	460b      	mov	r3, r1
 80008fa:	70fb      	strb	r3, [r7, #3]
	uint8_t value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x00000001);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	691a      	ldr	r2, [r3, #16]
 8000900:	78fb      	ldrb	r3, [r7, #3]
 8000902:	fa22 f303 	lsr.w	r3, r2, r3
 8000906:	b2db      	uxtb	r3, r3
 8000908:	f003 0301 	and.w	r3, r3, #1
 800090c:	73fb      	strb	r3, [r7, #15]
	return value;
 800090e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000910:	4618      	mov	r0, r3
 8000912:	3714      	adds	r7, #20
 8000914:	46bd      	mov	sp, r7
 8000916:	bc80      	pop	{r7}
 8000918:	4770      	bx	lr
	...

0800091c <RCC_GetPCLK1Value>:
 * @return				- peripheral clock speed for I2C peripherals
 *
 * @note				- none
 *
 */
uint32_t RCC_GetPCLK1Value(void){
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
	uint32_t pclk1;
	uint8_t clksrc, ahbprescaler, apb1prescaler;

	clksrc = (RCC->CFGR >> 2) & 0x3;
 8000922:	4b3d      	ldr	r3, [pc, #244]	; (8000a18 <RCC_GetPCLK1Value+0xfc>)
 8000924:	689b      	ldr	r3, [r3, #8]
 8000926:	089b      	lsrs	r3, r3, #2
 8000928:	b2db      	uxtb	r3, r3
 800092a:	f003 0303 	and.w	r3, r3, #3
 800092e:	70fb      	strb	r3, [r7, #3]
	if(clksrc == 0){
 8000930:	78fb      	ldrb	r3, [r7, #3]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d102      	bne.n	800093c <RCC_GetPCLK1Value+0x20>
		pclk1 = 16000000;
 8000936:	4b39      	ldr	r3, [pc, #228]	; (8000a1c <RCC_GetPCLK1Value+0x100>)
 8000938:	607b      	str	r3, [r7, #4]
 800093a:	e001      	b.n	8000940 <RCC_GetPCLK1Value+0x24>
	} else{
		pclk1 = 0; //I wont use other clocks for now (i don't have external clock)
 800093c:	2300      	movs	r3, #0
 800093e:	607b      	str	r3, [r7, #4]
	}

	ahbprescaler = (RCC->CFGR >> 4) & 0xF;
 8000940:	4b35      	ldr	r3, [pc, #212]	; (8000a18 <RCC_GetPCLK1Value+0xfc>)
 8000942:	689b      	ldr	r3, [r3, #8]
 8000944:	091b      	lsrs	r3, r3, #4
 8000946:	b2db      	uxtb	r3, r3
 8000948:	f003 030f 	and.w	r3, r3, #15
 800094c:	70bb      	strb	r3, [r7, #2]
	if(ahbprescaler < 8){
 800094e:	78bb      	ldrb	r3, [r7, #2]
 8000950:	2b07      	cmp	r3, #7
 8000952:	d936      	bls.n	80009c2 <RCC_GetPCLK1Value+0xa6>
		//clock wont be divided
	}else if(ahbprescaler == 8){
 8000954:	78bb      	ldrb	r3, [r7, #2]
 8000956:	2b08      	cmp	r3, #8
 8000958:	d103      	bne.n	8000962 <RCC_GetPCLK1Value+0x46>
		pclk1 /= 2;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	085b      	lsrs	r3, r3, #1
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	e02f      	b.n	80009c2 <RCC_GetPCLK1Value+0xa6>
	}else if(ahbprescaler == 9){
 8000962:	78bb      	ldrb	r3, [r7, #2]
 8000964:	2b09      	cmp	r3, #9
 8000966:	d103      	bne.n	8000970 <RCC_GetPCLK1Value+0x54>
		pclk1 /= 4;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	089b      	lsrs	r3, r3, #2
 800096c:	607b      	str	r3, [r7, #4]
 800096e:	e028      	b.n	80009c2 <RCC_GetPCLK1Value+0xa6>
	}else if(ahbprescaler == 10){
 8000970:	78bb      	ldrb	r3, [r7, #2]
 8000972:	2b0a      	cmp	r3, #10
 8000974:	d103      	bne.n	800097e <RCC_GetPCLK1Value+0x62>
		pclk1 /= 8;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	08db      	lsrs	r3, r3, #3
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	e021      	b.n	80009c2 <RCC_GetPCLK1Value+0xa6>
	}else if(ahbprescaler == 11){
 800097e:	78bb      	ldrb	r3, [r7, #2]
 8000980:	2b0b      	cmp	r3, #11
 8000982:	d103      	bne.n	800098c <RCC_GetPCLK1Value+0x70>
		pclk1 /= 16;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	091b      	lsrs	r3, r3, #4
 8000988:	607b      	str	r3, [r7, #4]
 800098a:	e01a      	b.n	80009c2 <RCC_GetPCLK1Value+0xa6>
	}else if(ahbprescaler == 12){
 800098c:	78bb      	ldrb	r3, [r7, #2]
 800098e:	2b0c      	cmp	r3, #12
 8000990:	d103      	bne.n	800099a <RCC_GetPCLK1Value+0x7e>
		pclk1 /= 64;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	099b      	lsrs	r3, r3, #6
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	e013      	b.n	80009c2 <RCC_GetPCLK1Value+0xa6>
	}else if(ahbprescaler == 13){
 800099a:	78bb      	ldrb	r3, [r7, #2]
 800099c:	2b0d      	cmp	r3, #13
 800099e:	d103      	bne.n	80009a8 <RCC_GetPCLK1Value+0x8c>
		pclk1 /= 128;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	09db      	lsrs	r3, r3, #7
 80009a4:	607b      	str	r3, [r7, #4]
 80009a6:	e00c      	b.n	80009c2 <RCC_GetPCLK1Value+0xa6>
	}else if(ahbprescaler == 14){
 80009a8:	78bb      	ldrb	r3, [r7, #2]
 80009aa:	2b0e      	cmp	r3, #14
 80009ac:	d103      	bne.n	80009b6 <RCC_GetPCLK1Value+0x9a>
		pclk1 /= 256;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	0a1b      	lsrs	r3, r3, #8
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	e005      	b.n	80009c2 <RCC_GetPCLK1Value+0xa6>
	}else if(ahbprescaler == 15){
 80009b6:	78bb      	ldrb	r3, [r7, #2]
 80009b8:	2b0f      	cmp	r3, #15
 80009ba:	d102      	bne.n	80009c2 <RCC_GetPCLK1Value+0xa6>
		pclk1 /= 512;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	0a5b      	lsrs	r3, r3, #9
 80009c0:	607b      	str	r3, [r7, #4]
	}

	apb1prescaler = (RCC->CFGR >> 10) & 0x7;
 80009c2:	4b15      	ldr	r3, [pc, #84]	; (8000a18 <RCC_GetPCLK1Value+0xfc>)
 80009c4:	689b      	ldr	r3, [r3, #8]
 80009c6:	0a9b      	lsrs	r3, r3, #10
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	f003 0307 	and.w	r3, r3, #7
 80009ce:	707b      	strb	r3, [r7, #1]
	if(apb1prescaler < 4){
 80009d0:	787b      	ldrb	r3, [r7, #1]
 80009d2:	2b03      	cmp	r3, #3
 80009d4:	d91a      	bls.n	8000a0c <RCC_GetPCLK1Value+0xf0>
		//clk not divided
	} else if(apb1prescaler == 4){
 80009d6:	787b      	ldrb	r3, [r7, #1]
 80009d8:	2b04      	cmp	r3, #4
 80009da:	d103      	bne.n	80009e4 <RCC_GetPCLK1Value+0xc8>
		pclk1 /= 2;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	085b      	lsrs	r3, r3, #1
 80009e0:	607b      	str	r3, [r7, #4]
 80009e2:	e013      	b.n	8000a0c <RCC_GetPCLK1Value+0xf0>
	} else if(apb1prescaler == 5){
 80009e4:	787b      	ldrb	r3, [r7, #1]
 80009e6:	2b05      	cmp	r3, #5
 80009e8:	d103      	bne.n	80009f2 <RCC_GetPCLK1Value+0xd6>
		pclk1 /= 4;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	089b      	lsrs	r3, r3, #2
 80009ee:	607b      	str	r3, [r7, #4]
 80009f0:	e00c      	b.n	8000a0c <RCC_GetPCLK1Value+0xf0>
	} else if(apb1prescaler == 6){
 80009f2:	787b      	ldrb	r3, [r7, #1]
 80009f4:	2b06      	cmp	r3, #6
 80009f6:	d103      	bne.n	8000a00 <RCC_GetPCLK1Value+0xe4>
		pclk1 /= 8;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	08db      	lsrs	r3, r3, #3
 80009fc:	607b      	str	r3, [r7, #4]
 80009fe:	e005      	b.n	8000a0c <RCC_GetPCLK1Value+0xf0>
	} else if(apb1prescaler == 7){
 8000a00:	787b      	ldrb	r3, [r7, #1]
 8000a02:	2b07      	cmp	r3, #7
 8000a04:	d102      	bne.n	8000a0c <RCC_GetPCLK1Value+0xf0>
		pclk1 /= 16;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	091b      	lsrs	r3, r3, #4
 8000a0a:	607b      	str	r3, [r7, #4]
	}

	return pclk1;
 8000a0c:	687b      	ldr	r3, [r7, #4]
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	370c      	adds	r7, #12
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bc80      	pop	{r7}
 8000a16:	4770      	bx	lr
 8000a18:	40023800 	.word	0x40023800
 8000a1c:	00f42400 	.word	0x00f42400

08000a20 <RCC_GetPCLK2Value>:
 * @return				- peripheral clock speed for I2C peripherals
 *
 * @note				- none
 *
 */
uint32_t RCC_GetPCLK2Value(void){
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
	uint32_t pclk1;
	uint8_t clksrc, ahbprescaler, apb2prescaler;

	clksrc = (RCC->CFGR >> 2) & 0x3;
 8000a26:	4b3d      	ldr	r3, [pc, #244]	; (8000b1c <RCC_GetPCLK2Value+0xfc>)
 8000a28:	689b      	ldr	r3, [r3, #8]
 8000a2a:	089b      	lsrs	r3, r3, #2
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	f003 0303 	and.w	r3, r3, #3
 8000a32:	70fb      	strb	r3, [r7, #3]
	if(clksrc == 0){
 8000a34:	78fb      	ldrb	r3, [r7, #3]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d102      	bne.n	8000a40 <RCC_GetPCLK2Value+0x20>
		pclk1 = 16000000;
 8000a3a:	4b39      	ldr	r3, [pc, #228]	; (8000b20 <RCC_GetPCLK2Value+0x100>)
 8000a3c:	607b      	str	r3, [r7, #4]
 8000a3e:	e001      	b.n	8000a44 <RCC_GetPCLK2Value+0x24>
	} else{
		pclk1 = 0; //I wont use other clocks for now (i don't have external clock)
 8000a40:	2300      	movs	r3, #0
 8000a42:	607b      	str	r3, [r7, #4]
	}

	ahbprescaler = (RCC->CFGR >> 4) & 0xF;
 8000a44:	4b35      	ldr	r3, [pc, #212]	; (8000b1c <RCC_GetPCLK2Value+0xfc>)
 8000a46:	689b      	ldr	r3, [r3, #8]
 8000a48:	091b      	lsrs	r3, r3, #4
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	f003 030f 	and.w	r3, r3, #15
 8000a50:	70bb      	strb	r3, [r7, #2]
	if(ahbprescaler < 8){
 8000a52:	78bb      	ldrb	r3, [r7, #2]
 8000a54:	2b07      	cmp	r3, #7
 8000a56:	d936      	bls.n	8000ac6 <RCC_GetPCLK2Value+0xa6>
		//clock wont be divided
	}else if(ahbprescaler == 8){
 8000a58:	78bb      	ldrb	r3, [r7, #2]
 8000a5a:	2b08      	cmp	r3, #8
 8000a5c:	d103      	bne.n	8000a66 <RCC_GetPCLK2Value+0x46>
		pclk1 /= 2;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	085b      	lsrs	r3, r3, #1
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	e02f      	b.n	8000ac6 <RCC_GetPCLK2Value+0xa6>
	}else if(ahbprescaler == 9){
 8000a66:	78bb      	ldrb	r3, [r7, #2]
 8000a68:	2b09      	cmp	r3, #9
 8000a6a:	d103      	bne.n	8000a74 <RCC_GetPCLK2Value+0x54>
		pclk1 /= 4;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	089b      	lsrs	r3, r3, #2
 8000a70:	607b      	str	r3, [r7, #4]
 8000a72:	e028      	b.n	8000ac6 <RCC_GetPCLK2Value+0xa6>
	}else if(ahbprescaler == 10){
 8000a74:	78bb      	ldrb	r3, [r7, #2]
 8000a76:	2b0a      	cmp	r3, #10
 8000a78:	d103      	bne.n	8000a82 <RCC_GetPCLK2Value+0x62>
		pclk1 /= 8;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	08db      	lsrs	r3, r3, #3
 8000a7e:	607b      	str	r3, [r7, #4]
 8000a80:	e021      	b.n	8000ac6 <RCC_GetPCLK2Value+0xa6>
	}else if(ahbprescaler == 11){
 8000a82:	78bb      	ldrb	r3, [r7, #2]
 8000a84:	2b0b      	cmp	r3, #11
 8000a86:	d103      	bne.n	8000a90 <RCC_GetPCLK2Value+0x70>
		pclk1 /= 16;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	091b      	lsrs	r3, r3, #4
 8000a8c:	607b      	str	r3, [r7, #4]
 8000a8e:	e01a      	b.n	8000ac6 <RCC_GetPCLK2Value+0xa6>
	}else if(ahbprescaler == 12){
 8000a90:	78bb      	ldrb	r3, [r7, #2]
 8000a92:	2b0c      	cmp	r3, #12
 8000a94:	d103      	bne.n	8000a9e <RCC_GetPCLK2Value+0x7e>
		pclk1 /= 64;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	099b      	lsrs	r3, r3, #6
 8000a9a:	607b      	str	r3, [r7, #4]
 8000a9c:	e013      	b.n	8000ac6 <RCC_GetPCLK2Value+0xa6>
	}else if(ahbprescaler == 13){
 8000a9e:	78bb      	ldrb	r3, [r7, #2]
 8000aa0:	2b0d      	cmp	r3, #13
 8000aa2:	d103      	bne.n	8000aac <RCC_GetPCLK2Value+0x8c>
		pclk1 /= 128;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	09db      	lsrs	r3, r3, #7
 8000aa8:	607b      	str	r3, [r7, #4]
 8000aaa:	e00c      	b.n	8000ac6 <RCC_GetPCLK2Value+0xa6>
	}else if(ahbprescaler == 14){
 8000aac:	78bb      	ldrb	r3, [r7, #2]
 8000aae:	2b0e      	cmp	r3, #14
 8000ab0:	d103      	bne.n	8000aba <RCC_GetPCLK2Value+0x9a>
		pclk1 /= 256;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	0a1b      	lsrs	r3, r3, #8
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	e005      	b.n	8000ac6 <RCC_GetPCLK2Value+0xa6>
	}else if(ahbprescaler == 15){
 8000aba:	78bb      	ldrb	r3, [r7, #2]
 8000abc:	2b0f      	cmp	r3, #15
 8000abe:	d102      	bne.n	8000ac6 <RCC_GetPCLK2Value+0xa6>
		pclk1 /= 512;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	0a5b      	lsrs	r3, r3, #9
 8000ac4:	607b      	str	r3, [r7, #4]
	}

	apb2prescaler = (RCC->CFGR >> 13) & 0x7;
 8000ac6:	4b15      	ldr	r3, [pc, #84]	; (8000b1c <RCC_GetPCLK2Value+0xfc>)
 8000ac8:	689b      	ldr	r3, [r3, #8]
 8000aca:	0b5b      	lsrs	r3, r3, #13
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	f003 0307 	and.w	r3, r3, #7
 8000ad2:	707b      	strb	r3, [r7, #1]
	if(apb2prescaler < 4){
 8000ad4:	787b      	ldrb	r3, [r7, #1]
 8000ad6:	2b03      	cmp	r3, #3
 8000ad8:	d91a      	bls.n	8000b10 <RCC_GetPCLK2Value+0xf0>
		//clk not divided
	} else if(apb2prescaler == 4){
 8000ada:	787b      	ldrb	r3, [r7, #1]
 8000adc:	2b04      	cmp	r3, #4
 8000ade:	d103      	bne.n	8000ae8 <RCC_GetPCLK2Value+0xc8>
		pclk1 /= 2;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	085b      	lsrs	r3, r3, #1
 8000ae4:	607b      	str	r3, [r7, #4]
 8000ae6:	e013      	b.n	8000b10 <RCC_GetPCLK2Value+0xf0>
	} else if(apb2prescaler == 5){
 8000ae8:	787b      	ldrb	r3, [r7, #1]
 8000aea:	2b05      	cmp	r3, #5
 8000aec:	d103      	bne.n	8000af6 <RCC_GetPCLK2Value+0xd6>
		pclk1 /= 4;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	089b      	lsrs	r3, r3, #2
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	e00c      	b.n	8000b10 <RCC_GetPCLK2Value+0xf0>
	} else if(apb2prescaler == 6){
 8000af6:	787b      	ldrb	r3, [r7, #1]
 8000af8:	2b06      	cmp	r3, #6
 8000afa:	d103      	bne.n	8000b04 <RCC_GetPCLK2Value+0xe4>
		pclk1 /= 8;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	08db      	lsrs	r3, r3, #3
 8000b00:	607b      	str	r3, [r7, #4]
 8000b02:	e005      	b.n	8000b10 <RCC_GetPCLK2Value+0xf0>
	} else if(apb2prescaler == 7){
 8000b04:	787b      	ldrb	r3, [r7, #1]
 8000b06:	2b07      	cmp	r3, #7
 8000b08:	d102      	bne.n	8000b10 <RCC_GetPCLK2Value+0xf0>
		pclk1 /= 16;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	091b      	lsrs	r3, r3, #4
 8000b0e:	607b      	str	r3, [r7, #4]
	}

	return pclk1;
 8000b10:	687b      	ldr	r3, [r7, #4]
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	370c      	adds	r7, #12
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bc80      	pop	{r7}
 8000b1a:	4770      	bx	lr
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	00f42400 	.word	0x00f42400

08000b24 <USART_ClearOREFlag>:
 *
 * @note				- none
 *
 */

static void USART_ClearOREFlag(USART_RegDef_t *pUSARTx){
 8000b24:	b480      	push	{r7}
 8000b26:	b085      	sub	sp, #20
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
	uint32_t dummy = pUSARTx->SR;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	60fb      	str	r3, [r7, #12]
	dummy = pUSARTx->DR;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	60fb      	str	r3, [r7, #12]
	(void)dummy;
}
 8000b38:	bf00      	nop
 8000b3a:	3714      	adds	r7, #20
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bc80      	pop	{r7}
 8000b40:	4770      	bx	lr
	...

08000b44 <USART_PeriClockControl>:
 * @return				- none
 *
 * @note				- none
 *
 */
void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi){
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	460b      	mov	r3, r1
 8000b4e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8000b50:	78fb      	ldrb	r3, [r7, #3]
 8000b52:	2b01      	cmp	r3, #1
 8000b54:	d141      	bne.n	8000bda <USART_PeriClockControl+0x96>
		if(pUSARTx == USART1){
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4a43      	ldr	r2, [pc, #268]	; (8000c68 <USART_PeriClockControl+0x124>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d106      	bne.n	8000b6c <USART_PeriClockControl+0x28>
			USART1_PCLK_EN();
 8000b5e:	4b43      	ldr	r3, [pc, #268]	; (8000c6c <USART_PeriClockControl+0x128>)
 8000b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b62:	4a42      	ldr	r2, [pc, #264]	; (8000c6c <USART_PeriClockControl+0x128>)
 8000b64:	f043 0310 	orr.w	r3, r3, #16
 8000b68:	6453      	str	r3, [r2, #68]	; 0x44
			UART5_PCLK_DI();
		} else if(pUSARTx == USART6){
			USART6_PCLK_DI();
		}
	}
}
 8000b6a:	e077      	b.n	8000c5c <USART_PeriClockControl+0x118>
		} else if(pUSARTx == USART2){
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	4a40      	ldr	r2, [pc, #256]	; (8000c70 <USART_PeriClockControl+0x12c>)
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d106      	bne.n	8000b82 <USART_PeriClockControl+0x3e>
			USART2_PCLK_EN();
 8000b74:	4b3d      	ldr	r3, [pc, #244]	; (8000c6c <USART_PeriClockControl+0x128>)
 8000b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b78:	4a3c      	ldr	r2, [pc, #240]	; (8000c6c <USART_PeriClockControl+0x128>)
 8000b7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b7e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b80:	e06c      	b.n	8000c5c <USART_PeriClockControl+0x118>
		} else if(pUSARTx == USART3){
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4a3b      	ldr	r2, [pc, #236]	; (8000c74 <USART_PeriClockControl+0x130>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d106      	bne.n	8000b98 <USART_PeriClockControl+0x54>
			USART3_PCLK_EN();
 8000b8a:	4b38      	ldr	r3, [pc, #224]	; (8000c6c <USART_PeriClockControl+0x128>)
 8000b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8e:	4a37      	ldr	r2, [pc, #220]	; (8000c6c <USART_PeriClockControl+0x128>)
 8000b90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b94:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b96:	e061      	b.n	8000c5c <USART_PeriClockControl+0x118>
		} else if(pUSARTx == UART4){
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	4a37      	ldr	r2, [pc, #220]	; (8000c78 <USART_PeriClockControl+0x134>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d106      	bne.n	8000bae <USART_PeriClockControl+0x6a>
			UART4_PCLK_EN();
 8000ba0:	4b32      	ldr	r3, [pc, #200]	; (8000c6c <USART_PeriClockControl+0x128>)
 8000ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba4:	4a31      	ldr	r2, [pc, #196]	; (8000c6c <USART_PeriClockControl+0x128>)
 8000ba6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000baa:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000bac:	e056      	b.n	8000c5c <USART_PeriClockControl+0x118>
		} else if(pUSARTx == UART5){
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	4a32      	ldr	r2, [pc, #200]	; (8000c7c <USART_PeriClockControl+0x138>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d106      	bne.n	8000bc4 <USART_PeriClockControl+0x80>
			UART5_PCLK_EN();
 8000bb6:	4b2d      	ldr	r3, [pc, #180]	; (8000c6c <USART_PeriClockControl+0x128>)
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bba:	4a2c      	ldr	r2, [pc, #176]	; (8000c6c <USART_PeriClockControl+0x128>)
 8000bbc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000bc0:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000bc2:	e04b      	b.n	8000c5c <USART_PeriClockControl+0x118>
		} else if(pUSARTx == USART6){
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	4a2e      	ldr	r2, [pc, #184]	; (8000c80 <USART_PeriClockControl+0x13c>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d147      	bne.n	8000c5c <USART_PeriClockControl+0x118>
			USART6_PCLK_EN();
 8000bcc:	4b27      	ldr	r3, [pc, #156]	; (8000c6c <USART_PeriClockControl+0x128>)
 8000bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd0:	4a26      	ldr	r2, [pc, #152]	; (8000c6c <USART_PeriClockControl+0x128>)
 8000bd2:	f043 0320 	orr.w	r3, r3, #32
 8000bd6:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000bd8:	e040      	b.n	8000c5c <USART_PeriClockControl+0x118>
		if(pUSARTx == USART1){
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4a22      	ldr	r2, [pc, #136]	; (8000c68 <USART_PeriClockControl+0x124>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d106      	bne.n	8000bf0 <USART_PeriClockControl+0xac>
			USART1_PCLK_DI();
 8000be2:	4b22      	ldr	r3, [pc, #136]	; (8000c6c <USART_PeriClockControl+0x128>)
 8000be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000be6:	4a21      	ldr	r2, [pc, #132]	; (8000c6c <USART_PeriClockControl+0x128>)
 8000be8:	f023 0310 	bic.w	r3, r3, #16
 8000bec:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000bee:	e035      	b.n	8000c5c <USART_PeriClockControl+0x118>
		} else if(pUSARTx == USART2){
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	4a1f      	ldr	r2, [pc, #124]	; (8000c70 <USART_PeriClockControl+0x12c>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d106      	bne.n	8000c06 <USART_PeriClockControl+0xc2>
			USART2_PCLK_DI();
 8000bf8:	4b1c      	ldr	r3, [pc, #112]	; (8000c6c <USART_PeriClockControl+0x128>)
 8000bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfc:	4a1b      	ldr	r2, [pc, #108]	; (8000c6c <USART_PeriClockControl+0x128>)
 8000bfe:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000c02:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000c04:	e02a      	b.n	8000c5c <USART_PeriClockControl+0x118>
		} else if(pUSARTx == USART3){
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4a1a      	ldr	r2, [pc, #104]	; (8000c74 <USART_PeriClockControl+0x130>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d106      	bne.n	8000c1c <USART_PeriClockControl+0xd8>
			USART3_PCLK_DI();
 8000c0e:	4b17      	ldr	r3, [pc, #92]	; (8000c6c <USART_PeriClockControl+0x128>)
 8000c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c12:	4a16      	ldr	r2, [pc, #88]	; (8000c6c <USART_PeriClockControl+0x128>)
 8000c14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c18:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000c1a:	e01f      	b.n	8000c5c <USART_PeriClockControl+0x118>
		} else if(pUSARTx == UART4){
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	4a16      	ldr	r2, [pc, #88]	; (8000c78 <USART_PeriClockControl+0x134>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d106      	bne.n	8000c32 <USART_PeriClockControl+0xee>
			UART4_PCLK_DI();
 8000c24:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <USART_PeriClockControl+0x128>)
 8000c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c28:	4a10      	ldr	r2, [pc, #64]	; (8000c6c <USART_PeriClockControl+0x128>)
 8000c2a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8000c2e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000c30:	e014      	b.n	8000c5c <USART_PeriClockControl+0x118>
		} else if(pUSARTx == UART5){
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4a11      	ldr	r2, [pc, #68]	; (8000c7c <USART_PeriClockControl+0x138>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d106      	bne.n	8000c48 <USART_PeriClockControl+0x104>
			UART5_PCLK_DI();
 8000c3a:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <USART_PeriClockControl+0x128>)
 8000c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3e:	4a0b      	ldr	r2, [pc, #44]	; (8000c6c <USART_PeriClockControl+0x128>)
 8000c40:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000c44:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000c46:	e009      	b.n	8000c5c <USART_PeriClockControl+0x118>
		} else if(pUSARTx == USART6){
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	4a0d      	ldr	r2, [pc, #52]	; (8000c80 <USART_PeriClockControl+0x13c>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d105      	bne.n	8000c5c <USART_PeriClockControl+0x118>
			USART6_PCLK_DI();
 8000c50:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <USART_PeriClockControl+0x128>)
 8000c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c54:	4a05      	ldr	r2, [pc, #20]	; (8000c6c <USART_PeriClockControl+0x128>)
 8000c56:	f023 0320 	bic.w	r3, r3, #32
 8000c5a:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000c5c:	bf00      	nop
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bc80      	pop	{r7}
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	40011000 	.word	0x40011000
 8000c6c:	40023800 	.word	0x40023800
 8000c70:	40004400 	.word	0x40004400
 8000c74:	40004800 	.word	0x40004800
 8000c78:	40004c00 	.word	0x40004c00
 8000c7c:	40005000 	.word	0x40005000
 8000c80:	40011400 	.word	0x40011400

08000c84 <USART_Init>:
 * @return            -
 *
 * @Note              - Resolve all the TODOs

 */
void USART_Init(USART_Handle_t *pUSARTHandle){
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b086      	sub	sp, #24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]

	//Temporary variable
	uint32_t usart_cr1, usart_cr2, usart_cr3;

	//Implement the code to enable the Clock for given USART peripheral
	 USART_PeriClockControl(pUSARTHandle->pUSARTx, ENABLE);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	2101      	movs	r1, #1
 8000c92:	4618      	mov	r0, r3
 8000c94:	f7ff ff56 	bl	8000b44 <USART_PeriClockControl>

/******************************** Configuration of CR1******************************************/

	usart_cr1 = 0;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	617b      	str	r3, [r7, #20]

	//Enable USART Tx and Rx engines according to the USART_Mode configuration item
	if ( pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	791b      	ldrb	r3, [r3, #4]
 8000ca0:	2b01      	cmp	r3, #1
 8000ca2:	d104      	bne.n	8000cae <USART_Init+0x2a>
	{
		//Implement the code to enable the Receiver bit field
		usart_cr1 |= (1 << USART_CR1_RE);
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	f043 0304 	orr.w	r3, r3, #4
 8000caa:	617b      	str	r3, [r7, #20]
 8000cac:	e010      	b.n	8000cd0 <USART_Init+0x4c>
	}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	791b      	ldrb	r3, [r3, #4]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d104      	bne.n	8000cc0 <USART_Init+0x3c>
	{
		//Implement the code to enable the Transmitter bit field
		usart_cr1 |= (1 << USART_CR1_TE);
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	f043 0308 	orr.w	r3, r3, #8
 8000cbc:	617b      	str	r3, [r7, #20]
 8000cbe:	e007      	b.n	8000cd0 <USART_Init+0x4c>
	}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	791b      	ldrb	r3, [r3, #4]
 8000cc4:	2b02      	cmp	r3, #2
 8000cc6:	d103      	bne.n	8000cd0 <USART_Init+0x4c>
	{
		//Implement the code to enable the both Transmitter and Receiver bit fields
		usart_cr1 |= ( ( 1 << USART_CR1_TE) | ( 1 << USART_CR1_RE) );
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	f043 030c 	orr.w	r3, r3, #12
 8000cce:	617b      	str	r3, [r7, #20]
	}

    //Implement the code to configure the Word length configuration item
	usart_cr1 |= pUSARTHandle->USART_Config.USART_WordLength << USART_CR1_M;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	7b5b      	ldrb	r3, [r3, #13]
 8000cd4:	031b      	lsls	r3, r3, #12
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	617b      	str	r3, [r7, #20]


    //Configuration of parity control bit fields
	if ( pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_EVEN)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	7b9b      	ldrb	r3, [r3, #14]
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d108      	bne.n	8000cf8 <USART_Init+0x74>
	{
		//Implement the code to enable the parity control
		usart_cr1 |= ( 1 << USART_CR1_PCE);
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cec:	617b      	str	r3, [r7, #20]

		//Implement the code to enable EVEN parity
		usart_cr1 &= ~( 1 << USART_CR1_PS);
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000cf4:	617b      	str	r3, [r7, #20]
 8000cf6:	e00b      	b.n	8000d10 <USART_Init+0x8c>

	}else if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_ODD )
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	7b9b      	ldrb	r3, [r3, #14]
 8000cfc:	2b02      	cmp	r3, #2
 8000cfe:	d107      	bne.n	8000d10 <USART_Init+0x8c>
	{
		//Implement the code to enable the parity control
		usart_cr1 |= ( 1 << USART_CR1_PCE);
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d06:	617b      	str	r3, [r7, #20]

	    //Implement the code to enable ODD parity
		usart_cr1 |= ( 1 << USART_CR1_PS);
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d0e:	617b      	str	r3, [r7, #20]

	}

   //Program the CR1 register
	pUSARTHandle->pUSARTx->CR1 = usart_cr1;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	697a      	ldr	r2, [r7, #20]
 8000d16:	60da      	str	r2, [r3, #12]

/******************************** Configuration of CR2******************************************/

	usart_cr2 = 0;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	60fb      	str	r3, [r7, #12]

	//Implement the code to configure the number of stop bits inserted during USART frame transmission
	usart_cr2 |= pUSARTHandle->USART_Config.USART_NoOfStopBits << USART_CR2_STOP;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	7b1b      	ldrb	r3, [r3, #12]
 8000d20:	031b      	lsls	r3, r3, #12
 8000d22:	461a      	mov	r2, r3
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	4313      	orrs	r3, r2
 8000d28:	60fb      	str	r3, [r7, #12]

	//Program the CR2 register
	pUSARTHandle->pUSARTx->CR2 = usart_cr2;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	68fa      	ldr	r2, [r7, #12]
 8000d30:	611a      	str	r2, [r3, #16]

/******************************** Configuration of CR3******************************************/

	usart_cr3 = 0;
 8000d32:	2300      	movs	r3, #0
 8000d34:	613b      	str	r3, [r7, #16]

	//Configuration of USART hardware flow control
	if ( pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	7bdb      	ldrb	r3, [r3, #15]
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	d104      	bne.n	8000d48 <USART_Init+0xc4>
	{
		//Implement the code to enable CTS flow control
		usart_cr3 |= (1 << USART_CR3_CTSE);
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d44:	613b      	str	r3, [r7, #16]
 8000d46:	e010      	b.n	8000d6a <USART_Init+0xe6>


	}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	7bdb      	ldrb	r3, [r3, #15]
 8000d4c:	2b02      	cmp	r3, #2
 8000d4e:	d104      	bne.n	8000d5a <USART_Init+0xd6>
	{
		//Implement the code to enable RTS flow control
		usart_cr3 |= (1 << USART_CR3_RTSE);
 8000d50:	693b      	ldr	r3, [r7, #16]
 8000d52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d56:	613b      	str	r3, [r7, #16]
 8000d58:	e007      	b.n	8000d6a <USART_Init+0xe6>

	}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	7bdb      	ldrb	r3, [r3, #15]
 8000d5e:	2b03      	cmp	r3, #3
 8000d60:	d103      	bne.n	8000d6a <USART_Init+0xe6>
	{
		//Implement the code to enable both CTS and RTS Flow control
		usart_cr3 |= ((1 << USART_CR3_CTSE) | (1 << USART_CR3_RTSE));
 8000d62:	693b      	ldr	r3, [r7, #16]
 8000d64:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000d68:	613b      	str	r3, [r7, #16]
	}


	pUSARTHandle->pUSARTx->CR3 = usart_cr3;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	693a      	ldr	r2, [r7, #16]
 8000d70:	615a      	str	r2, [r3, #20]

/******************************** Configuration of BRR(Baud rate register)******************************************/

	//Implement the code to configure the baud rate
	USART_SetBaudRate(pUSARTHandle->pUSARTx, pUSARTHandle->USART_Config.USART_Baud);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	689b      	ldr	r3, [r3, #8]
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4610      	mov	r0, r2
 8000d7e:	f000 facb 	bl	8001318 <USART_SetBaudRate>

}
 8000d82:	bf00      	nop
 8000d84:	3718      	adds	r7, #24
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <USART_SendData>:
 * @return	          -
 *
 * @Note    	      -

 */
void USART_SendData(USART_Handle_t *pUSARTHandle,uint8_t *pTxBuffer, uint32_t Len){
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b086      	sub	sp, #24
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	60f8      	str	r0, [r7, #12]
 8000d92:	60b9      	str	r1, [r7, #8]
 8000d94:	607a      	str	r2, [r7, #4]
	uint16_t *pdata;

   //Loop over until "Len" number of bytes are transferred
	for(uint32_t i = 0 ; i < Len; i++){
 8000d96:	2300      	movs	r3, #0
 8000d98:	617b      	str	r3, [r7, #20]
 8000d9a:	e031      	b.n	8000e00 <USART_SendData+0x76>
		//Implement the code to wait until TXE flag is set in the SR
		while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx, USART_FLAG_TXE));
 8000d9c:	bf00      	nop
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	2180      	movs	r1, #128	; 0x80
 8000da4:	4618      	mov	r0, r3
 8000da6:	f000 faa3 	bl	80012f0 <USART_GetFlagStatus>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d0f6      	beq.n	8000d9e <USART_SendData+0x14>

         //Check the USART_WordLength item for 9BIT or 8BIT in a frame
		if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS){
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	7b5b      	ldrb	r3, [r3, #13]
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d118      	bne.n	8000dea <USART_SendData+0x60>
			//if 9BIT, load the DR with 2bytes masking the bits other than first 9 bits
			pdata = (uint16_t*) pTxBuffer;
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	613b      	str	r3, [r7, #16]
			pUSARTHandle->pUSARTx->DR = (*pdata & (uint16_t)0x01FF);
 8000dbc:	693b      	ldr	r3, [r7, #16]
 8000dbe:	881b      	ldrh	r3, [r3, #0]
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000dca:	605a      	str	r2, [r3, #4]

			//check for USART_ParityControl
			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE){
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	7b9b      	ldrb	r3, [r3, #14]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d106      	bne.n	8000de2 <USART_SendData+0x58>
				//No parity is used in this transfer. so, 9bits of user data will be sent
				//Implement the code to increment pTxBuffer twice
				pTxBuffer++;
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	60bb      	str	r3, [r7, #8]
				pTxBuffer++;
 8000dda:	68bb      	ldr	r3, [r7, #8]
 8000ddc:	3301      	adds	r3, #1
 8000dde:	60bb      	str	r3, [r7, #8]
 8000de0:	e00b      	b.n	8000dfa <USART_SendData+0x70>
			}else{
				//Parity bit is used in this transfer . so , 8bits of user data will be sent
				//The 9th bit will be replaced by parity bit by the hardware
				pTxBuffer++;
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	3301      	adds	r3, #1
 8000de6:	60bb      	str	r3, [r7, #8]
 8000de8:	e007      	b.n	8000dfa <USART_SendData+0x70>
			}
		}else{
			//This is 8bit data transfer
			pUSARTHandle->pUSARTx->DR = (*pTxBuffer  & (uint8_t)0xFF);
 8000dea:	68bb      	ldr	r3, [r7, #8]
 8000dec:	781a      	ldrb	r2, [r3, #0]
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	605a      	str	r2, [r3, #4]

			//Implement the code to increment the buffer address
			pTxBuffer++;
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	3301      	adds	r3, #1
 8000df8:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0 ; i < Len; i++){
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	617b      	str	r3, [r7, #20]
 8000e00:	697a      	ldr	r2, [r7, #20]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	d3c9      	bcc.n	8000d9c <USART_SendData+0x12>
		}
	}

	//Implement the code to wait till TC flag is set in the SR
	while( ! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TC));
 8000e08:	bf00      	nop
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	2140      	movs	r1, #64	; 0x40
 8000e10:	4618      	mov	r0, r3
 8000e12:	f000 fa6d 	bl	80012f0 <USART_GetFlagStatus>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d0f6      	beq.n	8000e0a <USART_SendData+0x80>

}
 8000e1c:	bf00      	nop
 8000e1e:	3718      	adds	r7, #24
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <USART_ReceiveDataIT>:
 * @return	          - Application event callback
 *
 * @Note    	      -

 */
uint8_t USART_ReceiveDataIT(USART_Handle_t *pUSARTHandle, uint8_t *pRxBuffer, uint32_t Len){
 8000e24:	b480      	push	{r7}
 8000e26:	b087      	sub	sp, #28
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	60f8      	str	r0, [r7, #12]
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	607a      	str	r2, [r7, #4]
	uint8_t rxstate = pUSARTHandle->RxBusyState;
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e36:	75fb      	strb	r3, [r7, #23]

	if(rxstate != USART_BUSY_IN_RX)
 8000e38:	7dfb      	ldrb	r3, [r7, #23]
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d011      	beq.n	8000e62 <USART_ReceiveDataIT+0x3e>
	{
		pUSARTHandle->RxLen = Len;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	687a      	ldr	r2, [r7, #4]
 8000e42:	61da      	str	r2, [r3, #28]
		pUSARTHandle->pRxBuffer = pRxBuffer;
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	68ba      	ldr	r2, [r7, #8]
 8000e48:	615a      	str	r2, [r3, #20]
		pUSARTHandle->RxBusyState = USART_BUSY_IN_RX;
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		//Implement the code to enable interrupt for RXNE
		pUSARTHandle->pUSARTx->CR1 |= (1 << USART_CR1_RXNEIE);
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	68da      	ldr	r2, [r3, #12]
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f042 0220 	orr.w	r2, r2, #32
 8000e60:	60da      	str	r2, [r3, #12]

	}

	return rxstate;
 8000e62:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	371c      	adds	r7, #28
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bc80      	pop	{r7}
 8000e6c:	4770      	bx	lr
	...

08000e70 <USART_IRQInterruptConfig>:
 * @return				- none
 *
 * @note				- none
 *
 */
void USART_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi){
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	460a      	mov	r2, r1
 8000e7a:	71fb      	strb	r3, [r7, #7]
 8000e7c:	4613      	mov	r3, r2
 8000e7e:	71bb      	strb	r3, [r7, #6]
	if(EnorDi == ENABLE){
 8000e80:	79bb      	ldrb	r3, [r7, #6]
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d133      	bne.n	8000eee <USART_IRQInterruptConfig+0x7e>
		if(IRQNumber <= 31){
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	2b1f      	cmp	r3, #31
 8000e8a:	d80a      	bhi.n	8000ea2 <USART_IRQInterruptConfig+0x32>
			*NVIC_ISER0 |= (1 << IRQNumber);
 8000e8c:	4b34      	ldr	r3, [pc, #208]	; (8000f60 <USART_IRQInterruptConfig+0xf0>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	79fa      	ldrb	r2, [r7, #7]
 8000e92:	2101      	movs	r1, #1
 8000e94:	fa01 f202 	lsl.w	r2, r1, r2
 8000e98:	4611      	mov	r1, r2
 8000e9a:	4a31      	ldr	r2, [pc, #196]	; (8000f60 <USART_IRQInterruptConfig+0xf0>)
 8000e9c:	430b      	orrs	r3, r1
 8000e9e:	6013      	str	r3, [r2, #0]
			*NVIC_ICER1 |= (1 << IRQNumber % 32);
		}else if(IRQNumber > 63 && IRQNumber < 96){
			*NVIC_ICER2 |= (1 << IRQNumber % 32);
		}
	}
}
 8000ea0:	e059      	b.n	8000f56 <USART_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber <= 63){
 8000ea2:	79fb      	ldrb	r3, [r7, #7]
 8000ea4:	2b1f      	cmp	r3, #31
 8000ea6:	d90f      	bls.n	8000ec8 <USART_IRQInterruptConfig+0x58>
 8000ea8:	79fb      	ldrb	r3, [r7, #7]
 8000eaa:	2b3f      	cmp	r3, #63	; 0x3f
 8000eac:	d80c      	bhi.n	8000ec8 <USART_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 8000eae:	4b2d      	ldr	r3, [pc, #180]	; (8000f64 <USART_IRQInterruptConfig+0xf4>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	79fa      	ldrb	r2, [r7, #7]
 8000eb4:	f002 021f 	and.w	r2, r2, #31
 8000eb8:	2101      	movs	r1, #1
 8000eba:	fa01 f202 	lsl.w	r2, r1, r2
 8000ebe:	4611      	mov	r1, r2
 8000ec0:	4a28      	ldr	r2, [pc, #160]	; (8000f64 <USART_IRQInterruptConfig+0xf4>)
 8000ec2:	430b      	orrs	r3, r1
 8000ec4:	6013      	str	r3, [r2, #0]
 8000ec6:	e046      	b.n	8000f56 <USART_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 63 && IRQNumber < 96){
 8000ec8:	79fb      	ldrb	r3, [r7, #7]
 8000eca:	2b3f      	cmp	r3, #63	; 0x3f
 8000ecc:	d943      	bls.n	8000f56 <USART_IRQInterruptConfig+0xe6>
 8000ece:	79fb      	ldrb	r3, [r7, #7]
 8000ed0:	2b5f      	cmp	r3, #95	; 0x5f
 8000ed2:	d840      	bhi.n	8000f56 <USART_IRQInterruptConfig+0xe6>
			*NVIC_ISER2 |= (1 << (IRQNumber % 32));
 8000ed4:	4b24      	ldr	r3, [pc, #144]	; (8000f68 <USART_IRQInterruptConfig+0xf8>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	79fa      	ldrb	r2, [r7, #7]
 8000eda:	f002 021f 	and.w	r2, r2, #31
 8000ede:	2101      	movs	r1, #1
 8000ee0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ee4:	4611      	mov	r1, r2
 8000ee6:	4a20      	ldr	r2, [pc, #128]	; (8000f68 <USART_IRQInterruptConfig+0xf8>)
 8000ee8:	430b      	orrs	r3, r1
 8000eea:	6013      	str	r3, [r2, #0]
}
 8000eec:	e033      	b.n	8000f56 <USART_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31){
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	2b1f      	cmp	r3, #31
 8000ef2:	d80a      	bhi.n	8000f0a <USART_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= (1 << IRQNumber);
 8000ef4:	4b1d      	ldr	r3, [pc, #116]	; (8000f6c <USART_IRQInterruptConfig+0xfc>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	79fa      	ldrb	r2, [r7, #7]
 8000efa:	2101      	movs	r1, #1
 8000efc:	fa01 f202 	lsl.w	r2, r1, r2
 8000f00:	4611      	mov	r1, r2
 8000f02:	4a1a      	ldr	r2, [pc, #104]	; (8000f6c <USART_IRQInterruptConfig+0xfc>)
 8000f04:	430b      	orrs	r3, r1
 8000f06:	6013      	str	r3, [r2, #0]
}
 8000f08:	e025      	b.n	8000f56 <USART_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber <= 63){
 8000f0a:	79fb      	ldrb	r3, [r7, #7]
 8000f0c:	2b1f      	cmp	r3, #31
 8000f0e:	d90f      	bls.n	8000f30 <USART_IRQInterruptConfig+0xc0>
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	2b3f      	cmp	r3, #63	; 0x3f
 8000f14:	d80c      	bhi.n	8000f30 <USART_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= (1 << IRQNumber % 32);
 8000f16:	4b16      	ldr	r3, [pc, #88]	; (8000f70 <USART_IRQInterruptConfig+0x100>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	79fa      	ldrb	r2, [r7, #7]
 8000f1c:	f002 021f 	and.w	r2, r2, #31
 8000f20:	2101      	movs	r1, #1
 8000f22:	fa01 f202 	lsl.w	r2, r1, r2
 8000f26:	4611      	mov	r1, r2
 8000f28:	4a11      	ldr	r2, [pc, #68]	; (8000f70 <USART_IRQInterruptConfig+0x100>)
 8000f2a:	430b      	orrs	r3, r1
 8000f2c:	6013      	str	r3, [r2, #0]
 8000f2e:	e012      	b.n	8000f56 <USART_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 63 && IRQNumber < 96){
 8000f30:	79fb      	ldrb	r3, [r7, #7]
 8000f32:	2b3f      	cmp	r3, #63	; 0x3f
 8000f34:	d90f      	bls.n	8000f56 <USART_IRQInterruptConfig+0xe6>
 8000f36:	79fb      	ldrb	r3, [r7, #7]
 8000f38:	2b5f      	cmp	r3, #95	; 0x5f
 8000f3a:	d80c      	bhi.n	8000f56 <USART_IRQInterruptConfig+0xe6>
			*NVIC_ICER2 |= (1 << IRQNumber % 32);
 8000f3c:	4b0d      	ldr	r3, [pc, #52]	; (8000f74 <USART_IRQInterruptConfig+0x104>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	79fa      	ldrb	r2, [r7, #7]
 8000f42:	f002 021f 	and.w	r2, r2, #31
 8000f46:	2101      	movs	r1, #1
 8000f48:	fa01 f202 	lsl.w	r2, r1, r2
 8000f4c:	4611      	mov	r1, r2
 8000f4e:	4a09      	ldr	r2, [pc, #36]	; (8000f74 <USART_IRQInterruptConfig+0x104>)
 8000f50:	430b      	orrs	r3, r1
 8000f52:	6013      	str	r3, [r2, #0]
}
 8000f54:	e7ff      	b.n	8000f56 <USART_IRQInterruptConfig+0xe6>
 8000f56:	bf00      	nop
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bc80      	pop	{r7}
 8000f5e:	4770      	bx	lr
 8000f60:	e000e100 	.word	0xe000e100
 8000f64:	e000e104 	.word	0xe000e104
 8000f68:	e000e108 	.word	0xe000e108
 8000f6c:	e000e180 	.word	0xe000e180
 8000f70:	e000e184 	.word	0xe000e184
 8000f74:	e000e188 	.word	0xe000e188

08000f78 <USART_IRQHandling>:
 * @return				- none
 *
 * @note				- none
 *
 */
void USART_IRQHandling(USART_Handle_t *pUSARTHandle){
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
	uint16_t *pdata;

/*************************Check for TC flag ********************************************/

    //Implement the code to check the state of TC bit in the SR
	usart_sr = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_TC);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f8a:	617b      	str	r3, [r7, #20]

	 //Implement the code to check the state of TCIE bit in CR1
	usart_cr1 = pUSARTHandle->pUSARTx->CR1 & ( 1 << USART_CR1_TCIE);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	68db      	ldr	r3, [r3, #12]
 8000f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f96:	613b      	str	r3, [r7, #16]

	if(usart_sr && usart_cr1 )
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d029      	beq.n	8000ff2 <USART_IRQHandling+0x7a>
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d026      	beq.n	8000ff2 <USART_IRQHandling+0x7a>
	{
		//this interrupt is because of TC

		//close transmission and call application callback if TxLen is zero
		if ( pUSARTHandle->TxBusyState == USART_BUSY_IN_TX)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000faa:	2b02      	cmp	r3, #2
 8000fac:	d121      	bne.n	8000ff2 <USART_IRQHandling+0x7a>
		{
			//Check the TxLen . If it is zero then close the data transmission
			if(! pUSARTHandle->TxLen )
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	699b      	ldr	r3, [r3, #24]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d11d      	bne.n	8000ff2 <USART_IRQHandling+0x7a>
			{
				//Implement the code to clear the TC flag
				pUSARTHandle->pUSARTx->SR &= ~( 1 << USART_SR_TC);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000fc4:	601a      	str	r2, [r3, #0]

				//Implement the code to clear the TCIE control bit
				pUSARTHandle->pUSARTx->CR1 &= ~(1 << USART_CR1_TCIE);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	68da      	ldr	r2, [r3, #12]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000fd4:	60da      	str	r2, [r3, #12]

				//Reset the application state
				pUSARTHandle->TxBusyState = USART_READY;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f883 2020 	strb.w	r2, [r3, #32]

				//Reset Buffer address to NULL
				pUSARTHandle->pTxBuffer = NULL;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	611a      	str	r2, [r3, #16]

				//Reset the length to zero
				pUSARTHandle->TxLen = 0;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	619a      	str	r2, [r3, #24]

				//Call the application call back with event USART_EVENT_TX_CMPLT
				USART_ApplicationEventCallback(pUSARTHandle, USART_EVENT_TX_CMPLT);
 8000fea:	2100      	movs	r1, #0
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f7ff fa4b 	bl	8000488 <USART_ApplicationEventCallback>
	}

/*************************Check for TXE flag ********************************************/

	//Implement the code to check the state of TXE bit in the SR
	usart_sr = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_TXE);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ffc:	617b      	str	r3, [r7, #20]

	//Implement the code to check the state of TXEIE bit in CR1
	usart_cr1 = pUSARTHandle->pUSARTx->CR1 & (1 << USART_CR1_TXEIE);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001008:	613b      	str	r3, [r7, #16]


	if(usart_sr && usart_cr1 )
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d055      	beq.n	80010bc <USART_IRQHandling+0x144>
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d052      	beq.n	80010bc <USART_IRQHandling+0x144>
	{
		//this interrupt is because of TXE

		if(pUSARTHandle->TxBusyState == USART_BUSY_IN_TX)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	f893 3020 	ldrb.w	r3, [r3, #32]
 800101c:	2b02      	cmp	r3, #2
 800101e:	d14d      	bne.n	80010bc <USART_IRQHandling+0x144>
		{
			//Keep sending data until Txlen reaches to zero
			if(pUSARTHandle->TxLen > 0)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	699b      	ldr	r3, [r3, #24]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d03d      	beq.n	80010a4 <USART_IRQHandling+0x12c>
			{
				//Check the USART_WordLength item for 9BIT or 8BIT in a frame
				if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	7b5b      	ldrb	r3, [r3, #13]
 800102c:	2b01      	cmp	r3, #1
 800102e:	d129      	bne.n	8001084 <USART_IRQHandling+0x10c>
				{
					//if 9BIT , load the DR with 2bytes masking the bits other than first 9 bits
					pdata = (uint16_t*) pUSARTHandle->pTxBuffer;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	691b      	ldr	r3, [r3, #16]
 8001034:	60fb      	str	r3, [r7, #12]

					//loading only first 9 bits , so we have to mask with the value 0x01FF
					pUSARTHandle->pUSARTx->DR = (*pdata & (uint16_t)0x01FF);
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	881b      	ldrh	r3, [r3, #0]
 800103a:	461a      	mov	r2, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001044:	605a      	str	r2, [r3, #4]

					//check for USART_ParityControl
					if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	7b9b      	ldrb	r3, [r3, #14]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d10f      	bne.n	800106e <USART_IRQHandling+0xf6>
					{
						//No parity is used in this transfer , so, 9bits of user data will be sent
						//Implement the code to increment pTxBuffer twice
						pUSARTHandle->pTxBuffer++;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	691b      	ldr	r3, [r3, #16]
 8001052:	1c5a      	adds	r2, r3, #1
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	611a      	str	r2, [r3, #16]
						pUSARTHandle->pTxBuffer++;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	691b      	ldr	r3, [r3, #16]
 800105c:	1c5a      	adds	r2, r3, #1
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	611a      	str	r2, [r3, #16]

						//Implement the code to decrement the length
						pUSARTHandle->TxLen -= 2;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	699b      	ldr	r3, [r3, #24]
 8001066:	1e9a      	subs	r2, r3, #2
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	619a      	str	r2, [r3, #24]
 800106c:	e01a      	b.n	80010a4 <USART_IRQHandling+0x12c>
					}
					else
					{
						//Parity bit is used in this transfer . so , 8bits of user data will be sent
						//The 9th bit will be replaced by parity bit by the hardware
						pUSARTHandle->pTxBuffer++;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	691b      	ldr	r3, [r3, #16]
 8001072:	1c5a      	adds	r2, r3, #1
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	611a      	str	r2, [r3, #16]

						//Implement the code to decrement the length
						pUSARTHandle->TxLen--;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	699b      	ldr	r3, [r3, #24]
 800107c:	1e5a      	subs	r2, r3, #1
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	619a      	str	r2, [r3, #24]
 8001082:	e00f      	b.n	80010a4 <USART_IRQHandling+0x12c>
					}
				}
				else
				{
					//This is 8bit data transfer
					pUSARTHandle->pUSARTx->DR = (*pUSARTHandle->pTxBuffer  & (uint8_t)0xFF);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	691b      	ldr	r3, [r3, #16]
 8001088:	781a      	ldrb	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	605a      	str	r2, [r3, #4]

					//Implement the code to increment the buffer address
					pUSARTHandle->pTxBuffer++;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	691b      	ldr	r3, [r3, #16]
 8001094:	1c5a      	adds	r2, r3, #1
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	611a      	str	r2, [r3, #16]

					//Implement the code to decrement the length
					pUSARTHandle->TxLen--;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	699b      	ldr	r3, [r3, #24]
 800109e:	1e5a      	subs	r2, r3, #1
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	619a      	str	r2, [r3, #24]
				}

			}
			if (pUSARTHandle->TxLen == 0 )
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d107      	bne.n	80010bc <USART_IRQHandling+0x144>
			{
				//TxLen is zero
				//Implement the code to clear the TXEIE bit (disable interrupt for TXE flag )
				pUSARTHandle->pUSARTx->CR1 &= (1 << USART_CR1_TXEIE);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	68da      	ldr	r2, [r3, #12]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80010ba:	60da      	str	r2, [r3, #12]
		}
	}

/*************************Check for RXNE flag ********************************************/

	usart_sr = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_RXNE);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f003 0320 	and.w	r3, r3, #32
 80010c6:	617b      	str	r3, [r7, #20]
	usart_cr1 = pUSARTHandle->pUSARTx->CR1 & ( 1 << USART_CR1_RXNEIE);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	68db      	ldr	r3, [r3, #12]
 80010ce:	f003 0320 	and.w	r3, r3, #32
 80010d2:	613b      	str	r3, [r7, #16]


	if(usart_sr && usart_cr1 )
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d073      	beq.n	80011c2 <USART_IRQHandling+0x24a>
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d070      	beq.n	80011c2 <USART_IRQHandling+0x24a>
	{
		//this interrupt is because of rxne
		if(pUSARTHandle->RxBusyState == USART_BUSY_IN_RX)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d16b      	bne.n	80011c2 <USART_IRQHandling+0x24a>
		{
			//TXE is set so send data
			if(pUSARTHandle->RxLen > 0)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	69db      	ldr	r3, [r3, #28]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d053      	beq.n	800119a <USART_IRQHandling+0x222>
			{
				//Check the USART_WordLength to decide whether we are going to receive 9bit of data in a frame or 8 bit
				if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	7b5b      	ldrb	r3, [r3, #13]
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d12f      	bne.n	800115a <USART_IRQHandling+0x1e2>
				{
					//We are going to receive 9bit data in a frame

					//Now, check are we using USART_ParityControl control or not
					if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	7b9b      	ldrb	r3, [r3, #14]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d119      	bne.n	8001136 <USART_IRQHandling+0x1be>
					{
						//No parity is used. so, all 9bits will be of user data

						//read only first 9 bits so mask the DR with 0x01FF
						*((uint16_t*) pUSARTHandle->pRxBuffer) = (pUSARTHandle->pUSARTx->DR  & (uint16_t)0x01FF);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	b29a      	uxth	r2, r3
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	695b      	ldr	r3, [r3, #20]
 800110e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001112:	b292      	uxth	r2, r2
 8001114:	801a      	strh	r2, [r3, #0]

						//Now increment the pRxBuffer two times
						pUSARTHandle->pRxBuffer++;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	695b      	ldr	r3, [r3, #20]
 800111a:	1c5a      	adds	r2, r3, #1
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	615a      	str	r2, [r3, #20]
						pUSARTHandle->pRxBuffer++;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	695b      	ldr	r3, [r3, #20]
 8001124:	1c5a      	adds	r2, r3, #1
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	615a      	str	r2, [r3, #20]

						//Implement the code to decrement the length
						pUSARTHandle->RxLen -= 2;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	69db      	ldr	r3, [r3, #28]
 800112e:	1e9a      	subs	r2, r3, #2
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	61da      	str	r2, [r3, #28]
 8001134:	e031      	b.n	800119a <USART_IRQHandling+0x222>
					}
					else
					{
						//Parity is used. so, 8bits will be of user data and 1 bit is parity
						 *pUSARTHandle->pRxBuffer = (pUSARTHandle->pUSARTx->DR  & (uint8_t)0xFF);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	685a      	ldr	r2, [r3, #4]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	695b      	ldr	r3, [r3, #20]
 8001140:	b2d2      	uxtb	r2, r2
 8001142:	701a      	strb	r2, [r3, #0]

						 //Now increment the pRxBuffer
						 pUSARTHandle->pRxBuffer++;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	695b      	ldr	r3, [r3, #20]
 8001148:	1c5a      	adds	r2, r3, #1
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	615a      	str	r2, [r3, #20]

						 //Implement the code to decrement the length
						 pUSARTHandle->RxLen--;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	69db      	ldr	r3, [r3, #28]
 8001152:	1e5a      	subs	r2, r3, #1
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	61da      	str	r2, [r3, #28]
 8001158:	e01f      	b.n	800119a <USART_IRQHandling+0x222>
				else
				{
					//We are going to receive 8bit data in a frame

					//Now, check are we using USART_ParityControl control or not
					if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	7b9b      	ldrb	r3, [r3, #14]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d107      	bne.n	8001172 <USART_IRQHandling+0x1fa>
					{
						//No parity is used , so all 8bits will be of user data

						//read 8 bits from DR
						 *pUSARTHandle->pRxBuffer = (uint8_t) (pUSARTHandle->pUSARTx->DR  & (uint8_t)0xFF);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	685a      	ldr	r2, [r3, #4]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	695b      	ldr	r3, [r3, #20]
 800116c:	b2d2      	uxtb	r2, r2
 800116e:	701a      	strb	r2, [r3, #0]
 8001170:	e009      	b.n	8001186 <USART_IRQHandling+0x20e>
					else
					{
						//Parity is used, so , 7 bits will be of user data and 1 bit is parity

						//read only 7 bits , hence mask the DR with 0X7F
						 *pUSARTHandle->pRxBuffer = (uint8_t) (pUSARTHandle->pUSARTx->DR  & (uint8_t)0x7F);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	b2da      	uxtb	r2, r3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	695b      	ldr	r3, [r3, #20]
 800117e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001182:	b2d2      	uxtb	r2, r2
 8001184:	701a      	strb	r2, [r3, #0]

					}

					//Now , increment the pRxBuffer
					pUSARTHandle->pRxBuffer++;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	695b      	ldr	r3, [r3, #20]
 800118a:	1c5a      	adds	r2, r3, #1
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	615a      	str	r2, [r3, #20]

					//Implement the code to decrement the length
					pUSARTHandle->RxLen--;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	69db      	ldr	r3, [r3, #28]
 8001194:	1e5a      	subs	r2, r3, #1
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	61da      	str	r2, [r3, #28]
				}


			}//if of >0

			if(! pUSARTHandle->RxLen)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	69db      	ldr	r3, [r3, #28]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d10f      	bne.n	80011c2 <USART_IRQHandling+0x24a>
			{
				//disable the rxne
				pUSARTHandle->pUSARTx->CR1 &= ~( 1 << USART_CR1_RXNEIE );
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	68da      	ldr	r2, [r3, #12]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f022 0220 	bic.w	r2, r2, #32
 80011b0:	60da      	str	r2, [r3, #12]
				pUSARTHandle->RxBusyState = USART_READY;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2200      	movs	r2, #0
 80011b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				USART_ApplicationEventCallback(pUSARTHandle, USART_EVENT_RX_CMPLT);
 80011ba:	2101      	movs	r1, #1
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f7ff f963 	bl	8000488 <USART_ApplicationEventCallback>

/*************************Check for CTS flag ********************************************/
//Note : CTS feature is not applicable for UART4 and UART5

	//Implement the code to check the status of CTS bit in the SR
	usart_sr = pUSARTHandle->pUSARTx->SR & (1 << USART_SR_CTS);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011cc:	617b      	str	r3, [r7, #20]

	//Implement the code to check the state of CTSE bit in CR1
	usart_cr3 = pUSARTHandle->pUSARTx->CR3 & ( 1 << USART_CR3_CTSE);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	695b      	ldr	r3, [r3, #20]
 80011d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011d8:	60bb      	str	r3, [r7, #8]

	//Implement the code to check the state of CTSIE bit in CR3 (This bit is not available for UART4 & UART5.)
	//temp3 = pUSARTHandle->pUSARTx->CR3 & ( 1 << USART_CR3_CTSIE);


	if(usart_sr  && usart_cr3 )
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d00e      	beq.n	80011fe <USART_IRQHandling+0x286>
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d00b      	beq.n	80011fe <USART_IRQHandling+0x286>
	{
		//Implement the code to clear the CTS flag in SR
		pUSARTHandle->pUSARTx->SR &= ~(1 << USART_SR_CTS);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80011f4:	601a      	str	r2, [r3, #0]

		//this interrupt is because of cts
		USART_ApplicationEventCallback(pUSARTHandle, USART_EVENT_CTS);
 80011f6:	2103      	movs	r1, #3
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f7ff f945 	bl	8000488 <USART_ApplicationEventCallback>
	}

/*************************Check for IDLE detection flag ********************************************/

	//Implement the code to check the status of IDLE flag bit in the SR
	usart_sr = pUSARTHandle->pUSARTx->SR & (1 << USART_SR_IDLE);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f003 0310 	and.w	r3, r3, #16
 8001208:	617b      	str	r3, [r7, #20]

	//Implement the code to check the state of IDLEIE bit in CR3
	usart_cr3 = pUSARTHandle->pUSARTx->CR3 & ( 1 << USART_CR3_CTSE);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	695b      	ldr	r3, [r3, #20]
 8001210:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001214:	60bb      	str	r3, [r7, #8]


	if(usart_sr && usart_cr3)
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d00e      	beq.n	800123a <USART_IRQHandling+0x2c2>
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d00b      	beq.n	800123a <USART_IRQHandling+0x2c2>
	{
		//Implement the code to clear the IDLE flag. Refer to the RM to understand the clear sequence
		pUSARTHandle->pUSARTx->SR &= (1 << USART_SR_IDLE);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f002 0210 	and.w	r2, r2, #16
 8001230:	601a      	str	r2, [r3, #0]
		//this interrupt is because of idle
		USART_ApplicationEventCallback(pUSARTHandle, USART_EVENT_IDLE);
 8001232:	2102      	movs	r1, #2
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f7ff f927 	bl	8000488 <USART_ApplicationEventCallback>
	}

/*************************Check for Overrun detection flag ********************************************/

	//Implement the code to check the status of ORE flag  in the SR
	usart_sr = pUSARTHandle->pUSARTx->SR & USART_SR_ORE;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f003 0303 	and.w	r3, r3, #3
 8001244:	617b      	str	r3, [r7, #20]

	//Implement the code to check the status of RXNEIE  bit in the CR1
	usart_cr1 = pUSARTHandle->pUSARTx->CR1 & USART_CR1_RXNEIE;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	f003 0305 	and.w	r3, r3, #5
 8001250:	613b      	str	r3, [r7, #16]


	if(usart_sr  && usart_cr1 )
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d00b      	beq.n	8001270 <USART_IRQHandling+0x2f8>
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d008      	beq.n	8001270 <USART_IRQHandling+0x2f8>
	{
		//Need not to clear the ORE flag here, instead give an api for the application to clear the ORE flag .
		USART_ClearOREFlag(pUSARTHandle->pUSARTx);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff fc5e 	bl	8000b24 <USART_ClearOREFlag>
		//this interrupt is because of Overrun error
		USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_ORE);
 8001268:	2107      	movs	r1, #7
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f7ff f90c 	bl	8000488 <USART_ApplicationEventCallback>

//Noise Flag, Overrun error and Framing Error in multibuffer communication
//We dont discuss multibuffer communication in this course. please refer to the RM
//The blow code will get executed in only if multibuffer mode is used.

	usart_cr3 =  pUSARTHandle->pUSARTx->CR3 & ( 1 << USART_CR3_EIE) ;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	695b      	ldr	r3, [r3, #20]
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	60bb      	str	r3, [r7, #8]

	if(usart_cr3 )
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d01e      	beq.n	80012c0 <USART_IRQHandling+0x348>
	{
		usart_sr = pUSARTHandle->pUSARTx->SR;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	617b      	str	r3, [r7, #20]
		if(usart_sr & ( 1 << USART_SR_FE))
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	f003 0302 	and.w	r3, r3, #2
 8001290:	2b00      	cmp	r3, #0
 8001292:	d003      	beq.n	800129c <USART_IRQHandling+0x324>
			/*
				This bit is set by hardware when a de-synchronization, excessive noise or a break character
				is detected. It is cleared by a software sequence (an read to the USART_SR register
				followed by a read to the USART_DR register).
			*/
			USART_ApplicationEventCallback(pUSARTHandle, USART_ERR_FE);
 8001294:	2105      	movs	r1, #5
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f7ff f8f6 	bl	8000488 <USART_ApplicationEventCallback>
		}

		if(usart_sr & ( 1 << USART_SR_NF) )
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	f003 0304 	and.w	r3, r3, #4
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d003      	beq.n	80012ae <USART_IRQHandling+0x336>
			/*
				This bit is set by hardware when noise is detected on a received frame. It is cleared by a
				software sequence (an read to the USART_SR register followed by a read to the
				USART_DR register).
			*/
			USART_ApplicationEventCallback(pUSARTHandle, USART_ERR_NE);
 80012a6:	2106      	movs	r1, #6
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f7ff f8ed 	bl	8000488 <USART_ApplicationEventCallback>
		}

		if(usart_sr & ( 1 << USART_SR_ORE) )
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	f003 0308 	and.w	r3, r3, #8
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d003      	beq.n	80012c0 <USART_IRQHandling+0x348>
		{
			USART_ApplicationEventCallback(pUSARTHandle, USART_ERR_ORE);
 80012b8:	2107      	movs	r1, #7
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f7ff f8e4 	bl	8000488 <USART_ApplicationEventCallback>
		}
	}

}
 80012c0:	bf00      	nop
 80012c2:	3718      	adds	r7, #24
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <USART_PeripheralControl>:
 * @return				- none
 *
 * @note				- none
 *
 */
void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t EnOrDi){
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	460b      	mov	r3, r1
 80012d2:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE){
 80012d4:	78fb      	ldrb	r3, [r7, #3]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d105      	bne.n	80012e6 <USART_PeripheralControl+0x1e>
		pUSARTx->CR1 |= (1 << USART_CR1_UE);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	68db      	ldr	r3, [r3, #12]
 80012de:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	60da      	str	r2, [r3, #12]
	} else {

	}
}
 80012e6:	bf00      	nop
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bc80      	pop	{r7}
 80012ee:	4770      	bx	lr

080012f0 <USART_GetFlagStatus>:
 * @return				- Flag status (1 or 0)
 *
 * @note				- none
 *
 */
uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx , uint32_t FlagName){
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	6039      	str	r1, [r7, #0]
	if(pUSARTx->SR & FlagName){
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	4013      	ands	r3, r2
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <USART_GetFlagStatus+0x1a>
		return FLAG_SET;
 8001306:	2301      	movs	r3, #1
 8001308:	e000      	b.n	800130c <USART_GetFlagStatus+0x1c>
	}

	return FLAG_RESET;
 800130a:	2300      	movs	r3, #0
}
 800130c:	4618      	mov	r0, r3
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	bc80      	pop	{r7}
 8001314:	4770      	bx	lr
	...

08001318 <USART_SetBaudRate>:
 *
 * @Note              -  Resolve all the TODOs

 */
void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t BaudRate)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b088      	sub	sp, #32
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	6039      	str	r1, [r7, #0]
	uint32_t usartdiv;

	//variables to hold Mantissa and Fraction values
	uint32_t M_part, F_part;

  uint32_t usart_brr = 0;
 8001322:	2300      	movs	r3, #0
 8001324:	613b      	str	r3, [r7, #16]

  //Get the value of APB bus clock in to the variable PCLKx
  if(pUSARTx == USART1 || pUSARTx == USART6)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a31      	ldr	r2, [pc, #196]	; (80013f0 <USART_SetBaudRate+0xd8>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d003      	beq.n	8001336 <USART_SetBaudRate+0x1e>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a30      	ldr	r2, [pc, #192]	; (80013f4 <USART_SetBaudRate+0xdc>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d103      	bne.n	800133e <USART_SetBaudRate+0x26>
  {
	   //USART1 and USART6 are hanging on APB2 bus
	   PCLKx = RCC_GetPCLK2Value();
 8001336:	f7ff fb73 	bl	8000a20 <RCC_GetPCLK2Value>
 800133a:	61f8      	str	r0, [r7, #28]
 800133c:	e002      	b.n	8001344 <USART_SetBaudRate+0x2c>
  }else
  {
	   PCLKx = RCC_GetPCLK1Value();
 800133e:	f7ff faed 	bl	800091c <RCC_GetPCLK1Value>
 8001342:	61f8      	str	r0, [r7, #28]
  }

  //Check for OVER8 configuration bit
  if(pUSARTx->CR1 & (1 << USART_CR1_OVER8))
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800134c:	2b00      	cmp	r3, #0
 800134e:	d00b      	beq.n	8001368 <USART_SetBaudRate+0x50>
  {
	   //OVER8 = 1 , over sampling by 8
	   usartdiv = ((25 * PCLKx) / (2 *BaudRate));
 8001350:	69fa      	ldr	r2, [r7, #28]
 8001352:	4613      	mov	r3, r2
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	4413      	add	r3, r2
 8001358:	009a      	lsls	r2, r3, #2
 800135a:	441a      	add	r2, r3
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	fbb2 f3f3 	udiv	r3, r2, r3
 8001364:	61bb      	str	r3, [r7, #24]
 8001366:	e00a      	b.n	800137e <USART_SetBaudRate+0x66>
  }else
  {
	   //over sampling by 16
	   usartdiv = ((25 * PCLKx) / (4 * BaudRate));
 8001368:	69fa      	ldr	r2, [r7, #28]
 800136a:	4613      	mov	r3, r2
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	4413      	add	r3, r2
 8001370:	009a      	lsls	r2, r3, #2
 8001372:	441a      	add	r2, r3
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	fbb2 f3f3 	udiv	r3, r2, r3
 800137c:	61bb      	str	r3, [r7, #24]
  }

  //Calculate the Mantissa part
  M_part = usartdiv/100;
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	4a1d      	ldr	r2, [pc, #116]	; (80013f8 <USART_SetBaudRate+0xe0>)
 8001382:	fba2 2303 	umull	r2, r3, r2, r3
 8001386:	095b      	lsrs	r3, r3, #5
 8001388:	60fb      	str	r3, [r7, #12]

  //Place the Mantissa part in appropriate bit position . refer USART_BRR
  usart_brr |= M_part << 4;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	011b      	lsls	r3, r3, #4
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	4313      	orrs	r3, r2
 8001392:	613b      	str	r3, [r7, #16]

  //Extract the fraction part
  F_part = (usartdiv - (M_part * 100));
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	2264      	movs	r2, #100	; 0x64
 8001398:	fb02 f303 	mul.w	r3, r2, r3
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	617b      	str	r3, [r7, #20]

  //Calculate the final fractional
  if(pUSARTx->CR1 & ( 1 << USART_CR1_OVER8))
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	68db      	ldr	r3, [r3, #12]
 80013a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d00a      	beq.n	80013c4 <USART_SetBaudRate+0xac>
   {
	  //OVER8 = 1 , over sampling by 8
	  F_part = ((( F_part * 8)+ 50) / 100)& ((uint8_t)0x07);
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	00db      	lsls	r3, r3, #3
 80013b2:	3332      	adds	r3, #50	; 0x32
 80013b4:	4a10      	ldr	r2, [pc, #64]	; (80013f8 <USART_SetBaudRate+0xe0>)
 80013b6:	fba2 2303 	umull	r2, r3, r2, r3
 80013ba:	095b      	lsrs	r3, r3, #5
 80013bc:	f003 0307 	and.w	r3, r3, #7
 80013c0:	617b      	str	r3, [r7, #20]
 80013c2:	e009      	b.n	80013d8 <USART_SetBaudRate+0xc0>

   }else
   {
	   //over sampling by 16
	   F_part = ((( F_part * 16)+ 50) / 100) & ((uint8_t)0x0F);
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	011b      	lsls	r3, r3, #4
 80013c8:	3332      	adds	r3, #50	; 0x32
 80013ca:	4a0b      	ldr	r2, [pc, #44]	; (80013f8 <USART_SetBaudRate+0xe0>)
 80013cc:	fba2 2303 	umull	r2, r3, r2, r3
 80013d0:	095b      	lsrs	r3, r3, #5
 80013d2:	f003 030f 	and.w	r3, r3, #15
 80013d6:	617b      	str	r3, [r7, #20]

   }

  //Place the fractional part in appropriate bit position . refer USART_BRR
  usart_brr |= F_part << 0;
 80013d8:	693a      	ldr	r2, [r7, #16]
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	4313      	orrs	r3, r2
 80013de:	613b      	str	r3, [r7, #16]

  //copy the value of tempreg in to BRR register
  pUSARTx->BRR = usart_brr;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	609a      	str	r2, [r3, #8]
}
 80013e6:	bf00      	nop
 80013e8:	3720      	adds	r7, #32
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40011000 	.word	0x40011000
 80013f4:	40011400 	.word	0x40011400
 80013f8:	51eb851f 	.word	0x51eb851f

080013fc <__errno>:
 80013fc:	4b01      	ldr	r3, [pc, #4]	; (8001404 <__errno+0x8>)
 80013fe:	6818      	ldr	r0, [r3, #0]
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	2000000c 	.word	0x2000000c

08001408 <__libc_init_array>:
 8001408:	b570      	push	{r4, r5, r6, lr}
 800140a:	4e0d      	ldr	r6, [pc, #52]	; (8001440 <__libc_init_array+0x38>)
 800140c:	4c0d      	ldr	r4, [pc, #52]	; (8001444 <__libc_init_array+0x3c>)
 800140e:	1ba4      	subs	r4, r4, r6
 8001410:	10a4      	asrs	r4, r4, #2
 8001412:	2500      	movs	r5, #0
 8001414:	42a5      	cmp	r5, r4
 8001416:	d109      	bne.n	800142c <__libc_init_array+0x24>
 8001418:	4e0b      	ldr	r6, [pc, #44]	; (8001448 <__libc_init_array+0x40>)
 800141a:	4c0c      	ldr	r4, [pc, #48]	; (800144c <__libc_init_array+0x44>)
 800141c:	f000 ff96 	bl	800234c <_init>
 8001420:	1ba4      	subs	r4, r4, r6
 8001422:	10a4      	asrs	r4, r4, #2
 8001424:	2500      	movs	r5, #0
 8001426:	42a5      	cmp	r5, r4
 8001428:	d105      	bne.n	8001436 <__libc_init_array+0x2e>
 800142a:	bd70      	pop	{r4, r5, r6, pc}
 800142c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001430:	4798      	blx	r3
 8001432:	3501      	adds	r5, #1
 8001434:	e7ee      	b.n	8001414 <__libc_init_array+0xc>
 8001436:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800143a:	4798      	blx	r3
 800143c:	3501      	adds	r5, #1
 800143e:	e7f2      	b.n	8001426 <__libc_init_array+0x1e>
 8001440:	08002474 	.word	0x08002474
 8001444:	08002474 	.word	0x08002474
 8001448:	08002474 	.word	0x08002474
 800144c:	08002478 	.word	0x08002478

08001450 <memset>:
 8001450:	4402      	add	r2, r0
 8001452:	4603      	mov	r3, r0
 8001454:	4293      	cmp	r3, r2
 8001456:	d100      	bne.n	800145a <memset+0xa>
 8001458:	4770      	bx	lr
 800145a:	f803 1b01 	strb.w	r1, [r3], #1
 800145e:	e7f9      	b.n	8001454 <memset+0x4>

08001460 <iprintf>:
 8001460:	b40f      	push	{r0, r1, r2, r3}
 8001462:	4b0a      	ldr	r3, [pc, #40]	; (800148c <iprintf+0x2c>)
 8001464:	b513      	push	{r0, r1, r4, lr}
 8001466:	681c      	ldr	r4, [r3, #0]
 8001468:	b124      	cbz	r4, 8001474 <iprintf+0x14>
 800146a:	69a3      	ldr	r3, [r4, #24]
 800146c:	b913      	cbnz	r3, 8001474 <iprintf+0x14>
 800146e:	4620      	mov	r0, r4
 8001470:	f000 fa22 	bl	80018b8 <__sinit>
 8001474:	ab05      	add	r3, sp, #20
 8001476:	9a04      	ldr	r2, [sp, #16]
 8001478:	68a1      	ldr	r1, [r4, #8]
 800147a:	9301      	str	r3, [sp, #4]
 800147c:	4620      	mov	r0, r4
 800147e:	f000 fbd9 	bl	8001c34 <_vfiprintf_r>
 8001482:	b002      	add	sp, #8
 8001484:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001488:	b004      	add	sp, #16
 800148a:	4770      	bx	lr
 800148c:	2000000c 	.word	0x2000000c

08001490 <_puts_r>:
 8001490:	b570      	push	{r4, r5, r6, lr}
 8001492:	460e      	mov	r6, r1
 8001494:	4605      	mov	r5, r0
 8001496:	b118      	cbz	r0, 80014a0 <_puts_r+0x10>
 8001498:	6983      	ldr	r3, [r0, #24]
 800149a:	b90b      	cbnz	r3, 80014a0 <_puts_r+0x10>
 800149c:	f000 fa0c 	bl	80018b8 <__sinit>
 80014a0:	69ab      	ldr	r3, [r5, #24]
 80014a2:	68ac      	ldr	r4, [r5, #8]
 80014a4:	b913      	cbnz	r3, 80014ac <_puts_r+0x1c>
 80014a6:	4628      	mov	r0, r5
 80014a8:	f000 fa06 	bl	80018b8 <__sinit>
 80014ac:	4b23      	ldr	r3, [pc, #140]	; (800153c <_puts_r+0xac>)
 80014ae:	429c      	cmp	r4, r3
 80014b0:	d117      	bne.n	80014e2 <_puts_r+0x52>
 80014b2:	686c      	ldr	r4, [r5, #4]
 80014b4:	89a3      	ldrh	r3, [r4, #12]
 80014b6:	071b      	lsls	r3, r3, #28
 80014b8:	d51d      	bpl.n	80014f6 <_puts_r+0x66>
 80014ba:	6923      	ldr	r3, [r4, #16]
 80014bc:	b1db      	cbz	r3, 80014f6 <_puts_r+0x66>
 80014be:	3e01      	subs	r6, #1
 80014c0:	68a3      	ldr	r3, [r4, #8]
 80014c2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80014c6:	3b01      	subs	r3, #1
 80014c8:	60a3      	str	r3, [r4, #8]
 80014ca:	b9e9      	cbnz	r1, 8001508 <_puts_r+0x78>
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	da2e      	bge.n	800152e <_puts_r+0x9e>
 80014d0:	4622      	mov	r2, r4
 80014d2:	210a      	movs	r1, #10
 80014d4:	4628      	mov	r0, r5
 80014d6:	f000 f83f 	bl	8001558 <__swbuf_r>
 80014da:	3001      	adds	r0, #1
 80014dc:	d011      	beq.n	8001502 <_puts_r+0x72>
 80014de:	200a      	movs	r0, #10
 80014e0:	e011      	b.n	8001506 <_puts_r+0x76>
 80014e2:	4b17      	ldr	r3, [pc, #92]	; (8001540 <_puts_r+0xb0>)
 80014e4:	429c      	cmp	r4, r3
 80014e6:	d101      	bne.n	80014ec <_puts_r+0x5c>
 80014e8:	68ac      	ldr	r4, [r5, #8]
 80014ea:	e7e3      	b.n	80014b4 <_puts_r+0x24>
 80014ec:	4b15      	ldr	r3, [pc, #84]	; (8001544 <_puts_r+0xb4>)
 80014ee:	429c      	cmp	r4, r3
 80014f0:	bf08      	it	eq
 80014f2:	68ec      	ldreq	r4, [r5, #12]
 80014f4:	e7de      	b.n	80014b4 <_puts_r+0x24>
 80014f6:	4621      	mov	r1, r4
 80014f8:	4628      	mov	r0, r5
 80014fa:	f000 f87f 	bl	80015fc <__swsetup_r>
 80014fe:	2800      	cmp	r0, #0
 8001500:	d0dd      	beq.n	80014be <_puts_r+0x2e>
 8001502:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001506:	bd70      	pop	{r4, r5, r6, pc}
 8001508:	2b00      	cmp	r3, #0
 800150a:	da04      	bge.n	8001516 <_puts_r+0x86>
 800150c:	69a2      	ldr	r2, [r4, #24]
 800150e:	429a      	cmp	r2, r3
 8001510:	dc06      	bgt.n	8001520 <_puts_r+0x90>
 8001512:	290a      	cmp	r1, #10
 8001514:	d004      	beq.n	8001520 <_puts_r+0x90>
 8001516:	6823      	ldr	r3, [r4, #0]
 8001518:	1c5a      	adds	r2, r3, #1
 800151a:	6022      	str	r2, [r4, #0]
 800151c:	7019      	strb	r1, [r3, #0]
 800151e:	e7cf      	b.n	80014c0 <_puts_r+0x30>
 8001520:	4622      	mov	r2, r4
 8001522:	4628      	mov	r0, r5
 8001524:	f000 f818 	bl	8001558 <__swbuf_r>
 8001528:	3001      	adds	r0, #1
 800152a:	d1c9      	bne.n	80014c0 <_puts_r+0x30>
 800152c:	e7e9      	b.n	8001502 <_puts_r+0x72>
 800152e:	6823      	ldr	r3, [r4, #0]
 8001530:	200a      	movs	r0, #10
 8001532:	1c5a      	adds	r2, r3, #1
 8001534:	6022      	str	r2, [r4, #0]
 8001536:	7018      	strb	r0, [r3, #0]
 8001538:	e7e5      	b.n	8001506 <_puts_r+0x76>
 800153a:	bf00      	nop
 800153c:	08002400 	.word	0x08002400
 8001540:	08002420 	.word	0x08002420
 8001544:	080023e0 	.word	0x080023e0

08001548 <puts>:
 8001548:	4b02      	ldr	r3, [pc, #8]	; (8001554 <puts+0xc>)
 800154a:	4601      	mov	r1, r0
 800154c:	6818      	ldr	r0, [r3, #0]
 800154e:	f7ff bf9f 	b.w	8001490 <_puts_r>
 8001552:	bf00      	nop
 8001554:	2000000c 	.word	0x2000000c

08001558 <__swbuf_r>:
 8001558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800155a:	460e      	mov	r6, r1
 800155c:	4614      	mov	r4, r2
 800155e:	4605      	mov	r5, r0
 8001560:	b118      	cbz	r0, 800156a <__swbuf_r+0x12>
 8001562:	6983      	ldr	r3, [r0, #24]
 8001564:	b90b      	cbnz	r3, 800156a <__swbuf_r+0x12>
 8001566:	f000 f9a7 	bl	80018b8 <__sinit>
 800156a:	4b21      	ldr	r3, [pc, #132]	; (80015f0 <__swbuf_r+0x98>)
 800156c:	429c      	cmp	r4, r3
 800156e:	d12a      	bne.n	80015c6 <__swbuf_r+0x6e>
 8001570:	686c      	ldr	r4, [r5, #4]
 8001572:	69a3      	ldr	r3, [r4, #24]
 8001574:	60a3      	str	r3, [r4, #8]
 8001576:	89a3      	ldrh	r3, [r4, #12]
 8001578:	071a      	lsls	r2, r3, #28
 800157a:	d52e      	bpl.n	80015da <__swbuf_r+0x82>
 800157c:	6923      	ldr	r3, [r4, #16]
 800157e:	b363      	cbz	r3, 80015da <__swbuf_r+0x82>
 8001580:	6923      	ldr	r3, [r4, #16]
 8001582:	6820      	ldr	r0, [r4, #0]
 8001584:	1ac0      	subs	r0, r0, r3
 8001586:	6963      	ldr	r3, [r4, #20]
 8001588:	b2f6      	uxtb	r6, r6
 800158a:	4283      	cmp	r3, r0
 800158c:	4637      	mov	r7, r6
 800158e:	dc04      	bgt.n	800159a <__swbuf_r+0x42>
 8001590:	4621      	mov	r1, r4
 8001592:	4628      	mov	r0, r5
 8001594:	f000 f926 	bl	80017e4 <_fflush_r>
 8001598:	bb28      	cbnz	r0, 80015e6 <__swbuf_r+0x8e>
 800159a:	68a3      	ldr	r3, [r4, #8]
 800159c:	3b01      	subs	r3, #1
 800159e:	60a3      	str	r3, [r4, #8]
 80015a0:	6823      	ldr	r3, [r4, #0]
 80015a2:	1c5a      	adds	r2, r3, #1
 80015a4:	6022      	str	r2, [r4, #0]
 80015a6:	701e      	strb	r6, [r3, #0]
 80015a8:	6963      	ldr	r3, [r4, #20]
 80015aa:	3001      	adds	r0, #1
 80015ac:	4283      	cmp	r3, r0
 80015ae:	d004      	beq.n	80015ba <__swbuf_r+0x62>
 80015b0:	89a3      	ldrh	r3, [r4, #12]
 80015b2:	07db      	lsls	r3, r3, #31
 80015b4:	d519      	bpl.n	80015ea <__swbuf_r+0x92>
 80015b6:	2e0a      	cmp	r6, #10
 80015b8:	d117      	bne.n	80015ea <__swbuf_r+0x92>
 80015ba:	4621      	mov	r1, r4
 80015bc:	4628      	mov	r0, r5
 80015be:	f000 f911 	bl	80017e4 <_fflush_r>
 80015c2:	b190      	cbz	r0, 80015ea <__swbuf_r+0x92>
 80015c4:	e00f      	b.n	80015e6 <__swbuf_r+0x8e>
 80015c6:	4b0b      	ldr	r3, [pc, #44]	; (80015f4 <__swbuf_r+0x9c>)
 80015c8:	429c      	cmp	r4, r3
 80015ca:	d101      	bne.n	80015d0 <__swbuf_r+0x78>
 80015cc:	68ac      	ldr	r4, [r5, #8]
 80015ce:	e7d0      	b.n	8001572 <__swbuf_r+0x1a>
 80015d0:	4b09      	ldr	r3, [pc, #36]	; (80015f8 <__swbuf_r+0xa0>)
 80015d2:	429c      	cmp	r4, r3
 80015d4:	bf08      	it	eq
 80015d6:	68ec      	ldreq	r4, [r5, #12]
 80015d8:	e7cb      	b.n	8001572 <__swbuf_r+0x1a>
 80015da:	4621      	mov	r1, r4
 80015dc:	4628      	mov	r0, r5
 80015de:	f000 f80d 	bl	80015fc <__swsetup_r>
 80015e2:	2800      	cmp	r0, #0
 80015e4:	d0cc      	beq.n	8001580 <__swbuf_r+0x28>
 80015e6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80015ea:	4638      	mov	r0, r7
 80015ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80015ee:	bf00      	nop
 80015f0:	08002400 	.word	0x08002400
 80015f4:	08002420 	.word	0x08002420
 80015f8:	080023e0 	.word	0x080023e0

080015fc <__swsetup_r>:
 80015fc:	4b32      	ldr	r3, [pc, #200]	; (80016c8 <__swsetup_r+0xcc>)
 80015fe:	b570      	push	{r4, r5, r6, lr}
 8001600:	681d      	ldr	r5, [r3, #0]
 8001602:	4606      	mov	r6, r0
 8001604:	460c      	mov	r4, r1
 8001606:	b125      	cbz	r5, 8001612 <__swsetup_r+0x16>
 8001608:	69ab      	ldr	r3, [r5, #24]
 800160a:	b913      	cbnz	r3, 8001612 <__swsetup_r+0x16>
 800160c:	4628      	mov	r0, r5
 800160e:	f000 f953 	bl	80018b8 <__sinit>
 8001612:	4b2e      	ldr	r3, [pc, #184]	; (80016cc <__swsetup_r+0xd0>)
 8001614:	429c      	cmp	r4, r3
 8001616:	d10f      	bne.n	8001638 <__swsetup_r+0x3c>
 8001618:	686c      	ldr	r4, [r5, #4]
 800161a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800161e:	b29a      	uxth	r2, r3
 8001620:	0715      	lsls	r5, r2, #28
 8001622:	d42c      	bmi.n	800167e <__swsetup_r+0x82>
 8001624:	06d0      	lsls	r0, r2, #27
 8001626:	d411      	bmi.n	800164c <__swsetup_r+0x50>
 8001628:	2209      	movs	r2, #9
 800162a:	6032      	str	r2, [r6, #0]
 800162c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001630:	81a3      	strh	r3, [r4, #12]
 8001632:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001636:	e03e      	b.n	80016b6 <__swsetup_r+0xba>
 8001638:	4b25      	ldr	r3, [pc, #148]	; (80016d0 <__swsetup_r+0xd4>)
 800163a:	429c      	cmp	r4, r3
 800163c:	d101      	bne.n	8001642 <__swsetup_r+0x46>
 800163e:	68ac      	ldr	r4, [r5, #8]
 8001640:	e7eb      	b.n	800161a <__swsetup_r+0x1e>
 8001642:	4b24      	ldr	r3, [pc, #144]	; (80016d4 <__swsetup_r+0xd8>)
 8001644:	429c      	cmp	r4, r3
 8001646:	bf08      	it	eq
 8001648:	68ec      	ldreq	r4, [r5, #12]
 800164a:	e7e6      	b.n	800161a <__swsetup_r+0x1e>
 800164c:	0751      	lsls	r1, r2, #29
 800164e:	d512      	bpl.n	8001676 <__swsetup_r+0x7a>
 8001650:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001652:	b141      	cbz	r1, 8001666 <__swsetup_r+0x6a>
 8001654:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001658:	4299      	cmp	r1, r3
 800165a:	d002      	beq.n	8001662 <__swsetup_r+0x66>
 800165c:	4630      	mov	r0, r6
 800165e:	f000 fa19 	bl	8001a94 <_free_r>
 8001662:	2300      	movs	r3, #0
 8001664:	6363      	str	r3, [r4, #52]	; 0x34
 8001666:	89a3      	ldrh	r3, [r4, #12]
 8001668:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800166c:	81a3      	strh	r3, [r4, #12]
 800166e:	2300      	movs	r3, #0
 8001670:	6063      	str	r3, [r4, #4]
 8001672:	6923      	ldr	r3, [r4, #16]
 8001674:	6023      	str	r3, [r4, #0]
 8001676:	89a3      	ldrh	r3, [r4, #12]
 8001678:	f043 0308 	orr.w	r3, r3, #8
 800167c:	81a3      	strh	r3, [r4, #12]
 800167e:	6923      	ldr	r3, [r4, #16]
 8001680:	b94b      	cbnz	r3, 8001696 <__swsetup_r+0x9a>
 8001682:	89a3      	ldrh	r3, [r4, #12]
 8001684:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001688:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800168c:	d003      	beq.n	8001696 <__swsetup_r+0x9a>
 800168e:	4621      	mov	r1, r4
 8001690:	4630      	mov	r0, r6
 8001692:	f000 f9bf 	bl	8001a14 <__smakebuf_r>
 8001696:	89a2      	ldrh	r2, [r4, #12]
 8001698:	f012 0301 	ands.w	r3, r2, #1
 800169c:	d00c      	beq.n	80016b8 <__swsetup_r+0xbc>
 800169e:	2300      	movs	r3, #0
 80016a0:	60a3      	str	r3, [r4, #8]
 80016a2:	6963      	ldr	r3, [r4, #20]
 80016a4:	425b      	negs	r3, r3
 80016a6:	61a3      	str	r3, [r4, #24]
 80016a8:	6923      	ldr	r3, [r4, #16]
 80016aa:	b953      	cbnz	r3, 80016c2 <__swsetup_r+0xc6>
 80016ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80016b0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80016b4:	d1ba      	bne.n	800162c <__swsetup_r+0x30>
 80016b6:	bd70      	pop	{r4, r5, r6, pc}
 80016b8:	0792      	lsls	r2, r2, #30
 80016ba:	bf58      	it	pl
 80016bc:	6963      	ldrpl	r3, [r4, #20]
 80016be:	60a3      	str	r3, [r4, #8]
 80016c0:	e7f2      	b.n	80016a8 <__swsetup_r+0xac>
 80016c2:	2000      	movs	r0, #0
 80016c4:	e7f7      	b.n	80016b6 <__swsetup_r+0xba>
 80016c6:	bf00      	nop
 80016c8:	2000000c 	.word	0x2000000c
 80016cc:	08002400 	.word	0x08002400
 80016d0:	08002420 	.word	0x08002420
 80016d4:	080023e0 	.word	0x080023e0

080016d8 <__sflush_r>:
 80016d8:	898a      	ldrh	r2, [r1, #12]
 80016da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016de:	4605      	mov	r5, r0
 80016e0:	0710      	lsls	r0, r2, #28
 80016e2:	460c      	mov	r4, r1
 80016e4:	d458      	bmi.n	8001798 <__sflush_r+0xc0>
 80016e6:	684b      	ldr	r3, [r1, #4]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	dc05      	bgt.n	80016f8 <__sflush_r+0x20>
 80016ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	dc02      	bgt.n	80016f8 <__sflush_r+0x20>
 80016f2:	2000      	movs	r0, #0
 80016f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80016f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80016fa:	2e00      	cmp	r6, #0
 80016fc:	d0f9      	beq.n	80016f2 <__sflush_r+0x1a>
 80016fe:	2300      	movs	r3, #0
 8001700:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001704:	682f      	ldr	r7, [r5, #0]
 8001706:	6a21      	ldr	r1, [r4, #32]
 8001708:	602b      	str	r3, [r5, #0]
 800170a:	d032      	beq.n	8001772 <__sflush_r+0x9a>
 800170c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800170e:	89a3      	ldrh	r3, [r4, #12]
 8001710:	075a      	lsls	r2, r3, #29
 8001712:	d505      	bpl.n	8001720 <__sflush_r+0x48>
 8001714:	6863      	ldr	r3, [r4, #4]
 8001716:	1ac0      	subs	r0, r0, r3
 8001718:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800171a:	b10b      	cbz	r3, 8001720 <__sflush_r+0x48>
 800171c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800171e:	1ac0      	subs	r0, r0, r3
 8001720:	2300      	movs	r3, #0
 8001722:	4602      	mov	r2, r0
 8001724:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001726:	6a21      	ldr	r1, [r4, #32]
 8001728:	4628      	mov	r0, r5
 800172a:	47b0      	blx	r6
 800172c:	1c43      	adds	r3, r0, #1
 800172e:	89a3      	ldrh	r3, [r4, #12]
 8001730:	d106      	bne.n	8001740 <__sflush_r+0x68>
 8001732:	6829      	ldr	r1, [r5, #0]
 8001734:	291d      	cmp	r1, #29
 8001736:	d848      	bhi.n	80017ca <__sflush_r+0xf2>
 8001738:	4a29      	ldr	r2, [pc, #164]	; (80017e0 <__sflush_r+0x108>)
 800173a:	40ca      	lsrs	r2, r1
 800173c:	07d6      	lsls	r6, r2, #31
 800173e:	d544      	bpl.n	80017ca <__sflush_r+0xf2>
 8001740:	2200      	movs	r2, #0
 8001742:	6062      	str	r2, [r4, #4]
 8001744:	04d9      	lsls	r1, r3, #19
 8001746:	6922      	ldr	r2, [r4, #16]
 8001748:	6022      	str	r2, [r4, #0]
 800174a:	d504      	bpl.n	8001756 <__sflush_r+0x7e>
 800174c:	1c42      	adds	r2, r0, #1
 800174e:	d101      	bne.n	8001754 <__sflush_r+0x7c>
 8001750:	682b      	ldr	r3, [r5, #0]
 8001752:	b903      	cbnz	r3, 8001756 <__sflush_r+0x7e>
 8001754:	6560      	str	r0, [r4, #84]	; 0x54
 8001756:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001758:	602f      	str	r7, [r5, #0]
 800175a:	2900      	cmp	r1, #0
 800175c:	d0c9      	beq.n	80016f2 <__sflush_r+0x1a>
 800175e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001762:	4299      	cmp	r1, r3
 8001764:	d002      	beq.n	800176c <__sflush_r+0x94>
 8001766:	4628      	mov	r0, r5
 8001768:	f000 f994 	bl	8001a94 <_free_r>
 800176c:	2000      	movs	r0, #0
 800176e:	6360      	str	r0, [r4, #52]	; 0x34
 8001770:	e7c0      	b.n	80016f4 <__sflush_r+0x1c>
 8001772:	2301      	movs	r3, #1
 8001774:	4628      	mov	r0, r5
 8001776:	47b0      	blx	r6
 8001778:	1c41      	adds	r1, r0, #1
 800177a:	d1c8      	bne.n	800170e <__sflush_r+0x36>
 800177c:	682b      	ldr	r3, [r5, #0]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d0c5      	beq.n	800170e <__sflush_r+0x36>
 8001782:	2b1d      	cmp	r3, #29
 8001784:	d001      	beq.n	800178a <__sflush_r+0xb2>
 8001786:	2b16      	cmp	r3, #22
 8001788:	d101      	bne.n	800178e <__sflush_r+0xb6>
 800178a:	602f      	str	r7, [r5, #0]
 800178c:	e7b1      	b.n	80016f2 <__sflush_r+0x1a>
 800178e:	89a3      	ldrh	r3, [r4, #12]
 8001790:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001794:	81a3      	strh	r3, [r4, #12]
 8001796:	e7ad      	b.n	80016f4 <__sflush_r+0x1c>
 8001798:	690f      	ldr	r7, [r1, #16]
 800179a:	2f00      	cmp	r7, #0
 800179c:	d0a9      	beq.n	80016f2 <__sflush_r+0x1a>
 800179e:	0793      	lsls	r3, r2, #30
 80017a0:	680e      	ldr	r6, [r1, #0]
 80017a2:	bf08      	it	eq
 80017a4:	694b      	ldreq	r3, [r1, #20]
 80017a6:	600f      	str	r7, [r1, #0]
 80017a8:	bf18      	it	ne
 80017aa:	2300      	movne	r3, #0
 80017ac:	eba6 0807 	sub.w	r8, r6, r7
 80017b0:	608b      	str	r3, [r1, #8]
 80017b2:	f1b8 0f00 	cmp.w	r8, #0
 80017b6:	dd9c      	ble.n	80016f2 <__sflush_r+0x1a>
 80017b8:	4643      	mov	r3, r8
 80017ba:	463a      	mov	r2, r7
 80017bc:	6a21      	ldr	r1, [r4, #32]
 80017be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80017c0:	4628      	mov	r0, r5
 80017c2:	47b0      	blx	r6
 80017c4:	2800      	cmp	r0, #0
 80017c6:	dc06      	bgt.n	80017d6 <__sflush_r+0xfe>
 80017c8:	89a3      	ldrh	r3, [r4, #12]
 80017ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017ce:	81a3      	strh	r3, [r4, #12]
 80017d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017d4:	e78e      	b.n	80016f4 <__sflush_r+0x1c>
 80017d6:	4407      	add	r7, r0
 80017d8:	eba8 0800 	sub.w	r8, r8, r0
 80017dc:	e7e9      	b.n	80017b2 <__sflush_r+0xda>
 80017de:	bf00      	nop
 80017e0:	20400001 	.word	0x20400001

080017e4 <_fflush_r>:
 80017e4:	b538      	push	{r3, r4, r5, lr}
 80017e6:	690b      	ldr	r3, [r1, #16]
 80017e8:	4605      	mov	r5, r0
 80017ea:	460c      	mov	r4, r1
 80017ec:	b1db      	cbz	r3, 8001826 <_fflush_r+0x42>
 80017ee:	b118      	cbz	r0, 80017f8 <_fflush_r+0x14>
 80017f0:	6983      	ldr	r3, [r0, #24]
 80017f2:	b90b      	cbnz	r3, 80017f8 <_fflush_r+0x14>
 80017f4:	f000 f860 	bl	80018b8 <__sinit>
 80017f8:	4b0c      	ldr	r3, [pc, #48]	; (800182c <_fflush_r+0x48>)
 80017fa:	429c      	cmp	r4, r3
 80017fc:	d109      	bne.n	8001812 <_fflush_r+0x2e>
 80017fe:	686c      	ldr	r4, [r5, #4]
 8001800:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001804:	b17b      	cbz	r3, 8001826 <_fflush_r+0x42>
 8001806:	4621      	mov	r1, r4
 8001808:	4628      	mov	r0, r5
 800180a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800180e:	f7ff bf63 	b.w	80016d8 <__sflush_r>
 8001812:	4b07      	ldr	r3, [pc, #28]	; (8001830 <_fflush_r+0x4c>)
 8001814:	429c      	cmp	r4, r3
 8001816:	d101      	bne.n	800181c <_fflush_r+0x38>
 8001818:	68ac      	ldr	r4, [r5, #8]
 800181a:	e7f1      	b.n	8001800 <_fflush_r+0x1c>
 800181c:	4b05      	ldr	r3, [pc, #20]	; (8001834 <_fflush_r+0x50>)
 800181e:	429c      	cmp	r4, r3
 8001820:	bf08      	it	eq
 8001822:	68ec      	ldreq	r4, [r5, #12]
 8001824:	e7ec      	b.n	8001800 <_fflush_r+0x1c>
 8001826:	2000      	movs	r0, #0
 8001828:	bd38      	pop	{r3, r4, r5, pc}
 800182a:	bf00      	nop
 800182c:	08002400 	.word	0x08002400
 8001830:	08002420 	.word	0x08002420
 8001834:	080023e0 	.word	0x080023e0

08001838 <std>:
 8001838:	2300      	movs	r3, #0
 800183a:	b510      	push	{r4, lr}
 800183c:	4604      	mov	r4, r0
 800183e:	e9c0 3300 	strd	r3, r3, [r0]
 8001842:	6083      	str	r3, [r0, #8]
 8001844:	8181      	strh	r1, [r0, #12]
 8001846:	6643      	str	r3, [r0, #100]	; 0x64
 8001848:	81c2      	strh	r2, [r0, #14]
 800184a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800184e:	6183      	str	r3, [r0, #24]
 8001850:	4619      	mov	r1, r3
 8001852:	2208      	movs	r2, #8
 8001854:	305c      	adds	r0, #92	; 0x5c
 8001856:	f7ff fdfb 	bl	8001450 <memset>
 800185a:	4b05      	ldr	r3, [pc, #20]	; (8001870 <std+0x38>)
 800185c:	6263      	str	r3, [r4, #36]	; 0x24
 800185e:	4b05      	ldr	r3, [pc, #20]	; (8001874 <std+0x3c>)
 8001860:	62a3      	str	r3, [r4, #40]	; 0x28
 8001862:	4b05      	ldr	r3, [pc, #20]	; (8001878 <std+0x40>)
 8001864:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001866:	4b05      	ldr	r3, [pc, #20]	; (800187c <std+0x44>)
 8001868:	6224      	str	r4, [r4, #32]
 800186a:	6323      	str	r3, [r4, #48]	; 0x30
 800186c:	bd10      	pop	{r4, pc}
 800186e:	bf00      	nop
 8001870:	08002191 	.word	0x08002191
 8001874:	080021b3 	.word	0x080021b3
 8001878:	080021eb 	.word	0x080021eb
 800187c:	0800220f 	.word	0x0800220f

08001880 <_cleanup_r>:
 8001880:	4901      	ldr	r1, [pc, #4]	; (8001888 <_cleanup_r+0x8>)
 8001882:	f000 b885 	b.w	8001990 <_fwalk_reent>
 8001886:	bf00      	nop
 8001888:	080017e5 	.word	0x080017e5

0800188c <__sfmoreglue>:
 800188c:	b570      	push	{r4, r5, r6, lr}
 800188e:	1e4a      	subs	r2, r1, #1
 8001890:	2568      	movs	r5, #104	; 0x68
 8001892:	4355      	muls	r5, r2
 8001894:	460e      	mov	r6, r1
 8001896:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800189a:	f000 f949 	bl	8001b30 <_malloc_r>
 800189e:	4604      	mov	r4, r0
 80018a0:	b140      	cbz	r0, 80018b4 <__sfmoreglue+0x28>
 80018a2:	2100      	movs	r1, #0
 80018a4:	e9c0 1600 	strd	r1, r6, [r0]
 80018a8:	300c      	adds	r0, #12
 80018aa:	60a0      	str	r0, [r4, #8]
 80018ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80018b0:	f7ff fdce 	bl	8001450 <memset>
 80018b4:	4620      	mov	r0, r4
 80018b6:	bd70      	pop	{r4, r5, r6, pc}

080018b8 <__sinit>:
 80018b8:	6983      	ldr	r3, [r0, #24]
 80018ba:	b510      	push	{r4, lr}
 80018bc:	4604      	mov	r4, r0
 80018be:	bb33      	cbnz	r3, 800190e <__sinit+0x56>
 80018c0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80018c4:	6503      	str	r3, [r0, #80]	; 0x50
 80018c6:	4b12      	ldr	r3, [pc, #72]	; (8001910 <__sinit+0x58>)
 80018c8:	4a12      	ldr	r2, [pc, #72]	; (8001914 <__sinit+0x5c>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	6282      	str	r2, [r0, #40]	; 0x28
 80018ce:	4298      	cmp	r0, r3
 80018d0:	bf04      	itt	eq
 80018d2:	2301      	moveq	r3, #1
 80018d4:	6183      	streq	r3, [r0, #24]
 80018d6:	f000 f81f 	bl	8001918 <__sfp>
 80018da:	6060      	str	r0, [r4, #4]
 80018dc:	4620      	mov	r0, r4
 80018de:	f000 f81b 	bl	8001918 <__sfp>
 80018e2:	60a0      	str	r0, [r4, #8]
 80018e4:	4620      	mov	r0, r4
 80018e6:	f000 f817 	bl	8001918 <__sfp>
 80018ea:	2200      	movs	r2, #0
 80018ec:	60e0      	str	r0, [r4, #12]
 80018ee:	2104      	movs	r1, #4
 80018f0:	6860      	ldr	r0, [r4, #4]
 80018f2:	f7ff ffa1 	bl	8001838 <std>
 80018f6:	2201      	movs	r2, #1
 80018f8:	2109      	movs	r1, #9
 80018fa:	68a0      	ldr	r0, [r4, #8]
 80018fc:	f7ff ff9c 	bl	8001838 <std>
 8001900:	2202      	movs	r2, #2
 8001902:	2112      	movs	r1, #18
 8001904:	68e0      	ldr	r0, [r4, #12]
 8001906:	f7ff ff97 	bl	8001838 <std>
 800190a:	2301      	movs	r3, #1
 800190c:	61a3      	str	r3, [r4, #24]
 800190e:	bd10      	pop	{r4, pc}
 8001910:	080023dc 	.word	0x080023dc
 8001914:	08001881 	.word	0x08001881

08001918 <__sfp>:
 8001918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800191a:	4b1b      	ldr	r3, [pc, #108]	; (8001988 <__sfp+0x70>)
 800191c:	681e      	ldr	r6, [r3, #0]
 800191e:	69b3      	ldr	r3, [r6, #24]
 8001920:	4607      	mov	r7, r0
 8001922:	b913      	cbnz	r3, 800192a <__sfp+0x12>
 8001924:	4630      	mov	r0, r6
 8001926:	f7ff ffc7 	bl	80018b8 <__sinit>
 800192a:	3648      	adds	r6, #72	; 0x48
 800192c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001930:	3b01      	subs	r3, #1
 8001932:	d503      	bpl.n	800193c <__sfp+0x24>
 8001934:	6833      	ldr	r3, [r6, #0]
 8001936:	b133      	cbz	r3, 8001946 <__sfp+0x2e>
 8001938:	6836      	ldr	r6, [r6, #0]
 800193a:	e7f7      	b.n	800192c <__sfp+0x14>
 800193c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001940:	b16d      	cbz	r5, 800195e <__sfp+0x46>
 8001942:	3468      	adds	r4, #104	; 0x68
 8001944:	e7f4      	b.n	8001930 <__sfp+0x18>
 8001946:	2104      	movs	r1, #4
 8001948:	4638      	mov	r0, r7
 800194a:	f7ff ff9f 	bl	800188c <__sfmoreglue>
 800194e:	6030      	str	r0, [r6, #0]
 8001950:	2800      	cmp	r0, #0
 8001952:	d1f1      	bne.n	8001938 <__sfp+0x20>
 8001954:	230c      	movs	r3, #12
 8001956:	603b      	str	r3, [r7, #0]
 8001958:	4604      	mov	r4, r0
 800195a:	4620      	mov	r0, r4
 800195c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800195e:	4b0b      	ldr	r3, [pc, #44]	; (800198c <__sfp+0x74>)
 8001960:	6665      	str	r5, [r4, #100]	; 0x64
 8001962:	e9c4 5500 	strd	r5, r5, [r4]
 8001966:	60a5      	str	r5, [r4, #8]
 8001968:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800196c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8001970:	2208      	movs	r2, #8
 8001972:	4629      	mov	r1, r5
 8001974:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001978:	f7ff fd6a 	bl	8001450 <memset>
 800197c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001980:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001984:	e7e9      	b.n	800195a <__sfp+0x42>
 8001986:	bf00      	nop
 8001988:	080023dc 	.word	0x080023dc
 800198c:	ffff0001 	.word	0xffff0001

08001990 <_fwalk_reent>:
 8001990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001994:	4680      	mov	r8, r0
 8001996:	4689      	mov	r9, r1
 8001998:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800199c:	2600      	movs	r6, #0
 800199e:	b914      	cbnz	r4, 80019a6 <_fwalk_reent+0x16>
 80019a0:	4630      	mov	r0, r6
 80019a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80019a6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80019aa:	3f01      	subs	r7, #1
 80019ac:	d501      	bpl.n	80019b2 <_fwalk_reent+0x22>
 80019ae:	6824      	ldr	r4, [r4, #0]
 80019b0:	e7f5      	b.n	800199e <_fwalk_reent+0xe>
 80019b2:	89ab      	ldrh	r3, [r5, #12]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d907      	bls.n	80019c8 <_fwalk_reent+0x38>
 80019b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80019bc:	3301      	adds	r3, #1
 80019be:	d003      	beq.n	80019c8 <_fwalk_reent+0x38>
 80019c0:	4629      	mov	r1, r5
 80019c2:	4640      	mov	r0, r8
 80019c4:	47c8      	blx	r9
 80019c6:	4306      	orrs	r6, r0
 80019c8:	3568      	adds	r5, #104	; 0x68
 80019ca:	e7ee      	b.n	80019aa <_fwalk_reent+0x1a>

080019cc <__swhatbuf_r>:
 80019cc:	b570      	push	{r4, r5, r6, lr}
 80019ce:	460e      	mov	r6, r1
 80019d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80019d4:	2900      	cmp	r1, #0
 80019d6:	b096      	sub	sp, #88	; 0x58
 80019d8:	4614      	mov	r4, r2
 80019da:	461d      	mov	r5, r3
 80019dc:	da07      	bge.n	80019ee <__swhatbuf_r+0x22>
 80019de:	2300      	movs	r3, #0
 80019e0:	602b      	str	r3, [r5, #0]
 80019e2:	89b3      	ldrh	r3, [r6, #12]
 80019e4:	061a      	lsls	r2, r3, #24
 80019e6:	d410      	bmi.n	8001a0a <__swhatbuf_r+0x3e>
 80019e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019ec:	e00e      	b.n	8001a0c <__swhatbuf_r+0x40>
 80019ee:	466a      	mov	r2, sp
 80019f0:	f000 fc34 	bl	800225c <_fstat_r>
 80019f4:	2800      	cmp	r0, #0
 80019f6:	dbf2      	blt.n	80019de <__swhatbuf_r+0x12>
 80019f8:	9a01      	ldr	r2, [sp, #4]
 80019fa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80019fe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001a02:	425a      	negs	r2, r3
 8001a04:	415a      	adcs	r2, r3
 8001a06:	602a      	str	r2, [r5, #0]
 8001a08:	e7ee      	b.n	80019e8 <__swhatbuf_r+0x1c>
 8001a0a:	2340      	movs	r3, #64	; 0x40
 8001a0c:	2000      	movs	r0, #0
 8001a0e:	6023      	str	r3, [r4, #0]
 8001a10:	b016      	add	sp, #88	; 0x58
 8001a12:	bd70      	pop	{r4, r5, r6, pc}

08001a14 <__smakebuf_r>:
 8001a14:	898b      	ldrh	r3, [r1, #12]
 8001a16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001a18:	079d      	lsls	r5, r3, #30
 8001a1a:	4606      	mov	r6, r0
 8001a1c:	460c      	mov	r4, r1
 8001a1e:	d507      	bpl.n	8001a30 <__smakebuf_r+0x1c>
 8001a20:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001a24:	6023      	str	r3, [r4, #0]
 8001a26:	6123      	str	r3, [r4, #16]
 8001a28:	2301      	movs	r3, #1
 8001a2a:	6163      	str	r3, [r4, #20]
 8001a2c:	b002      	add	sp, #8
 8001a2e:	bd70      	pop	{r4, r5, r6, pc}
 8001a30:	ab01      	add	r3, sp, #4
 8001a32:	466a      	mov	r2, sp
 8001a34:	f7ff ffca 	bl	80019cc <__swhatbuf_r>
 8001a38:	9900      	ldr	r1, [sp, #0]
 8001a3a:	4605      	mov	r5, r0
 8001a3c:	4630      	mov	r0, r6
 8001a3e:	f000 f877 	bl	8001b30 <_malloc_r>
 8001a42:	b948      	cbnz	r0, 8001a58 <__smakebuf_r+0x44>
 8001a44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001a48:	059a      	lsls	r2, r3, #22
 8001a4a:	d4ef      	bmi.n	8001a2c <__smakebuf_r+0x18>
 8001a4c:	f023 0303 	bic.w	r3, r3, #3
 8001a50:	f043 0302 	orr.w	r3, r3, #2
 8001a54:	81a3      	strh	r3, [r4, #12]
 8001a56:	e7e3      	b.n	8001a20 <__smakebuf_r+0xc>
 8001a58:	4b0d      	ldr	r3, [pc, #52]	; (8001a90 <__smakebuf_r+0x7c>)
 8001a5a:	62b3      	str	r3, [r6, #40]	; 0x28
 8001a5c:	89a3      	ldrh	r3, [r4, #12]
 8001a5e:	6020      	str	r0, [r4, #0]
 8001a60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a64:	81a3      	strh	r3, [r4, #12]
 8001a66:	9b00      	ldr	r3, [sp, #0]
 8001a68:	6163      	str	r3, [r4, #20]
 8001a6a:	9b01      	ldr	r3, [sp, #4]
 8001a6c:	6120      	str	r0, [r4, #16]
 8001a6e:	b15b      	cbz	r3, 8001a88 <__smakebuf_r+0x74>
 8001a70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001a74:	4630      	mov	r0, r6
 8001a76:	f000 fc03 	bl	8002280 <_isatty_r>
 8001a7a:	b128      	cbz	r0, 8001a88 <__smakebuf_r+0x74>
 8001a7c:	89a3      	ldrh	r3, [r4, #12]
 8001a7e:	f023 0303 	bic.w	r3, r3, #3
 8001a82:	f043 0301 	orr.w	r3, r3, #1
 8001a86:	81a3      	strh	r3, [r4, #12]
 8001a88:	89a3      	ldrh	r3, [r4, #12]
 8001a8a:	431d      	orrs	r5, r3
 8001a8c:	81a5      	strh	r5, [r4, #12]
 8001a8e:	e7cd      	b.n	8001a2c <__smakebuf_r+0x18>
 8001a90:	08001881 	.word	0x08001881

08001a94 <_free_r>:
 8001a94:	b538      	push	{r3, r4, r5, lr}
 8001a96:	4605      	mov	r5, r0
 8001a98:	2900      	cmp	r1, #0
 8001a9a:	d045      	beq.n	8001b28 <_free_r+0x94>
 8001a9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001aa0:	1f0c      	subs	r4, r1, #4
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	bfb8      	it	lt
 8001aa6:	18e4      	addlt	r4, r4, r3
 8001aa8:	f000 fc0c 	bl	80022c4 <__malloc_lock>
 8001aac:	4a1f      	ldr	r2, [pc, #124]	; (8001b2c <_free_r+0x98>)
 8001aae:	6813      	ldr	r3, [r2, #0]
 8001ab0:	4610      	mov	r0, r2
 8001ab2:	b933      	cbnz	r3, 8001ac2 <_free_r+0x2e>
 8001ab4:	6063      	str	r3, [r4, #4]
 8001ab6:	6014      	str	r4, [r2, #0]
 8001ab8:	4628      	mov	r0, r5
 8001aba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001abe:	f000 bc02 	b.w	80022c6 <__malloc_unlock>
 8001ac2:	42a3      	cmp	r3, r4
 8001ac4:	d90c      	bls.n	8001ae0 <_free_r+0x4c>
 8001ac6:	6821      	ldr	r1, [r4, #0]
 8001ac8:	1862      	adds	r2, r4, r1
 8001aca:	4293      	cmp	r3, r2
 8001acc:	bf04      	itt	eq
 8001ace:	681a      	ldreq	r2, [r3, #0]
 8001ad0:	685b      	ldreq	r3, [r3, #4]
 8001ad2:	6063      	str	r3, [r4, #4]
 8001ad4:	bf04      	itt	eq
 8001ad6:	1852      	addeq	r2, r2, r1
 8001ad8:	6022      	streq	r2, [r4, #0]
 8001ada:	6004      	str	r4, [r0, #0]
 8001adc:	e7ec      	b.n	8001ab8 <_free_r+0x24>
 8001ade:	4613      	mov	r3, r2
 8001ae0:	685a      	ldr	r2, [r3, #4]
 8001ae2:	b10a      	cbz	r2, 8001ae8 <_free_r+0x54>
 8001ae4:	42a2      	cmp	r2, r4
 8001ae6:	d9fa      	bls.n	8001ade <_free_r+0x4a>
 8001ae8:	6819      	ldr	r1, [r3, #0]
 8001aea:	1858      	adds	r0, r3, r1
 8001aec:	42a0      	cmp	r0, r4
 8001aee:	d10b      	bne.n	8001b08 <_free_r+0x74>
 8001af0:	6820      	ldr	r0, [r4, #0]
 8001af2:	4401      	add	r1, r0
 8001af4:	1858      	adds	r0, r3, r1
 8001af6:	4282      	cmp	r2, r0
 8001af8:	6019      	str	r1, [r3, #0]
 8001afa:	d1dd      	bne.n	8001ab8 <_free_r+0x24>
 8001afc:	6810      	ldr	r0, [r2, #0]
 8001afe:	6852      	ldr	r2, [r2, #4]
 8001b00:	605a      	str	r2, [r3, #4]
 8001b02:	4401      	add	r1, r0
 8001b04:	6019      	str	r1, [r3, #0]
 8001b06:	e7d7      	b.n	8001ab8 <_free_r+0x24>
 8001b08:	d902      	bls.n	8001b10 <_free_r+0x7c>
 8001b0a:	230c      	movs	r3, #12
 8001b0c:	602b      	str	r3, [r5, #0]
 8001b0e:	e7d3      	b.n	8001ab8 <_free_r+0x24>
 8001b10:	6820      	ldr	r0, [r4, #0]
 8001b12:	1821      	adds	r1, r4, r0
 8001b14:	428a      	cmp	r2, r1
 8001b16:	bf04      	itt	eq
 8001b18:	6811      	ldreq	r1, [r2, #0]
 8001b1a:	6852      	ldreq	r2, [r2, #4]
 8001b1c:	6062      	str	r2, [r4, #4]
 8001b1e:	bf04      	itt	eq
 8001b20:	1809      	addeq	r1, r1, r0
 8001b22:	6021      	streq	r1, [r4, #0]
 8001b24:	605c      	str	r4, [r3, #4]
 8001b26:	e7c7      	b.n	8001ab8 <_free_r+0x24>
 8001b28:	bd38      	pop	{r3, r4, r5, pc}
 8001b2a:	bf00      	nop
 8001b2c:	20000094 	.word	0x20000094

08001b30 <_malloc_r>:
 8001b30:	b570      	push	{r4, r5, r6, lr}
 8001b32:	1ccd      	adds	r5, r1, #3
 8001b34:	f025 0503 	bic.w	r5, r5, #3
 8001b38:	3508      	adds	r5, #8
 8001b3a:	2d0c      	cmp	r5, #12
 8001b3c:	bf38      	it	cc
 8001b3e:	250c      	movcc	r5, #12
 8001b40:	2d00      	cmp	r5, #0
 8001b42:	4606      	mov	r6, r0
 8001b44:	db01      	blt.n	8001b4a <_malloc_r+0x1a>
 8001b46:	42a9      	cmp	r1, r5
 8001b48:	d903      	bls.n	8001b52 <_malloc_r+0x22>
 8001b4a:	230c      	movs	r3, #12
 8001b4c:	6033      	str	r3, [r6, #0]
 8001b4e:	2000      	movs	r0, #0
 8001b50:	bd70      	pop	{r4, r5, r6, pc}
 8001b52:	f000 fbb7 	bl	80022c4 <__malloc_lock>
 8001b56:	4a21      	ldr	r2, [pc, #132]	; (8001bdc <_malloc_r+0xac>)
 8001b58:	6814      	ldr	r4, [r2, #0]
 8001b5a:	4621      	mov	r1, r4
 8001b5c:	b991      	cbnz	r1, 8001b84 <_malloc_r+0x54>
 8001b5e:	4c20      	ldr	r4, [pc, #128]	; (8001be0 <_malloc_r+0xb0>)
 8001b60:	6823      	ldr	r3, [r4, #0]
 8001b62:	b91b      	cbnz	r3, 8001b6c <_malloc_r+0x3c>
 8001b64:	4630      	mov	r0, r6
 8001b66:	f000 fb03 	bl	8002170 <_sbrk_r>
 8001b6a:	6020      	str	r0, [r4, #0]
 8001b6c:	4629      	mov	r1, r5
 8001b6e:	4630      	mov	r0, r6
 8001b70:	f000 fafe 	bl	8002170 <_sbrk_r>
 8001b74:	1c43      	adds	r3, r0, #1
 8001b76:	d124      	bne.n	8001bc2 <_malloc_r+0x92>
 8001b78:	230c      	movs	r3, #12
 8001b7a:	6033      	str	r3, [r6, #0]
 8001b7c:	4630      	mov	r0, r6
 8001b7e:	f000 fba2 	bl	80022c6 <__malloc_unlock>
 8001b82:	e7e4      	b.n	8001b4e <_malloc_r+0x1e>
 8001b84:	680b      	ldr	r3, [r1, #0]
 8001b86:	1b5b      	subs	r3, r3, r5
 8001b88:	d418      	bmi.n	8001bbc <_malloc_r+0x8c>
 8001b8a:	2b0b      	cmp	r3, #11
 8001b8c:	d90f      	bls.n	8001bae <_malloc_r+0x7e>
 8001b8e:	600b      	str	r3, [r1, #0]
 8001b90:	50cd      	str	r5, [r1, r3]
 8001b92:	18cc      	adds	r4, r1, r3
 8001b94:	4630      	mov	r0, r6
 8001b96:	f000 fb96 	bl	80022c6 <__malloc_unlock>
 8001b9a:	f104 000b 	add.w	r0, r4, #11
 8001b9e:	1d23      	adds	r3, r4, #4
 8001ba0:	f020 0007 	bic.w	r0, r0, #7
 8001ba4:	1ac3      	subs	r3, r0, r3
 8001ba6:	d0d3      	beq.n	8001b50 <_malloc_r+0x20>
 8001ba8:	425a      	negs	r2, r3
 8001baa:	50e2      	str	r2, [r4, r3]
 8001bac:	e7d0      	b.n	8001b50 <_malloc_r+0x20>
 8001bae:	428c      	cmp	r4, r1
 8001bb0:	684b      	ldr	r3, [r1, #4]
 8001bb2:	bf16      	itet	ne
 8001bb4:	6063      	strne	r3, [r4, #4]
 8001bb6:	6013      	streq	r3, [r2, #0]
 8001bb8:	460c      	movne	r4, r1
 8001bba:	e7eb      	b.n	8001b94 <_malloc_r+0x64>
 8001bbc:	460c      	mov	r4, r1
 8001bbe:	6849      	ldr	r1, [r1, #4]
 8001bc0:	e7cc      	b.n	8001b5c <_malloc_r+0x2c>
 8001bc2:	1cc4      	adds	r4, r0, #3
 8001bc4:	f024 0403 	bic.w	r4, r4, #3
 8001bc8:	42a0      	cmp	r0, r4
 8001bca:	d005      	beq.n	8001bd8 <_malloc_r+0xa8>
 8001bcc:	1a21      	subs	r1, r4, r0
 8001bce:	4630      	mov	r0, r6
 8001bd0:	f000 face 	bl	8002170 <_sbrk_r>
 8001bd4:	3001      	adds	r0, #1
 8001bd6:	d0cf      	beq.n	8001b78 <_malloc_r+0x48>
 8001bd8:	6025      	str	r5, [r4, #0]
 8001bda:	e7db      	b.n	8001b94 <_malloc_r+0x64>
 8001bdc:	20000094 	.word	0x20000094
 8001be0:	20000098 	.word	0x20000098

08001be4 <__sfputc_r>:
 8001be4:	6893      	ldr	r3, [r2, #8]
 8001be6:	3b01      	subs	r3, #1
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	b410      	push	{r4}
 8001bec:	6093      	str	r3, [r2, #8]
 8001bee:	da07      	bge.n	8001c00 <__sfputc_r+0x1c>
 8001bf0:	6994      	ldr	r4, [r2, #24]
 8001bf2:	42a3      	cmp	r3, r4
 8001bf4:	db01      	blt.n	8001bfa <__sfputc_r+0x16>
 8001bf6:	290a      	cmp	r1, #10
 8001bf8:	d102      	bne.n	8001c00 <__sfputc_r+0x1c>
 8001bfa:	bc10      	pop	{r4}
 8001bfc:	f7ff bcac 	b.w	8001558 <__swbuf_r>
 8001c00:	6813      	ldr	r3, [r2, #0]
 8001c02:	1c58      	adds	r0, r3, #1
 8001c04:	6010      	str	r0, [r2, #0]
 8001c06:	7019      	strb	r1, [r3, #0]
 8001c08:	4608      	mov	r0, r1
 8001c0a:	bc10      	pop	{r4}
 8001c0c:	4770      	bx	lr

08001c0e <__sfputs_r>:
 8001c0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c10:	4606      	mov	r6, r0
 8001c12:	460f      	mov	r7, r1
 8001c14:	4614      	mov	r4, r2
 8001c16:	18d5      	adds	r5, r2, r3
 8001c18:	42ac      	cmp	r4, r5
 8001c1a:	d101      	bne.n	8001c20 <__sfputs_r+0x12>
 8001c1c:	2000      	movs	r0, #0
 8001c1e:	e007      	b.n	8001c30 <__sfputs_r+0x22>
 8001c20:	463a      	mov	r2, r7
 8001c22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001c26:	4630      	mov	r0, r6
 8001c28:	f7ff ffdc 	bl	8001be4 <__sfputc_r>
 8001c2c:	1c43      	adds	r3, r0, #1
 8001c2e:	d1f3      	bne.n	8001c18 <__sfputs_r+0xa>
 8001c30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001c34 <_vfiprintf_r>:
 8001c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c38:	460c      	mov	r4, r1
 8001c3a:	b09d      	sub	sp, #116	; 0x74
 8001c3c:	4617      	mov	r7, r2
 8001c3e:	461d      	mov	r5, r3
 8001c40:	4606      	mov	r6, r0
 8001c42:	b118      	cbz	r0, 8001c4c <_vfiprintf_r+0x18>
 8001c44:	6983      	ldr	r3, [r0, #24]
 8001c46:	b90b      	cbnz	r3, 8001c4c <_vfiprintf_r+0x18>
 8001c48:	f7ff fe36 	bl	80018b8 <__sinit>
 8001c4c:	4b7c      	ldr	r3, [pc, #496]	; (8001e40 <_vfiprintf_r+0x20c>)
 8001c4e:	429c      	cmp	r4, r3
 8001c50:	d158      	bne.n	8001d04 <_vfiprintf_r+0xd0>
 8001c52:	6874      	ldr	r4, [r6, #4]
 8001c54:	89a3      	ldrh	r3, [r4, #12]
 8001c56:	0718      	lsls	r0, r3, #28
 8001c58:	d55e      	bpl.n	8001d18 <_vfiprintf_r+0xe4>
 8001c5a:	6923      	ldr	r3, [r4, #16]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d05b      	beq.n	8001d18 <_vfiprintf_r+0xe4>
 8001c60:	2300      	movs	r3, #0
 8001c62:	9309      	str	r3, [sp, #36]	; 0x24
 8001c64:	2320      	movs	r3, #32
 8001c66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001c6a:	2330      	movs	r3, #48	; 0x30
 8001c6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001c70:	9503      	str	r5, [sp, #12]
 8001c72:	f04f 0b01 	mov.w	fp, #1
 8001c76:	46b8      	mov	r8, r7
 8001c78:	4645      	mov	r5, r8
 8001c7a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001c7e:	b10b      	cbz	r3, 8001c84 <_vfiprintf_r+0x50>
 8001c80:	2b25      	cmp	r3, #37	; 0x25
 8001c82:	d154      	bne.n	8001d2e <_vfiprintf_r+0xfa>
 8001c84:	ebb8 0a07 	subs.w	sl, r8, r7
 8001c88:	d00b      	beq.n	8001ca2 <_vfiprintf_r+0x6e>
 8001c8a:	4653      	mov	r3, sl
 8001c8c:	463a      	mov	r2, r7
 8001c8e:	4621      	mov	r1, r4
 8001c90:	4630      	mov	r0, r6
 8001c92:	f7ff ffbc 	bl	8001c0e <__sfputs_r>
 8001c96:	3001      	adds	r0, #1
 8001c98:	f000 80c2 	beq.w	8001e20 <_vfiprintf_r+0x1ec>
 8001c9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001c9e:	4453      	add	r3, sl
 8001ca0:	9309      	str	r3, [sp, #36]	; 0x24
 8001ca2:	f898 3000 	ldrb.w	r3, [r8]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	f000 80ba 	beq.w	8001e20 <_vfiprintf_r+0x1ec>
 8001cac:	2300      	movs	r3, #0
 8001cae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001cb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001cb6:	9304      	str	r3, [sp, #16]
 8001cb8:	9307      	str	r3, [sp, #28]
 8001cba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001cbe:	931a      	str	r3, [sp, #104]	; 0x68
 8001cc0:	46a8      	mov	r8, r5
 8001cc2:	2205      	movs	r2, #5
 8001cc4:	f818 1b01 	ldrb.w	r1, [r8], #1
 8001cc8:	485e      	ldr	r0, [pc, #376]	; (8001e44 <_vfiprintf_r+0x210>)
 8001cca:	f7fe faa9 	bl	8000220 <memchr>
 8001cce:	9b04      	ldr	r3, [sp, #16]
 8001cd0:	bb78      	cbnz	r0, 8001d32 <_vfiprintf_r+0xfe>
 8001cd2:	06d9      	lsls	r1, r3, #27
 8001cd4:	bf44      	itt	mi
 8001cd6:	2220      	movmi	r2, #32
 8001cd8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001cdc:	071a      	lsls	r2, r3, #28
 8001cde:	bf44      	itt	mi
 8001ce0:	222b      	movmi	r2, #43	; 0x2b
 8001ce2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001ce6:	782a      	ldrb	r2, [r5, #0]
 8001ce8:	2a2a      	cmp	r2, #42	; 0x2a
 8001cea:	d02a      	beq.n	8001d42 <_vfiprintf_r+0x10e>
 8001cec:	9a07      	ldr	r2, [sp, #28]
 8001cee:	46a8      	mov	r8, r5
 8001cf0:	2000      	movs	r0, #0
 8001cf2:	250a      	movs	r5, #10
 8001cf4:	4641      	mov	r1, r8
 8001cf6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001cfa:	3b30      	subs	r3, #48	; 0x30
 8001cfc:	2b09      	cmp	r3, #9
 8001cfe:	d969      	bls.n	8001dd4 <_vfiprintf_r+0x1a0>
 8001d00:	b360      	cbz	r0, 8001d5c <_vfiprintf_r+0x128>
 8001d02:	e024      	b.n	8001d4e <_vfiprintf_r+0x11a>
 8001d04:	4b50      	ldr	r3, [pc, #320]	; (8001e48 <_vfiprintf_r+0x214>)
 8001d06:	429c      	cmp	r4, r3
 8001d08:	d101      	bne.n	8001d0e <_vfiprintf_r+0xda>
 8001d0a:	68b4      	ldr	r4, [r6, #8]
 8001d0c:	e7a2      	b.n	8001c54 <_vfiprintf_r+0x20>
 8001d0e:	4b4f      	ldr	r3, [pc, #316]	; (8001e4c <_vfiprintf_r+0x218>)
 8001d10:	429c      	cmp	r4, r3
 8001d12:	bf08      	it	eq
 8001d14:	68f4      	ldreq	r4, [r6, #12]
 8001d16:	e79d      	b.n	8001c54 <_vfiprintf_r+0x20>
 8001d18:	4621      	mov	r1, r4
 8001d1a:	4630      	mov	r0, r6
 8001d1c:	f7ff fc6e 	bl	80015fc <__swsetup_r>
 8001d20:	2800      	cmp	r0, #0
 8001d22:	d09d      	beq.n	8001c60 <_vfiprintf_r+0x2c>
 8001d24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d28:	b01d      	add	sp, #116	; 0x74
 8001d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d2e:	46a8      	mov	r8, r5
 8001d30:	e7a2      	b.n	8001c78 <_vfiprintf_r+0x44>
 8001d32:	4a44      	ldr	r2, [pc, #272]	; (8001e44 <_vfiprintf_r+0x210>)
 8001d34:	1a80      	subs	r0, r0, r2
 8001d36:	fa0b f000 	lsl.w	r0, fp, r0
 8001d3a:	4318      	orrs	r0, r3
 8001d3c:	9004      	str	r0, [sp, #16]
 8001d3e:	4645      	mov	r5, r8
 8001d40:	e7be      	b.n	8001cc0 <_vfiprintf_r+0x8c>
 8001d42:	9a03      	ldr	r2, [sp, #12]
 8001d44:	1d11      	adds	r1, r2, #4
 8001d46:	6812      	ldr	r2, [r2, #0]
 8001d48:	9103      	str	r1, [sp, #12]
 8001d4a:	2a00      	cmp	r2, #0
 8001d4c:	db01      	blt.n	8001d52 <_vfiprintf_r+0x11e>
 8001d4e:	9207      	str	r2, [sp, #28]
 8001d50:	e004      	b.n	8001d5c <_vfiprintf_r+0x128>
 8001d52:	4252      	negs	r2, r2
 8001d54:	f043 0302 	orr.w	r3, r3, #2
 8001d58:	9207      	str	r2, [sp, #28]
 8001d5a:	9304      	str	r3, [sp, #16]
 8001d5c:	f898 3000 	ldrb.w	r3, [r8]
 8001d60:	2b2e      	cmp	r3, #46	; 0x2e
 8001d62:	d10e      	bne.n	8001d82 <_vfiprintf_r+0x14e>
 8001d64:	f898 3001 	ldrb.w	r3, [r8, #1]
 8001d68:	2b2a      	cmp	r3, #42	; 0x2a
 8001d6a:	d138      	bne.n	8001dde <_vfiprintf_r+0x1aa>
 8001d6c:	9b03      	ldr	r3, [sp, #12]
 8001d6e:	1d1a      	adds	r2, r3, #4
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	9203      	str	r2, [sp, #12]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	bfb8      	it	lt
 8001d78:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8001d7c:	f108 0802 	add.w	r8, r8, #2
 8001d80:	9305      	str	r3, [sp, #20]
 8001d82:	4d33      	ldr	r5, [pc, #204]	; (8001e50 <_vfiprintf_r+0x21c>)
 8001d84:	f898 1000 	ldrb.w	r1, [r8]
 8001d88:	2203      	movs	r2, #3
 8001d8a:	4628      	mov	r0, r5
 8001d8c:	f7fe fa48 	bl	8000220 <memchr>
 8001d90:	b140      	cbz	r0, 8001da4 <_vfiprintf_r+0x170>
 8001d92:	2340      	movs	r3, #64	; 0x40
 8001d94:	1b40      	subs	r0, r0, r5
 8001d96:	fa03 f000 	lsl.w	r0, r3, r0
 8001d9a:	9b04      	ldr	r3, [sp, #16]
 8001d9c:	4303      	orrs	r3, r0
 8001d9e:	f108 0801 	add.w	r8, r8, #1
 8001da2:	9304      	str	r3, [sp, #16]
 8001da4:	f898 1000 	ldrb.w	r1, [r8]
 8001da8:	482a      	ldr	r0, [pc, #168]	; (8001e54 <_vfiprintf_r+0x220>)
 8001daa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001dae:	2206      	movs	r2, #6
 8001db0:	f108 0701 	add.w	r7, r8, #1
 8001db4:	f7fe fa34 	bl	8000220 <memchr>
 8001db8:	2800      	cmp	r0, #0
 8001dba:	d037      	beq.n	8001e2c <_vfiprintf_r+0x1f8>
 8001dbc:	4b26      	ldr	r3, [pc, #152]	; (8001e58 <_vfiprintf_r+0x224>)
 8001dbe:	bb1b      	cbnz	r3, 8001e08 <_vfiprintf_r+0x1d4>
 8001dc0:	9b03      	ldr	r3, [sp, #12]
 8001dc2:	3307      	adds	r3, #7
 8001dc4:	f023 0307 	bic.w	r3, r3, #7
 8001dc8:	3308      	adds	r3, #8
 8001dca:	9303      	str	r3, [sp, #12]
 8001dcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001dce:	444b      	add	r3, r9
 8001dd0:	9309      	str	r3, [sp, #36]	; 0x24
 8001dd2:	e750      	b.n	8001c76 <_vfiprintf_r+0x42>
 8001dd4:	fb05 3202 	mla	r2, r5, r2, r3
 8001dd8:	2001      	movs	r0, #1
 8001dda:	4688      	mov	r8, r1
 8001ddc:	e78a      	b.n	8001cf4 <_vfiprintf_r+0xc0>
 8001dde:	2300      	movs	r3, #0
 8001de0:	f108 0801 	add.w	r8, r8, #1
 8001de4:	9305      	str	r3, [sp, #20]
 8001de6:	4619      	mov	r1, r3
 8001de8:	250a      	movs	r5, #10
 8001dea:	4640      	mov	r0, r8
 8001dec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001df0:	3a30      	subs	r2, #48	; 0x30
 8001df2:	2a09      	cmp	r2, #9
 8001df4:	d903      	bls.n	8001dfe <_vfiprintf_r+0x1ca>
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d0c3      	beq.n	8001d82 <_vfiprintf_r+0x14e>
 8001dfa:	9105      	str	r1, [sp, #20]
 8001dfc:	e7c1      	b.n	8001d82 <_vfiprintf_r+0x14e>
 8001dfe:	fb05 2101 	mla	r1, r5, r1, r2
 8001e02:	2301      	movs	r3, #1
 8001e04:	4680      	mov	r8, r0
 8001e06:	e7f0      	b.n	8001dea <_vfiprintf_r+0x1b6>
 8001e08:	ab03      	add	r3, sp, #12
 8001e0a:	9300      	str	r3, [sp, #0]
 8001e0c:	4622      	mov	r2, r4
 8001e0e:	4b13      	ldr	r3, [pc, #76]	; (8001e5c <_vfiprintf_r+0x228>)
 8001e10:	a904      	add	r1, sp, #16
 8001e12:	4630      	mov	r0, r6
 8001e14:	f3af 8000 	nop.w
 8001e18:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8001e1c:	4681      	mov	r9, r0
 8001e1e:	d1d5      	bne.n	8001dcc <_vfiprintf_r+0x198>
 8001e20:	89a3      	ldrh	r3, [r4, #12]
 8001e22:	065b      	lsls	r3, r3, #25
 8001e24:	f53f af7e 	bmi.w	8001d24 <_vfiprintf_r+0xf0>
 8001e28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001e2a:	e77d      	b.n	8001d28 <_vfiprintf_r+0xf4>
 8001e2c:	ab03      	add	r3, sp, #12
 8001e2e:	9300      	str	r3, [sp, #0]
 8001e30:	4622      	mov	r2, r4
 8001e32:	4b0a      	ldr	r3, [pc, #40]	; (8001e5c <_vfiprintf_r+0x228>)
 8001e34:	a904      	add	r1, sp, #16
 8001e36:	4630      	mov	r0, r6
 8001e38:	f000 f888 	bl	8001f4c <_printf_i>
 8001e3c:	e7ec      	b.n	8001e18 <_vfiprintf_r+0x1e4>
 8001e3e:	bf00      	nop
 8001e40:	08002400 	.word	0x08002400
 8001e44:	08002440 	.word	0x08002440
 8001e48:	08002420 	.word	0x08002420
 8001e4c:	080023e0 	.word	0x080023e0
 8001e50:	08002446 	.word	0x08002446
 8001e54:	0800244a 	.word	0x0800244a
 8001e58:	00000000 	.word	0x00000000
 8001e5c:	08001c0f 	.word	0x08001c0f

08001e60 <_printf_common>:
 8001e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e64:	4691      	mov	r9, r2
 8001e66:	461f      	mov	r7, r3
 8001e68:	688a      	ldr	r2, [r1, #8]
 8001e6a:	690b      	ldr	r3, [r1, #16]
 8001e6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001e70:	4293      	cmp	r3, r2
 8001e72:	bfb8      	it	lt
 8001e74:	4613      	movlt	r3, r2
 8001e76:	f8c9 3000 	str.w	r3, [r9]
 8001e7a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001e7e:	4606      	mov	r6, r0
 8001e80:	460c      	mov	r4, r1
 8001e82:	b112      	cbz	r2, 8001e8a <_printf_common+0x2a>
 8001e84:	3301      	adds	r3, #1
 8001e86:	f8c9 3000 	str.w	r3, [r9]
 8001e8a:	6823      	ldr	r3, [r4, #0]
 8001e8c:	0699      	lsls	r1, r3, #26
 8001e8e:	bf42      	ittt	mi
 8001e90:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001e94:	3302      	addmi	r3, #2
 8001e96:	f8c9 3000 	strmi.w	r3, [r9]
 8001e9a:	6825      	ldr	r5, [r4, #0]
 8001e9c:	f015 0506 	ands.w	r5, r5, #6
 8001ea0:	d107      	bne.n	8001eb2 <_printf_common+0x52>
 8001ea2:	f104 0a19 	add.w	sl, r4, #25
 8001ea6:	68e3      	ldr	r3, [r4, #12]
 8001ea8:	f8d9 2000 	ldr.w	r2, [r9]
 8001eac:	1a9b      	subs	r3, r3, r2
 8001eae:	42ab      	cmp	r3, r5
 8001eb0:	dc28      	bgt.n	8001f04 <_printf_common+0xa4>
 8001eb2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001eb6:	6822      	ldr	r2, [r4, #0]
 8001eb8:	3300      	adds	r3, #0
 8001eba:	bf18      	it	ne
 8001ebc:	2301      	movne	r3, #1
 8001ebe:	0692      	lsls	r2, r2, #26
 8001ec0:	d42d      	bmi.n	8001f1e <_printf_common+0xbe>
 8001ec2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001ec6:	4639      	mov	r1, r7
 8001ec8:	4630      	mov	r0, r6
 8001eca:	47c0      	blx	r8
 8001ecc:	3001      	adds	r0, #1
 8001ece:	d020      	beq.n	8001f12 <_printf_common+0xb2>
 8001ed0:	6823      	ldr	r3, [r4, #0]
 8001ed2:	68e5      	ldr	r5, [r4, #12]
 8001ed4:	f8d9 2000 	ldr.w	r2, [r9]
 8001ed8:	f003 0306 	and.w	r3, r3, #6
 8001edc:	2b04      	cmp	r3, #4
 8001ede:	bf08      	it	eq
 8001ee0:	1aad      	subeq	r5, r5, r2
 8001ee2:	68a3      	ldr	r3, [r4, #8]
 8001ee4:	6922      	ldr	r2, [r4, #16]
 8001ee6:	bf0c      	ite	eq
 8001ee8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001eec:	2500      	movne	r5, #0
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	bfc4      	itt	gt
 8001ef2:	1a9b      	subgt	r3, r3, r2
 8001ef4:	18ed      	addgt	r5, r5, r3
 8001ef6:	f04f 0900 	mov.w	r9, #0
 8001efa:	341a      	adds	r4, #26
 8001efc:	454d      	cmp	r5, r9
 8001efe:	d11a      	bne.n	8001f36 <_printf_common+0xd6>
 8001f00:	2000      	movs	r0, #0
 8001f02:	e008      	b.n	8001f16 <_printf_common+0xb6>
 8001f04:	2301      	movs	r3, #1
 8001f06:	4652      	mov	r2, sl
 8001f08:	4639      	mov	r1, r7
 8001f0a:	4630      	mov	r0, r6
 8001f0c:	47c0      	blx	r8
 8001f0e:	3001      	adds	r0, #1
 8001f10:	d103      	bne.n	8001f1a <_printf_common+0xba>
 8001f12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f1a:	3501      	adds	r5, #1
 8001f1c:	e7c3      	b.n	8001ea6 <_printf_common+0x46>
 8001f1e:	18e1      	adds	r1, r4, r3
 8001f20:	1c5a      	adds	r2, r3, #1
 8001f22:	2030      	movs	r0, #48	; 0x30
 8001f24:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001f28:	4422      	add	r2, r4
 8001f2a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001f2e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001f32:	3302      	adds	r3, #2
 8001f34:	e7c5      	b.n	8001ec2 <_printf_common+0x62>
 8001f36:	2301      	movs	r3, #1
 8001f38:	4622      	mov	r2, r4
 8001f3a:	4639      	mov	r1, r7
 8001f3c:	4630      	mov	r0, r6
 8001f3e:	47c0      	blx	r8
 8001f40:	3001      	adds	r0, #1
 8001f42:	d0e6      	beq.n	8001f12 <_printf_common+0xb2>
 8001f44:	f109 0901 	add.w	r9, r9, #1
 8001f48:	e7d8      	b.n	8001efc <_printf_common+0x9c>
	...

08001f4c <_printf_i>:
 8001f4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001f50:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8001f54:	460c      	mov	r4, r1
 8001f56:	7e09      	ldrb	r1, [r1, #24]
 8001f58:	b085      	sub	sp, #20
 8001f5a:	296e      	cmp	r1, #110	; 0x6e
 8001f5c:	4617      	mov	r7, r2
 8001f5e:	4606      	mov	r6, r0
 8001f60:	4698      	mov	r8, r3
 8001f62:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001f64:	f000 80b3 	beq.w	80020ce <_printf_i+0x182>
 8001f68:	d822      	bhi.n	8001fb0 <_printf_i+0x64>
 8001f6a:	2963      	cmp	r1, #99	; 0x63
 8001f6c:	d036      	beq.n	8001fdc <_printf_i+0x90>
 8001f6e:	d80a      	bhi.n	8001f86 <_printf_i+0x3a>
 8001f70:	2900      	cmp	r1, #0
 8001f72:	f000 80b9 	beq.w	80020e8 <_printf_i+0x19c>
 8001f76:	2958      	cmp	r1, #88	; 0x58
 8001f78:	f000 8083 	beq.w	8002082 <_printf_i+0x136>
 8001f7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001f80:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8001f84:	e032      	b.n	8001fec <_printf_i+0xa0>
 8001f86:	2964      	cmp	r1, #100	; 0x64
 8001f88:	d001      	beq.n	8001f8e <_printf_i+0x42>
 8001f8a:	2969      	cmp	r1, #105	; 0x69
 8001f8c:	d1f6      	bne.n	8001f7c <_printf_i+0x30>
 8001f8e:	6820      	ldr	r0, [r4, #0]
 8001f90:	6813      	ldr	r3, [r2, #0]
 8001f92:	0605      	lsls	r5, r0, #24
 8001f94:	f103 0104 	add.w	r1, r3, #4
 8001f98:	d52a      	bpl.n	8001ff0 <_printf_i+0xa4>
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	6011      	str	r1, [r2, #0]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	da03      	bge.n	8001faa <_printf_i+0x5e>
 8001fa2:	222d      	movs	r2, #45	; 0x2d
 8001fa4:	425b      	negs	r3, r3
 8001fa6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001faa:	486f      	ldr	r0, [pc, #444]	; (8002168 <_printf_i+0x21c>)
 8001fac:	220a      	movs	r2, #10
 8001fae:	e039      	b.n	8002024 <_printf_i+0xd8>
 8001fb0:	2973      	cmp	r1, #115	; 0x73
 8001fb2:	f000 809d 	beq.w	80020f0 <_printf_i+0x1a4>
 8001fb6:	d808      	bhi.n	8001fca <_printf_i+0x7e>
 8001fb8:	296f      	cmp	r1, #111	; 0x6f
 8001fba:	d020      	beq.n	8001ffe <_printf_i+0xb2>
 8001fbc:	2970      	cmp	r1, #112	; 0x70
 8001fbe:	d1dd      	bne.n	8001f7c <_printf_i+0x30>
 8001fc0:	6823      	ldr	r3, [r4, #0]
 8001fc2:	f043 0320 	orr.w	r3, r3, #32
 8001fc6:	6023      	str	r3, [r4, #0]
 8001fc8:	e003      	b.n	8001fd2 <_printf_i+0x86>
 8001fca:	2975      	cmp	r1, #117	; 0x75
 8001fcc:	d017      	beq.n	8001ffe <_printf_i+0xb2>
 8001fce:	2978      	cmp	r1, #120	; 0x78
 8001fd0:	d1d4      	bne.n	8001f7c <_printf_i+0x30>
 8001fd2:	2378      	movs	r3, #120	; 0x78
 8001fd4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001fd8:	4864      	ldr	r0, [pc, #400]	; (800216c <_printf_i+0x220>)
 8001fda:	e055      	b.n	8002088 <_printf_i+0x13c>
 8001fdc:	6813      	ldr	r3, [r2, #0]
 8001fde:	1d19      	adds	r1, r3, #4
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	6011      	str	r1, [r2, #0]
 8001fe4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001fe8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001fec:	2301      	movs	r3, #1
 8001fee:	e08c      	b.n	800210a <_printf_i+0x1be>
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	6011      	str	r1, [r2, #0]
 8001ff4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001ff8:	bf18      	it	ne
 8001ffa:	b21b      	sxthne	r3, r3
 8001ffc:	e7cf      	b.n	8001f9e <_printf_i+0x52>
 8001ffe:	6813      	ldr	r3, [r2, #0]
 8002000:	6825      	ldr	r5, [r4, #0]
 8002002:	1d18      	adds	r0, r3, #4
 8002004:	6010      	str	r0, [r2, #0]
 8002006:	0628      	lsls	r0, r5, #24
 8002008:	d501      	bpl.n	800200e <_printf_i+0xc2>
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	e002      	b.n	8002014 <_printf_i+0xc8>
 800200e:	0668      	lsls	r0, r5, #25
 8002010:	d5fb      	bpl.n	800200a <_printf_i+0xbe>
 8002012:	881b      	ldrh	r3, [r3, #0]
 8002014:	4854      	ldr	r0, [pc, #336]	; (8002168 <_printf_i+0x21c>)
 8002016:	296f      	cmp	r1, #111	; 0x6f
 8002018:	bf14      	ite	ne
 800201a:	220a      	movne	r2, #10
 800201c:	2208      	moveq	r2, #8
 800201e:	2100      	movs	r1, #0
 8002020:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002024:	6865      	ldr	r5, [r4, #4]
 8002026:	60a5      	str	r5, [r4, #8]
 8002028:	2d00      	cmp	r5, #0
 800202a:	f2c0 8095 	blt.w	8002158 <_printf_i+0x20c>
 800202e:	6821      	ldr	r1, [r4, #0]
 8002030:	f021 0104 	bic.w	r1, r1, #4
 8002034:	6021      	str	r1, [r4, #0]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d13d      	bne.n	80020b6 <_printf_i+0x16a>
 800203a:	2d00      	cmp	r5, #0
 800203c:	f040 808e 	bne.w	800215c <_printf_i+0x210>
 8002040:	4665      	mov	r5, ip
 8002042:	2a08      	cmp	r2, #8
 8002044:	d10b      	bne.n	800205e <_printf_i+0x112>
 8002046:	6823      	ldr	r3, [r4, #0]
 8002048:	07db      	lsls	r3, r3, #31
 800204a:	d508      	bpl.n	800205e <_printf_i+0x112>
 800204c:	6923      	ldr	r3, [r4, #16]
 800204e:	6862      	ldr	r2, [r4, #4]
 8002050:	429a      	cmp	r2, r3
 8002052:	bfde      	ittt	le
 8002054:	2330      	movle	r3, #48	; 0x30
 8002056:	f805 3c01 	strble.w	r3, [r5, #-1]
 800205a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800205e:	ebac 0305 	sub.w	r3, ip, r5
 8002062:	6123      	str	r3, [r4, #16]
 8002064:	f8cd 8000 	str.w	r8, [sp]
 8002068:	463b      	mov	r3, r7
 800206a:	aa03      	add	r2, sp, #12
 800206c:	4621      	mov	r1, r4
 800206e:	4630      	mov	r0, r6
 8002070:	f7ff fef6 	bl	8001e60 <_printf_common>
 8002074:	3001      	adds	r0, #1
 8002076:	d14d      	bne.n	8002114 <_printf_i+0x1c8>
 8002078:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800207c:	b005      	add	sp, #20
 800207e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002082:	4839      	ldr	r0, [pc, #228]	; (8002168 <_printf_i+0x21c>)
 8002084:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002088:	6813      	ldr	r3, [r2, #0]
 800208a:	6821      	ldr	r1, [r4, #0]
 800208c:	1d1d      	adds	r5, r3, #4
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	6015      	str	r5, [r2, #0]
 8002092:	060a      	lsls	r2, r1, #24
 8002094:	d50b      	bpl.n	80020ae <_printf_i+0x162>
 8002096:	07ca      	lsls	r2, r1, #31
 8002098:	bf44      	itt	mi
 800209a:	f041 0120 	orrmi.w	r1, r1, #32
 800209e:	6021      	strmi	r1, [r4, #0]
 80020a0:	b91b      	cbnz	r3, 80020aa <_printf_i+0x15e>
 80020a2:	6822      	ldr	r2, [r4, #0]
 80020a4:	f022 0220 	bic.w	r2, r2, #32
 80020a8:	6022      	str	r2, [r4, #0]
 80020aa:	2210      	movs	r2, #16
 80020ac:	e7b7      	b.n	800201e <_printf_i+0xd2>
 80020ae:	064d      	lsls	r5, r1, #25
 80020b0:	bf48      	it	mi
 80020b2:	b29b      	uxthmi	r3, r3
 80020b4:	e7ef      	b.n	8002096 <_printf_i+0x14a>
 80020b6:	4665      	mov	r5, ip
 80020b8:	fbb3 f1f2 	udiv	r1, r3, r2
 80020bc:	fb02 3311 	mls	r3, r2, r1, r3
 80020c0:	5cc3      	ldrb	r3, [r0, r3]
 80020c2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80020c6:	460b      	mov	r3, r1
 80020c8:	2900      	cmp	r1, #0
 80020ca:	d1f5      	bne.n	80020b8 <_printf_i+0x16c>
 80020cc:	e7b9      	b.n	8002042 <_printf_i+0xf6>
 80020ce:	6813      	ldr	r3, [r2, #0]
 80020d0:	6825      	ldr	r5, [r4, #0]
 80020d2:	6961      	ldr	r1, [r4, #20]
 80020d4:	1d18      	adds	r0, r3, #4
 80020d6:	6010      	str	r0, [r2, #0]
 80020d8:	0628      	lsls	r0, r5, #24
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	d501      	bpl.n	80020e2 <_printf_i+0x196>
 80020de:	6019      	str	r1, [r3, #0]
 80020e0:	e002      	b.n	80020e8 <_printf_i+0x19c>
 80020e2:	066a      	lsls	r2, r5, #25
 80020e4:	d5fb      	bpl.n	80020de <_printf_i+0x192>
 80020e6:	8019      	strh	r1, [r3, #0]
 80020e8:	2300      	movs	r3, #0
 80020ea:	6123      	str	r3, [r4, #16]
 80020ec:	4665      	mov	r5, ip
 80020ee:	e7b9      	b.n	8002064 <_printf_i+0x118>
 80020f0:	6813      	ldr	r3, [r2, #0]
 80020f2:	1d19      	adds	r1, r3, #4
 80020f4:	6011      	str	r1, [r2, #0]
 80020f6:	681d      	ldr	r5, [r3, #0]
 80020f8:	6862      	ldr	r2, [r4, #4]
 80020fa:	2100      	movs	r1, #0
 80020fc:	4628      	mov	r0, r5
 80020fe:	f7fe f88f 	bl	8000220 <memchr>
 8002102:	b108      	cbz	r0, 8002108 <_printf_i+0x1bc>
 8002104:	1b40      	subs	r0, r0, r5
 8002106:	6060      	str	r0, [r4, #4]
 8002108:	6863      	ldr	r3, [r4, #4]
 800210a:	6123      	str	r3, [r4, #16]
 800210c:	2300      	movs	r3, #0
 800210e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002112:	e7a7      	b.n	8002064 <_printf_i+0x118>
 8002114:	6923      	ldr	r3, [r4, #16]
 8002116:	462a      	mov	r2, r5
 8002118:	4639      	mov	r1, r7
 800211a:	4630      	mov	r0, r6
 800211c:	47c0      	blx	r8
 800211e:	3001      	adds	r0, #1
 8002120:	d0aa      	beq.n	8002078 <_printf_i+0x12c>
 8002122:	6823      	ldr	r3, [r4, #0]
 8002124:	079b      	lsls	r3, r3, #30
 8002126:	d413      	bmi.n	8002150 <_printf_i+0x204>
 8002128:	68e0      	ldr	r0, [r4, #12]
 800212a:	9b03      	ldr	r3, [sp, #12]
 800212c:	4298      	cmp	r0, r3
 800212e:	bfb8      	it	lt
 8002130:	4618      	movlt	r0, r3
 8002132:	e7a3      	b.n	800207c <_printf_i+0x130>
 8002134:	2301      	movs	r3, #1
 8002136:	464a      	mov	r2, r9
 8002138:	4639      	mov	r1, r7
 800213a:	4630      	mov	r0, r6
 800213c:	47c0      	blx	r8
 800213e:	3001      	adds	r0, #1
 8002140:	d09a      	beq.n	8002078 <_printf_i+0x12c>
 8002142:	3501      	adds	r5, #1
 8002144:	68e3      	ldr	r3, [r4, #12]
 8002146:	9a03      	ldr	r2, [sp, #12]
 8002148:	1a9b      	subs	r3, r3, r2
 800214a:	42ab      	cmp	r3, r5
 800214c:	dcf2      	bgt.n	8002134 <_printf_i+0x1e8>
 800214e:	e7eb      	b.n	8002128 <_printf_i+0x1dc>
 8002150:	2500      	movs	r5, #0
 8002152:	f104 0919 	add.w	r9, r4, #25
 8002156:	e7f5      	b.n	8002144 <_printf_i+0x1f8>
 8002158:	2b00      	cmp	r3, #0
 800215a:	d1ac      	bne.n	80020b6 <_printf_i+0x16a>
 800215c:	7803      	ldrb	r3, [r0, #0]
 800215e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002162:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002166:	e76c      	b.n	8002042 <_printf_i+0xf6>
 8002168:	08002451 	.word	0x08002451
 800216c:	08002462 	.word	0x08002462

08002170 <_sbrk_r>:
 8002170:	b538      	push	{r3, r4, r5, lr}
 8002172:	4c06      	ldr	r4, [pc, #24]	; (800218c <_sbrk_r+0x1c>)
 8002174:	2300      	movs	r3, #0
 8002176:	4605      	mov	r5, r0
 8002178:	4608      	mov	r0, r1
 800217a:	6023      	str	r3, [r4, #0]
 800217c:	f7fe f998 	bl	80004b0 <_sbrk>
 8002180:	1c43      	adds	r3, r0, #1
 8002182:	d102      	bne.n	800218a <_sbrk_r+0x1a>
 8002184:	6823      	ldr	r3, [r4, #0]
 8002186:	b103      	cbz	r3, 800218a <_sbrk_r+0x1a>
 8002188:	602b      	str	r3, [r5, #0]
 800218a:	bd38      	pop	{r3, r4, r5, pc}
 800218c:	200004c0 	.word	0x200004c0

08002190 <__sread>:
 8002190:	b510      	push	{r4, lr}
 8002192:	460c      	mov	r4, r1
 8002194:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002198:	f000 f896 	bl	80022c8 <_read_r>
 800219c:	2800      	cmp	r0, #0
 800219e:	bfab      	itete	ge
 80021a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80021a2:	89a3      	ldrhlt	r3, [r4, #12]
 80021a4:	181b      	addge	r3, r3, r0
 80021a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80021aa:	bfac      	ite	ge
 80021ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80021ae:	81a3      	strhlt	r3, [r4, #12]
 80021b0:	bd10      	pop	{r4, pc}

080021b2 <__swrite>:
 80021b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021b6:	461f      	mov	r7, r3
 80021b8:	898b      	ldrh	r3, [r1, #12]
 80021ba:	05db      	lsls	r3, r3, #23
 80021bc:	4605      	mov	r5, r0
 80021be:	460c      	mov	r4, r1
 80021c0:	4616      	mov	r6, r2
 80021c2:	d505      	bpl.n	80021d0 <__swrite+0x1e>
 80021c4:	2302      	movs	r3, #2
 80021c6:	2200      	movs	r2, #0
 80021c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021cc:	f000 f868 	bl	80022a0 <_lseek_r>
 80021d0:	89a3      	ldrh	r3, [r4, #12]
 80021d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80021d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80021da:	81a3      	strh	r3, [r4, #12]
 80021dc:	4632      	mov	r2, r6
 80021de:	463b      	mov	r3, r7
 80021e0:	4628      	mov	r0, r5
 80021e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80021e6:	f000 b817 	b.w	8002218 <_write_r>

080021ea <__sseek>:
 80021ea:	b510      	push	{r4, lr}
 80021ec:	460c      	mov	r4, r1
 80021ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021f2:	f000 f855 	bl	80022a0 <_lseek_r>
 80021f6:	1c43      	adds	r3, r0, #1
 80021f8:	89a3      	ldrh	r3, [r4, #12]
 80021fa:	bf15      	itete	ne
 80021fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80021fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002202:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002206:	81a3      	strheq	r3, [r4, #12]
 8002208:	bf18      	it	ne
 800220a:	81a3      	strhne	r3, [r4, #12]
 800220c:	bd10      	pop	{r4, pc}

0800220e <__sclose>:
 800220e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002212:	f000 b813 	b.w	800223c <_close_r>
	...

08002218 <_write_r>:
 8002218:	b538      	push	{r3, r4, r5, lr}
 800221a:	4c07      	ldr	r4, [pc, #28]	; (8002238 <_write_r+0x20>)
 800221c:	4605      	mov	r5, r0
 800221e:	4608      	mov	r0, r1
 8002220:	4611      	mov	r1, r2
 8002222:	2200      	movs	r2, #0
 8002224:	6022      	str	r2, [r4, #0]
 8002226:	461a      	mov	r2, r3
 8002228:	f000 f888 	bl	800233c <_write>
 800222c:	1c43      	adds	r3, r0, #1
 800222e:	d102      	bne.n	8002236 <_write_r+0x1e>
 8002230:	6823      	ldr	r3, [r4, #0]
 8002232:	b103      	cbz	r3, 8002236 <_write_r+0x1e>
 8002234:	602b      	str	r3, [r5, #0]
 8002236:	bd38      	pop	{r3, r4, r5, pc}
 8002238:	200004c0 	.word	0x200004c0

0800223c <_close_r>:
 800223c:	b538      	push	{r3, r4, r5, lr}
 800223e:	4c06      	ldr	r4, [pc, #24]	; (8002258 <_close_r+0x1c>)
 8002240:	2300      	movs	r3, #0
 8002242:	4605      	mov	r5, r0
 8002244:	4608      	mov	r0, r1
 8002246:	6023      	str	r3, [r4, #0]
 8002248:	f000 f850 	bl	80022ec <_close>
 800224c:	1c43      	adds	r3, r0, #1
 800224e:	d102      	bne.n	8002256 <_close_r+0x1a>
 8002250:	6823      	ldr	r3, [r4, #0]
 8002252:	b103      	cbz	r3, 8002256 <_close_r+0x1a>
 8002254:	602b      	str	r3, [r5, #0]
 8002256:	bd38      	pop	{r3, r4, r5, pc}
 8002258:	200004c0 	.word	0x200004c0

0800225c <_fstat_r>:
 800225c:	b538      	push	{r3, r4, r5, lr}
 800225e:	4c07      	ldr	r4, [pc, #28]	; (800227c <_fstat_r+0x20>)
 8002260:	2300      	movs	r3, #0
 8002262:	4605      	mov	r5, r0
 8002264:	4608      	mov	r0, r1
 8002266:	4611      	mov	r1, r2
 8002268:	6023      	str	r3, [r4, #0]
 800226a:	f000 f847 	bl	80022fc <_fstat>
 800226e:	1c43      	adds	r3, r0, #1
 8002270:	d102      	bne.n	8002278 <_fstat_r+0x1c>
 8002272:	6823      	ldr	r3, [r4, #0]
 8002274:	b103      	cbz	r3, 8002278 <_fstat_r+0x1c>
 8002276:	602b      	str	r3, [r5, #0]
 8002278:	bd38      	pop	{r3, r4, r5, pc}
 800227a:	bf00      	nop
 800227c:	200004c0 	.word	0x200004c0

08002280 <_isatty_r>:
 8002280:	b538      	push	{r3, r4, r5, lr}
 8002282:	4c06      	ldr	r4, [pc, #24]	; (800229c <_isatty_r+0x1c>)
 8002284:	2300      	movs	r3, #0
 8002286:	4605      	mov	r5, r0
 8002288:	4608      	mov	r0, r1
 800228a:	6023      	str	r3, [r4, #0]
 800228c:	f000 f83e 	bl	800230c <_isatty>
 8002290:	1c43      	adds	r3, r0, #1
 8002292:	d102      	bne.n	800229a <_isatty_r+0x1a>
 8002294:	6823      	ldr	r3, [r4, #0]
 8002296:	b103      	cbz	r3, 800229a <_isatty_r+0x1a>
 8002298:	602b      	str	r3, [r5, #0]
 800229a:	bd38      	pop	{r3, r4, r5, pc}
 800229c:	200004c0 	.word	0x200004c0

080022a0 <_lseek_r>:
 80022a0:	b538      	push	{r3, r4, r5, lr}
 80022a2:	4c07      	ldr	r4, [pc, #28]	; (80022c0 <_lseek_r+0x20>)
 80022a4:	4605      	mov	r5, r0
 80022a6:	4608      	mov	r0, r1
 80022a8:	4611      	mov	r1, r2
 80022aa:	2200      	movs	r2, #0
 80022ac:	6022      	str	r2, [r4, #0]
 80022ae:	461a      	mov	r2, r3
 80022b0:	f000 f834 	bl	800231c <_lseek>
 80022b4:	1c43      	adds	r3, r0, #1
 80022b6:	d102      	bne.n	80022be <_lseek_r+0x1e>
 80022b8:	6823      	ldr	r3, [r4, #0]
 80022ba:	b103      	cbz	r3, 80022be <_lseek_r+0x1e>
 80022bc:	602b      	str	r3, [r5, #0]
 80022be:	bd38      	pop	{r3, r4, r5, pc}
 80022c0:	200004c0 	.word	0x200004c0

080022c4 <__malloc_lock>:
 80022c4:	4770      	bx	lr

080022c6 <__malloc_unlock>:
 80022c6:	4770      	bx	lr

080022c8 <_read_r>:
 80022c8:	b538      	push	{r3, r4, r5, lr}
 80022ca:	4c07      	ldr	r4, [pc, #28]	; (80022e8 <_read_r+0x20>)
 80022cc:	4605      	mov	r5, r0
 80022ce:	4608      	mov	r0, r1
 80022d0:	4611      	mov	r1, r2
 80022d2:	2200      	movs	r2, #0
 80022d4:	6022      	str	r2, [r4, #0]
 80022d6:	461a      	mov	r2, r3
 80022d8:	f000 f828 	bl	800232c <_read>
 80022dc:	1c43      	adds	r3, r0, #1
 80022de:	d102      	bne.n	80022e6 <_read_r+0x1e>
 80022e0:	6823      	ldr	r3, [r4, #0]
 80022e2:	b103      	cbz	r3, 80022e6 <_read_r+0x1e>
 80022e4:	602b      	str	r3, [r5, #0]
 80022e6:	bd38      	pop	{r3, r4, r5, pc}
 80022e8:	200004c0 	.word	0x200004c0

080022ec <_close>:
 80022ec:	4b02      	ldr	r3, [pc, #8]	; (80022f8 <_close+0xc>)
 80022ee:	2258      	movs	r2, #88	; 0x58
 80022f0:	601a      	str	r2, [r3, #0]
 80022f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022f6:	4770      	bx	lr
 80022f8:	200004c0 	.word	0x200004c0

080022fc <_fstat>:
 80022fc:	4b02      	ldr	r3, [pc, #8]	; (8002308 <_fstat+0xc>)
 80022fe:	2258      	movs	r2, #88	; 0x58
 8002300:	601a      	str	r2, [r3, #0]
 8002302:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002306:	4770      	bx	lr
 8002308:	200004c0 	.word	0x200004c0

0800230c <_isatty>:
 800230c:	4b02      	ldr	r3, [pc, #8]	; (8002318 <_isatty+0xc>)
 800230e:	2258      	movs	r2, #88	; 0x58
 8002310:	601a      	str	r2, [r3, #0]
 8002312:	2000      	movs	r0, #0
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	200004c0 	.word	0x200004c0

0800231c <_lseek>:
 800231c:	4b02      	ldr	r3, [pc, #8]	; (8002328 <_lseek+0xc>)
 800231e:	2258      	movs	r2, #88	; 0x58
 8002320:	601a      	str	r2, [r3, #0]
 8002322:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002326:	4770      	bx	lr
 8002328:	200004c0 	.word	0x200004c0

0800232c <_read>:
 800232c:	4b02      	ldr	r3, [pc, #8]	; (8002338 <_read+0xc>)
 800232e:	2258      	movs	r2, #88	; 0x58
 8002330:	601a      	str	r2, [r3, #0]
 8002332:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002336:	4770      	bx	lr
 8002338:	200004c0 	.word	0x200004c0

0800233c <_write>:
 800233c:	4b02      	ldr	r3, [pc, #8]	; (8002348 <_write+0xc>)
 800233e:	2258      	movs	r2, #88	; 0x58
 8002340:	601a      	str	r2, [r3, #0]
 8002342:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002346:	4770      	bx	lr
 8002348:	200004c0 	.word	0x200004c0

0800234c <_init>:
 800234c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800234e:	bf00      	nop
 8002350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002352:	bc08      	pop	{r3}
 8002354:	469e      	mov	lr, r3
 8002356:	4770      	bx	lr

08002358 <_fini>:
 8002358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800235a:	bf00      	nop
 800235c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800235e:	bc08      	pop	{r3}
 8002360:	469e      	mov	lr, r3
 8002362:	4770      	bx	lr
