
stm32f446_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000233c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  0800250c  0800250c  0001250c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025e0  080025e0  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  080025e0  080025e0  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080025e0  080025e0  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025e0  080025e0  000125e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080025e4  080025e4  000125e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080025e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  2000006c  08002654  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000158  08002654  00020158  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000241e  00000000  00000000  00020096  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000006cc  00000000  00000000  000224b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000190  00000000  00000000  00022b80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000148  00000000  00000000  00022d10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002f1b  00000000  00000000  00022e58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000190a  00000000  00000000  00025d73  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000b2c9  00000000  00000000  0002767d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00032946  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001058  00000000  00000000  000329c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080024f4 	.word	0x080024f4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	080024f4 	.word	0x080024f4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <delay>:
#define LEN_COMMAND		0x51
#define	DATA_COMMAND	0x52

I2C_Handle_t I2C1_handle;

void delay(void){
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < 500000; i++);
 80002c6:	2300      	movs	r3, #0
 80002c8:	607b      	str	r3, [r7, #4]
 80002ca:	e002      	b.n	80002d2 <delay+0x12>
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	3301      	adds	r3, #1
 80002d0:	607b      	str	r3, [r7, #4]
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	4a03      	ldr	r2, [pc, #12]	; (80002e4 <delay+0x24>)
 80002d6:	4293      	cmp	r3, r2
 80002d8:	d9f8      	bls.n	80002cc <delay+0xc>
}
 80002da:	bf00      	nop
 80002dc:	370c      	adds	r7, #12
 80002de:	46bd      	mov	sp, r7
 80002e0:	bc80      	pop	{r7}
 80002e2:	4770      	bx	lr
 80002e4:	0007a11f 	.word	0x0007a11f

080002e8 <GPIO_Button_Init>:

void GPIO_Button_Init(){
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b084      	sub	sp, #16
 80002ec:	af00      	add	r7, sp, #0
	GPIO_Handle_t gpioc_button;
	gpioc_button.pGPIOx = GPIOC;
 80002ee:	4b09      	ldr	r3, [pc, #36]	; (8000314 <GPIO_Button_Init+0x2c>)
 80002f0:	607b      	str	r3, [r7, #4]

	gpioc_button.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 80002f2:	230d      	movs	r3, #13
 80002f4:	723b      	strb	r3, [r7, #8]
	gpioc_button.GPIO_PinConfig.GPIO_PinMode = GPIO_PIN_MODE_IN;
 80002f6:	2300      	movs	r3, #0
 80002f8:	727b      	strb	r3, [r7, #9]

	GPIO_PeriClockControl(gpioc_button.pGPIOx, ENABLE);
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	2101      	movs	r1, #1
 80002fe:	4618      	mov	r0, r3
 8000300:	f000 f8fa 	bl	80004f8 <GPIO_PeriClockControl>
	GPIO_Init(&gpioc_button);
 8000304:	1d3b      	adds	r3, r7, #4
 8000306:	4618      	mov	r0, r3
 8000308:	f000 f9c8 	bl	800069c <GPIO_Init>
}
 800030c:	bf00      	nop
 800030e:	3710      	adds	r7, #16
 8000310:	46bd      	mov	sp, r7
 8000312:	bd80      	pop	{r7, pc}
 8000314:	40020800 	.word	0x40020800

08000318 <I2C1_GPIOInits>:

void I2C1_GPIOInits(void){
 8000318:	b580      	push	{r7, lr}
 800031a:	b084      	sub	sp, #16
 800031c:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2C_pins;
	I2C_pins.pGPIOx = GPIOB;
 800031e:	4b10      	ldr	r3, [pc, #64]	; (8000360 <I2C1_GPIOInits+0x48>)
 8000320:	607b      	str	r3, [r7, #4]

	I2C_pins.GPIO_PinConfig.GPIO_PinMode = GPIO_PIN_MODE_ALTFN;
 8000322:	2302      	movs	r3, #2
 8000324:	727b      	strb	r3, [r7, #9]
	I2C_pins.GPIO_PinConfig.GPIO_PinAltFunMode = GPIO_PIN_ALT_FUN_4;
 8000326:	2304      	movs	r3, #4
 8000328:	737b      	strb	r3, [r7, #13]
	I2C_pins.GPIO_PinConfig.GPIO_PinOPType = GPIO_PIN_OP_TYPE_OD;
 800032a:	2301      	movs	r3, #1
 800032c:	733b      	strb	r3, [r7, #12]
	I2C_pins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 800032e:	2301      	movs	r3, #1
 8000330:	72fb      	strb	r3, [r7, #11]
	I2C_pins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_PIN_OP_SPEED_FAST;
 8000332:	2302      	movs	r3, #2
 8000334:	72bb      	strb	r3, [r7, #10]

	//Start GPIO peripheral clock
	GPIO_PeriClockControl(I2C_pins.pGPIOx, ENABLE);
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	2101      	movs	r1, #1
 800033a:	4618      	mov	r0, r3
 800033c:	f000 f8dc 	bl	80004f8 <GPIO_PeriClockControl>

	//Configure I2C1_SCL
	I2C_pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 8000340:	2306      	movs	r3, #6
 8000342:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2C_pins);
 8000344:	1d3b      	adds	r3, r7, #4
 8000346:	4618      	mov	r0, r3
 8000348:	f000 f9a8 	bl	800069c <GPIO_Init>

	//Configure I2C1_SDA
	I2C_pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 800034c:	2307      	movs	r3, #7
 800034e:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2C_pins);
 8000350:	1d3b      	adds	r3, r7, #4
 8000352:	4618      	mov	r0, r3
 8000354:	f000 f9a2 	bl	800069c <GPIO_Init>
}
 8000358:	bf00      	nop
 800035a:	3710      	adds	r7, #16
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}
 8000360:	40020400 	.word	0x40020400

08000364 <I2C1_Inits>:

void I2C1_Inits(void){
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
	I2C1_handle.pI2Cx = I2C1;
 8000368:	4b09      	ldr	r3, [pc, #36]	; (8000390 <I2C1_Inits+0x2c>)
 800036a:	4a0a      	ldr	r2, [pc, #40]	; (8000394 <I2C1_Inits+0x30>)
 800036c:	601a      	str	r2, [r3, #0]

	I2C1_handle.I2C_Config.I2C_ACKControl = I2C_ACK_ENABLE;
 800036e:	4b08      	ldr	r3, [pc, #32]	; (8000390 <I2C1_Inits+0x2c>)
 8000370:	2201      	movs	r2, #1
 8000372:	60da      	str	r2, [r3, #12]
	I2C1_handle.I2C_Config.I2C_DeviceAddress = MY_ADDR;
 8000374:	4b06      	ldr	r3, [pc, #24]	; (8000390 <I2C1_Inits+0x2c>)
 8000376:	2261      	movs	r2, #97	; 0x61
 8000378:	721a      	strb	r2, [r3, #8]
	I2C1_handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 800037a:	4b05      	ldr	r3, [pc, #20]	; (8000390 <I2C1_Inits+0x2c>)
 800037c:	2200      	movs	r2, #0
 800037e:	611a      	str	r2, [r3, #16]
	I2C1_handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 8000380:	4b03      	ldr	r3, [pc, #12]	; (8000390 <I2C1_Inits+0x2c>)
 8000382:	4a05      	ldr	r2, [pc, #20]	; (8000398 <I2C1_Inits+0x34>)
 8000384:	605a      	str	r2, [r3, #4]

	I2C_Init(&I2C1_handle);
 8000386:	4802      	ldr	r0, [pc, #8]	; (8000390 <I2C1_Inits+0x2c>)
 8000388:	f000 fc98 	bl	8000cbc <I2C_Init>
}
 800038c:	bf00      	nop
 800038e:	bd80      	pop	{r7, pc}
 8000390:	20000140 	.word	0x20000140
 8000394:	40005400 	.word	0x40005400
 8000398:	000186a0 	.word	0x000186a0

0800039c <main>:

int main(void){
 800039c:	b580      	push	{r7, lr}
 800039e:	b08c      	sub	sp, #48	; 0x30
 80003a0:	af02      	add	r7, sp, #8
	initialise_monitor_handles();
 80003a2:	f002 f82d 	bl	8002400 <initialise_monitor_handles>
	printf("App is running\n");
 80003a6:	4825      	ldr	r0, [pc, #148]	; (800043c <main+0xa0>)
 80003a8:	f000 ff2a 	bl	8001200 <puts>

	GPIO_Button_Init();
 80003ac:	f7ff ff9c 	bl	80002e8 <GPIO_Button_Init>
	I2C1_GPIOInits();
 80003b0:	f7ff ffb2 	bl	8000318 <I2C1_GPIOInits>
	I2C1_Inits();
 80003b4:	f7ff ffd6 	bl	8000364 <I2C1_Inits>

	uint8_t rcv_buf[32];
	uint8_t len = 0;
 80003b8:	2300      	movs	r3, #0
 80003ba:	71fb      	strb	r3, [r7, #7]
	uint8_t command_code = 0;
 80003bc:	2300      	movs	r3, #0
 80003be:	71bb      	strb	r3, [r7, #6]

	while(1){
		//Button press and de-bouncing delay
		while(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13)){};
 80003c0:	bf00      	nop
 80003c2:	210d      	movs	r1, #13
 80003c4:	481e      	ldr	r0, [pc, #120]	; (8000440 <main+0xa4>)
 80003c6:	f000 fb33 	bl	8000a30 <GPIO_ReadFromInputPin>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d1f8      	bne.n	80003c2 <main+0x26>
		delay();
 80003d0:	f7ff ff76 	bl	80002c0 <delay>

		//Send Len command and receive Len
		command_code = LEN_COMMAND;
 80003d4:	2351      	movs	r3, #81	; 0x51
 80003d6:	71bb      	strb	r3, [r7, #6]
		I2C_MasterSendData(&I2C1_handle, &command_code, 1, SLAVE_ADDR, I2C_ENABLE_SR);
 80003d8:	1db9      	adds	r1, r7, #6
 80003da:	2301      	movs	r3, #1
 80003dc:	9300      	str	r3, [sp, #0]
 80003de:	2368      	movs	r3, #104	; 0x68
 80003e0:	2201      	movs	r2, #1
 80003e2:	4818      	ldr	r0, [pc, #96]	; (8000444 <main+0xa8>)
 80003e4:	f000 fd26 	bl	8000e34 <I2C_MasterSendData>
		I2C_MasterReceiveData(&I2C1_handle, &len, 1, SLAVE_ADDR, I2C_ENABLE_SR);
 80003e8:	1df9      	adds	r1, r7, #7
 80003ea:	2301      	movs	r3, #1
 80003ec:	9300      	str	r3, [sp, #0]
 80003ee:	2368      	movs	r3, #104	; 0x68
 80003f0:	2201      	movs	r2, #1
 80003f2:	4814      	ldr	r0, [pc, #80]	; (8000444 <main+0xa8>)
 80003f4:	f000 fd83 	bl	8000efe <I2C_MasterReceiveData>

		//Send data command and receive data
		command_code = DATA_COMMAND;
 80003f8:	2352      	movs	r3, #82	; 0x52
 80003fa:	71bb      	strb	r3, [r7, #6]
		I2C_MasterSendData(&I2C1_handle, &command_code, 1, SLAVE_ADDR, I2C_ENABLE_SR);
 80003fc:	1db9      	adds	r1, r7, #6
 80003fe:	2301      	movs	r3, #1
 8000400:	9300      	str	r3, [sp, #0]
 8000402:	2368      	movs	r3, #104	; 0x68
 8000404:	2201      	movs	r2, #1
 8000406:	480f      	ldr	r0, [pc, #60]	; (8000444 <main+0xa8>)
 8000408:	f000 fd14 	bl	8000e34 <I2C_MasterSendData>
		I2C_MasterReceiveData(&I2C1_handle, rcv_buf, len, SLAVE_ADDR, I2C_DISABLE_SR);
 800040c:	79fb      	ldrb	r3, [r7, #7]
 800040e:	461a      	mov	r2, r3
 8000410:	f107 0108 	add.w	r1, r7, #8
 8000414:	2300      	movs	r3, #0
 8000416:	9300      	str	r3, [sp, #0]
 8000418:	2368      	movs	r3, #104	; 0x68
 800041a:	480a      	ldr	r0, [pc, #40]	; (8000444 <main+0xa8>)
 800041c:	f000 fd6f 	bl	8000efe <I2C_MasterReceiveData>

		rcv_buf[len] = '\0';
 8000420:	79fb      	ldrb	r3, [r7, #7]
 8000422:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000426:	4413      	add	r3, r2
 8000428:	2200      	movs	r2, #0
 800042a:	f803 2c20 	strb.w	r2, [r3, #-32]

		printf("Received: %s", rcv_buf);
 800042e:	f107 0308 	add.w	r3, r7, #8
 8000432:	4619      	mov	r1, r3
 8000434:	4804      	ldr	r0, [pc, #16]	; (8000448 <main+0xac>)
 8000436:	f000 fe6f 	bl	8001118 <iprintf>
		while(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13)){};
 800043a:	e7c1      	b.n	80003c0 <main+0x24>
 800043c:	0800250c 	.word	0x0800250c
 8000440:	40020800 	.word	0x40020800
 8000444:	20000140 	.word	0x20000140
 8000448:	0800251c 	.word	0x0800251c

0800044c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b084      	sub	sp, #16
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000454:	4b11      	ldr	r3, [pc, #68]	; (800049c <_sbrk+0x50>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	2b00      	cmp	r3, #0
 800045a:	d102      	bne.n	8000462 <_sbrk+0x16>
		heap_end = &end;
 800045c:	4b0f      	ldr	r3, [pc, #60]	; (800049c <_sbrk+0x50>)
 800045e:	4a10      	ldr	r2, [pc, #64]	; (80004a0 <_sbrk+0x54>)
 8000460:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000462:	4b0e      	ldr	r3, [pc, #56]	; (800049c <_sbrk+0x50>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000468:	4b0c      	ldr	r3, [pc, #48]	; (800049c <_sbrk+0x50>)
 800046a:	681a      	ldr	r2, [r3, #0]
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	4413      	add	r3, r2
 8000470:	466a      	mov	r2, sp
 8000472:	4293      	cmp	r3, r2
 8000474:	d907      	bls.n	8000486 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000476:	f000 fe1d 	bl	80010b4 <__errno>
 800047a:	4602      	mov	r2, r0
 800047c:	230c      	movs	r3, #12
 800047e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000480:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000484:	e006      	b.n	8000494 <_sbrk+0x48>
	}

	heap_end += incr;
 8000486:	4b05      	ldr	r3, [pc, #20]	; (800049c <_sbrk+0x50>)
 8000488:	681a      	ldr	r2, [r3, #0]
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	4413      	add	r3, r2
 800048e:	4a03      	ldr	r2, [pc, #12]	; (800049c <_sbrk+0x50>)
 8000490:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000492:	68fb      	ldr	r3, [r7, #12]
}
 8000494:	4618      	mov	r0, r3
 8000496:	3710      	adds	r7, #16
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}
 800049c:	20000088 	.word	0x20000088
 80004a0:	20000158 	.word	0x20000158

080004a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004a4:	480d      	ldr	r0, [pc, #52]	; (80004dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004a6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004a8:	480d      	ldr	r0, [pc, #52]	; (80004e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80004aa:	490e      	ldr	r1, [pc, #56]	; (80004e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004ac:	4a0e      	ldr	r2, [pc, #56]	; (80004e8 <LoopForever+0xe>)
  movs r3, #0
 80004ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004b0:	e002      	b.n	80004b8 <LoopCopyDataInit>

080004b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004b6:	3304      	adds	r3, #4

080004b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004bc:	d3f9      	bcc.n	80004b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004be:	4a0b      	ldr	r2, [pc, #44]	; (80004ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80004c0:	4c0b      	ldr	r4, [pc, #44]	; (80004f0 <LoopForever+0x16>)
  movs r3, #0
 80004c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004c4:	e001      	b.n	80004ca <LoopFillZerobss>

080004c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004c8:	3204      	adds	r2, #4

080004ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004cc:	d3fb      	bcc.n	80004c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80004ce:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 80004d2:	f000 fdf5 	bl	80010c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004d6:	f7ff ff61 	bl	800039c <main>

080004da <LoopForever>:

LoopForever:
    b LoopForever
 80004da:	e7fe      	b.n	80004da <LoopForever>
  ldr   r0, =_estack
 80004dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004e4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80004e8:	080025e8 	.word	0x080025e8
  ldr r2, =_sbss
 80004ec:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80004f0:	20000158 	.word	0x20000158

080004f4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004f4:	e7fe      	b.n	80004f4 <ADC_IRQHandler>
	...

080004f8 <GPIO_PeriClockControl>:
 * @return				- none
 *
 * @note				- none
 *
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
 80004f8:	b480      	push	{r7}
 80004fa:	b083      	sub	sp, #12
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
 8000500:	460b      	mov	r3, r1
 8000502:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8000504:	78fb      	ldrb	r3, [r7, #3]
 8000506:	2b01      	cmp	r3, #1
 8000508:	d157      	bne.n	80005ba <GPIO_PeriClockControl+0xc2>
		if(pGPIOx == GPIOA){
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	4a5a      	ldr	r2, [pc, #360]	; (8000678 <GPIO_PeriClockControl+0x180>)
 800050e:	4293      	cmp	r3, r2
 8000510:	d106      	bne.n	8000520 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 8000512:	4b5a      	ldr	r3, [pc, #360]	; (800067c <GPIO_PeriClockControl+0x184>)
 8000514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000516:	4a59      	ldr	r2, [pc, #356]	; (800067c <GPIO_PeriClockControl+0x184>)
 8000518:	f043 0301 	orr.w	r3, r3, #1
 800051c:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOG_PCLK_DI();
		} else if(pGPIOx == GPIOH){
			GPIOH_PCLK_DI();
		}
	}
}
 800051e:	e0a6      	b.n	800066e <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOB){
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	4a57      	ldr	r2, [pc, #348]	; (8000680 <GPIO_PeriClockControl+0x188>)
 8000524:	4293      	cmp	r3, r2
 8000526:	d106      	bne.n	8000536 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000528:	4b54      	ldr	r3, [pc, #336]	; (800067c <GPIO_PeriClockControl+0x184>)
 800052a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052c:	4a53      	ldr	r2, [pc, #332]	; (800067c <GPIO_PeriClockControl+0x184>)
 800052e:	f043 0302 	orr.w	r3, r3, #2
 8000532:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000534:	e09b      	b.n	800066e <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOC){
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	4a52      	ldr	r2, [pc, #328]	; (8000684 <GPIO_PeriClockControl+0x18c>)
 800053a:	4293      	cmp	r3, r2
 800053c:	d106      	bne.n	800054c <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800053e:	4b4f      	ldr	r3, [pc, #316]	; (800067c <GPIO_PeriClockControl+0x184>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000542:	4a4e      	ldr	r2, [pc, #312]	; (800067c <GPIO_PeriClockControl+0x184>)
 8000544:	f043 0304 	orr.w	r3, r3, #4
 8000548:	6313      	str	r3, [r2, #48]	; 0x30
}
 800054a:	e090      	b.n	800066e <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOD){
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	4a4e      	ldr	r2, [pc, #312]	; (8000688 <GPIO_PeriClockControl+0x190>)
 8000550:	4293      	cmp	r3, r2
 8000552:	d106      	bne.n	8000562 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000554:	4b49      	ldr	r3, [pc, #292]	; (800067c <GPIO_PeriClockControl+0x184>)
 8000556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000558:	4a48      	ldr	r2, [pc, #288]	; (800067c <GPIO_PeriClockControl+0x184>)
 800055a:	f043 0308 	orr.w	r3, r3, #8
 800055e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000560:	e085      	b.n	800066e <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOE){
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	4a49      	ldr	r2, [pc, #292]	; (800068c <GPIO_PeriClockControl+0x194>)
 8000566:	4293      	cmp	r3, r2
 8000568:	d106      	bne.n	8000578 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800056a:	4b44      	ldr	r3, [pc, #272]	; (800067c <GPIO_PeriClockControl+0x184>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056e:	4a43      	ldr	r2, [pc, #268]	; (800067c <GPIO_PeriClockControl+0x184>)
 8000570:	f043 0310 	orr.w	r3, r3, #16
 8000574:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000576:	e07a      	b.n	800066e <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOF){
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	4a45      	ldr	r2, [pc, #276]	; (8000690 <GPIO_PeriClockControl+0x198>)
 800057c:	4293      	cmp	r3, r2
 800057e:	d106      	bne.n	800058e <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000580:	4b3e      	ldr	r3, [pc, #248]	; (800067c <GPIO_PeriClockControl+0x184>)
 8000582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000584:	4a3d      	ldr	r2, [pc, #244]	; (800067c <GPIO_PeriClockControl+0x184>)
 8000586:	f043 0320 	orr.w	r3, r3, #32
 800058a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800058c:	e06f      	b.n	800066e <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOG){
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	4a40      	ldr	r2, [pc, #256]	; (8000694 <GPIO_PeriClockControl+0x19c>)
 8000592:	4293      	cmp	r3, r2
 8000594:	d106      	bne.n	80005a4 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000596:	4b39      	ldr	r3, [pc, #228]	; (800067c <GPIO_PeriClockControl+0x184>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059a:	4a38      	ldr	r2, [pc, #224]	; (800067c <GPIO_PeriClockControl+0x184>)
 800059c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005a0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005a2:	e064      	b.n	800066e <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOH){
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	4a3c      	ldr	r2, [pc, #240]	; (8000698 <GPIO_PeriClockControl+0x1a0>)
 80005a8:	4293      	cmp	r3, r2
 80005aa:	d160      	bne.n	800066e <GPIO_PeriClockControl+0x176>
			GPIOH_PCLK_EN();
 80005ac:	4b33      	ldr	r3, [pc, #204]	; (800067c <GPIO_PeriClockControl+0x184>)
 80005ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b0:	4a32      	ldr	r2, [pc, #200]	; (800067c <GPIO_PeriClockControl+0x184>)
 80005b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005b6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005b8:	e059      	b.n	800066e <GPIO_PeriClockControl+0x176>
	} else if(EnorDi == DISABLE){
 80005ba:	78fb      	ldrb	r3, [r7, #3]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d156      	bne.n	800066e <GPIO_PeriClockControl+0x176>
		if(pGPIOx == GPIOA){
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	4a2d      	ldr	r2, [pc, #180]	; (8000678 <GPIO_PeriClockControl+0x180>)
 80005c4:	4293      	cmp	r3, r2
 80005c6:	d106      	bne.n	80005d6 <GPIO_PeriClockControl+0xde>
			GPIOA_PCLK_DI();
 80005c8:	4b2c      	ldr	r3, [pc, #176]	; (800067c <GPIO_PeriClockControl+0x184>)
 80005ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005cc:	4a2b      	ldr	r2, [pc, #172]	; (800067c <GPIO_PeriClockControl+0x184>)
 80005ce:	f023 0301 	bic.w	r3, r3, #1
 80005d2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005d4:	e04b      	b.n	800066e <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOB){
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	4a29      	ldr	r2, [pc, #164]	; (8000680 <GPIO_PeriClockControl+0x188>)
 80005da:	4293      	cmp	r3, r2
 80005dc:	d106      	bne.n	80005ec <GPIO_PeriClockControl+0xf4>
			GPIOB_PCLK_DI();
 80005de:	4b27      	ldr	r3, [pc, #156]	; (800067c <GPIO_PeriClockControl+0x184>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	4a26      	ldr	r2, [pc, #152]	; (800067c <GPIO_PeriClockControl+0x184>)
 80005e4:	f023 0302 	bic.w	r3, r3, #2
 80005e8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005ea:	e040      	b.n	800066e <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOC){
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	4a25      	ldr	r2, [pc, #148]	; (8000684 <GPIO_PeriClockControl+0x18c>)
 80005f0:	4293      	cmp	r3, r2
 80005f2:	d106      	bne.n	8000602 <GPIO_PeriClockControl+0x10a>
			GPIOC_PCLK_DI();
 80005f4:	4b21      	ldr	r3, [pc, #132]	; (800067c <GPIO_PeriClockControl+0x184>)
 80005f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f8:	4a20      	ldr	r2, [pc, #128]	; (800067c <GPIO_PeriClockControl+0x184>)
 80005fa:	f023 0304 	bic.w	r3, r3, #4
 80005fe:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000600:	e035      	b.n	800066e <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOD){
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4a20      	ldr	r2, [pc, #128]	; (8000688 <GPIO_PeriClockControl+0x190>)
 8000606:	4293      	cmp	r3, r2
 8000608:	d106      	bne.n	8000618 <GPIO_PeriClockControl+0x120>
			GPIOD_PCLK_DI();
 800060a:	4b1c      	ldr	r3, [pc, #112]	; (800067c <GPIO_PeriClockControl+0x184>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	4a1b      	ldr	r2, [pc, #108]	; (800067c <GPIO_PeriClockControl+0x184>)
 8000610:	f023 0308 	bic.w	r3, r3, #8
 8000614:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000616:	e02a      	b.n	800066e <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOE){
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	4a1c      	ldr	r2, [pc, #112]	; (800068c <GPIO_PeriClockControl+0x194>)
 800061c:	4293      	cmp	r3, r2
 800061e:	d106      	bne.n	800062e <GPIO_PeriClockControl+0x136>
			GPIOE_PCLK_DI();
 8000620:	4b16      	ldr	r3, [pc, #88]	; (800067c <GPIO_PeriClockControl+0x184>)
 8000622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000624:	4a15      	ldr	r2, [pc, #84]	; (800067c <GPIO_PeriClockControl+0x184>)
 8000626:	f023 0310 	bic.w	r3, r3, #16
 800062a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800062c:	e01f      	b.n	800066e <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOF){
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	4a17      	ldr	r2, [pc, #92]	; (8000690 <GPIO_PeriClockControl+0x198>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d106      	bne.n	8000644 <GPIO_PeriClockControl+0x14c>
			GPIOF_PCLK_DI();
 8000636:	4b11      	ldr	r3, [pc, #68]	; (800067c <GPIO_PeriClockControl+0x184>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	4a10      	ldr	r2, [pc, #64]	; (800067c <GPIO_PeriClockControl+0x184>)
 800063c:	f023 0320 	bic.w	r3, r3, #32
 8000640:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000642:	e014      	b.n	800066e <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOG){
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	4a13      	ldr	r2, [pc, #76]	; (8000694 <GPIO_PeriClockControl+0x19c>)
 8000648:	4293      	cmp	r3, r2
 800064a:	d106      	bne.n	800065a <GPIO_PeriClockControl+0x162>
			GPIOG_PCLK_DI();
 800064c:	4b0b      	ldr	r3, [pc, #44]	; (800067c <GPIO_PeriClockControl+0x184>)
 800064e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000650:	4a0a      	ldr	r2, [pc, #40]	; (800067c <GPIO_PeriClockControl+0x184>)
 8000652:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000656:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000658:	e009      	b.n	800066e <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOH){
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	4a0e      	ldr	r2, [pc, #56]	; (8000698 <GPIO_PeriClockControl+0x1a0>)
 800065e:	4293      	cmp	r3, r2
 8000660:	d105      	bne.n	800066e <GPIO_PeriClockControl+0x176>
			GPIOH_PCLK_DI();
 8000662:	4b06      	ldr	r3, [pc, #24]	; (800067c <GPIO_PeriClockControl+0x184>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000666:	4a05      	ldr	r2, [pc, #20]	; (800067c <GPIO_PeriClockControl+0x184>)
 8000668:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800066c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800066e:	bf00      	nop
 8000670:	370c      	adds	r7, #12
 8000672:	46bd      	mov	sp, r7
 8000674:	bc80      	pop	{r7}
 8000676:	4770      	bx	lr
 8000678:	40020000 	.word	0x40020000
 800067c:	40023800 	.word	0x40023800
 8000680:	40020400 	.word	0x40020400
 8000684:	40020800 	.word	0x40020800
 8000688:	40020c00 	.word	0x40020c00
 800068c:	40021000 	.word	0x40021000
 8000690:	40021400 	.word	0x40021400
 8000694:	40021800 	.word	0x40021800
 8000698:	40021c00 	.word	0x40021c00

0800069c <GPIO_Init>:
 * @return				- none
 *
 * @note				- none
 *
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 800069c:	b480      	push	{r7}
 800069e:	b08b      	sub	sp, #44	; 0x2c
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
	uint32_t reset_value = 0;
 80006a4:	2300      	movs	r3, #0
 80006a6:	627b      	str	r3, [r7, #36]	; 0x24

	//reset, then set mode register
	if( pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_PIN_MODE_ANALOG){
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	795b      	ldrb	r3, [r3, #5]
 80006ac:	2b03      	cmp	r3, #3
 80006ae:	d823      	bhi.n	80006f8 <GPIO_Init+0x5c>
		reset_value = (0x3 << ((2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)));
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	791b      	ldrb	r3, [r3, #4]
 80006b4:	005b      	lsls	r3, r3, #1
 80006b6:	2203      	movs	r2, #3
 80006b8:	fa02 f303 	lsl.w	r3, r2, r3
 80006bc:	627b      	str	r3, [r7, #36]	; 0x24
		pGPIOHandle->pGPIOx->MODER &= ~(reset_value);
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	6819      	ldr	r1, [r3, #0]
 80006c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006c6:	43da      	mvns	r2, r3
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	400a      	ands	r2, r1
 80006ce:	601a      	str	r2, [r3, #0]
		reset_value = 0;
 80006d0:	2300      	movs	r3, #0
 80006d2:	627b      	str	r3, [r7, #36]	; 0x24

		uint32_t moder_value = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	795b      	ldrb	r3, [r3, #5]
 80006d8:	461a      	mov	r2, r3
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	791b      	ldrb	r3, [r3, #4]
 80006de:	005b      	lsls	r3, r3, #1
 80006e0:	fa02 f303 	lsl.w	r3, r2, r3
 80006e4:	61fb      	str	r3, [r7, #28]
		pGPIOHandle->pGPIOx->MODER |= moder_value;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	6819      	ldr	r1, [r3, #0]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	69fa      	ldr	r2, [r7, #28]
 80006f2:	430a      	orrs	r2, r1
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	e0ee      	b.n	80008d6 <GPIO_Init+0x23a>
	} else{
		//interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_PIN_MODE_IT_FT){
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	795b      	ldrb	r3, [r3, #5]
 80006fc:	2b04      	cmp	r3, #4
 80006fe:	d11a      	bne.n	8000736 <GPIO_Init+0x9a>
			//reset RTSR
			reset_value = (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	791b      	ldrb	r3, [r3, #4]
 8000704:	461a      	mov	r2, r3
 8000706:	2301      	movs	r3, #1
 8000708:	4093      	lsls	r3, r2
 800070a:	627b      	str	r3, [r7, #36]	; 0x24
			EXTI->RTSR &= ~(reset_value);
 800070c:	4b49      	ldr	r3, [pc, #292]	; (8000834 <GPIO_Init+0x198>)
 800070e:	689a      	ldr	r2, [r3, #8]
 8000710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000712:	43db      	mvns	r3, r3
 8000714:	4947      	ldr	r1, [pc, #284]	; (8000834 <GPIO_Init+0x198>)
 8000716:	4013      	ands	r3, r2
 8000718:	608b      	str	r3, [r1, #8]
			reset_value = 0;
 800071a:	2300      	movs	r3, #0
 800071c:	627b      	str	r3, [r7, #36]	; 0x24

			//configure FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800071e:	4b45      	ldr	r3, [pc, #276]	; (8000834 <GPIO_Init+0x198>)
 8000720:	68db      	ldr	r3, [r3, #12]
 8000722:	687a      	ldr	r2, [r7, #4]
 8000724:	7912      	ldrb	r2, [r2, #4]
 8000726:	4611      	mov	r1, r2
 8000728:	2201      	movs	r2, #1
 800072a:	408a      	lsls	r2, r1
 800072c:	4611      	mov	r1, r2
 800072e:	4a41      	ldr	r2, [pc, #260]	; (8000834 <GPIO_Init+0x198>)
 8000730:	430b      	orrs	r3, r1
 8000732:	60d3      	str	r3, [r2, #12]
 8000734:	e038      	b.n	80007a8 <GPIO_Init+0x10c>
		} else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_PIN_MODE_IT_RT){
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	795b      	ldrb	r3, [r3, #5]
 800073a:	2b05      	cmp	r3, #5
 800073c:	d11a      	bne.n	8000774 <GPIO_Init+0xd8>
			//reset FTSR
			reset_value = (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	791b      	ldrb	r3, [r3, #4]
 8000742:	461a      	mov	r2, r3
 8000744:	2301      	movs	r3, #1
 8000746:	4093      	lsls	r3, r2
 8000748:	627b      	str	r3, [r7, #36]	; 0x24
			EXTI->FTSR &= ~(reset_value);
 800074a:	4b3a      	ldr	r3, [pc, #232]	; (8000834 <GPIO_Init+0x198>)
 800074c:	68da      	ldr	r2, [r3, #12]
 800074e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000750:	43db      	mvns	r3, r3
 8000752:	4938      	ldr	r1, [pc, #224]	; (8000834 <GPIO_Init+0x198>)
 8000754:	4013      	ands	r3, r2
 8000756:	60cb      	str	r3, [r1, #12]
			reset_value = 0;
 8000758:	2300      	movs	r3, #0
 800075a:	627b      	str	r3, [r7, #36]	; 0x24

			//configure RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800075c:	4b35      	ldr	r3, [pc, #212]	; (8000834 <GPIO_Init+0x198>)
 800075e:	689b      	ldr	r3, [r3, #8]
 8000760:	687a      	ldr	r2, [r7, #4]
 8000762:	7912      	ldrb	r2, [r2, #4]
 8000764:	4611      	mov	r1, r2
 8000766:	2201      	movs	r2, #1
 8000768:	408a      	lsls	r2, r1
 800076a:	4611      	mov	r1, r2
 800076c:	4a31      	ldr	r2, [pc, #196]	; (8000834 <GPIO_Init+0x198>)
 800076e:	430b      	orrs	r3, r1
 8000770:	6093      	str	r3, [r2, #8]
 8000772:	e019      	b.n	80007a8 <GPIO_Init+0x10c>
		} else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_PIN_MODE_IT_RFT){
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	795b      	ldrb	r3, [r3, #5]
 8000778:	2b06      	cmp	r3, #6
 800077a:	d115      	bne.n	80007a8 <GPIO_Init+0x10c>
			//configure RTSR and FTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800077c:	4b2d      	ldr	r3, [pc, #180]	; (8000834 <GPIO_Init+0x198>)
 800077e:	689b      	ldr	r3, [r3, #8]
 8000780:	687a      	ldr	r2, [r7, #4]
 8000782:	7912      	ldrb	r2, [r2, #4]
 8000784:	4611      	mov	r1, r2
 8000786:	2201      	movs	r2, #1
 8000788:	408a      	lsls	r2, r1
 800078a:	4611      	mov	r1, r2
 800078c:	4a29      	ldr	r2, [pc, #164]	; (8000834 <GPIO_Init+0x198>)
 800078e:	430b      	orrs	r3, r1
 8000790:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000792:	4b28      	ldr	r3, [pc, #160]	; (8000834 <GPIO_Init+0x198>)
 8000794:	68db      	ldr	r3, [r3, #12]
 8000796:	687a      	ldr	r2, [r7, #4]
 8000798:	7912      	ldrb	r2, [r2, #4]
 800079a:	4611      	mov	r1, r2
 800079c:	2201      	movs	r2, #1
 800079e:	408a      	lsls	r2, r1
 80007a0:	4611      	mov	r1, r2
 80007a2:	4a24      	ldr	r2, [pc, #144]	; (8000834 <GPIO_Init+0x198>)
 80007a4:	430b      	orrs	r3, r1
 80007a6:	60d3      	str	r3, [r2, #12]
		}

		//configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t index = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	791b      	ldrb	r3, [r3, #4]
 80007ac:	089b      	lsrs	r3, r3, #2
 80007ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		uint8_t position = ((pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4) * 4);
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	791b      	ldrb	r3, [r3, #4]
 80007b6:	f003 0303 	and.w	r3, r3, #3
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	009b      	lsls	r3, r3, #2
 80007be:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		uint8_t port_code = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	4a1c      	ldr	r2, [pc, #112]	; (8000838 <GPIO_Init+0x19c>)
 80007c8:	4293      	cmp	r3, r2
 80007ca:	d045      	beq.n	8000858 <GPIO_Init+0x1bc>
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a1a      	ldr	r2, [pc, #104]	; (800083c <GPIO_Init+0x1a0>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d02b      	beq.n	800082e <GPIO_Init+0x192>
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4a19      	ldr	r2, [pc, #100]	; (8000840 <GPIO_Init+0x1a4>)
 80007dc:	4293      	cmp	r3, r2
 80007de:	d024      	beq.n	800082a <GPIO_Init+0x18e>
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a17      	ldr	r2, [pc, #92]	; (8000844 <GPIO_Init+0x1a8>)
 80007e6:	4293      	cmp	r3, r2
 80007e8:	d01d      	beq.n	8000826 <GPIO_Init+0x18a>
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4a16      	ldr	r2, [pc, #88]	; (8000848 <GPIO_Init+0x1ac>)
 80007f0:	4293      	cmp	r3, r2
 80007f2:	d016      	beq.n	8000822 <GPIO_Init+0x186>
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a14      	ldr	r2, [pc, #80]	; (800084c <GPIO_Init+0x1b0>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d00f      	beq.n	800081e <GPIO_Init+0x182>
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4a13      	ldr	r2, [pc, #76]	; (8000850 <GPIO_Init+0x1b4>)
 8000804:	4293      	cmp	r3, r2
 8000806:	d008      	beq.n	800081a <GPIO_Init+0x17e>
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a11      	ldr	r2, [pc, #68]	; (8000854 <GPIO_Init+0x1b8>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d101      	bne.n	8000816 <GPIO_Init+0x17a>
 8000812:	2307      	movs	r3, #7
 8000814:	e021      	b.n	800085a <GPIO_Init+0x1be>
 8000816:	2300      	movs	r3, #0
 8000818:	e01f      	b.n	800085a <GPIO_Init+0x1be>
 800081a:	2306      	movs	r3, #6
 800081c:	e01d      	b.n	800085a <GPIO_Init+0x1be>
 800081e:	2305      	movs	r3, #5
 8000820:	e01b      	b.n	800085a <GPIO_Init+0x1be>
 8000822:	2304      	movs	r3, #4
 8000824:	e019      	b.n	800085a <GPIO_Init+0x1be>
 8000826:	2303      	movs	r3, #3
 8000828:	e017      	b.n	800085a <GPIO_Init+0x1be>
 800082a:	2302      	movs	r3, #2
 800082c:	e015      	b.n	800085a <GPIO_Init+0x1be>
 800082e:	2301      	movs	r3, #1
 8000830:	e013      	b.n	800085a <GPIO_Init+0x1be>
 8000832:	bf00      	nop
 8000834:	40013c00 	.word	0x40013c00
 8000838:	40020000 	.word	0x40020000
 800083c:	40020400 	.word	0x40020400
 8000840:	40020800 	.word	0x40020800
 8000844:	40020c00 	.word	0x40020c00
 8000848:	40021000 	.word	0x40021000
 800084c:	40021400 	.word	0x40021400
 8000850:	40021800 	.word	0x40021800
 8000854:	40021c00 	.word	0x40021c00
 8000858:	2300      	movs	r3, #0
 800085a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

		SYSCFG_PCLK_EN();
 800085e:	4b71      	ldr	r3, [pc, #452]	; (8000a24 <GPIO_Init+0x388>)
 8000860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000862:	4a70      	ldr	r2, [pc, #448]	; (8000a24 <GPIO_Init+0x388>)
 8000864:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000868:	6453      	str	r3, [r2, #68]	; 0x44

		reset_value = (0xF << position);
 800086a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800086e:	220f      	movs	r2, #15
 8000870:	fa02 f303 	lsl.w	r3, r2, r3
 8000874:	627b      	str	r3, [r7, #36]	; 0x24
		SYSCFG->EXTICR[index] &= ~(reset_value);
 8000876:	4a6c      	ldr	r2, [pc, #432]	; (8000a28 <GPIO_Init+0x38c>)
 8000878:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800087c:	3302      	adds	r3, #2
 800087e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000884:	43da      	mvns	r2, r3
 8000886:	4868      	ldr	r0, [pc, #416]	; (8000a28 <GPIO_Init+0x38c>)
 8000888:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800088c:	400a      	ands	r2, r1
 800088e:	3302      	adds	r3, #2
 8000890:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		reset_value = 0;
 8000894:	2300      	movs	r3, #0
 8000896:	627b      	str	r3, [r7, #36]	; 0x24

		SYSCFG->EXTICR[index] |= (port_code << position);
 8000898:	4a63      	ldr	r2, [pc, #396]	; (8000a28 <GPIO_Init+0x38c>)
 800089a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800089e:	3302      	adds	r3, #2
 80008a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008a4:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 80008a8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80008ac:	fa01 f303 	lsl.w	r3, r1, r3
 80008b0:	4618      	mov	r0, r3
 80008b2:	495d      	ldr	r1, [pc, #372]	; (8000a28 <GPIO_Init+0x38c>)
 80008b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80008b8:	4302      	orrs	r2, r0
 80008ba:	3302      	adds	r3, #2
 80008bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		//enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80008c0:	4b5a      	ldr	r3, [pc, #360]	; (8000a2c <GPIO_Init+0x390>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	687a      	ldr	r2, [r7, #4]
 80008c6:	7912      	ldrb	r2, [r2, #4]
 80008c8:	4611      	mov	r1, r2
 80008ca:	2201      	movs	r2, #1
 80008cc:	408a      	lsls	r2, r1
 80008ce:	4611      	mov	r1, r2
 80008d0:	4a56      	ldr	r2, [pc, #344]	; (8000a2c <GPIO_Init+0x390>)
 80008d2:	430b      	orrs	r3, r1
 80008d4:	6013      	str	r3, [r2, #0]
	}

	// reset, then set speed register
	reset_value = (0x3 << ((2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)));
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	791b      	ldrb	r3, [r3, #4]
 80008da:	005b      	lsls	r3, r3, #1
 80008dc:	2203      	movs	r2, #3
 80008de:	fa02 f303 	lsl.w	r3, r2, r3
 80008e2:	627b      	str	r3, [r7, #36]	; 0x24
	pGPIOHandle->pGPIOx->OSPEEDER &= ~(reset_value);
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	6899      	ldr	r1, [r3, #8]
 80008ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ec:	43da      	mvns	r2, r3
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	400a      	ands	r2, r1
 80008f4:	609a      	str	r2, [r3, #8]
	reset_value = 0;
 80008f6:	2300      	movs	r3, #0
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ospeedr_value = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	799b      	ldrb	r3, [r3, #6]
 80008fe:	461a      	mov	r2, r3
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	791b      	ldrb	r3, [r3, #4]
 8000904:	005b      	lsls	r3, r3, #1
 8000906:	fa02 f303 	lsl.w	r3, r2, r3
 800090a:	61bb      	str	r3, [r7, #24]
	pGPIOHandle->pGPIOx->OSPEEDER |= ospeedr_value;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	6899      	ldr	r1, [r3, #8]
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	69ba      	ldr	r2, [r7, #24]
 8000918:	430a      	orrs	r2, r1
 800091a:	609a      	str	r2, [r3, #8]

	//reset, then set pupd register
	reset_value = (0x3 << ((2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)));
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	791b      	ldrb	r3, [r3, #4]
 8000920:	005b      	lsls	r3, r3, #1
 8000922:	2203      	movs	r2, #3
 8000924:	fa02 f303 	lsl.w	r3, r2, r3
 8000928:	627b      	str	r3, [r7, #36]	; 0x24
	pGPIOHandle->pGPIOx->PUPDR &= ~(reset_value);
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	68d9      	ldr	r1, [r3, #12]
 8000930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000932:	43da      	mvns	r2, r3
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	400a      	ands	r2, r1
 800093a:	60da      	str	r2, [r3, #12]
	reset_value = 0;
 800093c:	2300      	movs	r3, #0
 800093e:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t pupdr_value = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	79db      	ldrb	r3, [r3, #7]
 8000944:	461a      	mov	r2, r3
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	791b      	ldrb	r3, [r3, #4]
 800094a:	005b      	lsls	r3, r3, #1
 800094c:	fa02 f303 	lsl.w	r3, r2, r3
 8000950:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR |= pupdr_value;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	68d9      	ldr	r1, [r3, #12]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	697a      	ldr	r2, [r7, #20]
 800095e:	430a      	orrs	r2, r1
 8000960:	60da      	str	r2, [r3, #12]

	//reset, then set output type register
	reset_value = (0x1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	791b      	ldrb	r3, [r3, #4]
 8000966:	461a      	mov	r2, r3
 8000968:	2301      	movs	r3, #1
 800096a:	4093      	lsls	r3, r2
 800096c:	627b      	str	r3, [r7, #36]	; 0x24
	pGPIOHandle->pGPIOx->OTYPER &= ~(reset_value);
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	6859      	ldr	r1, [r3, #4]
 8000974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000976:	43da      	mvns	r2, r3
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	400a      	ands	r2, r1
 800097e:	605a      	str	r2, [r3, #4]
	reset_value = 0;
 8000980:	2300      	movs	r3, #0
 8000982:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t optyper_value = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	7a1b      	ldrb	r3, [r3, #8]
 8000988:	461a      	mov	r2, r3
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	791b      	ldrb	r3, [r3, #4]
 800098e:	fa02 f303 	lsl.w	r3, r2, r3
 8000992:	613b      	str	r3, [r7, #16]
	pGPIOHandle->pGPIOx->OTYPER |= optyper_value;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	6859      	ldr	r1, [r3, #4]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	693a      	ldr	r2, [r7, #16]
 80009a0:	430a      	orrs	r2, r1
 80009a2:	605a      	str	r2, [r3, #4]

	//reset, then set altfn register
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_PIN_MODE_ALTFN){
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	795b      	ldrb	r3, [r3, #5]
 80009a8:	2b02      	cmp	r3, #2
 80009aa:	d135      	bne.n	8000a18 <GPIO_Init+0x37c>
		uint8_t index = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	791b      	ldrb	r3, [r3, #4]
 80009b0:	08db      	lsrs	r3, r3, #3
 80009b2:	73fb      	strb	r3, [r7, #15]
		uint8_t position = ((pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8) * 4);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	791b      	ldrb	r3, [r3, #4]
 80009b8:	f003 0307 	and.w	r3, r3, #7
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	009b      	lsls	r3, r3, #2
 80009c0:	73bb      	strb	r3, [r7, #14]

		//reset
		reset_value = (0xF << position);
 80009c2:	7bbb      	ldrb	r3, [r7, #14]
 80009c4:	220f      	movs	r2, #15
 80009c6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ca:	627b      	str	r3, [r7, #36]	; 0x24
		pGPIOHandle->pGPIOx->AFR[index] &= ~(reset_value);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	7bfa      	ldrb	r2, [r7, #15]
 80009d2:	3208      	adds	r2, #8
 80009d4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80009d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009da:	43d9      	mvns	r1, r3
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	7bfa      	ldrb	r2, [r7, #15]
 80009e2:	4001      	ands	r1, r0
 80009e4:	3208      	adds	r2, #8
 80009e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		reset_value = 0;
 80009ea:	2300      	movs	r3, #0
 80009ec:	627b      	str	r3, [r7, #36]	; 0x24

		//set
		uint32_t afr_value = (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << position);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	7a5b      	ldrb	r3, [r3, #9]
 80009f2:	461a      	mov	r2, r3
 80009f4:	7bbb      	ldrb	r3, [r7, #14]
 80009f6:	fa02 f303 	lsl.w	r3, r2, r3
 80009fa:	60bb      	str	r3, [r7, #8]
		pGPIOHandle->pGPIOx->AFR[index] |= afr_value;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	7bfa      	ldrb	r2, [r7, #15]
 8000a02:	3208      	adds	r2, #8
 8000a04:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	7bfa      	ldrb	r2, [r7, #15]
 8000a0e:	68b9      	ldr	r1, [r7, #8]
 8000a10:	4301      	orrs	r1, r0
 8000a12:	3208      	adds	r2, #8
 8000a14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8000a18:	bf00      	nop
 8000a1a:	372c      	adds	r7, #44	; 0x2c
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bc80      	pop	{r7}
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	40023800 	.word	0x40023800
 8000a28:	40013800 	.word	0x40013800
 8000a2c:	40013c00 	.word	0x40013c00

08000a30 <GPIO_ReadFromInputPin>:
 * @return				- 0 or 1
 *
 * @note				- none
 *
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber){
 8000a30:	b480      	push	{r7}
 8000a32:	b085      	sub	sp, #20
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
 8000a38:	460b      	mov	r3, r1
 8000a3a:	70fb      	strb	r3, [r7, #3]
	uint8_t value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x00000001);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	691a      	ldr	r2, [r3, #16]
 8000a40:	78fb      	ldrb	r3, [r7, #3]
 8000a42:	fa22 f303 	lsr.w	r3, r2, r3
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	f003 0301 	and.w	r3, r3, #1
 8000a4c:	73fb      	strb	r3, [r7, #15]
	return value;
 8000a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	3714      	adds	r7, #20
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bc80      	pop	{r7}
 8000a58:	4770      	bx	lr

08000a5a <I2C_GenerateStartCondition>:
 * @return				- none
 *
 * @note				- none
 *
 */
static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx){
 8000a5a:	b480      	push	{r7}
 8000a5c:	b083      	sub	sp, #12
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_START);
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	601a      	str	r2, [r3, #0]
}
 8000a6e:	bf00      	nop
 8000a70:	370c      	adds	r7, #12
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bc80      	pop	{r7}
 8000a76:	4770      	bx	lr

08000a78 <I2C_ExecuteAddressPhaseWrite>:
 * @return				- none
 *
 * @note				- none
 *
 */
static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr){
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
 8000a80:	460b      	mov	r3, r1
 8000a82:	70fb      	strb	r3, [r7, #3]
	//Make sure there is space for r/w bit
	SlaveAddr = SlaveAddr << 1;
 8000a84:	78fb      	ldrb	r3, [r7, #3]
 8000a86:	005b      	lsls	r3, r3, #1
 8000a88:	70fb      	strb	r3, [r7, #3]
	//Clear 0th bit so r/w is set to write
	SlaveAddr &= ~(1 << 0);
 8000a8a:	78fb      	ldrb	r3, [r7, #3]
 8000a8c:	f023 0301 	bic.w	r3, r3, #1
 8000a90:	70fb      	strb	r3, [r7, #3]
	//Place address into Data Register
	pI2Cx->DR = SlaveAddr;
 8000a92:	78fa      	ldrb	r2, [r7, #3]
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	611a      	str	r2, [r3, #16]
}
 8000a98:	bf00      	nop
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bc80      	pop	{r7}
 8000aa0:	4770      	bx	lr

08000aa2 <I2C_ExecuteAddressPhaseRead>:
 * @return				- none
 *
 * @note				- none
 *
 */
static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr){
 8000aa2:	b480      	push	{r7}
 8000aa4:	b083      	sub	sp, #12
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	6078      	str	r0, [r7, #4]
 8000aaa:	460b      	mov	r3, r1
 8000aac:	70fb      	strb	r3, [r7, #3]
	//Make sure there is space for r/w bit
	SlaveAddr = SlaveAddr << 1;
 8000aae:	78fb      	ldrb	r3, [r7, #3]
 8000ab0:	005b      	lsls	r3, r3, #1
 8000ab2:	70fb      	strb	r3, [r7, #3]
	//Clear 0th bit so r/w is set to read
	SlaveAddr |= (1 << 0);
 8000ab4:	78fb      	ldrb	r3, [r7, #3]
 8000ab6:	f043 0301 	orr.w	r3, r3, #1
 8000aba:	70fb      	strb	r3, [r7, #3]
	//Place address into Data Register
	pI2Cx->DR = SlaveAddr;
 8000abc:	78fa      	ldrb	r2, [r7, #3]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	611a      	str	r2, [r3, #16]
}
 8000ac2:	bf00      	nop
 8000ac4:	370c      	adds	r7, #12
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bc80      	pop	{r7}
 8000aca:	4770      	bx	lr

08000acc <I2C_ClearADDRFlag>:
 * @return				- none
 *
 * @note				- none
 *
 */
static void I2C_ClearADDRFlag(I2C_RegDef_t *pI2Cx){
 8000acc:	b480      	push	{r7}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
	uint32_t dummy_read = pI2Cx->SR1;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	695b      	ldr	r3, [r3, #20]
 8000ad8:	60fb      	str	r3, [r7, #12]
	dummy_read = pI2Cx->SR2;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	699b      	ldr	r3, [r3, #24]
 8000ade:	60fb      	str	r3, [r7, #12]
	(void)dummy_read;
}
 8000ae0:	bf00      	nop
 8000ae2:	3714      	adds	r7, #20
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bc80      	pop	{r7}
 8000ae8:	4770      	bx	lr

08000aea <I2C_GenerateStopCondition>:
 * @return				- none
 *
 * @note				- none
 *
 */
static void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx){
 8000aea:	b480      	push	{r7}
 8000aec:	b083      	sub	sp, #12
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	601a      	str	r2, [r3, #0]
}
 8000afe:	bf00      	nop
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bc80      	pop	{r7}
 8000b06:	4770      	bx	lr

08000b08 <RCC_GetPCLK1Value>:
 * @return				- peripheral clock speed for I2C peripherals
 *
 * @note				- none
 *
 */
uint32_t RCC_GetPCLK1Value(void){
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
	uint32_t pclk1;
	uint8_t clksrc, ahbprescaler, apb1prescaler;

	clksrc = (RCC->CFGR >> 2) & 0x3;
 8000b0e:	4b3d      	ldr	r3, [pc, #244]	; (8000c04 <RCC_GetPCLK1Value+0xfc>)
 8000b10:	689b      	ldr	r3, [r3, #8]
 8000b12:	089b      	lsrs	r3, r3, #2
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	f003 0303 	and.w	r3, r3, #3
 8000b1a:	70fb      	strb	r3, [r7, #3]
	if(clksrc == 0){
 8000b1c:	78fb      	ldrb	r3, [r7, #3]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d102      	bne.n	8000b28 <RCC_GetPCLK1Value+0x20>
		pclk1 = 16000000;
 8000b22:	4b39      	ldr	r3, [pc, #228]	; (8000c08 <RCC_GetPCLK1Value+0x100>)
 8000b24:	607b      	str	r3, [r7, #4]
 8000b26:	e001      	b.n	8000b2c <RCC_GetPCLK1Value+0x24>
	} else{
		pclk1 = 0; //I wont use other clocks for now (i don't have external clock)
 8000b28:	2300      	movs	r3, #0
 8000b2a:	607b      	str	r3, [r7, #4]
	}

	ahbprescaler = (RCC->CFGR >> 4) & 0xF;
 8000b2c:	4b35      	ldr	r3, [pc, #212]	; (8000c04 <RCC_GetPCLK1Value+0xfc>)
 8000b2e:	689b      	ldr	r3, [r3, #8]
 8000b30:	091b      	lsrs	r3, r3, #4
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	f003 030f 	and.w	r3, r3, #15
 8000b38:	70bb      	strb	r3, [r7, #2]
	if(ahbprescaler < 8){
 8000b3a:	78bb      	ldrb	r3, [r7, #2]
 8000b3c:	2b07      	cmp	r3, #7
 8000b3e:	d936      	bls.n	8000bae <RCC_GetPCLK1Value+0xa6>
		//clock wont be divided
	}else if(ahbprescaler == 8){
 8000b40:	78bb      	ldrb	r3, [r7, #2]
 8000b42:	2b08      	cmp	r3, #8
 8000b44:	d103      	bne.n	8000b4e <RCC_GetPCLK1Value+0x46>
		pclk1 /= 2;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	085b      	lsrs	r3, r3, #1
 8000b4a:	607b      	str	r3, [r7, #4]
 8000b4c:	e02f      	b.n	8000bae <RCC_GetPCLK1Value+0xa6>
	}else if(ahbprescaler == 9){
 8000b4e:	78bb      	ldrb	r3, [r7, #2]
 8000b50:	2b09      	cmp	r3, #9
 8000b52:	d103      	bne.n	8000b5c <RCC_GetPCLK1Value+0x54>
		pclk1 /= 4;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	089b      	lsrs	r3, r3, #2
 8000b58:	607b      	str	r3, [r7, #4]
 8000b5a:	e028      	b.n	8000bae <RCC_GetPCLK1Value+0xa6>
	}else if(ahbprescaler == 10){
 8000b5c:	78bb      	ldrb	r3, [r7, #2]
 8000b5e:	2b0a      	cmp	r3, #10
 8000b60:	d103      	bne.n	8000b6a <RCC_GetPCLK1Value+0x62>
		pclk1 /= 8;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	08db      	lsrs	r3, r3, #3
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	e021      	b.n	8000bae <RCC_GetPCLK1Value+0xa6>
	}else if(ahbprescaler == 11){
 8000b6a:	78bb      	ldrb	r3, [r7, #2]
 8000b6c:	2b0b      	cmp	r3, #11
 8000b6e:	d103      	bne.n	8000b78 <RCC_GetPCLK1Value+0x70>
		pclk1 /= 16;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	091b      	lsrs	r3, r3, #4
 8000b74:	607b      	str	r3, [r7, #4]
 8000b76:	e01a      	b.n	8000bae <RCC_GetPCLK1Value+0xa6>
	}else if(ahbprescaler == 12){
 8000b78:	78bb      	ldrb	r3, [r7, #2]
 8000b7a:	2b0c      	cmp	r3, #12
 8000b7c:	d103      	bne.n	8000b86 <RCC_GetPCLK1Value+0x7e>
		pclk1 /= 64;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	099b      	lsrs	r3, r3, #6
 8000b82:	607b      	str	r3, [r7, #4]
 8000b84:	e013      	b.n	8000bae <RCC_GetPCLK1Value+0xa6>
	}else if(ahbprescaler == 13){
 8000b86:	78bb      	ldrb	r3, [r7, #2]
 8000b88:	2b0d      	cmp	r3, #13
 8000b8a:	d103      	bne.n	8000b94 <RCC_GetPCLK1Value+0x8c>
		pclk1 /= 128;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	09db      	lsrs	r3, r3, #7
 8000b90:	607b      	str	r3, [r7, #4]
 8000b92:	e00c      	b.n	8000bae <RCC_GetPCLK1Value+0xa6>
	}else if(ahbprescaler == 14){
 8000b94:	78bb      	ldrb	r3, [r7, #2]
 8000b96:	2b0e      	cmp	r3, #14
 8000b98:	d103      	bne.n	8000ba2 <RCC_GetPCLK1Value+0x9a>
		pclk1 /= 256;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	0a1b      	lsrs	r3, r3, #8
 8000b9e:	607b      	str	r3, [r7, #4]
 8000ba0:	e005      	b.n	8000bae <RCC_GetPCLK1Value+0xa6>
	}else if(ahbprescaler == 15){
 8000ba2:	78bb      	ldrb	r3, [r7, #2]
 8000ba4:	2b0f      	cmp	r3, #15
 8000ba6:	d102      	bne.n	8000bae <RCC_GetPCLK1Value+0xa6>
		pclk1 /= 512;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	0a5b      	lsrs	r3, r3, #9
 8000bac:	607b      	str	r3, [r7, #4]
	}

	apb1prescaler = (RCC->CFGR >> 10) & 0x7;
 8000bae:	4b15      	ldr	r3, [pc, #84]	; (8000c04 <RCC_GetPCLK1Value+0xfc>)
 8000bb0:	689b      	ldr	r3, [r3, #8]
 8000bb2:	0a9b      	lsrs	r3, r3, #10
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	f003 0307 	and.w	r3, r3, #7
 8000bba:	707b      	strb	r3, [r7, #1]
	if(apb1prescaler < 4){
 8000bbc:	787b      	ldrb	r3, [r7, #1]
 8000bbe:	2b03      	cmp	r3, #3
 8000bc0:	d91a      	bls.n	8000bf8 <RCC_GetPCLK1Value+0xf0>
		//clk not divided
	} else if(apb1prescaler == 4){
 8000bc2:	787b      	ldrb	r3, [r7, #1]
 8000bc4:	2b04      	cmp	r3, #4
 8000bc6:	d103      	bne.n	8000bd0 <RCC_GetPCLK1Value+0xc8>
		pclk1 /= 2;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	085b      	lsrs	r3, r3, #1
 8000bcc:	607b      	str	r3, [r7, #4]
 8000bce:	e013      	b.n	8000bf8 <RCC_GetPCLK1Value+0xf0>
	} else if(apb1prescaler == 5){
 8000bd0:	787b      	ldrb	r3, [r7, #1]
 8000bd2:	2b05      	cmp	r3, #5
 8000bd4:	d103      	bne.n	8000bde <RCC_GetPCLK1Value+0xd6>
		pclk1 /= 4;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	089b      	lsrs	r3, r3, #2
 8000bda:	607b      	str	r3, [r7, #4]
 8000bdc:	e00c      	b.n	8000bf8 <RCC_GetPCLK1Value+0xf0>
	} else if(apb1prescaler == 6){
 8000bde:	787b      	ldrb	r3, [r7, #1]
 8000be0:	2b06      	cmp	r3, #6
 8000be2:	d103      	bne.n	8000bec <RCC_GetPCLK1Value+0xe4>
		pclk1 /= 8;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	08db      	lsrs	r3, r3, #3
 8000be8:	607b      	str	r3, [r7, #4]
 8000bea:	e005      	b.n	8000bf8 <RCC_GetPCLK1Value+0xf0>
	} else if(apb1prescaler == 7){
 8000bec:	787b      	ldrb	r3, [r7, #1]
 8000bee:	2b07      	cmp	r3, #7
 8000bf0:	d102      	bne.n	8000bf8 <RCC_GetPCLK1Value+0xf0>
		pclk1 /= 16;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	091b      	lsrs	r3, r3, #4
 8000bf6:	607b      	str	r3, [r7, #4]
	}

	return pclk1;
 8000bf8:	687b      	ldr	r3, [r7, #4]
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	370c      	adds	r7, #12
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bc80      	pop	{r7}
 8000c02:	4770      	bx	lr
 8000c04:	40023800 	.word	0x40023800
 8000c08:	00f42400 	.word	0x00f42400

08000c0c <I2C_PeriClockControl>:
 * @return				- none
 *
 * @note				- none
 *
 */
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi){
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	460b      	mov	r3, r1
 8000c16:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8000c18:	78fb      	ldrb	r3, [r7, #3]
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d120      	bne.n	8000c60 <I2C_PeriClockControl+0x54>
		if(pI2Cx == I2C1){
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4a22      	ldr	r2, [pc, #136]	; (8000cac <I2C_PeriClockControl+0xa0>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d106      	bne.n	8000c34 <I2C_PeriClockControl+0x28>
			I2C1_PCLK_EN();
 8000c26:	4b22      	ldr	r3, [pc, #136]	; (8000cb0 <I2C_PeriClockControl+0xa4>)
 8000c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2a:	4a21      	ldr	r2, [pc, #132]	; (8000cb0 <I2C_PeriClockControl+0xa4>)
 8000c2c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c30:	6413      	str	r3, [r2, #64]	; 0x40
			I2C2_PCLK_DI();
		} else if (pI2Cx == I2C3){
			I2C3_PCLK_DI();
		}
	}
}
 8000c32:	e035      	b.n	8000ca0 <I2C_PeriClockControl+0x94>
		} else if (pI2Cx == I2C2){
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	4a1f      	ldr	r2, [pc, #124]	; (8000cb4 <I2C_PeriClockControl+0xa8>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d106      	bne.n	8000c4a <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 8000c3c:	4b1c      	ldr	r3, [pc, #112]	; (8000cb0 <I2C_PeriClockControl+0xa4>)
 8000c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c40:	4a1b      	ldr	r2, [pc, #108]	; (8000cb0 <I2C_PeriClockControl+0xa4>)
 8000c42:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c46:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000c48:	e02a      	b.n	8000ca0 <I2C_PeriClockControl+0x94>
		} else if (pI2Cx == I2C3){
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	4a1a      	ldr	r2, [pc, #104]	; (8000cb8 <I2C_PeriClockControl+0xac>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d126      	bne.n	8000ca0 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_EN();
 8000c52:	4b17      	ldr	r3, [pc, #92]	; (8000cb0 <I2C_PeriClockControl+0xa4>)
 8000c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c56:	4a16      	ldr	r2, [pc, #88]	; (8000cb0 <I2C_PeriClockControl+0xa4>)
 8000c58:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000c5c:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000c5e:	e01f      	b.n	8000ca0 <I2C_PeriClockControl+0x94>
		if(pI2Cx == I2C1){
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	4a12      	ldr	r2, [pc, #72]	; (8000cac <I2C_PeriClockControl+0xa0>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d106      	bne.n	8000c76 <I2C_PeriClockControl+0x6a>
			I2C1_PCLK_DI();
 8000c68:	4b11      	ldr	r3, [pc, #68]	; (8000cb0 <I2C_PeriClockControl+0xa4>)
 8000c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6c:	4a10      	ldr	r2, [pc, #64]	; (8000cb0 <I2C_PeriClockControl+0xa4>)
 8000c6e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000c72:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000c74:	e014      	b.n	8000ca0 <I2C_PeriClockControl+0x94>
		} else if (pI2Cx == I2C2){
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4a0e      	ldr	r2, [pc, #56]	; (8000cb4 <I2C_PeriClockControl+0xa8>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d106      	bne.n	8000c8c <I2C_PeriClockControl+0x80>
			I2C2_PCLK_DI();
 8000c7e:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <I2C_PeriClockControl+0xa4>)
 8000c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c82:	4a0b      	ldr	r2, [pc, #44]	; (8000cb0 <I2C_PeriClockControl+0xa4>)
 8000c84:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000c88:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000c8a:	e009      	b.n	8000ca0 <I2C_PeriClockControl+0x94>
		} else if (pI2Cx == I2C3){
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	4a0a      	ldr	r2, [pc, #40]	; (8000cb8 <I2C_PeriClockControl+0xac>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d105      	bne.n	8000ca0 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_DI();
 8000c94:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <I2C_PeriClockControl+0xa4>)
 8000c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c98:	4a05      	ldr	r2, [pc, #20]	; (8000cb0 <I2C_PeriClockControl+0xa4>)
 8000c9a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000c9e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000ca0:	bf00      	nop
 8000ca2:	370c      	adds	r7, #12
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bc80      	pop	{r7}
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	40005400 	.word	0x40005400
 8000cb0:	40023800 	.word	0x40023800
 8000cb4:	40005800 	.word	0x40005800
 8000cb8:	40005c00 	.word	0x40005c00

08000cbc <I2C_Init>:
 * @return				- none
 *
 * @note				- none
 *
 */
void I2C_Init(I2C_Handle_t *pI2CHandle){
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b088      	sub	sp, #32
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
	uint32_t i2c_cr2 = 0;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	61bb      	str	r3, [r7, #24]
	uint32_t i2c_oar1 = 0;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	617b      	str	r3, [r7, #20]
	uint32_t i2c_ccr = 0;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	613b      	str	r3, [r7, #16]
	uint32_t i2c_trise = 0;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	60fb      	str	r3, [r7, #12]

	//enable the clock for the i2cx peripheral
	I2C_PeriClockControl(pI2CHandle->pI2Cx,ENABLE);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	2101      	movs	r1, #1
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff ff96 	bl	8000c0c <I2C_PeriClockControl>
	I2C_PeripheralControl(pI2CHandle->pI2Cx, ENABLE);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f000 f99b 	bl	8001022 <I2C_PeripheralControl>
	//ack bit configuration
	pI2CHandle->pI2Cx->CR1 |= (pI2CHandle->I2C_Config.I2C_ACKControl << I2C_CR1_ACK);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	6819      	ldr	r1, [r3, #0]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	68db      	ldr	r3, [r3, #12]
 8000cf6:	029a      	lsls	r2, r3, #10
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	430a      	orrs	r2, r1
 8000cfe:	601a      	str	r2, [r3, #0]


	//configure the FREQ bits of CR2
	i2c_cr2 |= ((RCC_GetPCLK1Value() /1000000U ) << I2C_CR2_FREQ);
 8000d00:	f7ff ff02 	bl	8000b08 <RCC_GetPCLK1Value>
 8000d04:	4602      	mov	r2, r0
 8000d06:	4b48      	ldr	r3, [pc, #288]	; (8000e28 <I2C_Init+0x16c>)
 8000d08:	fba3 2302 	umull	r2, r3, r3, r2
 8000d0c:	0c9b      	lsrs	r3, r3, #18
 8000d0e:	69ba      	ldr	r2, [r7, #24]
 8000d10:	4313      	orrs	r3, r2
 8000d12:	61bb      	str	r3, [r7, #24]
	pI2CHandle->pI2Cx->CR2 = (i2c_cr2 & 0x3F);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	69ba      	ldr	r2, [r7, #24]
 8000d1a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000d1e:	605a      	str	r2, [r3, #4]

	//configure own address for slave mode when using 7 bit address
	i2c_oar1 |= (pI2CHandle->I2C_Config.I2C_DeviceAddress << I2C_OAR1_ADD7_1);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	7a1b      	ldrb	r3, [r3, #8]
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	461a      	mov	r2, r3
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	617b      	str	r3, [r7, #20]
	i2c_oar1 |= (1 << 14);
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d34:	617b      	str	r3, [r7, #20]
	pI2CHandle->pI2Cx->OAR1 = i2c_oar1;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	697a      	ldr	r2, [r7, #20]
 8000d3c:	609a      	str	r2, [r3, #8]

	//configure CCR register
	uint16_t ccr_value = 0;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	83fb      	strh	r3, [r7, #30]
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM){
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	4a39      	ldr	r2, [pc, #228]	; (8000e2c <I2C_Init+0x170>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d811      	bhi.n	8000d70 <I2C_Init+0xb4>
		//mode is standard mode so we don't have to touch 15th and 14th bits
		ccr_value = RCC_GetPCLK1Value() / (2 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8000d4c:	f7ff fedc 	bl	8000b08 <RCC_GetPCLK1Value>
 8000d50:	4602      	mov	r2, r0
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d5c:	83fb      	strh	r3, [r7, #30]
		i2c_ccr |= (ccr_value << I2C_CCR_CCR);
 8000d5e:	8bfb      	ldrh	r3, [r7, #30]
 8000d60:	693a      	ldr	r2, [r7, #16]
 8000d62:	4313      	orrs	r3, r2
 8000d64:	613b      	str	r3, [r7, #16]

		pI2CHandle->pI2Cx->CCR = i2c_ccr;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	61da      	str	r2, [r3, #28]
 8000d6e:	e02e      	b.n	8000dce <I2C_Init+0x112>
	}else {
		//Fast mode
		i2c_ccr |= (1 << I2C_CCR_FS);
 8000d70:	693b      	ldr	r3, [r7, #16]
 8000d72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d76:	613b      	str	r3, [r7, #16]
		i2c_ccr |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << I2C_CCR_DUTY);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	691b      	ldr	r3, [r3, #16]
 8000d7c:	039b      	lsls	r3, r3, #14
 8000d7e:	693a      	ldr	r2, [r7, #16]
 8000d80:	4313      	orrs	r3, r2
 8000d82:	613b      	str	r3, [r7, #16]

		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2){
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	691b      	ldr	r3, [r3, #16]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d10b      	bne.n	8000da4 <I2C_Init+0xe8>
			ccr_value = RCC_GetPCLK1Value() / (3 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8000d8c:	f7ff febc 	bl	8000b08 <RCC_GetPCLK1Value>
 8000d90:	4601      	mov	r1, r0
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	685a      	ldr	r2, [r3, #4]
 8000d96:	4613      	mov	r3, r2
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	4413      	add	r3, r2
 8000d9c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000da0:	83fb      	strh	r3, [r7, #30]
 8000da2:	e00c      	b.n	8000dbe <I2C_Init+0x102>
		}else {
			ccr_value = RCC_GetPCLK1Value() / (25 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8000da4:	f7ff feb0 	bl	8000b08 <RCC_GetPCLK1Value>
 8000da8:	4601      	mov	r1, r0
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	685a      	ldr	r2, [r3, #4]
 8000dae:	4613      	mov	r3, r2
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	4413      	add	r3, r2
 8000db4:	009a      	lsls	r2, r3, #2
 8000db6:	4413      	add	r3, r2
 8000db8:	fbb1 f3f3 	udiv	r3, r1, r3
 8000dbc:	83fb      	strh	r3, [r7, #30]
		}
		i2c_ccr |= (ccr_value << I2C_CCR_CCR);
 8000dbe:	8bfb      	ldrh	r3, [r7, #30]
 8000dc0:	693a      	ldr	r2, [r7, #16]
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	613b      	str	r3, [r7, #16]

		pI2CHandle->pI2Cx->CCR = i2c_ccr;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	61da      	str	r2, [r3, #28]
	}

	//Configure TRISE register
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM){
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	4a16      	ldr	r2, [pc, #88]	; (8000e2c <I2C_Init+0x170>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d80f      	bhi.n	8000df8 <I2C_Init+0x13c>
		//Standard mode
		i2c_trise = (RCC_GetPCLK1Value() / 1000000U) + 1;
 8000dd8:	f7ff fe96 	bl	8000b08 <RCC_GetPCLK1Value>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <I2C_Init+0x16c>)
 8000de0:	fba3 2302 	umull	r2, r3, r3, r2
 8000de4:	0c9b      	lsrs	r3, r3, #18
 8000de6:	3301      	adds	r3, #1
 8000de8:	60fb      	str	r3, [r7, #12]
		pI2CHandle->pI2Cx->TRISE = i2c_trise & 0x3F;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	68fa      	ldr	r2, [r7, #12]
 8000df0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000df4:	621a      	str	r2, [r3, #32]
		//Fast mode
		i2c_trise = ((RCC_GetPCLK1Value() * 300) / 1000000000U) + 1;
		pI2CHandle->pI2Cx->TRISE = i2c_trise & 0x3F;
	}

}
 8000df6:	e013      	b.n	8000e20 <I2C_Init+0x164>
		i2c_trise = ((RCC_GetPCLK1Value() * 300) / 1000000000U) + 1;
 8000df8:	f7ff fe86 	bl	8000b08 <RCC_GetPCLK1Value>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000e02:	fb03 f302 	mul.w	r3, r3, r2
 8000e06:	0a5b      	lsrs	r3, r3, #9
 8000e08:	4a09      	ldr	r2, [pc, #36]	; (8000e30 <I2C_Init+0x174>)
 8000e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e0e:	09db      	lsrs	r3, r3, #7
 8000e10:	3301      	adds	r3, #1
 8000e12:	60fb      	str	r3, [r7, #12]
		pI2CHandle->pI2Cx->TRISE = i2c_trise & 0x3F;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	68fa      	ldr	r2, [r7, #12]
 8000e1a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000e1e:	621a      	str	r2, [r3, #32]
}
 8000e20:	bf00      	nop
 8000e22:	3720      	adds	r7, #32
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	431bde83 	.word	0x431bde83
 8000e2c:	000186a0 	.word	0x000186a0
 8000e30:	00044b83 	.word	0x00044b83

08000e34 <I2C_MasterSendData>:
 * @return				- none
 *
 * @note				- none
 *
 */
void I2C_MasterSendData(I2C_Handle_t *pI2CHandle, uint8_t *pTxbuffer, uint32_t Len, uint8_t SlaveAddr, uint8_t Sr){
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	60f8      	str	r0, [r7, #12]
 8000e3c:	60b9      	str	r1, [r7, #8]
 8000e3e:	607a      	str	r2, [r7, #4]
 8000e40:	70fb      	strb	r3, [r7, #3]
	//Initiate start condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff fe07 	bl	8000a5a <I2C_GenerateStartCondition>

	//Confirm that start generation is completed by checking the SB flag in SR1
	//Until SB is cleared. CLK will be stretched (pulled to LOW)
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB));
 8000e4c:	bf00      	nop
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	2101      	movs	r1, #1
 8000e54:	4618      	mov	r0, r3
 8000e56:	f000 f8ff 	bl	8001058 <I2C_GetFlagStatus>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d0f6      	beq.n	8000e4e <I2C_MasterSendData+0x1a>

	//Send the address of the slave with r/w bit set to write (0)
	I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx, SlaveAddr);
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	78fa      	ldrb	r2, [r7, #3]
 8000e66:	4611      	mov	r1, r2
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff fe05 	bl	8000a78 <I2C_ExecuteAddressPhaseWrite>

	//Confirm that address phase is completed by checking the ADDR flag in the SR1
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR));
 8000e6e:	bf00      	nop
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2102      	movs	r1, #2
 8000e76:	4618      	mov	r0, r3
 8000e78:	f000 f8ee 	bl	8001058 <I2C_GetFlagStatus>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d0f6      	beq.n	8000e70 <I2C_MasterSendData+0x3c>
	//clear ADDR Flag
	I2C_ClearADDRFlag(pI2CHandle->pI2Cx);
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff fe20 	bl	8000acc <I2C_ClearADDRFlag>

	//Send data until Len == 0
	while(Len > 0){
 8000e8c:	e014      	b.n	8000eb8 <I2C_MasterSendData+0x84>
		//Wait till TXE is SET
		while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE));
 8000e8e:	bf00      	nop
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	2180      	movs	r1, #128	; 0x80
 8000e96:	4618      	mov	r0, r3
 8000e98:	f000 f8de 	bl	8001058 <I2C_GetFlagStatus>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d0f6      	beq.n	8000e90 <I2C_MasterSendData+0x5c>
		pI2CHandle->pI2Cx->DR = *pTxbuffer;
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	781a      	ldrb	r2, [r3, #0]
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	611a      	str	r2, [r3, #16]
		pTxbuffer++;
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	3301      	adds	r3, #1
 8000eb0:	60bb      	str	r3, [r7, #8]
		Len--;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	3b01      	subs	r3, #1
 8000eb6:	607b      	str	r3, [r7, #4]
	while(Len > 0){
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d1e7      	bne.n	8000e8e <I2C_MasterSendData+0x5a>
	}

	//After sending data wait until TXE is SET and BTF is SET
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE));
 8000ebe:	bf00      	nop
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2180      	movs	r1, #128	; 0x80
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f000 f8c6 	bl	8001058 <I2C_GetFlagStatus>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d0f6      	beq.n	8000ec0 <I2C_MasterSendData+0x8c>
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_BTF));
 8000ed2:	bf00      	nop
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	2104      	movs	r1, #4
 8000eda:	4618      	mov	r0, r3
 8000edc:	f000 f8bc 	bl	8001058 <I2C_GetFlagStatus>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d0f6      	beq.n	8000ed4 <I2C_MasterSendData+0xa0>

	//After that generate STOP condition
	if(Sr == I2C_DISABLE_SR){
 8000ee6:	7e3b      	ldrb	r3, [r7, #24]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d104      	bne.n	8000ef6 <I2C_MasterSendData+0xc2>
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff fdfa 	bl	8000aea <I2C_GenerateStopCondition>
	}
}
 8000ef6:	bf00      	nop
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <I2C_MasterReceiveData>:
 * @return				- none
 *
 * @note				- none
 *
 */
void I2C_MasterReceiveData(I2C_Handle_t *pI2CHandle, uint8_t *pRxbuffer, uint32_t Len, uint8_t SlaveAddr, uint8_t Sr){
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b086      	sub	sp, #24
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	60f8      	str	r0, [r7, #12]
 8000f06:	60b9      	str	r1, [r7, #8]
 8000f08:	607a      	str	r2, [r7, #4]
 8000f0a:	70fb      	strb	r3, [r7, #3]
	//Generate the start condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff fda2 	bl	8000a5a <I2C_GenerateStartCondition>

	//Confirm that start generation is completed by checking the SB flag in the SR1
	//Note: until SB is cleared SCLK will be streched (pulled to LOW)
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB));
 8000f16:	bf00      	nop
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2101      	movs	r1, #1
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f000 f89a 	bl	8001058 <I2C_GetFlagStatus>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d0f6      	beq.n	8000f18 <I2C_MasterReceiveData+0x1a>

	//Send the address of the slave with r/nw bit set to R(1) (total 8 bits)
	I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx, SlaveAddr);
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	78fa      	ldrb	r2, [r7, #3]
 8000f30:	4611      	mov	r1, r2
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff fdb5 	bl	8000aa2 <I2C_ExecuteAddressPhaseRead>

	//Wait until address phase is completed by checking ADDR flag in the SR1
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR));
 8000f38:	bf00      	nop
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	2102      	movs	r1, #2
 8000f40:	4618      	mov	r0, r3
 8000f42:	f000 f889 	bl	8001058 <I2C_GetFlagStatus>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d0f6      	beq.n	8000f3a <I2C_MasterReceiveData+0x3c>

	//procedure to read only 1 byte from slave
	if(Len == 1){
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d123      	bne.n	8000f9a <I2C_MasterReceiveData+0x9c>
		//Disable Acking
		I2C_ManageAcking(pI2CHandle->pI2Cx, I2C_ACK_DISABLE);
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	2100      	movs	r1, #0
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f000 f890 	bl	800107e <I2C_ManageAcking>

		//Clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle->pI2Cx);
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4618      	mov	r0, r3
 8000f64:	f7ff fdb2 	bl	8000acc <I2C_ClearADDRFlag>

		//Wait until RXNE is SET
		while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_RXNE));
 8000f68:	bf00      	nop
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	2140      	movs	r1, #64	; 0x40
 8000f70:	4618      	mov	r0, r3
 8000f72:	f000 f871 	bl	8001058 <I2C_GetFlagStatus>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d0f6      	beq.n	8000f6a <I2C_MasterReceiveData+0x6c>

		//generate STOP condition
		if(Sr == I2C_DISABLE_SR){
 8000f7c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d104      	bne.n	8000f8e <I2C_MasterReceiveData+0x90>
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff fdae 	bl	8000aea <I2C_GenerateStopCondition>
		}

		//read data in to buffer
		*pRxbuffer = pI2CHandle->pI2Cx->DR;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	691b      	ldr	r3, [r3, #16]
 8000f94:	b2da      	uxtb	r2, r3
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	701a      	strb	r2, [r3, #0]

	}

	//procedure to read data from slave when LEN > 1
	if(Len > 1){
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d932      	bls.n	8001006 <I2C_MasterReceiveData+0x108>
		//Clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle->pI2Cx);
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff fd91 	bl	8000acc <I2C_ClearADDRFlag>

		//read the data until LEN == 0
		for(uint32_t i = Len; i > 0; i--){
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	617b      	str	r3, [r7, #20]
 8000fae:	e027      	b.n	8001000 <I2C_MasterReceiveData+0x102>
			//wait until RXNE becomes 1
			while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_RXNE));
 8000fb0:	bf00      	nop
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	2140      	movs	r1, #64	; 0x40
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f000 f84d 	bl	8001058 <I2C_GetFlagStatus>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d0f6      	beq.n	8000fb2 <I2C_MasterReceiveData+0xb4>

			//if last 2 bytes are remaining
			if(i == 2){
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	2b02      	cmp	r3, #2
 8000fc8:	d10e      	bne.n	8000fe8 <I2C_MasterReceiveData+0xea>
				//clear the ACK bit
				I2C_ManageAcking(pI2CHandle->pI2Cx, I2C_ACK_DISABLE);
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	2100      	movs	r1, #0
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f000 f854 	bl	800107e <I2C_ManageAcking>

				//generate STOP condition
				if(Sr == I2C_DISABLE_SR){
 8000fd6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d104      	bne.n	8000fe8 <I2C_MasterReceiveData+0xea>
					I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff fd81 	bl	8000aea <I2C_GenerateStopCondition>
				}
			}

			//read the data from data register in to buffer
			*pRxbuffer = pI2CHandle->pI2Cx->DR;
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	691b      	ldr	r3, [r3, #16]
 8000fee:	b2da      	uxtb	r2, r3
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	701a      	strb	r2, [r3, #0]

			//increment the buffer address
			pRxbuffer++;
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	60bb      	str	r3, [r7, #8]
		for(uint32_t i = Len; i > 0; i--){
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	3b01      	subs	r3, #1
 8000ffe:	617b      	str	r3, [r7, #20]
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d1d4      	bne.n	8000fb0 <I2C_MasterReceiveData+0xb2>
		}
	}
	//re-enable ACKing
	if(pI2CHandle->I2C_Config.I2C_ACKControl == I2C_ACK_ENABLE){
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	68db      	ldr	r3, [r3, #12]
 800100a:	2b01      	cmp	r3, #1
 800100c:	d105      	bne.n	800101a <I2C_MasterReceiveData+0x11c>
		I2C_ManageAcking(pI2CHandle->pI2Cx, I2C_ACK_ENABLE);
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	2101      	movs	r1, #1
 8001014:	4618      	mov	r0, r3
 8001016:	f000 f832 	bl	800107e <I2C_ManageAcking>
	}
}
 800101a:	bf00      	nop
 800101c:	3718      	adds	r7, #24
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <I2C_PeripheralControl>:
 * @return				- none
 *
 * @note				- none
 *
 */
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi){
 8001022:	b480      	push	{r7}
 8001024:	b083      	sub	sp, #12
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
 800102a:	460b      	mov	r3, r1
 800102c:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE){
 800102e:	78fb      	ldrb	r3, [r7, #3]
 8001030:	2b01      	cmp	r3, #1
 8001032:	d106      	bne.n	8001042 <I2C_PeripheralControl+0x20>
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f043 0201 	orr.w	r2, r3, #1
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	601a      	str	r2, [r3, #0]
	} else{
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
	}
}
 8001040:	e005      	b.n	800104e <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f023 0201 	bic.w	r2, r3, #1
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	601a      	str	r2, [r3, #0]
}
 800104e:	bf00      	nop
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	bc80      	pop	{r7}
 8001056:	4770      	bx	lr

08001058 <I2C_GetFlagStatus>:
 * @return				- Flag status (1 or 0)
 *
 * @note				- none
 *
 */
uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx, uint32_t FlagName){
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]
	if(pI2Cx->SR1 & FlagName){
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	695a      	ldr	r2, [r3, #20]
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	4013      	ands	r3, r2
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <I2C_GetFlagStatus+0x1a>
		return FLAG_SET;
 800106e:	2301      	movs	r3, #1
 8001070:	e000      	b.n	8001074 <I2C_GetFlagStatus+0x1c>
	}

	return FLAG_RESET;
 8001072:	2300      	movs	r3, #0
}
 8001074:	4618      	mov	r0, r3
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	bc80      	pop	{r7}
 800107c:	4770      	bx	lr

0800107e <I2C_ManageAcking>:
 * @return				- none
 *
 * @note				- none
 *
 */
void I2C_ManageAcking(I2C_RegDef_t *pI2CX, uint8_t EnOrDi){
 800107e:	b480      	push	{r7}
 8001080:	b083      	sub	sp, #12
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
 8001086:	460b      	mov	r3, r1
 8001088:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == I2C_ACK_ENABLE){
 800108a:	78fb      	ldrb	r3, [r7, #3]
 800108c:	2b01      	cmp	r3, #1
 800108e:	d106      	bne.n	800109e <I2C_ManageAcking+0x20>
		pI2CX->CR1 |= (1 << I2C_CR1_ACK);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	601a      	str	r2, [r3, #0]
	}else{
		pI2CX->CR1 &= ~(1 << I2C_CR1_ACK);
	}
}
 800109c:	e005      	b.n	80010aa <I2C_ManageAcking+0x2c>
		pI2CX->CR1 &= ~(1 << I2C_CR1_ACK);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	601a      	str	r2, [r3, #0]
}
 80010aa:	bf00      	nop
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bc80      	pop	{r7}
 80010b2:	4770      	bx	lr

080010b4 <__errno>:
 80010b4:	4b01      	ldr	r3, [pc, #4]	; (80010bc <__errno+0x8>)
 80010b6:	6818      	ldr	r0, [r3, #0]
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	20000000 	.word	0x20000000

080010c0 <__libc_init_array>:
 80010c0:	b570      	push	{r4, r5, r6, lr}
 80010c2:	4e0d      	ldr	r6, [pc, #52]	; (80010f8 <__libc_init_array+0x38>)
 80010c4:	4c0d      	ldr	r4, [pc, #52]	; (80010fc <__libc_init_array+0x3c>)
 80010c6:	1ba4      	subs	r4, r4, r6
 80010c8:	10a4      	asrs	r4, r4, #2
 80010ca:	2500      	movs	r5, #0
 80010cc:	42a5      	cmp	r5, r4
 80010ce:	d109      	bne.n	80010e4 <__libc_init_array+0x24>
 80010d0:	4e0b      	ldr	r6, [pc, #44]	; (8001100 <__libc_init_array+0x40>)
 80010d2:	4c0c      	ldr	r4, [pc, #48]	; (8001104 <__libc_init_array+0x44>)
 80010d4:	f001 fa0e 	bl	80024f4 <_init>
 80010d8:	1ba4      	subs	r4, r4, r6
 80010da:	10a4      	asrs	r4, r4, #2
 80010dc:	2500      	movs	r5, #0
 80010de:	42a5      	cmp	r5, r4
 80010e0:	d105      	bne.n	80010ee <__libc_init_array+0x2e>
 80010e2:	bd70      	pop	{r4, r5, r6, pc}
 80010e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80010e8:	4798      	blx	r3
 80010ea:	3501      	adds	r5, #1
 80010ec:	e7ee      	b.n	80010cc <__libc_init_array+0xc>
 80010ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80010f2:	4798      	blx	r3
 80010f4:	3501      	adds	r5, #1
 80010f6:	e7f2      	b.n	80010de <__libc_init_array+0x1e>
 80010f8:	080025e0 	.word	0x080025e0
 80010fc:	080025e0 	.word	0x080025e0
 8001100:	080025e0 	.word	0x080025e0
 8001104:	080025e4 	.word	0x080025e4

08001108 <memset>:
 8001108:	4402      	add	r2, r0
 800110a:	4603      	mov	r3, r0
 800110c:	4293      	cmp	r3, r2
 800110e:	d100      	bne.n	8001112 <memset+0xa>
 8001110:	4770      	bx	lr
 8001112:	f803 1b01 	strb.w	r1, [r3], #1
 8001116:	e7f9      	b.n	800110c <memset+0x4>

08001118 <iprintf>:
 8001118:	b40f      	push	{r0, r1, r2, r3}
 800111a:	4b0a      	ldr	r3, [pc, #40]	; (8001144 <iprintf+0x2c>)
 800111c:	b513      	push	{r0, r1, r4, lr}
 800111e:	681c      	ldr	r4, [r3, #0]
 8001120:	b124      	cbz	r4, 800112c <iprintf+0x14>
 8001122:	69a3      	ldr	r3, [r4, #24]
 8001124:	b913      	cbnz	r3, 800112c <iprintf+0x14>
 8001126:	4620      	mov	r0, r4
 8001128:	f000 fa22 	bl	8001570 <__sinit>
 800112c:	ab05      	add	r3, sp, #20
 800112e:	9a04      	ldr	r2, [sp, #16]
 8001130:	68a1      	ldr	r1, [r4, #8]
 8001132:	9301      	str	r3, [sp, #4]
 8001134:	4620      	mov	r0, r4
 8001136:	f000 fbd9 	bl	80018ec <_vfiprintf_r>
 800113a:	b002      	add	sp, #8
 800113c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001140:	b004      	add	sp, #16
 8001142:	4770      	bx	lr
 8001144:	20000000 	.word	0x20000000

08001148 <_puts_r>:
 8001148:	b570      	push	{r4, r5, r6, lr}
 800114a:	460e      	mov	r6, r1
 800114c:	4605      	mov	r5, r0
 800114e:	b118      	cbz	r0, 8001158 <_puts_r+0x10>
 8001150:	6983      	ldr	r3, [r0, #24]
 8001152:	b90b      	cbnz	r3, 8001158 <_puts_r+0x10>
 8001154:	f000 fa0c 	bl	8001570 <__sinit>
 8001158:	69ab      	ldr	r3, [r5, #24]
 800115a:	68ac      	ldr	r4, [r5, #8]
 800115c:	b913      	cbnz	r3, 8001164 <_puts_r+0x1c>
 800115e:	4628      	mov	r0, r5
 8001160:	f000 fa06 	bl	8001570 <__sinit>
 8001164:	4b23      	ldr	r3, [pc, #140]	; (80011f4 <_puts_r+0xac>)
 8001166:	429c      	cmp	r4, r3
 8001168:	d117      	bne.n	800119a <_puts_r+0x52>
 800116a:	686c      	ldr	r4, [r5, #4]
 800116c:	89a3      	ldrh	r3, [r4, #12]
 800116e:	071b      	lsls	r3, r3, #28
 8001170:	d51d      	bpl.n	80011ae <_puts_r+0x66>
 8001172:	6923      	ldr	r3, [r4, #16]
 8001174:	b1db      	cbz	r3, 80011ae <_puts_r+0x66>
 8001176:	3e01      	subs	r6, #1
 8001178:	68a3      	ldr	r3, [r4, #8]
 800117a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800117e:	3b01      	subs	r3, #1
 8001180:	60a3      	str	r3, [r4, #8]
 8001182:	b9e9      	cbnz	r1, 80011c0 <_puts_r+0x78>
 8001184:	2b00      	cmp	r3, #0
 8001186:	da2e      	bge.n	80011e6 <_puts_r+0x9e>
 8001188:	4622      	mov	r2, r4
 800118a:	210a      	movs	r1, #10
 800118c:	4628      	mov	r0, r5
 800118e:	f000 f83f 	bl	8001210 <__swbuf_r>
 8001192:	3001      	adds	r0, #1
 8001194:	d011      	beq.n	80011ba <_puts_r+0x72>
 8001196:	200a      	movs	r0, #10
 8001198:	e011      	b.n	80011be <_puts_r+0x76>
 800119a:	4b17      	ldr	r3, [pc, #92]	; (80011f8 <_puts_r+0xb0>)
 800119c:	429c      	cmp	r4, r3
 800119e:	d101      	bne.n	80011a4 <_puts_r+0x5c>
 80011a0:	68ac      	ldr	r4, [r5, #8]
 80011a2:	e7e3      	b.n	800116c <_puts_r+0x24>
 80011a4:	4b15      	ldr	r3, [pc, #84]	; (80011fc <_puts_r+0xb4>)
 80011a6:	429c      	cmp	r4, r3
 80011a8:	bf08      	it	eq
 80011aa:	68ec      	ldreq	r4, [r5, #12]
 80011ac:	e7de      	b.n	800116c <_puts_r+0x24>
 80011ae:	4621      	mov	r1, r4
 80011b0:	4628      	mov	r0, r5
 80011b2:	f000 f87f 	bl	80012b4 <__swsetup_r>
 80011b6:	2800      	cmp	r0, #0
 80011b8:	d0dd      	beq.n	8001176 <_puts_r+0x2e>
 80011ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011be:	bd70      	pop	{r4, r5, r6, pc}
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	da04      	bge.n	80011ce <_puts_r+0x86>
 80011c4:	69a2      	ldr	r2, [r4, #24]
 80011c6:	429a      	cmp	r2, r3
 80011c8:	dc06      	bgt.n	80011d8 <_puts_r+0x90>
 80011ca:	290a      	cmp	r1, #10
 80011cc:	d004      	beq.n	80011d8 <_puts_r+0x90>
 80011ce:	6823      	ldr	r3, [r4, #0]
 80011d0:	1c5a      	adds	r2, r3, #1
 80011d2:	6022      	str	r2, [r4, #0]
 80011d4:	7019      	strb	r1, [r3, #0]
 80011d6:	e7cf      	b.n	8001178 <_puts_r+0x30>
 80011d8:	4622      	mov	r2, r4
 80011da:	4628      	mov	r0, r5
 80011dc:	f000 f818 	bl	8001210 <__swbuf_r>
 80011e0:	3001      	adds	r0, #1
 80011e2:	d1c9      	bne.n	8001178 <_puts_r+0x30>
 80011e4:	e7e9      	b.n	80011ba <_puts_r+0x72>
 80011e6:	6823      	ldr	r3, [r4, #0]
 80011e8:	200a      	movs	r0, #10
 80011ea:	1c5a      	adds	r2, r3, #1
 80011ec:	6022      	str	r2, [r4, #0]
 80011ee:	7018      	strb	r0, [r3, #0]
 80011f0:	e7e5      	b.n	80011be <_puts_r+0x76>
 80011f2:	bf00      	nop
 80011f4:	08002550 	.word	0x08002550
 80011f8:	08002570 	.word	0x08002570
 80011fc:	08002530 	.word	0x08002530

08001200 <puts>:
 8001200:	4b02      	ldr	r3, [pc, #8]	; (800120c <puts+0xc>)
 8001202:	4601      	mov	r1, r0
 8001204:	6818      	ldr	r0, [r3, #0]
 8001206:	f7ff bf9f 	b.w	8001148 <_puts_r>
 800120a:	bf00      	nop
 800120c:	20000000 	.word	0x20000000

08001210 <__swbuf_r>:
 8001210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001212:	460e      	mov	r6, r1
 8001214:	4614      	mov	r4, r2
 8001216:	4605      	mov	r5, r0
 8001218:	b118      	cbz	r0, 8001222 <__swbuf_r+0x12>
 800121a:	6983      	ldr	r3, [r0, #24]
 800121c:	b90b      	cbnz	r3, 8001222 <__swbuf_r+0x12>
 800121e:	f000 f9a7 	bl	8001570 <__sinit>
 8001222:	4b21      	ldr	r3, [pc, #132]	; (80012a8 <__swbuf_r+0x98>)
 8001224:	429c      	cmp	r4, r3
 8001226:	d12a      	bne.n	800127e <__swbuf_r+0x6e>
 8001228:	686c      	ldr	r4, [r5, #4]
 800122a:	69a3      	ldr	r3, [r4, #24]
 800122c:	60a3      	str	r3, [r4, #8]
 800122e:	89a3      	ldrh	r3, [r4, #12]
 8001230:	071a      	lsls	r2, r3, #28
 8001232:	d52e      	bpl.n	8001292 <__swbuf_r+0x82>
 8001234:	6923      	ldr	r3, [r4, #16]
 8001236:	b363      	cbz	r3, 8001292 <__swbuf_r+0x82>
 8001238:	6923      	ldr	r3, [r4, #16]
 800123a:	6820      	ldr	r0, [r4, #0]
 800123c:	1ac0      	subs	r0, r0, r3
 800123e:	6963      	ldr	r3, [r4, #20]
 8001240:	b2f6      	uxtb	r6, r6
 8001242:	4283      	cmp	r3, r0
 8001244:	4637      	mov	r7, r6
 8001246:	dc04      	bgt.n	8001252 <__swbuf_r+0x42>
 8001248:	4621      	mov	r1, r4
 800124a:	4628      	mov	r0, r5
 800124c:	f000 f926 	bl	800149c <_fflush_r>
 8001250:	bb28      	cbnz	r0, 800129e <__swbuf_r+0x8e>
 8001252:	68a3      	ldr	r3, [r4, #8]
 8001254:	3b01      	subs	r3, #1
 8001256:	60a3      	str	r3, [r4, #8]
 8001258:	6823      	ldr	r3, [r4, #0]
 800125a:	1c5a      	adds	r2, r3, #1
 800125c:	6022      	str	r2, [r4, #0]
 800125e:	701e      	strb	r6, [r3, #0]
 8001260:	6963      	ldr	r3, [r4, #20]
 8001262:	3001      	adds	r0, #1
 8001264:	4283      	cmp	r3, r0
 8001266:	d004      	beq.n	8001272 <__swbuf_r+0x62>
 8001268:	89a3      	ldrh	r3, [r4, #12]
 800126a:	07db      	lsls	r3, r3, #31
 800126c:	d519      	bpl.n	80012a2 <__swbuf_r+0x92>
 800126e:	2e0a      	cmp	r6, #10
 8001270:	d117      	bne.n	80012a2 <__swbuf_r+0x92>
 8001272:	4621      	mov	r1, r4
 8001274:	4628      	mov	r0, r5
 8001276:	f000 f911 	bl	800149c <_fflush_r>
 800127a:	b190      	cbz	r0, 80012a2 <__swbuf_r+0x92>
 800127c:	e00f      	b.n	800129e <__swbuf_r+0x8e>
 800127e:	4b0b      	ldr	r3, [pc, #44]	; (80012ac <__swbuf_r+0x9c>)
 8001280:	429c      	cmp	r4, r3
 8001282:	d101      	bne.n	8001288 <__swbuf_r+0x78>
 8001284:	68ac      	ldr	r4, [r5, #8]
 8001286:	e7d0      	b.n	800122a <__swbuf_r+0x1a>
 8001288:	4b09      	ldr	r3, [pc, #36]	; (80012b0 <__swbuf_r+0xa0>)
 800128a:	429c      	cmp	r4, r3
 800128c:	bf08      	it	eq
 800128e:	68ec      	ldreq	r4, [r5, #12]
 8001290:	e7cb      	b.n	800122a <__swbuf_r+0x1a>
 8001292:	4621      	mov	r1, r4
 8001294:	4628      	mov	r0, r5
 8001296:	f000 f80d 	bl	80012b4 <__swsetup_r>
 800129a:	2800      	cmp	r0, #0
 800129c:	d0cc      	beq.n	8001238 <__swbuf_r+0x28>
 800129e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80012a2:	4638      	mov	r0, r7
 80012a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012a6:	bf00      	nop
 80012a8:	08002550 	.word	0x08002550
 80012ac:	08002570 	.word	0x08002570
 80012b0:	08002530 	.word	0x08002530

080012b4 <__swsetup_r>:
 80012b4:	4b32      	ldr	r3, [pc, #200]	; (8001380 <__swsetup_r+0xcc>)
 80012b6:	b570      	push	{r4, r5, r6, lr}
 80012b8:	681d      	ldr	r5, [r3, #0]
 80012ba:	4606      	mov	r6, r0
 80012bc:	460c      	mov	r4, r1
 80012be:	b125      	cbz	r5, 80012ca <__swsetup_r+0x16>
 80012c0:	69ab      	ldr	r3, [r5, #24]
 80012c2:	b913      	cbnz	r3, 80012ca <__swsetup_r+0x16>
 80012c4:	4628      	mov	r0, r5
 80012c6:	f000 f953 	bl	8001570 <__sinit>
 80012ca:	4b2e      	ldr	r3, [pc, #184]	; (8001384 <__swsetup_r+0xd0>)
 80012cc:	429c      	cmp	r4, r3
 80012ce:	d10f      	bne.n	80012f0 <__swsetup_r+0x3c>
 80012d0:	686c      	ldr	r4, [r5, #4]
 80012d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80012d6:	b29a      	uxth	r2, r3
 80012d8:	0715      	lsls	r5, r2, #28
 80012da:	d42c      	bmi.n	8001336 <__swsetup_r+0x82>
 80012dc:	06d0      	lsls	r0, r2, #27
 80012de:	d411      	bmi.n	8001304 <__swsetup_r+0x50>
 80012e0:	2209      	movs	r2, #9
 80012e2:	6032      	str	r2, [r6, #0]
 80012e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012e8:	81a3      	strh	r3, [r4, #12]
 80012ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012ee:	e03e      	b.n	800136e <__swsetup_r+0xba>
 80012f0:	4b25      	ldr	r3, [pc, #148]	; (8001388 <__swsetup_r+0xd4>)
 80012f2:	429c      	cmp	r4, r3
 80012f4:	d101      	bne.n	80012fa <__swsetup_r+0x46>
 80012f6:	68ac      	ldr	r4, [r5, #8]
 80012f8:	e7eb      	b.n	80012d2 <__swsetup_r+0x1e>
 80012fa:	4b24      	ldr	r3, [pc, #144]	; (800138c <__swsetup_r+0xd8>)
 80012fc:	429c      	cmp	r4, r3
 80012fe:	bf08      	it	eq
 8001300:	68ec      	ldreq	r4, [r5, #12]
 8001302:	e7e6      	b.n	80012d2 <__swsetup_r+0x1e>
 8001304:	0751      	lsls	r1, r2, #29
 8001306:	d512      	bpl.n	800132e <__swsetup_r+0x7a>
 8001308:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800130a:	b141      	cbz	r1, 800131e <__swsetup_r+0x6a>
 800130c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001310:	4299      	cmp	r1, r3
 8001312:	d002      	beq.n	800131a <__swsetup_r+0x66>
 8001314:	4630      	mov	r0, r6
 8001316:	f000 fa19 	bl	800174c <_free_r>
 800131a:	2300      	movs	r3, #0
 800131c:	6363      	str	r3, [r4, #52]	; 0x34
 800131e:	89a3      	ldrh	r3, [r4, #12]
 8001320:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001324:	81a3      	strh	r3, [r4, #12]
 8001326:	2300      	movs	r3, #0
 8001328:	6063      	str	r3, [r4, #4]
 800132a:	6923      	ldr	r3, [r4, #16]
 800132c:	6023      	str	r3, [r4, #0]
 800132e:	89a3      	ldrh	r3, [r4, #12]
 8001330:	f043 0308 	orr.w	r3, r3, #8
 8001334:	81a3      	strh	r3, [r4, #12]
 8001336:	6923      	ldr	r3, [r4, #16]
 8001338:	b94b      	cbnz	r3, 800134e <__swsetup_r+0x9a>
 800133a:	89a3      	ldrh	r3, [r4, #12]
 800133c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001340:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001344:	d003      	beq.n	800134e <__swsetup_r+0x9a>
 8001346:	4621      	mov	r1, r4
 8001348:	4630      	mov	r0, r6
 800134a:	f000 f9bf 	bl	80016cc <__smakebuf_r>
 800134e:	89a2      	ldrh	r2, [r4, #12]
 8001350:	f012 0301 	ands.w	r3, r2, #1
 8001354:	d00c      	beq.n	8001370 <__swsetup_r+0xbc>
 8001356:	2300      	movs	r3, #0
 8001358:	60a3      	str	r3, [r4, #8]
 800135a:	6963      	ldr	r3, [r4, #20]
 800135c:	425b      	negs	r3, r3
 800135e:	61a3      	str	r3, [r4, #24]
 8001360:	6923      	ldr	r3, [r4, #16]
 8001362:	b953      	cbnz	r3, 800137a <__swsetup_r+0xc6>
 8001364:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001368:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800136c:	d1ba      	bne.n	80012e4 <__swsetup_r+0x30>
 800136e:	bd70      	pop	{r4, r5, r6, pc}
 8001370:	0792      	lsls	r2, r2, #30
 8001372:	bf58      	it	pl
 8001374:	6963      	ldrpl	r3, [r4, #20]
 8001376:	60a3      	str	r3, [r4, #8]
 8001378:	e7f2      	b.n	8001360 <__swsetup_r+0xac>
 800137a:	2000      	movs	r0, #0
 800137c:	e7f7      	b.n	800136e <__swsetup_r+0xba>
 800137e:	bf00      	nop
 8001380:	20000000 	.word	0x20000000
 8001384:	08002550 	.word	0x08002550
 8001388:	08002570 	.word	0x08002570
 800138c:	08002530 	.word	0x08002530

08001390 <__sflush_r>:
 8001390:	898a      	ldrh	r2, [r1, #12]
 8001392:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001396:	4605      	mov	r5, r0
 8001398:	0710      	lsls	r0, r2, #28
 800139a:	460c      	mov	r4, r1
 800139c:	d458      	bmi.n	8001450 <__sflush_r+0xc0>
 800139e:	684b      	ldr	r3, [r1, #4]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	dc05      	bgt.n	80013b0 <__sflush_r+0x20>
 80013a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	dc02      	bgt.n	80013b0 <__sflush_r+0x20>
 80013aa:	2000      	movs	r0, #0
 80013ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80013b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80013b2:	2e00      	cmp	r6, #0
 80013b4:	d0f9      	beq.n	80013aa <__sflush_r+0x1a>
 80013b6:	2300      	movs	r3, #0
 80013b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80013bc:	682f      	ldr	r7, [r5, #0]
 80013be:	6a21      	ldr	r1, [r4, #32]
 80013c0:	602b      	str	r3, [r5, #0]
 80013c2:	d032      	beq.n	800142a <__sflush_r+0x9a>
 80013c4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80013c6:	89a3      	ldrh	r3, [r4, #12]
 80013c8:	075a      	lsls	r2, r3, #29
 80013ca:	d505      	bpl.n	80013d8 <__sflush_r+0x48>
 80013cc:	6863      	ldr	r3, [r4, #4]
 80013ce:	1ac0      	subs	r0, r0, r3
 80013d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80013d2:	b10b      	cbz	r3, 80013d8 <__sflush_r+0x48>
 80013d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80013d6:	1ac0      	subs	r0, r0, r3
 80013d8:	2300      	movs	r3, #0
 80013da:	4602      	mov	r2, r0
 80013dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80013de:	6a21      	ldr	r1, [r4, #32]
 80013e0:	4628      	mov	r0, r5
 80013e2:	47b0      	blx	r6
 80013e4:	1c43      	adds	r3, r0, #1
 80013e6:	89a3      	ldrh	r3, [r4, #12]
 80013e8:	d106      	bne.n	80013f8 <__sflush_r+0x68>
 80013ea:	6829      	ldr	r1, [r5, #0]
 80013ec:	291d      	cmp	r1, #29
 80013ee:	d848      	bhi.n	8001482 <__sflush_r+0xf2>
 80013f0:	4a29      	ldr	r2, [pc, #164]	; (8001498 <__sflush_r+0x108>)
 80013f2:	40ca      	lsrs	r2, r1
 80013f4:	07d6      	lsls	r6, r2, #31
 80013f6:	d544      	bpl.n	8001482 <__sflush_r+0xf2>
 80013f8:	2200      	movs	r2, #0
 80013fa:	6062      	str	r2, [r4, #4]
 80013fc:	04d9      	lsls	r1, r3, #19
 80013fe:	6922      	ldr	r2, [r4, #16]
 8001400:	6022      	str	r2, [r4, #0]
 8001402:	d504      	bpl.n	800140e <__sflush_r+0x7e>
 8001404:	1c42      	adds	r2, r0, #1
 8001406:	d101      	bne.n	800140c <__sflush_r+0x7c>
 8001408:	682b      	ldr	r3, [r5, #0]
 800140a:	b903      	cbnz	r3, 800140e <__sflush_r+0x7e>
 800140c:	6560      	str	r0, [r4, #84]	; 0x54
 800140e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001410:	602f      	str	r7, [r5, #0]
 8001412:	2900      	cmp	r1, #0
 8001414:	d0c9      	beq.n	80013aa <__sflush_r+0x1a>
 8001416:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800141a:	4299      	cmp	r1, r3
 800141c:	d002      	beq.n	8001424 <__sflush_r+0x94>
 800141e:	4628      	mov	r0, r5
 8001420:	f000 f994 	bl	800174c <_free_r>
 8001424:	2000      	movs	r0, #0
 8001426:	6360      	str	r0, [r4, #52]	; 0x34
 8001428:	e7c0      	b.n	80013ac <__sflush_r+0x1c>
 800142a:	2301      	movs	r3, #1
 800142c:	4628      	mov	r0, r5
 800142e:	47b0      	blx	r6
 8001430:	1c41      	adds	r1, r0, #1
 8001432:	d1c8      	bne.n	80013c6 <__sflush_r+0x36>
 8001434:	682b      	ldr	r3, [r5, #0]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d0c5      	beq.n	80013c6 <__sflush_r+0x36>
 800143a:	2b1d      	cmp	r3, #29
 800143c:	d001      	beq.n	8001442 <__sflush_r+0xb2>
 800143e:	2b16      	cmp	r3, #22
 8001440:	d101      	bne.n	8001446 <__sflush_r+0xb6>
 8001442:	602f      	str	r7, [r5, #0]
 8001444:	e7b1      	b.n	80013aa <__sflush_r+0x1a>
 8001446:	89a3      	ldrh	r3, [r4, #12]
 8001448:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800144c:	81a3      	strh	r3, [r4, #12]
 800144e:	e7ad      	b.n	80013ac <__sflush_r+0x1c>
 8001450:	690f      	ldr	r7, [r1, #16]
 8001452:	2f00      	cmp	r7, #0
 8001454:	d0a9      	beq.n	80013aa <__sflush_r+0x1a>
 8001456:	0793      	lsls	r3, r2, #30
 8001458:	680e      	ldr	r6, [r1, #0]
 800145a:	bf08      	it	eq
 800145c:	694b      	ldreq	r3, [r1, #20]
 800145e:	600f      	str	r7, [r1, #0]
 8001460:	bf18      	it	ne
 8001462:	2300      	movne	r3, #0
 8001464:	eba6 0807 	sub.w	r8, r6, r7
 8001468:	608b      	str	r3, [r1, #8]
 800146a:	f1b8 0f00 	cmp.w	r8, #0
 800146e:	dd9c      	ble.n	80013aa <__sflush_r+0x1a>
 8001470:	4643      	mov	r3, r8
 8001472:	463a      	mov	r2, r7
 8001474:	6a21      	ldr	r1, [r4, #32]
 8001476:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001478:	4628      	mov	r0, r5
 800147a:	47b0      	blx	r6
 800147c:	2800      	cmp	r0, #0
 800147e:	dc06      	bgt.n	800148e <__sflush_r+0xfe>
 8001480:	89a3      	ldrh	r3, [r4, #12]
 8001482:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001486:	81a3      	strh	r3, [r4, #12]
 8001488:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800148c:	e78e      	b.n	80013ac <__sflush_r+0x1c>
 800148e:	4407      	add	r7, r0
 8001490:	eba8 0800 	sub.w	r8, r8, r0
 8001494:	e7e9      	b.n	800146a <__sflush_r+0xda>
 8001496:	bf00      	nop
 8001498:	20400001 	.word	0x20400001

0800149c <_fflush_r>:
 800149c:	b538      	push	{r3, r4, r5, lr}
 800149e:	690b      	ldr	r3, [r1, #16]
 80014a0:	4605      	mov	r5, r0
 80014a2:	460c      	mov	r4, r1
 80014a4:	b1db      	cbz	r3, 80014de <_fflush_r+0x42>
 80014a6:	b118      	cbz	r0, 80014b0 <_fflush_r+0x14>
 80014a8:	6983      	ldr	r3, [r0, #24]
 80014aa:	b90b      	cbnz	r3, 80014b0 <_fflush_r+0x14>
 80014ac:	f000 f860 	bl	8001570 <__sinit>
 80014b0:	4b0c      	ldr	r3, [pc, #48]	; (80014e4 <_fflush_r+0x48>)
 80014b2:	429c      	cmp	r4, r3
 80014b4:	d109      	bne.n	80014ca <_fflush_r+0x2e>
 80014b6:	686c      	ldr	r4, [r5, #4]
 80014b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80014bc:	b17b      	cbz	r3, 80014de <_fflush_r+0x42>
 80014be:	4621      	mov	r1, r4
 80014c0:	4628      	mov	r0, r5
 80014c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80014c6:	f7ff bf63 	b.w	8001390 <__sflush_r>
 80014ca:	4b07      	ldr	r3, [pc, #28]	; (80014e8 <_fflush_r+0x4c>)
 80014cc:	429c      	cmp	r4, r3
 80014ce:	d101      	bne.n	80014d4 <_fflush_r+0x38>
 80014d0:	68ac      	ldr	r4, [r5, #8]
 80014d2:	e7f1      	b.n	80014b8 <_fflush_r+0x1c>
 80014d4:	4b05      	ldr	r3, [pc, #20]	; (80014ec <_fflush_r+0x50>)
 80014d6:	429c      	cmp	r4, r3
 80014d8:	bf08      	it	eq
 80014da:	68ec      	ldreq	r4, [r5, #12]
 80014dc:	e7ec      	b.n	80014b8 <_fflush_r+0x1c>
 80014de:	2000      	movs	r0, #0
 80014e0:	bd38      	pop	{r3, r4, r5, pc}
 80014e2:	bf00      	nop
 80014e4:	08002550 	.word	0x08002550
 80014e8:	08002570 	.word	0x08002570
 80014ec:	08002530 	.word	0x08002530

080014f0 <std>:
 80014f0:	2300      	movs	r3, #0
 80014f2:	b510      	push	{r4, lr}
 80014f4:	4604      	mov	r4, r0
 80014f6:	e9c0 3300 	strd	r3, r3, [r0]
 80014fa:	6083      	str	r3, [r0, #8]
 80014fc:	8181      	strh	r1, [r0, #12]
 80014fe:	6643      	str	r3, [r0, #100]	; 0x64
 8001500:	81c2      	strh	r2, [r0, #14]
 8001502:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001506:	6183      	str	r3, [r0, #24]
 8001508:	4619      	mov	r1, r3
 800150a:	2208      	movs	r2, #8
 800150c:	305c      	adds	r0, #92	; 0x5c
 800150e:	f7ff fdfb 	bl	8001108 <memset>
 8001512:	4b05      	ldr	r3, [pc, #20]	; (8001528 <std+0x38>)
 8001514:	6263      	str	r3, [r4, #36]	; 0x24
 8001516:	4b05      	ldr	r3, [pc, #20]	; (800152c <std+0x3c>)
 8001518:	62a3      	str	r3, [r4, #40]	; 0x28
 800151a:	4b05      	ldr	r3, [pc, #20]	; (8001530 <std+0x40>)
 800151c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800151e:	4b05      	ldr	r3, [pc, #20]	; (8001534 <std+0x44>)
 8001520:	6224      	str	r4, [r4, #32]
 8001522:	6323      	str	r3, [r4, #48]	; 0x30
 8001524:	bd10      	pop	{r4, pc}
 8001526:	bf00      	nop
 8001528:	08001e49 	.word	0x08001e49
 800152c:	08001e6b 	.word	0x08001e6b
 8001530:	08001ea3 	.word	0x08001ea3
 8001534:	08001ec7 	.word	0x08001ec7

08001538 <_cleanup_r>:
 8001538:	4901      	ldr	r1, [pc, #4]	; (8001540 <_cleanup_r+0x8>)
 800153a:	f000 b885 	b.w	8001648 <_fwalk_reent>
 800153e:	bf00      	nop
 8001540:	0800149d 	.word	0x0800149d

08001544 <__sfmoreglue>:
 8001544:	b570      	push	{r4, r5, r6, lr}
 8001546:	1e4a      	subs	r2, r1, #1
 8001548:	2568      	movs	r5, #104	; 0x68
 800154a:	4355      	muls	r5, r2
 800154c:	460e      	mov	r6, r1
 800154e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001552:	f000 f949 	bl	80017e8 <_malloc_r>
 8001556:	4604      	mov	r4, r0
 8001558:	b140      	cbz	r0, 800156c <__sfmoreglue+0x28>
 800155a:	2100      	movs	r1, #0
 800155c:	e9c0 1600 	strd	r1, r6, [r0]
 8001560:	300c      	adds	r0, #12
 8001562:	60a0      	str	r0, [r4, #8]
 8001564:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001568:	f7ff fdce 	bl	8001108 <memset>
 800156c:	4620      	mov	r0, r4
 800156e:	bd70      	pop	{r4, r5, r6, pc}

08001570 <__sinit>:
 8001570:	6983      	ldr	r3, [r0, #24]
 8001572:	b510      	push	{r4, lr}
 8001574:	4604      	mov	r4, r0
 8001576:	bb33      	cbnz	r3, 80015c6 <__sinit+0x56>
 8001578:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800157c:	6503      	str	r3, [r0, #80]	; 0x50
 800157e:	4b12      	ldr	r3, [pc, #72]	; (80015c8 <__sinit+0x58>)
 8001580:	4a12      	ldr	r2, [pc, #72]	; (80015cc <__sinit+0x5c>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	6282      	str	r2, [r0, #40]	; 0x28
 8001586:	4298      	cmp	r0, r3
 8001588:	bf04      	itt	eq
 800158a:	2301      	moveq	r3, #1
 800158c:	6183      	streq	r3, [r0, #24]
 800158e:	f000 f81f 	bl	80015d0 <__sfp>
 8001592:	6060      	str	r0, [r4, #4]
 8001594:	4620      	mov	r0, r4
 8001596:	f000 f81b 	bl	80015d0 <__sfp>
 800159a:	60a0      	str	r0, [r4, #8]
 800159c:	4620      	mov	r0, r4
 800159e:	f000 f817 	bl	80015d0 <__sfp>
 80015a2:	2200      	movs	r2, #0
 80015a4:	60e0      	str	r0, [r4, #12]
 80015a6:	2104      	movs	r1, #4
 80015a8:	6860      	ldr	r0, [r4, #4]
 80015aa:	f7ff ffa1 	bl	80014f0 <std>
 80015ae:	2201      	movs	r2, #1
 80015b0:	2109      	movs	r1, #9
 80015b2:	68a0      	ldr	r0, [r4, #8]
 80015b4:	f7ff ff9c 	bl	80014f0 <std>
 80015b8:	2202      	movs	r2, #2
 80015ba:	2112      	movs	r1, #18
 80015bc:	68e0      	ldr	r0, [r4, #12]
 80015be:	f7ff ff97 	bl	80014f0 <std>
 80015c2:	2301      	movs	r3, #1
 80015c4:	61a3      	str	r3, [r4, #24]
 80015c6:	bd10      	pop	{r4, pc}
 80015c8:	0800252c 	.word	0x0800252c
 80015cc:	08001539 	.word	0x08001539

080015d0 <__sfp>:
 80015d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015d2:	4b1b      	ldr	r3, [pc, #108]	; (8001640 <__sfp+0x70>)
 80015d4:	681e      	ldr	r6, [r3, #0]
 80015d6:	69b3      	ldr	r3, [r6, #24]
 80015d8:	4607      	mov	r7, r0
 80015da:	b913      	cbnz	r3, 80015e2 <__sfp+0x12>
 80015dc:	4630      	mov	r0, r6
 80015de:	f7ff ffc7 	bl	8001570 <__sinit>
 80015e2:	3648      	adds	r6, #72	; 0x48
 80015e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80015e8:	3b01      	subs	r3, #1
 80015ea:	d503      	bpl.n	80015f4 <__sfp+0x24>
 80015ec:	6833      	ldr	r3, [r6, #0]
 80015ee:	b133      	cbz	r3, 80015fe <__sfp+0x2e>
 80015f0:	6836      	ldr	r6, [r6, #0]
 80015f2:	e7f7      	b.n	80015e4 <__sfp+0x14>
 80015f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80015f8:	b16d      	cbz	r5, 8001616 <__sfp+0x46>
 80015fa:	3468      	adds	r4, #104	; 0x68
 80015fc:	e7f4      	b.n	80015e8 <__sfp+0x18>
 80015fe:	2104      	movs	r1, #4
 8001600:	4638      	mov	r0, r7
 8001602:	f7ff ff9f 	bl	8001544 <__sfmoreglue>
 8001606:	6030      	str	r0, [r6, #0]
 8001608:	2800      	cmp	r0, #0
 800160a:	d1f1      	bne.n	80015f0 <__sfp+0x20>
 800160c:	230c      	movs	r3, #12
 800160e:	603b      	str	r3, [r7, #0]
 8001610:	4604      	mov	r4, r0
 8001612:	4620      	mov	r0, r4
 8001614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001616:	4b0b      	ldr	r3, [pc, #44]	; (8001644 <__sfp+0x74>)
 8001618:	6665      	str	r5, [r4, #100]	; 0x64
 800161a:	e9c4 5500 	strd	r5, r5, [r4]
 800161e:	60a5      	str	r5, [r4, #8]
 8001620:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8001624:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8001628:	2208      	movs	r2, #8
 800162a:	4629      	mov	r1, r5
 800162c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001630:	f7ff fd6a 	bl	8001108 <memset>
 8001634:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001638:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800163c:	e7e9      	b.n	8001612 <__sfp+0x42>
 800163e:	bf00      	nop
 8001640:	0800252c 	.word	0x0800252c
 8001644:	ffff0001 	.word	0xffff0001

08001648 <_fwalk_reent>:
 8001648:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800164c:	4680      	mov	r8, r0
 800164e:	4689      	mov	r9, r1
 8001650:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001654:	2600      	movs	r6, #0
 8001656:	b914      	cbnz	r4, 800165e <_fwalk_reent+0x16>
 8001658:	4630      	mov	r0, r6
 800165a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800165e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8001662:	3f01      	subs	r7, #1
 8001664:	d501      	bpl.n	800166a <_fwalk_reent+0x22>
 8001666:	6824      	ldr	r4, [r4, #0]
 8001668:	e7f5      	b.n	8001656 <_fwalk_reent+0xe>
 800166a:	89ab      	ldrh	r3, [r5, #12]
 800166c:	2b01      	cmp	r3, #1
 800166e:	d907      	bls.n	8001680 <_fwalk_reent+0x38>
 8001670:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001674:	3301      	adds	r3, #1
 8001676:	d003      	beq.n	8001680 <_fwalk_reent+0x38>
 8001678:	4629      	mov	r1, r5
 800167a:	4640      	mov	r0, r8
 800167c:	47c8      	blx	r9
 800167e:	4306      	orrs	r6, r0
 8001680:	3568      	adds	r5, #104	; 0x68
 8001682:	e7ee      	b.n	8001662 <_fwalk_reent+0x1a>

08001684 <__swhatbuf_r>:
 8001684:	b570      	push	{r4, r5, r6, lr}
 8001686:	460e      	mov	r6, r1
 8001688:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800168c:	2900      	cmp	r1, #0
 800168e:	b096      	sub	sp, #88	; 0x58
 8001690:	4614      	mov	r4, r2
 8001692:	461d      	mov	r5, r3
 8001694:	da07      	bge.n	80016a6 <__swhatbuf_r+0x22>
 8001696:	2300      	movs	r3, #0
 8001698:	602b      	str	r3, [r5, #0]
 800169a:	89b3      	ldrh	r3, [r6, #12]
 800169c:	061a      	lsls	r2, r3, #24
 800169e:	d410      	bmi.n	80016c2 <__swhatbuf_r+0x3e>
 80016a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016a4:	e00e      	b.n	80016c4 <__swhatbuf_r+0x40>
 80016a6:	466a      	mov	r2, sp
 80016a8:	f000 fc34 	bl	8001f14 <_fstat_r>
 80016ac:	2800      	cmp	r0, #0
 80016ae:	dbf2      	blt.n	8001696 <__swhatbuf_r+0x12>
 80016b0:	9a01      	ldr	r2, [sp, #4]
 80016b2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80016b6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80016ba:	425a      	negs	r2, r3
 80016bc:	415a      	adcs	r2, r3
 80016be:	602a      	str	r2, [r5, #0]
 80016c0:	e7ee      	b.n	80016a0 <__swhatbuf_r+0x1c>
 80016c2:	2340      	movs	r3, #64	; 0x40
 80016c4:	2000      	movs	r0, #0
 80016c6:	6023      	str	r3, [r4, #0]
 80016c8:	b016      	add	sp, #88	; 0x58
 80016ca:	bd70      	pop	{r4, r5, r6, pc}

080016cc <__smakebuf_r>:
 80016cc:	898b      	ldrh	r3, [r1, #12]
 80016ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80016d0:	079d      	lsls	r5, r3, #30
 80016d2:	4606      	mov	r6, r0
 80016d4:	460c      	mov	r4, r1
 80016d6:	d507      	bpl.n	80016e8 <__smakebuf_r+0x1c>
 80016d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80016dc:	6023      	str	r3, [r4, #0]
 80016de:	6123      	str	r3, [r4, #16]
 80016e0:	2301      	movs	r3, #1
 80016e2:	6163      	str	r3, [r4, #20]
 80016e4:	b002      	add	sp, #8
 80016e6:	bd70      	pop	{r4, r5, r6, pc}
 80016e8:	ab01      	add	r3, sp, #4
 80016ea:	466a      	mov	r2, sp
 80016ec:	f7ff ffca 	bl	8001684 <__swhatbuf_r>
 80016f0:	9900      	ldr	r1, [sp, #0]
 80016f2:	4605      	mov	r5, r0
 80016f4:	4630      	mov	r0, r6
 80016f6:	f000 f877 	bl	80017e8 <_malloc_r>
 80016fa:	b948      	cbnz	r0, 8001710 <__smakebuf_r+0x44>
 80016fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001700:	059a      	lsls	r2, r3, #22
 8001702:	d4ef      	bmi.n	80016e4 <__smakebuf_r+0x18>
 8001704:	f023 0303 	bic.w	r3, r3, #3
 8001708:	f043 0302 	orr.w	r3, r3, #2
 800170c:	81a3      	strh	r3, [r4, #12]
 800170e:	e7e3      	b.n	80016d8 <__smakebuf_r+0xc>
 8001710:	4b0d      	ldr	r3, [pc, #52]	; (8001748 <__smakebuf_r+0x7c>)
 8001712:	62b3      	str	r3, [r6, #40]	; 0x28
 8001714:	89a3      	ldrh	r3, [r4, #12]
 8001716:	6020      	str	r0, [r4, #0]
 8001718:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800171c:	81a3      	strh	r3, [r4, #12]
 800171e:	9b00      	ldr	r3, [sp, #0]
 8001720:	6163      	str	r3, [r4, #20]
 8001722:	9b01      	ldr	r3, [sp, #4]
 8001724:	6120      	str	r0, [r4, #16]
 8001726:	b15b      	cbz	r3, 8001740 <__smakebuf_r+0x74>
 8001728:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800172c:	4630      	mov	r0, r6
 800172e:	f000 fc03 	bl	8001f38 <_isatty_r>
 8001732:	b128      	cbz	r0, 8001740 <__smakebuf_r+0x74>
 8001734:	89a3      	ldrh	r3, [r4, #12]
 8001736:	f023 0303 	bic.w	r3, r3, #3
 800173a:	f043 0301 	orr.w	r3, r3, #1
 800173e:	81a3      	strh	r3, [r4, #12]
 8001740:	89a3      	ldrh	r3, [r4, #12]
 8001742:	431d      	orrs	r5, r3
 8001744:	81a5      	strh	r5, [r4, #12]
 8001746:	e7cd      	b.n	80016e4 <__smakebuf_r+0x18>
 8001748:	08001539 	.word	0x08001539

0800174c <_free_r>:
 800174c:	b538      	push	{r3, r4, r5, lr}
 800174e:	4605      	mov	r5, r0
 8001750:	2900      	cmp	r1, #0
 8001752:	d045      	beq.n	80017e0 <_free_r+0x94>
 8001754:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001758:	1f0c      	subs	r4, r1, #4
 800175a:	2b00      	cmp	r3, #0
 800175c:	bfb8      	it	lt
 800175e:	18e4      	addlt	r4, r4, r3
 8001760:	f000 fc0c 	bl	8001f7c <__malloc_lock>
 8001764:	4a1f      	ldr	r2, [pc, #124]	; (80017e4 <_free_r+0x98>)
 8001766:	6813      	ldr	r3, [r2, #0]
 8001768:	4610      	mov	r0, r2
 800176a:	b933      	cbnz	r3, 800177a <_free_r+0x2e>
 800176c:	6063      	str	r3, [r4, #4]
 800176e:	6014      	str	r4, [r2, #0]
 8001770:	4628      	mov	r0, r5
 8001772:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001776:	f000 bc02 	b.w	8001f7e <__malloc_unlock>
 800177a:	42a3      	cmp	r3, r4
 800177c:	d90c      	bls.n	8001798 <_free_r+0x4c>
 800177e:	6821      	ldr	r1, [r4, #0]
 8001780:	1862      	adds	r2, r4, r1
 8001782:	4293      	cmp	r3, r2
 8001784:	bf04      	itt	eq
 8001786:	681a      	ldreq	r2, [r3, #0]
 8001788:	685b      	ldreq	r3, [r3, #4]
 800178a:	6063      	str	r3, [r4, #4]
 800178c:	bf04      	itt	eq
 800178e:	1852      	addeq	r2, r2, r1
 8001790:	6022      	streq	r2, [r4, #0]
 8001792:	6004      	str	r4, [r0, #0]
 8001794:	e7ec      	b.n	8001770 <_free_r+0x24>
 8001796:	4613      	mov	r3, r2
 8001798:	685a      	ldr	r2, [r3, #4]
 800179a:	b10a      	cbz	r2, 80017a0 <_free_r+0x54>
 800179c:	42a2      	cmp	r2, r4
 800179e:	d9fa      	bls.n	8001796 <_free_r+0x4a>
 80017a0:	6819      	ldr	r1, [r3, #0]
 80017a2:	1858      	adds	r0, r3, r1
 80017a4:	42a0      	cmp	r0, r4
 80017a6:	d10b      	bne.n	80017c0 <_free_r+0x74>
 80017a8:	6820      	ldr	r0, [r4, #0]
 80017aa:	4401      	add	r1, r0
 80017ac:	1858      	adds	r0, r3, r1
 80017ae:	4282      	cmp	r2, r0
 80017b0:	6019      	str	r1, [r3, #0]
 80017b2:	d1dd      	bne.n	8001770 <_free_r+0x24>
 80017b4:	6810      	ldr	r0, [r2, #0]
 80017b6:	6852      	ldr	r2, [r2, #4]
 80017b8:	605a      	str	r2, [r3, #4]
 80017ba:	4401      	add	r1, r0
 80017bc:	6019      	str	r1, [r3, #0]
 80017be:	e7d7      	b.n	8001770 <_free_r+0x24>
 80017c0:	d902      	bls.n	80017c8 <_free_r+0x7c>
 80017c2:	230c      	movs	r3, #12
 80017c4:	602b      	str	r3, [r5, #0]
 80017c6:	e7d3      	b.n	8001770 <_free_r+0x24>
 80017c8:	6820      	ldr	r0, [r4, #0]
 80017ca:	1821      	adds	r1, r4, r0
 80017cc:	428a      	cmp	r2, r1
 80017ce:	bf04      	itt	eq
 80017d0:	6811      	ldreq	r1, [r2, #0]
 80017d2:	6852      	ldreq	r2, [r2, #4]
 80017d4:	6062      	str	r2, [r4, #4]
 80017d6:	bf04      	itt	eq
 80017d8:	1809      	addeq	r1, r1, r0
 80017da:	6021      	streq	r1, [r4, #0]
 80017dc:	605c      	str	r4, [r3, #4]
 80017de:	e7c7      	b.n	8001770 <_free_r+0x24>
 80017e0:	bd38      	pop	{r3, r4, r5, pc}
 80017e2:	bf00      	nop
 80017e4:	2000008c 	.word	0x2000008c

080017e8 <_malloc_r>:
 80017e8:	b570      	push	{r4, r5, r6, lr}
 80017ea:	1ccd      	adds	r5, r1, #3
 80017ec:	f025 0503 	bic.w	r5, r5, #3
 80017f0:	3508      	adds	r5, #8
 80017f2:	2d0c      	cmp	r5, #12
 80017f4:	bf38      	it	cc
 80017f6:	250c      	movcc	r5, #12
 80017f8:	2d00      	cmp	r5, #0
 80017fa:	4606      	mov	r6, r0
 80017fc:	db01      	blt.n	8001802 <_malloc_r+0x1a>
 80017fe:	42a9      	cmp	r1, r5
 8001800:	d903      	bls.n	800180a <_malloc_r+0x22>
 8001802:	230c      	movs	r3, #12
 8001804:	6033      	str	r3, [r6, #0]
 8001806:	2000      	movs	r0, #0
 8001808:	bd70      	pop	{r4, r5, r6, pc}
 800180a:	f000 fbb7 	bl	8001f7c <__malloc_lock>
 800180e:	4a21      	ldr	r2, [pc, #132]	; (8001894 <_malloc_r+0xac>)
 8001810:	6814      	ldr	r4, [r2, #0]
 8001812:	4621      	mov	r1, r4
 8001814:	b991      	cbnz	r1, 800183c <_malloc_r+0x54>
 8001816:	4c20      	ldr	r4, [pc, #128]	; (8001898 <_malloc_r+0xb0>)
 8001818:	6823      	ldr	r3, [r4, #0]
 800181a:	b91b      	cbnz	r3, 8001824 <_malloc_r+0x3c>
 800181c:	4630      	mov	r0, r6
 800181e:	f000 fb03 	bl	8001e28 <_sbrk_r>
 8001822:	6020      	str	r0, [r4, #0]
 8001824:	4629      	mov	r1, r5
 8001826:	4630      	mov	r0, r6
 8001828:	f000 fafe 	bl	8001e28 <_sbrk_r>
 800182c:	1c43      	adds	r3, r0, #1
 800182e:	d124      	bne.n	800187a <_malloc_r+0x92>
 8001830:	230c      	movs	r3, #12
 8001832:	6033      	str	r3, [r6, #0]
 8001834:	4630      	mov	r0, r6
 8001836:	f000 fba2 	bl	8001f7e <__malloc_unlock>
 800183a:	e7e4      	b.n	8001806 <_malloc_r+0x1e>
 800183c:	680b      	ldr	r3, [r1, #0]
 800183e:	1b5b      	subs	r3, r3, r5
 8001840:	d418      	bmi.n	8001874 <_malloc_r+0x8c>
 8001842:	2b0b      	cmp	r3, #11
 8001844:	d90f      	bls.n	8001866 <_malloc_r+0x7e>
 8001846:	600b      	str	r3, [r1, #0]
 8001848:	50cd      	str	r5, [r1, r3]
 800184a:	18cc      	adds	r4, r1, r3
 800184c:	4630      	mov	r0, r6
 800184e:	f000 fb96 	bl	8001f7e <__malloc_unlock>
 8001852:	f104 000b 	add.w	r0, r4, #11
 8001856:	1d23      	adds	r3, r4, #4
 8001858:	f020 0007 	bic.w	r0, r0, #7
 800185c:	1ac3      	subs	r3, r0, r3
 800185e:	d0d3      	beq.n	8001808 <_malloc_r+0x20>
 8001860:	425a      	negs	r2, r3
 8001862:	50e2      	str	r2, [r4, r3]
 8001864:	e7d0      	b.n	8001808 <_malloc_r+0x20>
 8001866:	428c      	cmp	r4, r1
 8001868:	684b      	ldr	r3, [r1, #4]
 800186a:	bf16      	itet	ne
 800186c:	6063      	strne	r3, [r4, #4]
 800186e:	6013      	streq	r3, [r2, #0]
 8001870:	460c      	movne	r4, r1
 8001872:	e7eb      	b.n	800184c <_malloc_r+0x64>
 8001874:	460c      	mov	r4, r1
 8001876:	6849      	ldr	r1, [r1, #4]
 8001878:	e7cc      	b.n	8001814 <_malloc_r+0x2c>
 800187a:	1cc4      	adds	r4, r0, #3
 800187c:	f024 0403 	bic.w	r4, r4, #3
 8001880:	42a0      	cmp	r0, r4
 8001882:	d005      	beq.n	8001890 <_malloc_r+0xa8>
 8001884:	1a21      	subs	r1, r4, r0
 8001886:	4630      	mov	r0, r6
 8001888:	f000 face 	bl	8001e28 <_sbrk_r>
 800188c:	3001      	adds	r0, #1
 800188e:	d0cf      	beq.n	8001830 <_malloc_r+0x48>
 8001890:	6025      	str	r5, [r4, #0]
 8001892:	e7db      	b.n	800184c <_malloc_r+0x64>
 8001894:	2000008c 	.word	0x2000008c
 8001898:	20000090 	.word	0x20000090

0800189c <__sfputc_r>:
 800189c:	6893      	ldr	r3, [r2, #8]
 800189e:	3b01      	subs	r3, #1
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	b410      	push	{r4}
 80018a4:	6093      	str	r3, [r2, #8]
 80018a6:	da07      	bge.n	80018b8 <__sfputc_r+0x1c>
 80018a8:	6994      	ldr	r4, [r2, #24]
 80018aa:	42a3      	cmp	r3, r4
 80018ac:	db01      	blt.n	80018b2 <__sfputc_r+0x16>
 80018ae:	290a      	cmp	r1, #10
 80018b0:	d102      	bne.n	80018b8 <__sfputc_r+0x1c>
 80018b2:	bc10      	pop	{r4}
 80018b4:	f7ff bcac 	b.w	8001210 <__swbuf_r>
 80018b8:	6813      	ldr	r3, [r2, #0]
 80018ba:	1c58      	adds	r0, r3, #1
 80018bc:	6010      	str	r0, [r2, #0]
 80018be:	7019      	strb	r1, [r3, #0]
 80018c0:	4608      	mov	r0, r1
 80018c2:	bc10      	pop	{r4}
 80018c4:	4770      	bx	lr

080018c6 <__sfputs_r>:
 80018c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018c8:	4606      	mov	r6, r0
 80018ca:	460f      	mov	r7, r1
 80018cc:	4614      	mov	r4, r2
 80018ce:	18d5      	adds	r5, r2, r3
 80018d0:	42ac      	cmp	r4, r5
 80018d2:	d101      	bne.n	80018d8 <__sfputs_r+0x12>
 80018d4:	2000      	movs	r0, #0
 80018d6:	e007      	b.n	80018e8 <__sfputs_r+0x22>
 80018d8:	463a      	mov	r2, r7
 80018da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80018de:	4630      	mov	r0, r6
 80018e0:	f7ff ffdc 	bl	800189c <__sfputc_r>
 80018e4:	1c43      	adds	r3, r0, #1
 80018e6:	d1f3      	bne.n	80018d0 <__sfputs_r+0xa>
 80018e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080018ec <_vfiprintf_r>:
 80018ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018f0:	460c      	mov	r4, r1
 80018f2:	b09d      	sub	sp, #116	; 0x74
 80018f4:	4617      	mov	r7, r2
 80018f6:	461d      	mov	r5, r3
 80018f8:	4606      	mov	r6, r0
 80018fa:	b118      	cbz	r0, 8001904 <_vfiprintf_r+0x18>
 80018fc:	6983      	ldr	r3, [r0, #24]
 80018fe:	b90b      	cbnz	r3, 8001904 <_vfiprintf_r+0x18>
 8001900:	f7ff fe36 	bl	8001570 <__sinit>
 8001904:	4b7c      	ldr	r3, [pc, #496]	; (8001af8 <_vfiprintf_r+0x20c>)
 8001906:	429c      	cmp	r4, r3
 8001908:	d158      	bne.n	80019bc <_vfiprintf_r+0xd0>
 800190a:	6874      	ldr	r4, [r6, #4]
 800190c:	89a3      	ldrh	r3, [r4, #12]
 800190e:	0718      	lsls	r0, r3, #28
 8001910:	d55e      	bpl.n	80019d0 <_vfiprintf_r+0xe4>
 8001912:	6923      	ldr	r3, [r4, #16]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d05b      	beq.n	80019d0 <_vfiprintf_r+0xe4>
 8001918:	2300      	movs	r3, #0
 800191a:	9309      	str	r3, [sp, #36]	; 0x24
 800191c:	2320      	movs	r3, #32
 800191e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001922:	2330      	movs	r3, #48	; 0x30
 8001924:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001928:	9503      	str	r5, [sp, #12]
 800192a:	f04f 0b01 	mov.w	fp, #1
 800192e:	46b8      	mov	r8, r7
 8001930:	4645      	mov	r5, r8
 8001932:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001936:	b10b      	cbz	r3, 800193c <_vfiprintf_r+0x50>
 8001938:	2b25      	cmp	r3, #37	; 0x25
 800193a:	d154      	bne.n	80019e6 <_vfiprintf_r+0xfa>
 800193c:	ebb8 0a07 	subs.w	sl, r8, r7
 8001940:	d00b      	beq.n	800195a <_vfiprintf_r+0x6e>
 8001942:	4653      	mov	r3, sl
 8001944:	463a      	mov	r2, r7
 8001946:	4621      	mov	r1, r4
 8001948:	4630      	mov	r0, r6
 800194a:	f7ff ffbc 	bl	80018c6 <__sfputs_r>
 800194e:	3001      	adds	r0, #1
 8001950:	f000 80c2 	beq.w	8001ad8 <_vfiprintf_r+0x1ec>
 8001954:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001956:	4453      	add	r3, sl
 8001958:	9309      	str	r3, [sp, #36]	; 0x24
 800195a:	f898 3000 	ldrb.w	r3, [r8]
 800195e:	2b00      	cmp	r3, #0
 8001960:	f000 80ba 	beq.w	8001ad8 <_vfiprintf_r+0x1ec>
 8001964:	2300      	movs	r3, #0
 8001966:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800196a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800196e:	9304      	str	r3, [sp, #16]
 8001970:	9307      	str	r3, [sp, #28]
 8001972:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001976:	931a      	str	r3, [sp, #104]	; 0x68
 8001978:	46a8      	mov	r8, r5
 800197a:	2205      	movs	r2, #5
 800197c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8001980:	485e      	ldr	r0, [pc, #376]	; (8001afc <_vfiprintf_r+0x210>)
 8001982:	f7fe fc45 	bl	8000210 <memchr>
 8001986:	9b04      	ldr	r3, [sp, #16]
 8001988:	bb78      	cbnz	r0, 80019ea <_vfiprintf_r+0xfe>
 800198a:	06d9      	lsls	r1, r3, #27
 800198c:	bf44      	itt	mi
 800198e:	2220      	movmi	r2, #32
 8001990:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001994:	071a      	lsls	r2, r3, #28
 8001996:	bf44      	itt	mi
 8001998:	222b      	movmi	r2, #43	; 0x2b
 800199a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800199e:	782a      	ldrb	r2, [r5, #0]
 80019a0:	2a2a      	cmp	r2, #42	; 0x2a
 80019a2:	d02a      	beq.n	80019fa <_vfiprintf_r+0x10e>
 80019a4:	9a07      	ldr	r2, [sp, #28]
 80019a6:	46a8      	mov	r8, r5
 80019a8:	2000      	movs	r0, #0
 80019aa:	250a      	movs	r5, #10
 80019ac:	4641      	mov	r1, r8
 80019ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80019b2:	3b30      	subs	r3, #48	; 0x30
 80019b4:	2b09      	cmp	r3, #9
 80019b6:	d969      	bls.n	8001a8c <_vfiprintf_r+0x1a0>
 80019b8:	b360      	cbz	r0, 8001a14 <_vfiprintf_r+0x128>
 80019ba:	e024      	b.n	8001a06 <_vfiprintf_r+0x11a>
 80019bc:	4b50      	ldr	r3, [pc, #320]	; (8001b00 <_vfiprintf_r+0x214>)
 80019be:	429c      	cmp	r4, r3
 80019c0:	d101      	bne.n	80019c6 <_vfiprintf_r+0xda>
 80019c2:	68b4      	ldr	r4, [r6, #8]
 80019c4:	e7a2      	b.n	800190c <_vfiprintf_r+0x20>
 80019c6:	4b4f      	ldr	r3, [pc, #316]	; (8001b04 <_vfiprintf_r+0x218>)
 80019c8:	429c      	cmp	r4, r3
 80019ca:	bf08      	it	eq
 80019cc:	68f4      	ldreq	r4, [r6, #12]
 80019ce:	e79d      	b.n	800190c <_vfiprintf_r+0x20>
 80019d0:	4621      	mov	r1, r4
 80019d2:	4630      	mov	r0, r6
 80019d4:	f7ff fc6e 	bl	80012b4 <__swsetup_r>
 80019d8:	2800      	cmp	r0, #0
 80019da:	d09d      	beq.n	8001918 <_vfiprintf_r+0x2c>
 80019dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019e0:	b01d      	add	sp, #116	; 0x74
 80019e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80019e6:	46a8      	mov	r8, r5
 80019e8:	e7a2      	b.n	8001930 <_vfiprintf_r+0x44>
 80019ea:	4a44      	ldr	r2, [pc, #272]	; (8001afc <_vfiprintf_r+0x210>)
 80019ec:	1a80      	subs	r0, r0, r2
 80019ee:	fa0b f000 	lsl.w	r0, fp, r0
 80019f2:	4318      	orrs	r0, r3
 80019f4:	9004      	str	r0, [sp, #16]
 80019f6:	4645      	mov	r5, r8
 80019f8:	e7be      	b.n	8001978 <_vfiprintf_r+0x8c>
 80019fa:	9a03      	ldr	r2, [sp, #12]
 80019fc:	1d11      	adds	r1, r2, #4
 80019fe:	6812      	ldr	r2, [r2, #0]
 8001a00:	9103      	str	r1, [sp, #12]
 8001a02:	2a00      	cmp	r2, #0
 8001a04:	db01      	blt.n	8001a0a <_vfiprintf_r+0x11e>
 8001a06:	9207      	str	r2, [sp, #28]
 8001a08:	e004      	b.n	8001a14 <_vfiprintf_r+0x128>
 8001a0a:	4252      	negs	r2, r2
 8001a0c:	f043 0302 	orr.w	r3, r3, #2
 8001a10:	9207      	str	r2, [sp, #28]
 8001a12:	9304      	str	r3, [sp, #16]
 8001a14:	f898 3000 	ldrb.w	r3, [r8]
 8001a18:	2b2e      	cmp	r3, #46	; 0x2e
 8001a1a:	d10e      	bne.n	8001a3a <_vfiprintf_r+0x14e>
 8001a1c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8001a20:	2b2a      	cmp	r3, #42	; 0x2a
 8001a22:	d138      	bne.n	8001a96 <_vfiprintf_r+0x1aa>
 8001a24:	9b03      	ldr	r3, [sp, #12]
 8001a26:	1d1a      	adds	r2, r3, #4
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	9203      	str	r2, [sp, #12]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	bfb8      	it	lt
 8001a30:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8001a34:	f108 0802 	add.w	r8, r8, #2
 8001a38:	9305      	str	r3, [sp, #20]
 8001a3a:	4d33      	ldr	r5, [pc, #204]	; (8001b08 <_vfiprintf_r+0x21c>)
 8001a3c:	f898 1000 	ldrb.w	r1, [r8]
 8001a40:	2203      	movs	r2, #3
 8001a42:	4628      	mov	r0, r5
 8001a44:	f7fe fbe4 	bl	8000210 <memchr>
 8001a48:	b140      	cbz	r0, 8001a5c <_vfiprintf_r+0x170>
 8001a4a:	2340      	movs	r3, #64	; 0x40
 8001a4c:	1b40      	subs	r0, r0, r5
 8001a4e:	fa03 f000 	lsl.w	r0, r3, r0
 8001a52:	9b04      	ldr	r3, [sp, #16]
 8001a54:	4303      	orrs	r3, r0
 8001a56:	f108 0801 	add.w	r8, r8, #1
 8001a5a:	9304      	str	r3, [sp, #16]
 8001a5c:	f898 1000 	ldrb.w	r1, [r8]
 8001a60:	482a      	ldr	r0, [pc, #168]	; (8001b0c <_vfiprintf_r+0x220>)
 8001a62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001a66:	2206      	movs	r2, #6
 8001a68:	f108 0701 	add.w	r7, r8, #1
 8001a6c:	f7fe fbd0 	bl	8000210 <memchr>
 8001a70:	2800      	cmp	r0, #0
 8001a72:	d037      	beq.n	8001ae4 <_vfiprintf_r+0x1f8>
 8001a74:	4b26      	ldr	r3, [pc, #152]	; (8001b10 <_vfiprintf_r+0x224>)
 8001a76:	bb1b      	cbnz	r3, 8001ac0 <_vfiprintf_r+0x1d4>
 8001a78:	9b03      	ldr	r3, [sp, #12]
 8001a7a:	3307      	adds	r3, #7
 8001a7c:	f023 0307 	bic.w	r3, r3, #7
 8001a80:	3308      	adds	r3, #8
 8001a82:	9303      	str	r3, [sp, #12]
 8001a84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001a86:	444b      	add	r3, r9
 8001a88:	9309      	str	r3, [sp, #36]	; 0x24
 8001a8a:	e750      	b.n	800192e <_vfiprintf_r+0x42>
 8001a8c:	fb05 3202 	mla	r2, r5, r2, r3
 8001a90:	2001      	movs	r0, #1
 8001a92:	4688      	mov	r8, r1
 8001a94:	e78a      	b.n	80019ac <_vfiprintf_r+0xc0>
 8001a96:	2300      	movs	r3, #0
 8001a98:	f108 0801 	add.w	r8, r8, #1
 8001a9c:	9305      	str	r3, [sp, #20]
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	250a      	movs	r5, #10
 8001aa2:	4640      	mov	r0, r8
 8001aa4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001aa8:	3a30      	subs	r2, #48	; 0x30
 8001aaa:	2a09      	cmp	r2, #9
 8001aac:	d903      	bls.n	8001ab6 <_vfiprintf_r+0x1ca>
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d0c3      	beq.n	8001a3a <_vfiprintf_r+0x14e>
 8001ab2:	9105      	str	r1, [sp, #20]
 8001ab4:	e7c1      	b.n	8001a3a <_vfiprintf_r+0x14e>
 8001ab6:	fb05 2101 	mla	r1, r5, r1, r2
 8001aba:	2301      	movs	r3, #1
 8001abc:	4680      	mov	r8, r0
 8001abe:	e7f0      	b.n	8001aa2 <_vfiprintf_r+0x1b6>
 8001ac0:	ab03      	add	r3, sp, #12
 8001ac2:	9300      	str	r3, [sp, #0]
 8001ac4:	4622      	mov	r2, r4
 8001ac6:	4b13      	ldr	r3, [pc, #76]	; (8001b14 <_vfiprintf_r+0x228>)
 8001ac8:	a904      	add	r1, sp, #16
 8001aca:	4630      	mov	r0, r6
 8001acc:	f3af 8000 	nop.w
 8001ad0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8001ad4:	4681      	mov	r9, r0
 8001ad6:	d1d5      	bne.n	8001a84 <_vfiprintf_r+0x198>
 8001ad8:	89a3      	ldrh	r3, [r4, #12]
 8001ada:	065b      	lsls	r3, r3, #25
 8001adc:	f53f af7e 	bmi.w	80019dc <_vfiprintf_r+0xf0>
 8001ae0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001ae2:	e77d      	b.n	80019e0 <_vfiprintf_r+0xf4>
 8001ae4:	ab03      	add	r3, sp, #12
 8001ae6:	9300      	str	r3, [sp, #0]
 8001ae8:	4622      	mov	r2, r4
 8001aea:	4b0a      	ldr	r3, [pc, #40]	; (8001b14 <_vfiprintf_r+0x228>)
 8001aec:	a904      	add	r1, sp, #16
 8001aee:	4630      	mov	r0, r6
 8001af0:	f000 f888 	bl	8001c04 <_printf_i>
 8001af4:	e7ec      	b.n	8001ad0 <_vfiprintf_r+0x1e4>
 8001af6:	bf00      	nop
 8001af8:	08002550 	.word	0x08002550
 8001afc:	08002590 	.word	0x08002590
 8001b00:	08002570 	.word	0x08002570
 8001b04:	08002530 	.word	0x08002530
 8001b08:	08002596 	.word	0x08002596
 8001b0c:	0800259a 	.word	0x0800259a
 8001b10:	00000000 	.word	0x00000000
 8001b14:	080018c7 	.word	0x080018c7

08001b18 <_printf_common>:
 8001b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b1c:	4691      	mov	r9, r2
 8001b1e:	461f      	mov	r7, r3
 8001b20:	688a      	ldr	r2, [r1, #8]
 8001b22:	690b      	ldr	r3, [r1, #16]
 8001b24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	bfb8      	it	lt
 8001b2c:	4613      	movlt	r3, r2
 8001b2e:	f8c9 3000 	str.w	r3, [r9]
 8001b32:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001b36:	4606      	mov	r6, r0
 8001b38:	460c      	mov	r4, r1
 8001b3a:	b112      	cbz	r2, 8001b42 <_printf_common+0x2a>
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	f8c9 3000 	str.w	r3, [r9]
 8001b42:	6823      	ldr	r3, [r4, #0]
 8001b44:	0699      	lsls	r1, r3, #26
 8001b46:	bf42      	ittt	mi
 8001b48:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001b4c:	3302      	addmi	r3, #2
 8001b4e:	f8c9 3000 	strmi.w	r3, [r9]
 8001b52:	6825      	ldr	r5, [r4, #0]
 8001b54:	f015 0506 	ands.w	r5, r5, #6
 8001b58:	d107      	bne.n	8001b6a <_printf_common+0x52>
 8001b5a:	f104 0a19 	add.w	sl, r4, #25
 8001b5e:	68e3      	ldr	r3, [r4, #12]
 8001b60:	f8d9 2000 	ldr.w	r2, [r9]
 8001b64:	1a9b      	subs	r3, r3, r2
 8001b66:	42ab      	cmp	r3, r5
 8001b68:	dc28      	bgt.n	8001bbc <_printf_common+0xa4>
 8001b6a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001b6e:	6822      	ldr	r2, [r4, #0]
 8001b70:	3300      	adds	r3, #0
 8001b72:	bf18      	it	ne
 8001b74:	2301      	movne	r3, #1
 8001b76:	0692      	lsls	r2, r2, #26
 8001b78:	d42d      	bmi.n	8001bd6 <_printf_common+0xbe>
 8001b7a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001b7e:	4639      	mov	r1, r7
 8001b80:	4630      	mov	r0, r6
 8001b82:	47c0      	blx	r8
 8001b84:	3001      	adds	r0, #1
 8001b86:	d020      	beq.n	8001bca <_printf_common+0xb2>
 8001b88:	6823      	ldr	r3, [r4, #0]
 8001b8a:	68e5      	ldr	r5, [r4, #12]
 8001b8c:	f8d9 2000 	ldr.w	r2, [r9]
 8001b90:	f003 0306 	and.w	r3, r3, #6
 8001b94:	2b04      	cmp	r3, #4
 8001b96:	bf08      	it	eq
 8001b98:	1aad      	subeq	r5, r5, r2
 8001b9a:	68a3      	ldr	r3, [r4, #8]
 8001b9c:	6922      	ldr	r2, [r4, #16]
 8001b9e:	bf0c      	ite	eq
 8001ba0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001ba4:	2500      	movne	r5, #0
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	bfc4      	itt	gt
 8001baa:	1a9b      	subgt	r3, r3, r2
 8001bac:	18ed      	addgt	r5, r5, r3
 8001bae:	f04f 0900 	mov.w	r9, #0
 8001bb2:	341a      	adds	r4, #26
 8001bb4:	454d      	cmp	r5, r9
 8001bb6:	d11a      	bne.n	8001bee <_printf_common+0xd6>
 8001bb8:	2000      	movs	r0, #0
 8001bba:	e008      	b.n	8001bce <_printf_common+0xb6>
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	4652      	mov	r2, sl
 8001bc0:	4639      	mov	r1, r7
 8001bc2:	4630      	mov	r0, r6
 8001bc4:	47c0      	blx	r8
 8001bc6:	3001      	adds	r0, #1
 8001bc8:	d103      	bne.n	8001bd2 <_printf_common+0xba>
 8001bca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001bd2:	3501      	adds	r5, #1
 8001bd4:	e7c3      	b.n	8001b5e <_printf_common+0x46>
 8001bd6:	18e1      	adds	r1, r4, r3
 8001bd8:	1c5a      	adds	r2, r3, #1
 8001bda:	2030      	movs	r0, #48	; 0x30
 8001bdc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001be0:	4422      	add	r2, r4
 8001be2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001be6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001bea:	3302      	adds	r3, #2
 8001bec:	e7c5      	b.n	8001b7a <_printf_common+0x62>
 8001bee:	2301      	movs	r3, #1
 8001bf0:	4622      	mov	r2, r4
 8001bf2:	4639      	mov	r1, r7
 8001bf4:	4630      	mov	r0, r6
 8001bf6:	47c0      	blx	r8
 8001bf8:	3001      	adds	r0, #1
 8001bfa:	d0e6      	beq.n	8001bca <_printf_common+0xb2>
 8001bfc:	f109 0901 	add.w	r9, r9, #1
 8001c00:	e7d8      	b.n	8001bb4 <_printf_common+0x9c>
	...

08001c04 <_printf_i>:
 8001c04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001c08:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8001c0c:	460c      	mov	r4, r1
 8001c0e:	7e09      	ldrb	r1, [r1, #24]
 8001c10:	b085      	sub	sp, #20
 8001c12:	296e      	cmp	r1, #110	; 0x6e
 8001c14:	4617      	mov	r7, r2
 8001c16:	4606      	mov	r6, r0
 8001c18:	4698      	mov	r8, r3
 8001c1a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001c1c:	f000 80b3 	beq.w	8001d86 <_printf_i+0x182>
 8001c20:	d822      	bhi.n	8001c68 <_printf_i+0x64>
 8001c22:	2963      	cmp	r1, #99	; 0x63
 8001c24:	d036      	beq.n	8001c94 <_printf_i+0x90>
 8001c26:	d80a      	bhi.n	8001c3e <_printf_i+0x3a>
 8001c28:	2900      	cmp	r1, #0
 8001c2a:	f000 80b9 	beq.w	8001da0 <_printf_i+0x19c>
 8001c2e:	2958      	cmp	r1, #88	; 0x58
 8001c30:	f000 8083 	beq.w	8001d3a <_printf_i+0x136>
 8001c34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001c38:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8001c3c:	e032      	b.n	8001ca4 <_printf_i+0xa0>
 8001c3e:	2964      	cmp	r1, #100	; 0x64
 8001c40:	d001      	beq.n	8001c46 <_printf_i+0x42>
 8001c42:	2969      	cmp	r1, #105	; 0x69
 8001c44:	d1f6      	bne.n	8001c34 <_printf_i+0x30>
 8001c46:	6820      	ldr	r0, [r4, #0]
 8001c48:	6813      	ldr	r3, [r2, #0]
 8001c4a:	0605      	lsls	r5, r0, #24
 8001c4c:	f103 0104 	add.w	r1, r3, #4
 8001c50:	d52a      	bpl.n	8001ca8 <_printf_i+0xa4>
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	6011      	str	r1, [r2, #0]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	da03      	bge.n	8001c62 <_printf_i+0x5e>
 8001c5a:	222d      	movs	r2, #45	; 0x2d
 8001c5c:	425b      	negs	r3, r3
 8001c5e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001c62:	486f      	ldr	r0, [pc, #444]	; (8001e20 <_printf_i+0x21c>)
 8001c64:	220a      	movs	r2, #10
 8001c66:	e039      	b.n	8001cdc <_printf_i+0xd8>
 8001c68:	2973      	cmp	r1, #115	; 0x73
 8001c6a:	f000 809d 	beq.w	8001da8 <_printf_i+0x1a4>
 8001c6e:	d808      	bhi.n	8001c82 <_printf_i+0x7e>
 8001c70:	296f      	cmp	r1, #111	; 0x6f
 8001c72:	d020      	beq.n	8001cb6 <_printf_i+0xb2>
 8001c74:	2970      	cmp	r1, #112	; 0x70
 8001c76:	d1dd      	bne.n	8001c34 <_printf_i+0x30>
 8001c78:	6823      	ldr	r3, [r4, #0]
 8001c7a:	f043 0320 	orr.w	r3, r3, #32
 8001c7e:	6023      	str	r3, [r4, #0]
 8001c80:	e003      	b.n	8001c8a <_printf_i+0x86>
 8001c82:	2975      	cmp	r1, #117	; 0x75
 8001c84:	d017      	beq.n	8001cb6 <_printf_i+0xb2>
 8001c86:	2978      	cmp	r1, #120	; 0x78
 8001c88:	d1d4      	bne.n	8001c34 <_printf_i+0x30>
 8001c8a:	2378      	movs	r3, #120	; 0x78
 8001c8c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001c90:	4864      	ldr	r0, [pc, #400]	; (8001e24 <_printf_i+0x220>)
 8001c92:	e055      	b.n	8001d40 <_printf_i+0x13c>
 8001c94:	6813      	ldr	r3, [r2, #0]
 8001c96:	1d19      	adds	r1, r3, #4
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	6011      	str	r1, [r2, #0]
 8001c9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001ca0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e08c      	b.n	8001dc2 <_printf_i+0x1be>
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	6011      	str	r1, [r2, #0]
 8001cac:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001cb0:	bf18      	it	ne
 8001cb2:	b21b      	sxthne	r3, r3
 8001cb4:	e7cf      	b.n	8001c56 <_printf_i+0x52>
 8001cb6:	6813      	ldr	r3, [r2, #0]
 8001cb8:	6825      	ldr	r5, [r4, #0]
 8001cba:	1d18      	adds	r0, r3, #4
 8001cbc:	6010      	str	r0, [r2, #0]
 8001cbe:	0628      	lsls	r0, r5, #24
 8001cc0:	d501      	bpl.n	8001cc6 <_printf_i+0xc2>
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	e002      	b.n	8001ccc <_printf_i+0xc8>
 8001cc6:	0668      	lsls	r0, r5, #25
 8001cc8:	d5fb      	bpl.n	8001cc2 <_printf_i+0xbe>
 8001cca:	881b      	ldrh	r3, [r3, #0]
 8001ccc:	4854      	ldr	r0, [pc, #336]	; (8001e20 <_printf_i+0x21c>)
 8001cce:	296f      	cmp	r1, #111	; 0x6f
 8001cd0:	bf14      	ite	ne
 8001cd2:	220a      	movne	r2, #10
 8001cd4:	2208      	moveq	r2, #8
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001cdc:	6865      	ldr	r5, [r4, #4]
 8001cde:	60a5      	str	r5, [r4, #8]
 8001ce0:	2d00      	cmp	r5, #0
 8001ce2:	f2c0 8095 	blt.w	8001e10 <_printf_i+0x20c>
 8001ce6:	6821      	ldr	r1, [r4, #0]
 8001ce8:	f021 0104 	bic.w	r1, r1, #4
 8001cec:	6021      	str	r1, [r4, #0]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d13d      	bne.n	8001d6e <_printf_i+0x16a>
 8001cf2:	2d00      	cmp	r5, #0
 8001cf4:	f040 808e 	bne.w	8001e14 <_printf_i+0x210>
 8001cf8:	4665      	mov	r5, ip
 8001cfa:	2a08      	cmp	r2, #8
 8001cfc:	d10b      	bne.n	8001d16 <_printf_i+0x112>
 8001cfe:	6823      	ldr	r3, [r4, #0]
 8001d00:	07db      	lsls	r3, r3, #31
 8001d02:	d508      	bpl.n	8001d16 <_printf_i+0x112>
 8001d04:	6923      	ldr	r3, [r4, #16]
 8001d06:	6862      	ldr	r2, [r4, #4]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	bfde      	ittt	le
 8001d0c:	2330      	movle	r3, #48	; 0x30
 8001d0e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001d12:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8001d16:	ebac 0305 	sub.w	r3, ip, r5
 8001d1a:	6123      	str	r3, [r4, #16]
 8001d1c:	f8cd 8000 	str.w	r8, [sp]
 8001d20:	463b      	mov	r3, r7
 8001d22:	aa03      	add	r2, sp, #12
 8001d24:	4621      	mov	r1, r4
 8001d26:	4630      	mov	r0, r6
 8001d28:	f7ff fef6 	bl	8001b18 <_printf_common>
 8001d2c:	3001      	adds	r0, #1
 8001d2e:	d14d      	bne.n	8001dcc <_printf_i+0x1c8>
 8001d30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d34:	b005      	add	sp, #20
 8001d36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001d3a:	4839      	ldr	r0, [pc, #228]	; (8001e20 <_printf_i+0x21c>)
 8001d3c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8001d40:	6813      	ldr	r3, [r2, #0]
 8001d42:	6821      	ldr	r1, [r4, #0]
 8001d44:	1d1d      	adds	r5, r3, #4
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	6015      	str	r5, [r2, #0]
 8001d4a:	060a      	lsls	r2, r1, #24
 8001d4c:	d50b      	bpl.n	8001d66 <_printf_i+0x162>
 8001d4e:	07ca      	lsls	r2, r1, #31
 8001d50:	bf44      	itt	mi
 8001d52:	f041 0120 	orrmi.w	r1, r1, #32
 8001d56:	6021      	strmi	r1, [r4, #0]
 8001d58:	b91b      	cbnz	r3, 8001d62 <_printf_i+0x15e>
 8001d5a:	6822      	ldr	r2, [r4, #0]
 8001d5c:	f022 0220 	bic.w	r2, r2, #32
 8001d60:	6022      	str	r2, [r4, #0]
 8001d62:	2210      	movs	r2, #16
 8001d64:	e7b7      	b.n	8001cd6 <_printf_i+0xd2>
 8001d66:	064d      	lsls	r5, r1, #25
 8001d68:	bf48      	it	mi
 8001d6a:	b29b      	uxthmi	r3, r3
 8001d6c:	e7ef      	b.n	8001d4e <_printf_i+0x14a>
 8001d6e:	4665      	mov	r5, ip
 8001d70:	fbb3 f1f2 	udiv	r1, r3, r2
 8001d74:	fb02 3311 	mls	r3, r2, r1, r3
 8001d78:	5cc3      	ldrb	r3, [r0, r3]
 8001d7a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001d7e:	460b      	mov	r3, r1
 8001d80:	2900      	cmp	r1, #0
 8001d82:	d1f5      	bne.n	8001d70 <_printf_i+0x16c>
 8001d84:	e7b9      	b.n	8001cfa <_printf_i+0xf6>
 8001d86:	6813      	ldr	r3, [r2, #0]
 8001d88:	6825      	ldr	r5, [r4, #0]
 8001d8a:	6961      	ldr	r1, [r4, #20]
 8001d8c:	1d18      	adds	r0, r3, #4
 8001d8e:	6010      	str	r0, [r2, #0]
 8001d90:	0628      	lsls	r0, r5, #24
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	d501      	bpl.n	8001d9a <_printf_i+0x196>
 8001d96:	6019      	str	r1, [r3, #0]
 8001d98:	e002      	b.n	8001da0 <_printf_i+0x19c>
 8001d9a:	066a      	lsls	r2, r5, #25
 8001d9c:	d5fb      	bpl.n	8001d96 <_printf_i+0x192>
 8001d9e:	8019      	strh	r1, [r3, #0]
 8001da0:	2300      	movs	r3, #0
 8001da2:	6123      	str	r3, [r4, #16]
 8001da4:	4665      	mov	r5, ip
 8001da6:	e7b9      	b.n	8001d1c <_printf_i+0x118>
 8001da8:	6813      	ldr	r3, [r2, #0]
 8001daa:	1d19      	adds	r1, r3, #4
 8001dac:	6011      	str	r1, [r2, #0]
 8001dae:	681d      	ldr	r5, [r3, #0]
 8001db0:	6862      	ldr	r2, [r4, #4]
 8001db2:	2100      	movs	r1, #0
 8001db4:	4628      	mov	r0, r5
 8001db6:	f7fe fa2b 	bl	8000210 <memchr>
 8001dba:	b108      	cbz	r0, 8001dc0 <_printf_i+0x1bc>
 8001dbc:	1b40      	subs	r0, r0, r5
 8001dbe:	6060      	str	r0, [r4, #4]
 8001dc0:	6863      	ldr	r3, [r4, #4]
 8001dc2:	6123      	str	r3, [r4, #16]
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001dca:	e7a7      	b.n	8001d1c <_printf_i+0x118>
 8001dcc:	6923      	ldr	r3, [r4, #16]
 8001dce:	462a      	mov	r2, r5
 8001dd0:	4639      	mov	r1, r7
 8001dd2:	4630      	mov	r0, r6
 8001dd4:	47c0      	blx	r8
 8001dd6:	3001      	adds	r0, #1
 8001dd8:	d0aa      	beq.n	8001d30 <_printf_i+0x12c>
 8001dda:	6823      	ldr	r3, [r4, #0]
 8001ddc:	079b      	lsls	r3, r3, #30
 8001dde:	d413      	bmi.n	8001e08 <_printf_i+0x204>
 8001de0:	68e0      	ldr	r0, [r4, #12]
 8001de2:	9b03      	ldr	r3, [sp, #12]
 8001de4:	4298      	cmp	r0, r3
 8001de6:	bfb8      	it	lt
 8001de8:	4618      	movlt	r0, r3
 8001dea:	e7a3      	b.n	8001d34 <_printf_i+0x130>
 8001dec:	2301      	movs	r3, #1
 8001dee:	464a      	mov	r2, r9
 8001df0:	4639      	mov	r1, r7
 8001df2:	4630      	mov	r0, r6
 8001df4:	47c0      	blx	r8
 8001df6:	3001      	adds	r0, #1
 8001df8:	d09a      	beq.n	8001d30 <_printf_i+0x12c>
 8001dfa:	3501      	adds	r5, #1
 8001dfc:	68e3      	ldr	r3, [r4, #12]
 8001dfe:	9a03      	ldr	r2, [sp, #12]
 8001e00:	1a9b      	subs	r3, r3, r2
 8001e02:	42ab      	cmp	r3, r5
 8001e04:	dcf2      	bgt.n	8001dec <_printf_i+0x1e8>
 8001e06:	e7eb      	b.n	8001de0 <_printf_i+0x1dc>
 8001e08:	2500      	movs	r5, #0
 8001e0a:	f104 0919 	add.w	r9, r4, #25
 8001e0e:	e7f5      	b.n	8001dfc <_printf_i+0x1f8>
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d1ac      	bne.n	8001d6e <_printf_i+0x16a>
 8001e14:	7803      	ldrb	r3, [r0, #0]
 8001e16:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001e1a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001e1e:	e76c      	b.n	8001cfa <_printf_i+0xf6>
 8001e20:	080025a1 	.word	0x080025a1
 8001e24:	080025b2 	.word	0x080025b2

08001e28 <_sbrk_r>:
 8001e28:	b538      	push	{r3, r4, r5, lr}
 8001e2a:	4c06      	ldr	r4, [pc, #24]	; (8001e44 <_sbrk_r+0x1c>)
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	4605      	mov	r5, r0
 8001e30:	4608      	mov	r0, r1
 8001e32:	6023      	str	r3, [r4, #0]
 8001e34:	f7fe fb0a 	bl	800044c <_sbrk>
 8001e38:	1c43      	adds	r3, r0, #1
 8001e3a:	d102      	bne.n	8001e42 <_sbrk_r+0x1a>
 8001e3c:	6823      	ldr	r3, [r4, #0]
 8001e3e:	b103      	cbz	r3, 8001e42 <_sbrk_r+0x1a>
 8001e40:	602b      	str	r3, [r5, #0]
 8001e42:	bd38      	pop	{r3, r4, r5, pc}
 8001e44:	20000154 	.word	0x20000154

08001e48 <__sread>:
 8001e48:	b510      	push	{r4, lr}
 8001e4a:	460c      	mov	r4, r1
 8001e4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e50:	f000 f896 	bl	8001f80 <_read_r>
 8001e54:	2800      	cmp	r0, #0
 8001e56:	bfab      	itete	ge
 8001e58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001e5a:	89a3      	ldrhlt	r3, [r4, #12]
 8001e5c:	181b      	addge	r3, r3, r0
 8001e5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001e62:	bfac      	ite	ge
 8001e64:	6563      	strge	r3, [r4, #84]	; 0x54
 8001e66:	81a3      	strhlt	r3, [r4, #12]
 8001e68:	bd10      	pop	{r4, pc}

08001e6a <__swrite>:
 8001e6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e6e:	461f      	mov	r7, r3
 8001e70:	898b      	ldrh	r3, [r1, #12]
 8001e72:	05db      	lsls	r3, r3, #23
 8001e74:	4605      	mov	r5, r0
 8001e76:	460c      	mov	r4, r1
 8001e78:	4616      	mov	r6, r2
 8001e7a:	d505      	bpl.n	8001e88 <__swrite+0x1e>
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e84:	f000 f868 	bl	8001f58 <_lseek_r>
 8001e88:	89a3      	ldrh	r3, [r4, #12]
 8001e8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001e8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001e92:	81a3      	strh	r3, [r4, #12]
 8001e94:	4632      	mov	r2, r6
 8001e96:	463b      	mov	r3, r7
 8001e98:	4628      	mov	r0, r5
 8001e9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001e9e:	f000 b817 	b.w	8001ed0 <_write_r>

08001ea2 <__sseek>:
 8001ea2:	b510      	push	{r4, lr}
 8001ea4:	460c      	mov	r4, r1
 8001ea6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001eaa:	f000 f855 	bl	8001f58 <_lseek_r>
 8001eae:	1c43      	adds	r3, r0, #1
 8001eb0:	89a3      	ldrh	r3, [r4, #12]
 8001eb2:	bf15      	itete	ne
 8001eb4:	6560      	strne	r0, [r4, #84]	; 0x54
 8001eb6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001eba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001ebe:	81a3      	strheq	r3, [r4, #12]
 8001ec0:	bf18      	it	ne
 8001ec2:	81a3      	strhne	r3, [r4, #12]
 8001ec4:	bd10      	pop	{r4, pc}

08001ec6 <__sclose>:
 8001ec6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001eca:	f000 b813 	b.w	8001ef4 <_close_r>
	...

08001ed0 <_write_r>:
 8001ed0:	b538      	push	{r3, r4, r5, lr}
 8001ed2:	4c07      	ldr	r4, [pc, #28]	; (8001ef0 <_write_r+0x20>)
 8001ed4:	4605      	mov	r5, r0
 8001ed6:	4608      	mov	r0, r1
 8001ed8:	4611      	mov	r1, r2
 8001eda:	2200      	movs	r2, #0
 8001edc:	6022      	str	r2, [r4, #0]
 8001ede:	461a      	mov	r2, r3
 8001ee0:	f000 f911 	bl	8002106 <_write>
 8001ee4:	1c43      	adds	r3, r0, #1
 8001ee6:	d102      	bne.n	8001eee <_write_r+0x1e>
 8001ee8:	6823      	ldr	r3, [r4, #0]
 8001eea:	b103      	cbz	r3, 8001eee <_write_r+0x1e>
 8001eec:	602b      	str	r3, [r5, #0]
 8001eee:	bd38      	pop	{r3, r4, r5, pc}
 8001ef0:	20000154 	.word	0x20000154

08001ef4 <_close_r>:
 8001ef4:	b538      	push	{r3, r4, r5, lr}
 8001ef6:	4c06      	ldr	r4, [pc, #24]	; (8001f10 <_close_r+0x1c>)
 8001ef8:	2300      	movs	r3, #0
 8001efa:	4605      	mov	r5, r0
 8001efc:	4608      	mov	r0, r1
 8001efe:	6023      	str	r3, [r4, #0]
 8001f00:	f000 f930 	bl	8002164 <_close>
 8001f04:	1c43      	adds	r3, r0, #1
 8001f06:	d102      	bne.n	8001f0e <_close_r+0x1a>
 8001f08:	6823      	ldr	r3, [r4, #0]
 8001f0a:	b103      	cbz	r3, 8001f0e <_close_r+0x1a>
 8001f0c:	602b      	str	r3, [r5, #0]
 8001f0e:	bd38      	pop	{r3, r4, r5, pc}
 8001f10:	20000154 	.word	0x20000154

08001f14 <_fstat_r>:
 8001f14:	b538      	push	{r3, r4, r5, lr}
 8001f16:	4c07      	ldr	r4, [pc, #28]	; (8001f34 <_fstat_r+0x20>)
 8001f18:	2300      	movs	r3, #0
 8001f1a:	4605      	mov	r5, r0
 8001f1c:	4608      	mov	r0, r1
 8001f1e:	4611      	mov	r1, r2
 8001f20:	6023      	str	r3, [r4, #0]
 8001f22:	f000 f966 	bl	80021f2 <_fstat>
 8001f26:	1c43      	adds	r3, r0, #1
 8001f28:	d102      	bne.n	8001f30 <_fstat_r+0x1c>
 8001f2a:	6823      	ldr	r3, [r4, #0]
 8001f2c:	b103      	cbz	r3, 8001f30 <_fstat_r+0x1c>
 8001f2e:	602b      	str	r3, [r5, #0]
 8001f30:	bd38      	pop	{r3, r4, r5, pc}
 8001f32:	bf00      	nop
 8001f34:	20000154 	.word	0x20000154

08001f38 <_isatty_r>:
 8001f38:	b538      	push	{r3, r4, r5, lr}
 8001f3a:	4c06      	ldr	r4, [pc, #24]	; (8001f54 <_isatty_r+0x1c>)
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	4605      	mov	r5, r0
 8001f40:	4608      	mov	r0, r1
 8001f42:	6023      	str	r3, [r4, #0]
 8001f44:	f000 faba 	bl	80024bc <_isatty>
 8001f48:	1c43      	adds	r3, r0, #1
 8001f4a:	d102      	bne.n	8001f52 <_isatty_r+0x1a>
 8001f4c:	6823      	ldr	r3, [r4, #0]
 8001f4e:	b103      	cbz	r3, 8001f52 <_isatty_r+0x1a>
 8001f50:	602b      	str	r3, [r5, #0]
 8001f52:	bd38      	pop	{r3, r4, r5, pc}
 8001f54:	20000154 	.word	0x20000154

08001f58 <_lseek_r>:
 8001f58:	b538      	push	{r3, r4, r5, lr}
 8001f5a:	4c07      	ldr	r4, [pc, #28]	; (8001f78 <_lseek_r+0x20>)
 8001f5c:	4605      	mov	r5, r0
 8001f5e:	4608      	mov	r0, r1
 8001f60:	4611      	mov	r1, r2
 8001f62:	2200      	movs	r2, #0
 8001f64:	6022      	str	r2, [r4, #0]
 8001f66:	461a      	mov	r2, r3
 8001f68:	f000 f8bb 	bl	80020e2 <_lseek>
 8001f6c:	1c43      	adds	r3, r0, #1
 8001f6e:	d102      	bne.n	8001f76 <_lseek_r+0x1e>
 8001f70:	6823      	ldr	r3, [r4, #0]
 8001f72:	b103      	cbz	r3, 8001f76 <_lseek_r+0x1e>
 8001f74:	602b      	str	r3, [r5, #0]
 8001f76:	bd38      	pop	{r3, r4, r5, pc}
 8001f78:	20000154 	.word	0x20000154

08001f7c <__malloc_lock>:
 8001f7c:	4770      	bx	lr

08001f7e <__malloc_unlock>:
 8001f7e:	4770      	bx	lr

08001f80 <_read_r>:
 8001f80:	b538      	push	{r3, r4, r5, lr}
 8001f82:	4c07      	ldr	r4, [pc, #28]	; (8001fa0 <_read_r+0x20>)
 8001f84:	4605      	mov	r5, r0
 8001f86:	4608      	mov	r0, r1
 8001f88:	4611      	mov	r1, r2
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	6022      	str	r2, [r4, #0]
 8001f8e:	461a      	mov	r2, r3
 8001f90:	f000 f850 	bl	8002034 <_read>
 8001f94:	1c43      	adds	r3, r0, #1
 8001f96:	d102      	bne.n	8001f9e <_read_r+0x1e>
 8001f98:	6823      	ldr	r3, [r4, #0]
 8001f9a:	b103      	cbz	r3, 8001f9e <_read_r+0x1e>
 8001f9c:	602b      	str	r3, [r5, #0]
 8001f9e:	bd38      	pop	{r3, r4, r5, pc}
 8001fa0:	20000154 	.word	0x20000154

08001fa4 <findslot>:
 8001fa4:	4b0a      	ldr	r3, [pc, #40]	; (8001fd0 <findslot+0x2c>)
 8001fa6:	b510      	push	{r4, lr}
 8001fa8:	4604      	mov	r4, r0
 8001faa:	6818      	ldr	r0, [r3, #0]
 8001fac:	b118      	cbz	r0, 8001fb6 <findslot+0x12>
 8001fae:	6983      	ldr	r3, [r0, #24]
 8001fb0:	b90b      	cbnz	r3, 8001fb6 <findslot+0x12>
 8001fb2:	f7ff fadd 	bl	8001570 <__sinit>
 8001fb6:	2c13      	cmp	r4, #19
 8001fb8:	d807      	bhi.n	8001fca <findslot+0x26>
 8001fba:	4806      	ldr	r0, [pc, #24]	; (8001fd4 <findslot+0x30>)
 8001fbc:	f850 3034 	ldr.w	r3, [r0, r4, lsl #3]
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	d002      	beq.n	8001fca <findslot+0x26>
 8001fc4:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8001fc8:	bd10      	pop	{r4, pc}
 8001fca:	2000      	movs	r0, #0
 8001fcc:	e7fc      	b.n	8001fc8 <findslot+0x24>
 8001fce:	bf00      	nop
 8001fd0:	20000000 	.word	0x20000000
 8001fd4:	200000a0 	.word	0x200000a0

08001fd8 <checkerror>:
 8001fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fda:	1c43      	adds	r3, r0, #1
 8001fdc:	4605      	mov	r5, r0
 8001fde:	d109      	bne.n	8001ff4 <checkerror+0x1c>
 8001fe0:	f7ff f868 	bl	80010b4 <__errno>
 8001fe4:	2413      	movs	r4, #19
 8001fe6:	4606      	mov	r6, r0
 8001fe8:	2700      	movs	r7, #0
 8001fea:	4620      	mov	r0, r4
 8001fec:	4639      	mov	r1, r7
 8001fee:	beab      	bkpt	0x00ab
 8001ff0:	4604      	mov	r4, r0
 8001ff2:	6034      	str	r4, [r6, #0]
 8001ff4:	4628      	mov	r0, r5
 8001ff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001ff8 <error>:
 8001ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ffa:	4605      	mov	r5, r0
 8001ffc:	f7ff f85a 	bl	80010b4 <__errno>
 8002000:	2413      	movs	r4, #19
 8002002:	4606      	mov	r6, r0
 8002004:	2700      	movs	r7, #0
 8002006:	4620      	mov	r0, r4
 8002008:	4639      	mov	r1, r7
 800200a:	beab      	bkpt	0x00ab
 800200c:	4604      	mov	r4, r0
 800200e:	6034      	str	r4, [r6, #0]
 8002010:	4628      	mov	r0, r5
 8002012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002014 <_swiread>:
 8002014:	b530      	push	{r4, r5, lr}
 8002016:	b085      	sub	sp, #20
 8002018:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800201c:	9203      	str	r2, [sp, #12]
 800201e:	2406      	movs	r4, #6
 8002020:	ad01      	add	r5, sp, #4
 8002022:	4620      	mov	r0, r4
 8002024:	4629      	mov	r1, r5
 8002026:	beab      	bkpt	0x00ab
 8002028:	4604      	mov	r4, r0
 800202a:	4620      	mov	r0, r4
 800202c:	f7ff ffd4 	bl	8001fd8 <checkerror>
 8002030:	b005      	add	sp, #20
 8002032:	bd30      	pop	{r4, r5, pc}

08002034 <_read>:
 8002034:	b570      	push	{r4, r5, r6, lr}
 8002036:	460e      	mov	r6, r1
 8002038:	4615      	mov	r5, r2
 800203a:	f7ff ffb3 	bl	8001fa4 <findslot>
 800203e:	4604      	mov	r4, r0
 8002040:	b930      	cbnz	r0, 8002050 <_read+0x1c>
 8002042:	f7ff f837 	bl	80010b4 <__errno>
 8002046:	2309      	movs	r3, #9
 8002048:	6003      	str	r3, [r0, #0]
 800204a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800204e:	bd70      	pop	{r4, r5, r6, pc}
 8002050:	462a      	mov	r2, r5
 8002052:	4631      	mov	r1, r6
 8002054:	6800      	ldr	r0, [r0, #0]
 8002056:	f7ff ffdd 	bl	8002014 <_swiread>
 800205a:	1c43      	adds	r3, r0, #1
 800205c:	bf1f      	itttt	ne
 800205e:	6863      	ldrne	r3, [r4, #4]
 8002060:	1a28      	subne	r0, r5, r0
 8002062:	181b      	addne	r3, r3, r0
 8002064:	6063      	strne	r3, [r4, #4]
 8002066:	e7f2      	b.n	800204e <_read+0x1a>

08002068 <_swilseek>:
 8002068:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800206a:	460c      	mov	r4, r1
 800206c:	4616      	mov	r6, r2
 800206e:	f7ff ff99 	bl	8001fa4 <findslot>
 8002072:	4605      	mov	r5, r0
 8002074:	b940      	cbnz	r0, 8002088 <_swilseek+0x20>
 8002076:	f7ff f81d 	bl	80010b4 <__errno>
 800207a:	2309      	movs	r3, #9
 800207c:	6003      	str	r3, [r0, #0]
 800207e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002082:	4620      	mov	r0, r4
 8002084:	b003      	add	sp, #12
 8002086:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002088:	2e02      	cmp	r6, #2
 800208a:	d903      	bls.n	8002094 <_swilseek+0x2c>
 800208c:	f7ff f812 	bl	80010b4 <__errno>
 8002090:	2316      	movs	r3, #22
 8002092:	e7f3      	b.n	800207c <_swilseek+0x14>
 8002094:	2e01      	cmp	r6, #1
 8002096:	d112      	bne.n	80020be <_swilseek+0x56>
 8002098:	6843      	ldr	r3, [r0, #4]
 800209a:	18e4      	adds	r4, r4, r3
 800209c:	d4f6      	bmi.n	800208c <_swilseek+0x24>
 800209e:	682b      	ldr	r3, [r5, #0]
 80020a0:	260a      	movs	r6, #10
 80020a2:	e9cd 3400 	strd	r3, r4, [sp]
 80020a6:	466f      	mov	r7, sp
 80020a8:	4630      	mov	r0, r6
 80020aa:	4639      	mov	r1, r7
 80020ac:	beab      	bkpt	0x00ab
 80020ae:	4606      	mov	r6, r0
 80020b0:	4630      	mov	r0, r6
 80020b2:	f7ff ff91 	bl	8001fd8 <checkerror>
 80020b6:	2800      	cmp	r0, #0
 80020b8:	dbe1      	blt.n	800207e <_swilseek+0x16>
 80020ba:	606c      	str	r4, [r5, #4]
 80020bc:	e7e1      	b.n	8002082 <_swilseek+0x1a>
 80020be:	2e02      	cmp	r6, #2
 80020c0:	d1ed      	bne.n	800209e <_swilseek+0x36>
 80020c2:	af02      	add	r7, sp, #8
 80020c4:	6803      	ldr	r3, [r0, #0]
 80020c6:	f847 3d08 	str.w	r3, [r7, #-8]!
 80020ca:	260c      	movs	r6, #12
 80020cc:	4630      	mov	r0, r6
 80020ce:	4639      	mov	r1, r7
 80020d0:	beab      	bkpt	0x00ab
 80020d2:	4606      	mov	r6, r0
 80020d4:	4630      	mov	r0, r6
 80020d6:	f7ff ff7f 	bl	8001fd8 <checkerror>
 80020da:	1c43      	adds	r3, r0, #1
 80020dc:	d0cf      	beq.n	800207e <_swilseek+0x16>
 80020de:	4404      	add	r4, r0
 80020e0:	e7dd      	b.n	800209e <_swilseek+0x36>

080020e2 <_lseek>:
 80020e2:	f7ff bfc1 	b.w	8002068 <_swilseek>

080020e6 <_swiwrite>:
 80020e6:	b530      	push	{r4, r5, lr}
 80020e8:	b085      	sub	sp, #20
 80020ea:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80020ee:	9203      	str	r2, [sp, #12]
 80020f0:	2405      	movs	r4, #5
 80020f2:	ad01      	add	r5, sp, #4
 80020f4:	4620      	mov	r0, r4
 80020f6:	4629      	mov	r1, r5
 80020f8:	beab      	bkpt	0x00ab
 80020fa:	4604      	mov	r4, r0
 80020fc:	4620      	mov	r0, r4
 80020fe:	f7ff ff6b 	bl	8001fd8 <checkerror>
 8002102:	b005      	add	sp, #20
 8002104:	bd30      	pop	{r4, r5, pc}

08002106 <_write>:
 8002106:	b570      	push	{r4, r5, r6, lr}
 8002108:	460e      	mov	r6, r1
 800210a:	4615      	mov	r5, r2
 800210c:	f7ff ff4a 	bl	8001fa4 <findslot>
 8002110:	4604      	mov	r4, r0
 8002112:	b930      	cbnz	r0, 8002122 <_write+0x1c>
 8002114:	f7fe ffce 	bl	80010b4 <__errno>
 8002118:	2309      	movs	r3, #9
 800211a:	6003      	str	r3, [r0, #0]
 800211c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002120:	bd70      	pop	{r4, r5, r6, pc}
 8002122:	462a      	mov	r2, r5
 8002124:	4631      	mov	r1, r6
 8002126:	6800      	ldr	r0, [r0, #0]
 8002128:	f7ff ffdd 	bl	80020e6 <_swiwrite>
 800212c:	1e02      	subs	r2, r0, #0
 800212e:	dbf5      	blt.n	800211c <_write+0x16>
 8002130:	6863      	ldr	r3, [r4, #4]
 8002132:	1aa8      	subs	r0, r5, r2
 8002134:	4403      	add	r3, r0
 8002136:	42aa      	cmp	r2, r5
 8002138:	6063      	str	r3, [r4, #4]
 800213a:	d1f1      	bne.n	8002120 <_write+0x1a>
 800213c:	2000      	movs	r0, #0
 800213e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002142:	f7ff bf59 	b.w	8001ff8 <error>

08002146 <_swiclose>:
 8002146:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002148:	ad02      	add	r5, sp, #8
 800214a:	2402      	movs	r4, #2
 800214c:	f845 0d04 	str.w	r0, [r5, #-4]!
 8002150:	4620      	mov	r0, r4
 8002152:	4629      	mov	r1, r5
 8002154:	beab      	bkpt	0x00ab
 8002156:	4604      	mov	r4, r0
 8002158:	4620      	mov	r0, r4
 800215a:	f7ff ff3d 	bl	8001fd8 <checkerror>
 800215e:	b003      	add	sp, #12
 8002160:	bd30      	pop	{r4, r5, pc}
	...

08002164 <_close>:
 8002164:	b538      	push	{r3, r4, r5, lr}
 8002166:	4605      	mov	r5, r0
 8002168:	f7ff ff1c 	bl	8001fa4 <findslot>
 800216c:	4604      	mov	r4, r0
 800216e:	b930      	cbnz	r0, 800217e <_close+0x1a>
 8002170:	f7fe ffa0 	bl	80010b4 <__errno>
 8002174:	2309      	movs	r3, #9
 8002176:	6003      	str	r3, [r0, #0]
 8002178:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800217c:	bd38      	pop	{r3, r4, r5, pc}
 800217e:	3d01      	subs	r5, #1
 8002180:	2d01      	cmp	r5, #1
 8002182:	d809      	bhi.n	8002198 <_close+0x34>
 8002184:	4b09      	ldr	r3, [pc, #36]	; (80021ac <_close+0x48>)
 8002186:	689a      	ldr	r2, [r3, #8]
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	429a      	cmp	r2, r3
 800218c:	d104      	bne.n	8002198 <_close+0x34>
 800218e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002192:	6003      	str	r3, [r0, #0]
 8002194:	2000      	movs	r0, #0
 8002196:	e7f1      	b.n	800217c <_close+0x18>
 8002198:	6820      	ldr	r0, [r4, #0]
 800219a:	f7ff ffd4 	bl	8002146 <_swiclose>
 800219e:	2800      	cmp	r0, #0
 80021a0:	d1ec      	bne.n	800217c <_close+0x18>
 80021a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021a6:	6023      	str	r3, [r4, #0]
 80021a8:	e7e8      	b.n	800217c <_close+0x18>
 80021aa:	bf00      	nop
 80021ac:	200000a0 	.word	0x200000a0

080021b0 <_swistat>:
 80021b0:	b570      	push	{r4, r5, r6, lr}
 80021b2:	460c      	mov	r4, r1
 80021b4:	f7ff fef6 	bl	8001fa4 <findslot>
 80021b8:	4606      	mov	r6, r0
 80021ba:	b930      	cbnz	r0, 80021ca <_swistat+0x1a>
 80021bc:	f7fe ff7a 	bl	80010b4 <__errno>
 80021c0:	2309      	movs	r3, #9
 80021c2:	6003      	str	r3, [r0, #0]
 80021c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021c8:	bd70      	pop	{r4, r5, r6, pc}
 80021ca:	6863      	ldr	r3, [r4, #4]
 80021cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80021d0:	6063      	str	r3, [r4, #4]
 80021d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021d6:	6463      	str	r3, [r4, #68]	; 0x44
 80021d8:	250c      	movs	r5, #12
 80021da:	4628      	mov	r0, r5
 80021dc:	4631      	mov	r1, r6
 80021de:	beab      	bkpt	0x00ab
 80021e0:	4605      	mov	r5, r0
 80021e2:	4628      	mov	r0, r5
 80021e4:	f7ff fef8 	bl	8001fd8 <checkerror>
 80021e8:	1c43      	adds	r3, r0, #1
 80021ea:	bf1c      	itt	ne
 80021ec:	6120      	strne	r0, [r4, #16]
 80021ee:	2000      	movne	r0, #0
 80021f0:	e7ea      	b.n	80021c8 <_swistat+0x18>

080021f2 <_fstat>:
 80021f2:	460b      	mov	r3, r1
 80021f4:	b510      	push	{r4, lr}
 80021f6:	2100      	movs	r1, #0
 80021f8:	4604      	mov	r4, r0
 80021fa:	2258      	movs	r2, #88	; 0x58
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7fe ff83 	bl	8001108 <memset>
 8002202:	4601      	mov	r1, r0
 8002204:	4620      	mov	r0, r4
 8002206:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800220a:	f7ff bfd1 	b.w	80021b0 <_swistat>

0800220e <_stat>:
 800220e:	b538      	push	{r3, r4, r5, lr}
 8002210:	460d      	mov	r5, r1
 8002212:	4604      	mov	r4, r0
 8002214:	2258      	movs	r2, #88	; 0x58
 8002216:	2100      	movs	r1, #0
 8002218:	4628      	mov	r0, r5
 800221a:	f7fe ff75 	bl	8001108 <memset>
 800221e:	4620      	mov	r0, r4
 8002220:	2100      	movs	r1, #0
 8002222:	f000 f811 	bl	8002248 <_swiopen>
 8002226:	1c43      	adds	r3, r0, #1
 8002228:	4604      	mov	r4, r0
 800222a:	d00b      	beq.n	8002244 <_stat+0x36>
 800222c:	686b      	ldr	r3, [r5, #4]
 800222e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8002232:	606b      	str	r3, [r5, #4]
 8002234:	4629      	mov	r1, r5
 8002236:	f7ff ffbb 	bl	80021b0 <_swistat>
 800223a:	4605      	mov	r5, r0
 800223c:	4620      	mov	r0, r4
 800223e:	f7ff ff91 	bl	8002164 <_close>
 8002242:	462c      	mov	r4, r5
 8002244:	4620      	mov	r0, r4
 8002246:	bd38      	pop	{r3, r4, r5, pc}

08002248 <_swiopen>:
 8002248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800224c:	4b2b      	ldr	r3, [pc, #172]	; (80022fc <_swiopen+0xb4>)
 800224e:	b096      	sub	sp, #88	; 0x58
 8002250:	4682      	mov	sl, r0
 8002252:	460e      	mov	r6, r1
 8002254:	2500      	movs	r5, #0
 8002256:	4698      	mov	r8, r3
 8002258:	f853 4035 	ldr.w	r4, [r3, r5, lsl #3]
 800225c:	1c61      	adds	r1, r4, #1
 800225e:	ea4f 07c5 	mov.w	r7, r5, lsl #3
 8002262:	d036      	beq.n	80022d2 <_swiopen+0x8a>
 8002264:	3501      	adds	r5, #1
 8002266:	2d14      	cmp	r5, #20
 8002268:	d1f6      	bne.n	8002258 <_swiopen+0x10>
 800226a:	f7fe ff23 	bl	80010b4 <__errno>
 800226e:	2318      	movs	r3, #24
 8002270:	6003      	str	r3, [r0, #0]
 8002272:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002276:	e03c      	b.n	80022f2 <_swiopen+0xaa>
 8002278:	f3c6 4400 	ubfx	r4, r6, #16, #1
 800227c:	f240 6301 	movw	r3, #1537	; 0x601
 8002280:	07b2      	lsls	r2, r6, #30
 8002282:	bf48      	it	mi
 8002284:	f044 0402 	orrmi.w	r4, r4, #2
 8002288:	421e      	tst	r6, r3
 800228a:	bf18      	it	ne
 800228c:	f044 0404 	orrne.w	r4, r4, #4
 8002290:	0733      	lsls	r3, r6, #28
 8002292:	bf48      	it	mi
 8002294:	f024 0404 	bicmi.w	r4, r4, #4
 8002298:	4650      	mov	r0, sl
 800229a:	bf48      	it	mi
 800229c:	f044 0408 	orrmi.w	r4, r4, #8
 80022a0:	f8cd a000 	str.w	sl, [sp]
 80022a4:	f7fe f804 	bl	80002b0 <strlen>
 80022a8:	e9cd 4001 	strd	r4, r0, [sp, #4]
 80022ac:	2401      	movs	r4, #1
 80022ae:	4620      	mov	r0, r4
 80022b0:	4649      	mov	r1, r9
 80022b2:	beab      	bkpt	0x00ab
 80022b4:	4604      	mov	r4, r0
 80022b6:	2c00      	cmp	r4, #0
 80022b8:	db06      	blt.n	80022c8 <_swiopen+0x80>
 80022ba:	4447      	add	r7, r8
 80022bc:	2300      	movs	r3, #0
 80022be:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 80022c2:	607b      	str	r3, [r7, #4]
 80022c4:	462c      	mov	r4, r5
 80022c6:	e014      	b.n	80022f2 <_swiopen+0xaa>
 80022c8:	4620      	mov	r0, r4
 80022ca:	f7ff fe95 	bl	8001ff8 <error>
 80022ce:	4604      	mov	r4, r0
 80022d0:	e00f      	b.n	80022f2 <_swiopen+0xaa>
 80022d2:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 80022d6:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80022da:	46e9      	mov	r9, sp
 80022dc:	d1cc      	bne.n	8002278 <_swiopen+0x30>
 80022de:	4649      	mov	r1, r9
 80022e0:	4650      	mov	r0, sl
 80022e2:	f7ff ff94 	bl	800220e <_stat>
 80022e6:	3001      	adds	r0, #1
 80022e8:	d0c6      	beq.n	8002278 <_swiopen+0x30>
 80022ea:	f7fe fee3 	bl	80010b4 <__errno>
 80022ee:	2311      	movs	r3, #17
 80022f0:	6003      	str	r3, [r0, #0]
 80022f2:	4620      	mov	r0, r4
 80022f4:	b016      	add	sp, #88	; 0x58
 80022f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80022fa:	bf00      	nop
 80022fc:	200000a0 	.word	0x200000a0

08002300 <_get_semihosting_exts>:
 8002300:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002304:	4607      	mov	r7, r0
 8002306:	4688      	mov	r8, r1
 8002308:	4829      	ldr	r0, [pc, #164]	; (80023b0 <_get_semihosting_exts+0xb0>)
 800230a:	2100      	movs	r1, #0
 800230c:	4615      	mov	r5, r2
 800230e:	f7ff ff9b 	bl	8002248 <_swiopen>
 8002312:	462a      	mov	r2, r5
 8002314:	4604      	mov	r4, r0
 8002316:	2100      	movs	r1, #0
 8002318:	4638      	mov	r0, r7
 800231a:	f7fe fef5 	bl	8001108 <memset>
 800231e:	1c63      	adds	r3, r4, #1
 8002320:	d015      	beq.n	800234e <_get_semihosting_exts+0x4e>
 8002322:	4620      	mov	r0, r4
 8002324:	f7ff fe3e 	bl	8001fa4 <findslot>
 8002328:	260c      	movs	r6, #12
 800232a:	4681      	mov	r9, r0
 800232c:	4630      	mov	r0, r6
 800232e:	4649      	mov	r1, r9
 8002330:	beab      	bkpt	0x00ab
 8002332:	4606      	mov	r6, r0
 8002334:	4630      	mov	r0, r6
 8002336:	f7ff fe4f 	bl	8001fd8 <checkerror>
 800233a:	2803      	cmp	r0, #3
 800233c:	dd02      	ble.n	8002344 <_get_semihosting_exts+0x44>
 800233e:	3803      	subs	r0, #3
 8002340:	42a8      	cmp	r0, r5
 8002342:	dc08      	bgt.n	8002356 <_get_semihosting_exts+0x56>
 8002344:	4620      	mov	r0, r4
 8002346:	f7ff ff0d 	bl	8002164 <_close>
 800234a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800234e:	4620      	mov	r0, r4
 8002350:	b003      	add	sp, #12
 8002352:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002356:	2204      	movs	r2, #4
 8002358:	eb0d 0102 	add.w	r1, sp, r2
 800235c:	4620      	mov	r0, r4
 800235e:	f7ff fe69 	bl	8002034 <_read>
 8002362:	2803      	cmp	r0, #3
 8002364:	ddee      	ble.n	8002344 <_get_semihosting_exts+0x44>
 8002366:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800236a:	2b53      	cmp	r3, #83	; 0x53
 800236c:	d1ea      	bne.n	8002344 <_get_semihosting_exts+0x44>
 800236e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002372:	2b48      	cmp	r3, #72	; 0x48
 8002374:	d1e6      	bne.n	8002344 <_get_semihosting_exts+0x44>
 8002376:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800237a:	2b46      	cmp	r3, #70	; 0x46
 800237c:	d1e2      	bne.n	8002344 <_get_semihosting_exts+0x44>
 800237e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002382:	2b42      	cmp	r3, #66	; 0x42
 8002384:	d1de      	bne.n	8002344 <_get_semihosting_exts+0x44>
 8002386:	2201      	movs	r2, #1
 8002388:	4641      	mov	r1, r8
 800238a:	4620      	mov	r0, r4
 800238c:	f7ff fe6c 	bl	8002068 <_swilseek>
 8002390:	2800      	cmp	r0, #0
 8002392:	dbd7      	blt.n	8002344 <_get_semihosting_exts+0x44>
 8002394:	462a      	mov	r2, r5
 8002396:	4639      	mov	r1, r7
 8002398:	4620      	mov	r0, r4
 800239a:	f7ff fe4b 	bl	8002034 <_read>
 800239e:	4605      	mov	r5, r0
 80023a0:	4620      	mov	r0, r4
 80023a2:	f7ff fedf 	bl	8002164 <_close>
 80023a6:	4628      	mov	r0, r5
 80023a8:	f7ff fe16 	bl	8001fd8 <checkerror>
 80023ac:	4604      	mov	r4, r0
 80023ae:	e7ce      	b.n	800234e <_get_semihosting_exts+0x4e>
 80023b0:	080025c3 	.word	0x080025c3

080023b4 <initialise_semihosting_exts>:
 80023b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80023b6:	4d0a      	ldr	r5, [pc, #40]	; (80023e0 <initialise_semihosting_exts+0x2c>)
 80023b8:	4c0a      	ldr	r4, [pc, #40]	; (80023e4 <initialise_semihosting_exts+0x30>)
 80023ba:	2100      	movs	r1, #0
 80023bc:	2201      	movs	r2, #1
 80023be:	a801      	add	r0, sp, #4
 80023c0:	6029      	str	r1, [r5, #0]
 80023c2:	6022      	str	r2, [r4, #0]
 80023c4:	f7ff ff9c 	bl	8002300 <_get_semihosting_exts>
 80023c8:	2800      	cmp	r0, #0
 80023ca:	dd07      	ble.n	80023dc <initialise_semihosting_exts+0x28>
 80023cc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80023d0:	f003 0201 	and.w	r2, r3, #1
 80023d4:	f003 0302 	and.w	r3, r3, #2
 80023d8:	602a      	str	r2, [r5, #0]
 80023da:	6023      	str	r3, [r4, #0]
 80023dc:	b003      	add	sp, #12
 80023de:	bd30      	pop	{r4, r5, pc}
 80023e0:	20000064 	.word	0x20000064
 80023e4:	20000068 	.word	0x20000068

080023e8 <_has_ext_stdout_stderr>:
 80023e8:	b510      	push	{r4, lr}
 80023ea:	4c04      	ldr	r4, [pc, #16]	; (80023fc <_has_ext_stdout_stderr+0x14>)
 80023ec:	6822      	ldr	r2, [r4, #0]
 80023ee:	2a00      	cmp	r2, #0
 80023f0:	da01      	bge.n	80023f6 <_has_ext_stdout_stderr+0xe>
 80023f2:	f7ff ffdf 	bl	80023b4 <initialise_semihosting_exts>
 80023f6:	6820      	ldr	r0, [r4, #0]
 80023f8:	bd10      	pop	{r4, pc}
 80023fa:	bf00      	nop
 80023fc:	20000068 	.word	0x20000068

08002400 <initialise_monitor_handles>:
 8002400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002404:	b085      	sub	sp, #20
 8002406:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 80024b8 <initialise_monitor_handles+0xb8>
 800240a:	f8cd 9004 	str.w	r9, [sp, #4]
 800240e:	2303      	movs	r3, #3
 8002410:	2400      	movs	r4, #0
 8002412:	9303      	str	r3, [sp, #12]
 8002414:	f10d 0804 	add.w	r8, sp, #4
 8002418:	9402      	str	r4, [sp, #8]
 800241a:	2501      	movs	r5, #1
 800241c:	4628      	mov	r0, r5
 800241e:	4641      	mov	r1, r8
 8002420:	beab      	bkpt	0x00ab
 8002422:	4605      	mov	r5, r0
 8002424:	4e20      	ldr	r6, [pc, #128]	; (80024a8 <initialise_monitor_handles+0xa8>)
 8002426:	4a21      	ldr	r2, [pc, #132]	; (80024ac <initialise_monitor_handles+0xac>)
 8002428:	6035      	str	r5, [r6, #0]
 800242a:	4623      	mov	r3, r4
 800242c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002430:	4614      	mov	r4, r2
 8002432:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 8002436:	3301      	adds	r3, #1
 8002438:	2b14      	cmp	r3, #20
 800243a:	d1fa      	bne.n	8002432 <initialise_monitor_handles+0x32>
 800243c:	f7ff ffd4 	bl	80023e8 <_has_ext_stdout_stderr>
 8002440:	4d1b      	ldr	r5, [pc, #108]	; (80024b0 <initialise_monitor_handles+0xb0>)
 8002442:	b1d0      	cbz	r0, 800247a <initialise_monitor_handles+0x7a>
 8002444:	f04f 0a03 	mov.w	sl, #3
 8002448:	2304      	movs	r3, #4
 800244a:	f8cd 9004 	str.w	r9, [sp, #4]
 800244e:	2701      	movs	r7, #1
 8002450:	f8cd a00c 	str.w	sl, [sp, #12]
 8002454:	9302      	str	r3, [sp, #8]
 8002456:	4638      	mov	r0, r7
 8002458:	4641      	mov	r1, r8
 800245a:	beab      	bkpt	0x00ab
 800245c:	4683      	mov	fp, r0
 800245e:	4b15      	ldr	r3, [pc, #84]	; (80024b4 <initialise_monitor_handles+0xb4>)
 8002460:	f8cd 9004 	str.w	r9, [sp, #4]
 8002464:	f8c3 b000 	str.w	fp, [r3]
 8002468:	2308      	movs	r3, #8
 800246a:	f8cd a00c 	str.w	sl, [sp, #12]
 800246e:	9302      	str	r3, [sp, #8]
 8002470:	4638      	mov	r0, r7
 8002472:	4641      	mov	r1, r8
 8002474:	beab      	bkpt	0x00ab
 8002476:	4607      	mov	r7, r0
 8002478:	602f      	str	r7, [r5, #0]
 800247a:	682b      	ldr	r3, [r5, #0]
 800247c:	3301      	adds	r3, #1
 800247e:	bf02      	ittt	eq
 8002480:	4b0c      	ldreq	r3, [pc, #48]	; (80024b4 <initialise_monitor_handles+0xb4>)
 8002482:	681b      	ldreq	r3, [r3, #0]
 8002484:	602b      	streq	r3, [r5, #0]
 8002486:	6833      	ldr	r3, [r6, #0]
 8002488:	6023      	str	r3, [r4, #0]
 800248a:	2600      	movs	r6, #0
 800248c:	6066      	str	r6, [r4, #4]
 800248e:	f7ff ffab 	bl	80023e8 <_has_ext_stdout_stderr>
 8002492:	b130      	cbz	r0, 80024a2 <initialise_monitor_handles+0xa2>
 8002494:	4b07      	ldr	r3, [pc, #28]	; (80024b4 <initialise_monitor_handles+0xb4>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	e9c4 3602 	strd	r3, r6, [r4, #8]
 800249c:	682b      	ldr	r3, [r5, #0]
 800249e:	e9c4 3604 	strd	r3, r6, [r4, #16]
 80024a2:	b005      	add	sp, #20
 80024a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024a8:	20000098 	.word	0x20000098
 80024ac:	200000a0 	.word	0x200000a0
 80024b0:	20000094 	.word	0x20000094
 80024b4:	2000009c 	.word	0x2000009c
 80024b8:	080025d9 	.word	0x080025d9

080024bc <_isatty>:
 80024bc:	b570      	push	{r4, r5, r6, lr}
 80024be:	f7ff fd71 	bl	8001fa4 <findslot>
 80024c2:	2509      	movs	r5, #9
 80024c4:	4604      	mov	r4, r0
 80024c6:	b920      	cbnz	r0, 80024d2 <_isatty+0x16>
 80024c8:	f7fe fdf4 	bl	80010b4 <__errno>
 80024cc:	6005      	str	r5, [r0, #0]
 80024ce:	4620      	mov	r0, r4
 80024d0:	bd70      	pop	{r4, r5, r6, pc}
 80024d2:	4628      	mov	r0, r5
 80024d4:	4621      	mov	r1, r4
 80024d6:	beab      	bkpt	0x00ab
 80024d8:	4604      	mov	r4, r0
 80024da:	2c01      	cmp	r4, #1
 80024dc:	d0f7      	beq.n	80024ce <_isatty+0x12>
 80024de:	f7fe fde9 	bl	80010b4 <__errno>
 80024e2:	2400      	movs	r4, #0
 80024e4:	4606      	mov	r6, r0
 80024e6:	2513      	movs	r5, #19
 80024e8:	4628      	mov	r0, r5
 80024ea:	4621      	mov	r1, r4
 80024ec:	beab      	bkpt	0x00ab
 80024ee:	4605      	mov	r5, r0
 80024f0:	6035      	str	r5, [r6, #0]
 80024f2:	e7ec      	b.n	80024ce <_isatty+0x12>

080024f4 <_init>:
 80024f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024f6:	bf00      	nop
 80024f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024fa:	bc08      	pop	{r3}
 80024fc:	469e      	mov	lr, r3
 80024fe:	4770      	bx	lr

08002500 <_fini>:
 8002500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002502:	bf00      	nop
 8002504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002506:	bc08      	pop	{r3}
 8002508:	469e      	mov	lr, r3
 800250a:	4770      	bx	lr
