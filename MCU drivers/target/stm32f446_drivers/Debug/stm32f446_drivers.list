
stm32f446_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c9c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000e60  08000e60  00010e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000e6c  08000e6c  00010e74  2**0
                  CONTENTS
  4 .ARM          00000000  08000e6c  08000e6c  00010e74  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e6c  08000e74  00010e74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e6c  08000e6c  00010e6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000e70  08000e70  00010e70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010e74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  20000000  08000e74  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  08000e74  00020030  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00010e74  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001a57  00000000  00000000  00010e9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000050d  00000000  00000000  000128f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000158  00000000  00000000  00012e08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000120  00000000  00000000  00012f60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000298a  00000000  00000000  00013080  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001351  00000000  00000000  00015a0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000ad61  00000000  00000000  00016d5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00021abc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000004c0  00000000  00000000  00021b38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000e48 	.word	0x08000e48

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000e48 	.word	0x08000e48

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <delay>:
#define MY_ADDR			0x61
#define SLAVE_ADDR		0x68

I2C_Handle_t I2C1_handle;

void delay(void){
 8000214:	b480      	push	{r7}
 8000216:	b083      	sub	sp, #12
 8000218:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < 500000; i++);
 800021a:	2300      	movs	r3, #0
 800021c:	607b      	str	r3, [r7, #4]
 800021e:	e002      	b.n	8000226 <delay+0x12>
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	3301      	adds	r3, #1
 8000224:	607b      	str	r3, [r7, #4]
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	4a03      	ldr	r2, [pc, #12]	; (8000238 <delay+0x24>)
 800022a:	4293      	cmp	r3, r2
 800022c:	d9f8      	bls.n	8000220 <delay+0xc>
}
 800022e:	bf00      	nop
 8000230:	370c      	adds	r7, #12
 8000232:	46bd      	mov	sp, r7
 8000234:	bc80      	pop	{r7}
 8000236:	4770      	bx	lr
 8000238:	0007a11f 	.word	0x0007a11f

0800023c <GPIO_Button_Init>:

void GPIO_Button_Init(){
 800023c:	b580      	push	{r7, lr}
 800023e:	b084      	sub	sp, #16
 8000240:	af00      	add	r7, sp, #0
	GPIO_Handle_t gpioc_button;
	gpioc_button.pGPIOx = GPIOC;
 8000242:	4b09      	ldr	r3, [pc, #36]	; (8000268 <GPIO_Button_Init+0x2c>)
 8000244:	607b      	str	r3, [r7, #4]

	gpioc_button.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000246:	230d      	movs	r3, #13
 8000248:	723b      	strb	r3, [r7, #8]
	gpioc_button.GPIO_PinConfig.GPIO_PinMode = GPIO_PIN_MODE_IN;
 800024a:	2300      	movs	r3, #0
 800024c:	727b      	strb	r3, [r7, #9]

	GPIO_PeriClockControl(gpioc_button.pGPIOx, ENABLE);
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	2101      	movs	r1, #1
 8000252:	4618      	mov	r0, r3
 8000254:	f000 f8ac 	bl	80003b0 <GPIO_PeriClockControl>
	GPIO_Init(&gpioc_button);
 8000258:	1d3b      	adds	r3, r7, #4
 800025a:	4618      	mov	r0, r3
 800025c:	f000 f97a 	bl	8000554 <GPIO_Init>
}
 8000260:	bf00      	nop
 8000262:	3710      	adds	r7, #16
 8000264:	46bd      	mov	sp, r7
 8000266:	bd80      	pop	{r7, pc}
 8000268:	40020800 	.word	0x40020800

0800026c <I2C1_GPIOInits>:

void I2C1_GPIOInits(void){
 800026c:	b580      	push	{r7, lr}
 800026e:	b084      	sub	sp, #16
 8000270:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2C_pins;
	I2C_pins.pGPIOx = GPIOB;
 8000272:	4b10      	ldr	r3, [pc, #64]	; (80002b4 <I2C1_GPIOInits+0x48>)
 8000274:	607b      	str	r3, [r7, #4]

	I2C_pins.GPIO_PinConfig.GPIO_PinMode = GPIO_PIN_MODE_ALTFN;
 8000276:	2302      	movs	r3, #2
 8000278:	727b      	strb	r3, [r7, #9]
	I2C_pins.GPIO_PinConfig.GPIO_PinAltFunMode = GPIO_PIN_ALT_FUN_4;
 800027a:	2304      	movs	r3, #4
 800027c:	737b      	strb	r3, [r7, #13]
	I2C_pins.GPIO_PinConfig.GPIO_PinOPType = GPIO_PIN_OP_TYPE_OD;
 800027e:	2301      	movs	r3, #1
 8000280:	733b      	strb	r3, [r7, #12]
	I2C_pins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000282:	2301      	movs	r3, #1
 8000284:	72fb      	strb	r3, [r7, #11]
	I2C_pins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_PIN_OP_SPEED_FAST;
 8000286:	2302      	movs	r3, #2
 8000288:	72bb      	strb	r3, [r7, #10]

	//Start GPIO peripheral clock
	GPIO_PeriClockControl(I2C_pins.pGPIOx, ENABLE);
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	2101      	movs	r1, #1
 800028e:	4618      	mov	r0, r3
 8000290:	f000 f88e 	bl	80003b0 <GPIO_PeriClockControl>

	//Configure I2C1_SCL
	I2C_pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 8000294:	2306      	movs	r3, #6
 8000296:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2C_pins);
 8000298:	1d3b      	adds	r3, r7, #4
 800029a:	4618      	mov	r0, r3
 800029c:	f000 f95a 	bl	8000554 <GPIO_Init>

	//Configure I2C1_SDA
	I2C_pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 80002a0:	2307      	movs	r3, #7
 80002a2:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2C_pins);
 80002a4:	1d3b      	adds	r3, r7, #4
 80002a6:	4618      	mov	r0, r3
 80002a8:	f000 f954 	bl	8000554 <GPIO_Init>
}
 80002ac:	bf00      	nop
 80002ae:	3710      	adds	r7, #16
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bd80      	pop	{r7, pc}
 80002b4:	40020400 	.word	0x40020400

080002b8 <I2C1_Inits>:

void I2C1_Inits(void){
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
	I2C1_handle.pI2Cx = I2C1;
 80002bc:	4b0c      	ldr	r3, [pc, #48]	; (80002f0 <I2C1_Inits+0x38>)
 80002be:	4a0d      	ldr	r2, [pc, #52]	; (80002f4 <I2C1_Inits+0x3c>)
 80002c0:	601a      	str	r2, [r3, #0]

	I2C1_handle.I2C_Config.I2C_ACKControl = I2C_ACK_ENABLE;
 80002c2:	4b0b      	ldr	r3, [pc, #44]	; (80002f0 <I2C1_Inits+0x38>)
 80002c4:	2201      	movs	r2, #1
 80002c6:	60da      	str	r2, [r3, #12]
	I2C1_handle.I2C_Config.I2C_DeviceAddress = MY_ADDR;
 80002c8:	4b09      	ldr	r3, [pc, #36]	; (80002f0 <I2C1_Inits+0x38>)
 80002ca:	2261      	movs	r2, #97	; 0x61
 80002cc:	721a      	strb	r2, [r3, #8]
	I2C1_handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 80002ce:	4b08      	ldr	r3, [pc, #32]	; (80002f0 <I2C1_Inits+0x38>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	611a      	str	r2, [r3, #16]
	I2C1_handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 80002d4:	4b06      	ldr	r3, [pc, #24]	; (80002f0 <I2C1_Inits+0x38>)
 80002d6:	4a08      	ldr	r2, [pc, #32]	; (80002f8 <I2C1_Inits+0x40>)
 80002d8:	605a      	str	r2, [r3, #4]

	I2C_PeriClockControl(I2C1_handle.pI2Cx, ENABLE);
 80002da:	4b05      	ldr	r3, [pc, #20]	; (80002f0 <I2C1_Inits+0x38>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	2101      	movs	r1, #1
 80002e0:	4618      	mov	r0, r3
 80002e2:	f000 fbe3 	bl	8000aac <I2C_PeriClockControl>
	I2C_Init(&I2C1_handle);
 80002e6:	4802      	ldr	r0, [pc, #8]	; (80002f0 <I2C1_Inits+0x38>)
 80002e8:	f000 fc38 	bl	8000b5c <I2C_Init>
}
 80002ec:	bf00      	nop
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	2000001c 	.word	0x2000001c
 80002f4:	40005400 	.word	0x40005400
 80002f8:	000186a0 	.word	0x000186a0

080002fc <main>:

int main(void){
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b084      	sub	sp, #16
 8000300:	af00      	add	r7, sp, #0
	GPIO_Button_Init();
 8000302:	f7ff ff9b 	bl	800023c <GPIO_Button_Init>
	I2C1_GPIOInits();
 8000306:	f7ff ffb1 	bl	800026c <I2C1_GPIOInits>
	I2C1_Inits();
 800030a:	f7ff ffd5 	bl	80002b8 <I2C1_Inits>

	uint8_t some_data[] = "We are test";
 800030e:	4a10      	ldr	r2, [pc, #64]	; (8000350 <main+0x54>)
 8000310:	1d3b      	adds	r3, r7, #4
 8000312:	ca07      	ldmia	r2, {r0, r1, r2}
 8000314:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	I2C_PeripheralControl(I2C1_handle.pI2Cx, ENABLE);
 8000318:	4b0e      	ldr	r3, [pc, #56]	; (8000354 <main+0x58>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	2101      	movs	r1, #1
 800031e:	4618      	mov	r0, r3
 8000320:	f000 fd40 	bl	8000da4 <I2C_PeripheralControl>

	while(1){
		//Button press and de-bouncing delay
		while(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13)){};
 8000324:	bf00      	nop
 8000326:	210d      	movs	r1, #13
 8000328:	480b      	ldr	r0, [pc, #44]	; (8000358 <main+0x5c>)
 800032a:	f000 fae5 	bl	80008f8 <GPIO_ReadFromInputPin>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d1f8      	bne.n	8000326 <main+0x2a>
		delay();
 8000334:	f7ff ff6e 	bl	8000214 <delay>

		//send data
		I2C_MasterSendData(&I2C1_handle, some_data, strlen((char*) some_data), SLAVE_ADDR);
 8000338:	1d3b      	adds	r3, r7, #4
 800033a:	4618      	mov	r0, r3
 800033c:	f7ff ff62 	bl	8000204 <strlen>
 8000340:	4602      	mov	r2, r0
 8000342:	1d39      	adds	r1, r7, #4
 8000344:	2368      	movs	r3, #104	; 0x68
 8000346:	4803      	ldr	r0, [pc, #12]	; (8000354 <main+0x58>)
 8000348:	f000 fcca 	bl	8000ce0 <I2C_MasterSendData>
		while(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13)){};
 800034c:	e7ea      	b.n	8000324 <main+0x28>
 800034e:	bf00      	nop
 8000350:	08000e60 	.word	0x08000e60
 8000354:	2000001c 	.word	0x2000001c
 8000358:	40020800 	.word	0x40020800

0800035c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800035c:	480d      	ldr	r0, [pc, #52]	; (8000394 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800035e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000360:	480d      	ldr	r0, [pc, #52]	; (8000398 <LoopForever+0x6>)
  ldr r1, =_edata
 8000362:	490e      	ldr	r1, [pc, #56]	; (800039c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000364:	4a0e      	ldr	r2, [pc, #56]	; (80003a0 <LoopForever+0xe>)
  movs r3, #0
 8000366:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000368:	e002      	b.n	8000370 <LoopCopyDataInit>

0800036a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800036a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800036c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800036e:	3304      	adds	r3, #4

08000370 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000370:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000372:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000374:	d3f9      	bcc.n	800036a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000376:	4a0b      	ldr	r2, [pc, #44]	; (80003a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000378:	4c0b      	ldr	r4, [pc, #44]	; (80003a8 <LoopForever+0x16>)
  movs r3, #0
 800037a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800037c:	e001      	b.n	8000382 <LoopFillZerobss>

0800037e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800037e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000380:	3204      	adds	r2, #4

08000382 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000382:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000384:	d3fb      	bcc.n	800037e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000386:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 800038a:	f000 fd39 	bl	8000e00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800038e:	f7ff ffb5 	bl	80002fc <main>

08000392 <LoopForever>:

LoopForever:
    b LoopForever
 8000392:	e7fe      	b.n	8000392 <LoopForever>
  ldr   r0, =_estack
 8000394:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000398:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800039c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003a0:	08000e74 	.word	0x08000e74
  ldr r2, =_sbss
 80003a4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003a8:	20000030 	.word	0x20000030

080003ac <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003ac:	e7fe      	b.n	80003ac <ADC_IRQHandler>
	...

080003b0 <GPIO_PeriClockControl>:
 * @return				- none
 *
 * @note				- none
 *
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
 80003b0:	b480      	push	{r7}
 80003b2:	b083      	sub	sp, #12
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
 80003b8:	460b      	mov	r3, r1
 80003ba:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 80003bc:	78fb      	ldrb	r3, [r7, #3]
 80003be:	2b01      	cmp	r3, #1
 80003c0:	d157      	bne.n	8000472 <GPIO_PeriClockControl+0xc2>
		if(pGPIOx == GPIOA){
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	4a5a      	ldr	r2, [pc, #360]	; (8000530 <GPIO_PeriClockControl+0x180>)
 80003c6:	4293      	cmp	r3, r2
 80003c8:	d106      	bne.n	80003d8 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 80003ca:	4b5a      	ldr	r3, [pc, #360]	; (8000534 <GPIO_PeriClockControl+0x184>)
 80003cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ce:	4a59      	ldr	r2, [pc, #356]	; (8000534 <GPIO_PeriClockControl+0x184>)
 80003d0:	f043 0301 	orr.w	r3, r3, #1
 80003d4:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOG_PCLK_DI();
		} else if(pGPIOx == GPIOH){
			GPIOH_PCLK_DI();
		}
	}
}
 80003d6:	e0a6      	b.n	8000526 <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOB){
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	4a57      	ldr	r2, [pc, #348]	; (8000538 <GPIO_PeriClockControl+0x188>)
 80003dc:	4293      	cmp	r3, r2
 80003de:	d106      	bne.n	80003ee <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80003e0:	4b54      	ldr	r3, [pc, #336]	; (8000534 <GPIO_PeriClockControl+0x184>)
 80003e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003e4:	4a53      	ldr	r2, [pc, #332]	; (8000534 <GPIO_PeriClockControl+0x184>)
 80003e6:	f043 0302 	orr.w	r3, r3, #2
 80003ea:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003ec:	e09b      	b.n	8000526 <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOC){
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	4a52      	ldr	r2, [pc, #328]	; (800053c <GPIO_PeriClockControl+0x18c>)
 80003f2:	4293      	cmp	r3, r2
 80003f4:	d106      	bne.n	8000404 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80003f6:	4b4f      	ldr	r3, [pc, #316]	; (8000534 <GPIO_PeriClockControl+0x184>)
 80003f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003fa:	4a4e      	ldr	r2, [pc, #312]	; (8000534 <GPIO_PeriClockControl+0x184>)
 80003fc:	f043 0304 	orr.w	r3, r3, #4
 8000400:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000402:	e090      	b.n	8000526 <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOD){
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	4a4e      	ldr	r2, [pc, #312]	; (8000540 <GPIO_PeriClockControl+0x190>)
 8000408:	4293      	cmp	r3, r2
 800040a:	d106      	bne.n	800041a <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 800040c:	4b49      	ldr	r3, [pc, #292]	; (8000534 <GPIO_PeriClockControl+0x184>)
 800040e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000410:	4a48      	ldr	r2, [pc, #288]	; (8000534 <GPIO_PeriClockControl+0x184>)
 8000412:	f043 0308 	orr.w	r3, r3, #8
 8000416:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000418:	e085      	b.n	8000526 <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOE){
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	4a49      	ldr	r2, [pc, #292]	; (8000544 <GPIO_PeriClockControl+0x194>)
 800041e:	4293      	cmp	r3, r2
 8000420:	d106      	bne.n	8000430 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000422:	4b44      	ldr	r3, [pc, #272]	; (8000534 <GPIO_PeriClockControl+0x184>)
 8000424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000426:	4a43      	ldr	r2, [pc, #268]	; (8000534 <GPIO_PeriClockControl+0x184>)
 8000428:	f043 0310 	orr.w	r3, r3, #16
 800042c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800042e:	e07a      	b.n	8000526 <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOF){
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	4a45      	ldr	r2, [pc, #276]	; (8000548 <GPIO_PeriClockControl+0x198>)
 8000434:	4293      	cmp	r3, r2
 8000436:	d106      	bne.n	8000446 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000438:	4b3e      	ldr	r3, [pc, #248]	; (8000534 <GPIO_PeriClockControl+0x184>)
 800043a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800043c:	4a3d      	ldr	r2, [pc, #244]	; (8000534 <GPIO_PeriClockControl+0x184>)
 800043e:	f043 0320 	orr.w	r3, r3, #32
 8000442:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000444:	e06f      	b.n	8000526 <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOG){
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	4a40      	ldr	r2, [pc, #256]	; (800054c <GPIO_PeriClockControl+0x19c>)
 800044a:	4293      	cmp	r3, r2
 800044c:	d106      	bne.n	800045c <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 800044e:	4b39      	ldr	r3, [pc, #228]	; (8000534 <GPIO_PeriClockControl+0x184>)
 8000450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000452:	4a38      	ldr	r2, [pc, #224]	; (8000534 <GPIO_PeriClockControl+0x184>)
 8000454:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000458:	6313      	str	r3, [r2, #48]	; 0x30
}
 800045a:	e064      	b.n	8000526 <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOH){
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	4a3c      	ldr	r2, [pc, #240]	; (8000550 <GPIO_PeriClockControl+0x1a0>)
 8000460:	4293      	cmp	r3, r2
 8000462:	d160      	bne.n	8000526 <GPIO_PeriClockControl+0x176>
			GPIOH_PCLK_EN();
 8000464:	4b33      	ldr	r3, [pc, #204]	; (8000534 <GPIO_PeriClockControl+0x184>)
 8000466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000468:	4a32      	ldr	r2, [pc, #200]	; (8000534 <GPIO_PeriClockControl+0x184>)
 800046a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800046e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000470:	e059      	b.n	8000526 <GPIO_PeriClockControl+0x176>
	} else if(EnorDi == DISABLE){
 8000472:	78fb      	ldrb	r3, [r7, #3]
 8000474:	2b00      	cmp	r3, #0
 8000476:	d156      	bne.n	8000526 <GPIO_PeriClockControl+0x176>
		if(pGPIOx == GPIOA){
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	4a2d      	ldr	r2, [pc, #180]	; (8000530 <GPIO_PeriClockControl+0x180>)
 800047c:	4293      	cmp	r3, r2
 800047e:	d106      	bne.n	800048e <GPIO_PeriClockControl+0xde>
			GPIOA_PCLK_DI();
 8000480:	4b2c      	ldr	r3, [pc, #176]	; (8000534 <GPIO_PeriClockControl+0x184>)
 8000482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000484:	4a2b      	ldr	r2, [pc, #172]	; (8000534 <GPIO_PeriClockControl+0x184>)
 8000486:	f023 0301 	bic.w	r3, r3, #1
 800048a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800048c:	e04b      	b.n	8000526 <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOB){
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	4a29      	ldr	r2, [pc, #164]	; (8000538 <GPIO_PeriClockControl+0x188>)
 8000492:	4293      	cmp	r3, r2
 8000494:	d106      	bne.n	80004a4 <GPIO_PeriClockControl+0xf4>
			GPIOB_PCLK_DI();
 8000496:	4b27      	ldr	r3, [pc, #156]	; (8000534 <GPIO_PeriClockControl+0x184>)
 8000498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800049a:	4a26      	ldr	r2, [pc, #152]	; (8000534 <GPIO_PeriClockControl+0x184>)
 800049c:	f023 0302 	bic.w	r3, r3, #2
 80004a0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004a2:	e040      	b.n	8000526 <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOC){
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	4a25      	ldr	r2, [pc, #148]	; (800053c <GPIO_PeriClockControl+0x18c>)
 80004a8:	4293      	cmp	r3, r2
 80004aa:	d106      	bne.n	80004ba <GPIO_PeriClockControl+0x10a>
			GPIOC_PCLK_DI();
 80004ac:	4b21      	ldr	r3, [pc, #132]	; (8000534 <GPIO_PeriClockControl+0x184>)
 80004ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004b0:	4a20      	ldr	r2, [pc, #128]	; (8000534 <GPIO_PeriClockControl+0x184>)
 80004b2:	f023 0304 	bic.w	r3, r3, #4
 80004b6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004b8:	e035      	b.n	8000526 <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOD){
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	4a20      	ldr	r2, [pc, #128]	; (8000540 <GPIO_PeriClockControl+0x190>)
 80004be:	4293      	cmp	r3, r2
 80004c0:	d106      	bne.n	80004d0 <GPIO_PeriClockControl+0x120>
			GPIOD_PCLK_DI();
 80004c2:	4b1c      	ldr	r3, [pc, #112]	; (8000534 <GPIO_PeriClockControl+0x184>)
 80004c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004c6:	4a1b      	ldr	r2, [pc, #108]	; (8000534 <GPIO_PeriClockControl+0x184>)
 80004c8:	f023 0308 	bic.w	r3, r3, #8
 80004cc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004ce:	e02a      	b.n	8000526 <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOE){
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	4a1c      	ldr	r2, [pc, #112]	; (8000544 <GPIO_PeriClockControl+0x194>)
 80004d4:	4293      	cmp	r3, r2
 80004d6:	d106      	bne.n	80004e6 <GPIO_PeriClockControl+0x136>
			GPIOE_PCLK_DI();
 80004d8:	4b16      	ldr	r3, [pc, #88]	; (8000534 <GPIO_PeriClockControl+0x184>)
 80004da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004dc:	4a15      	ldr	r2, [pc, #84]	; (8000534 <GPIO_PeriClockControl+0x184>)
 80004de:	f023 0310 	bic.w	r3, r3, #16
 80004e2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004e4:	e01f      	b.n	8000526 <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOF){
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	4a17      	ldr	r2, [pc, #92]	; (8000548 <GPIO_PeriClockControl+0x198>)
 80004ea:	4293      	cmp	r3, r2
 80004ec:	d106      	bne.n	80004fc <GPIO_PeriClockControl+0x14c>
			GPIOF_PCLK_DI();
 80004ee:	4b11      	ldr	r3, [pc, #68]	; (8000534 <GPIO_PeriClockControl+0x184>)
 80004f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f2:	4a10      	ldr	r2, [pc, #64]	; (8000534 <GPIO_PeriClockControl+0x184>)
 80004f4:	f023 0320 	bic.w	r3, r3, #32
 80004f8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004fa:	e014      	b.n	8000526 <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOG){
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	4a13      	ldr	r2, [pc, #76]	; (800054c <GPIO_PeriClockControl+0x19c>)
 8000500:	4293      	cmp	r3, r2
 8000502:	d106      	bne.n	8000512 <GPIO_PeriClockControl+0x162>
			GPIOG_PCLK_DI();
 8000504:	4b0b      	ldr	r3, [pc, #44]	; (8000534 <GPIO_PeriClockControl+0x184>)
 8000506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000508:	4a0a      	ldr	r2, [pc, #40]	; (8000534 <GPIO_PeriClockControl+0x184>)
 800050a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800050e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000510:	e009      	b.n	8000526 <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOH){
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	4a0e      	ldr	r2, [pc, #56]	; (8000550 <GPIO_PeriClockControl+0x1a0>)
 8000516:	4293      	cmp	r3, r2
 8000518:	d105      	bne.n	8000526 <GPIO_PeriClockControl+0x176>
			GPIOH_PCLK_DI();
 800051a:	4b06      	ldr	r3, [pc, #24]	; (8000534 <GPIO_PeriClockControl+0x184>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051e:	4a05      	ldr	r2, [pc, #20]	; (8000534 <GPIO_PeriClockControl+0x184>)
 8000520:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000524:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000526:	bf00      	nop
 8000528:	370c      	adds	r7, #12
 800052a:	46bd      	mov	sp, r7
 800052c:	bc80      	pop	{r7}
 800052e:	4770      	bx	lr
 8000530:	40020000 	.word	0x40020000
 8000534:	40023800 	.word	0x40023800
 8000538:	40020400 	.word	0x40020400
 800053c:	40020800 	.word	0x40020800
 8000540:	40020c00 	.word	0x40020c00
 8000544:	40021000 	.word	0x40021000
 8000548:	40021400 	.word	0x40021400
 800054c:	40021800 	.word	0x40021800
 8000550:	40021c00 	.word	0x40021c00

08000554 <GPIO_Init>:
 * @return				- none
 *
 * @note				- none
 *
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8000554:	b480      	push	{r7}
 8000556:	b08b      	sub	sp, #44	; 0x2c
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
	uint32_t reset_value = 0;
 800055c:	2300      	movs	r3, #0
 800055e:	627b      	str	r3, [r7, #36]	; 0x24

	//reset, then set mode register
	if( pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_PIN_MODE_ANALOG){
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	795b      	ldrb	r3, [r3, #5]
 8000564:	2b03      	cmp	r3, #3
 8000566:	d823      	bhi.n	80005b0 <GPIO_Init+0x5c>
		reset_value = (0x3 << ((2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)));
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	791b      	ldrb	r3, [r3, #4]
 800056c:	005b      	lsls	r3, r3, #1
 800056e:	2203      	movs	r2, #3
 8000570:	fa02 f303 	lsl.w	r3, r2, r3
 8000574:	627b      	str	r3, [r7, #36]	; 0x24
		pGPIOHandle->pGPIOx->MODER &= ~(reset_value);
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	6819      	ldr	r1, [r3, #0]
 800057c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800057e:	43da      	mvns	r2, r3
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	400a      	ands	r2, r1
 8000586:	601a      	str	r2, [r3, #0]
		reset_value = 0;
 8000588:	2300      	movs	r3, #0
 800058a:	627b      	str	r3, [r7, #36]	; 0x24

		uint32_t moder_value = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	795b      	ldrb	r3, [r3, #5]
 8000590:	461a      	mov	r2, r3
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	791b      	ldrb	r3, [r3, #4]
 8000596:	005b      	lsls	r3, r3, #1
 8000598:	fa02 f303 	lsl.w	r3, r2, r3
 800059c:	61fb      	str	r3, [r7, #28]
		pGPIOHandle->pGPIOx->MODER |= moder_value;
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	6819      	ldr	r1, [r3, #0]
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	69fa      	ldr	r2, [r7, #28]
 80005aa:	430a      	orrs	r2, r1
 80005ac:	601a      	str	r2, [r3, #0]
 80005ae:	e0ee      	b.n	800078e <GPIO_Init+0x23a>
	} else{
		//interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_PIN_MODE_IT_FT){
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	795b      	ldrb	r3, [r3, #5]
 80005b4:	2b04      	cmp	r3, #4
 80005b6:	d11a      	bne.n	80005ee <GPIO_Init+0x9a>
			//reset RTSR
			reset_value = (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	791b      	ldrb	r3, [r3, #4]
 80005bc:	461a      	mov	r2, r3
 80005be:	2301      	movs	r3, #1
 80005c0:	4093      	lsls	r3, r2
 80005c2:	627b      	str	r3, [r7, #36]	; 0x24
			EXTI->RTSR &= ~(reset_value);
 80005c4:	4b49      	ldr	r3, [pc, #292]	; (80006ec <GPIO_Init+0x198>)
 80005c6:	689a      	ldr	r2, [r3, #8]
 80005c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005ca:	43db      	mvns	r3, r3
 80005cc:	4947      	ldr	r1, [pc, #284]	; (80006ec <GPIO_Init+0x198>)
 80005ce:	4013      	ands	r3, r2
 80005d0:	608b      	str	r3, [r1, #8]
			reset_value = 0;
 80005d2:	2300      	movs	r3, #0
 80005d4:	627b      	str	r3, [r7, #36]	; 0x24

			//configure FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005d6:	4b45      	ldr	r3, [pc, #276]	; (80006ec <GPIO_Init+0x198>)
 80005d8:	68db      	ldr	r3, [r3, #12]
 80005da:	687a      	ldr	r2, [r7, #4]
 80005dc:	7912      	ldrb	r2, [r2, #4]
 80005de:	4611      	mov	r1, r2
 80005e0:	2201      	movs	r2, #1
 80005e2:	408a      	lsls	r2, r1
 80005e4:	4611      	mov	r1, r2
 80005e6:	4a41      	ldr	r2, [pc, #260]	; (80006ec <GPIO_Init+0x198>)
 80005e8:	430b      	orrs	r3, r1
 80005ea:	60d3      	str	r3, [r2, #12]
 80005ec:	e038      	b.n	8000660 <GPIO_Init+0x10c>
		} else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_PIN_MODE_IT_RT){
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	795b      	ldrb	r3, [r3, #5]
 80005f2:	2b05      	cmp	r3, #5
 80005f4:	d11a      	bne.n	800062c <GPIO_Init+0xd8>
			//reset FTSR
			reset_value = (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	791b      	ldrb	r3, [r3, #4]
 80005fa:	461a      	mov	r2, r3
 80005fc:	2301      	movs	r3, #1
 80005fe:	4093      	lsls	r3, r2
 8000600:	627b      	str	r3, [r7, #36]	; 0x24
			EXTI->FTSR &= ~(reset_value);
 8000602:	4b3a      	ldr	r3, [pc, #232]	; (80006ec <GPIO_Init+0x198>)
 8000604:	68da      	ldr	r2, [r3, #12]
 8000606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000608:	43db      	mvns	r3, r3
 800060a:	4938      	ldr	r1, [pc, #224]	; (80006ec <GPIO_Init+0x198>)
 800060c:	4013      	ands	r3, r2
 800060e:	60cb      	str	r3, [r1, #12]
			reset_value = 0;
 8000610:	2300      	movs	r3, #0
 8000612:	627b      	str	r3, [r7, #36]	; 0x24

			//configure RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000614:	4b35      	ldr	r3, [pc, #212]	; (80006ec <GPIO_Init+0x198>)
 8000616:	689b      	ldr	r3, [r3, #8]
 8000618:	687a      	ldr	r2, [r7, #4]
 800061a:	7912      	ldrb	r2, [r2, #4]
 800061c:	4611      	mov	r1, r2
 800061e:	2201      	movs	r2, #1
 8000620:	408a      	lsls	r2, r1
 8000622:	4611      	mov	r1, r2
 8000624:	4a31      	ldr	r2, [pc, #196]	; (80006ec <GPIO_Init+0x198>)
 8000626:	430b      	orrs	r3, r1
 8000628:	6093      	str	r3, [r2, #8]
 800062a:	e019      	b.n	8000660 <GPIO_Init+0x10c>
		} else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_PIN_MODE_IT_RFT){
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	795b      	ldrb	r3, [r3, #5]
 8000630:	2b06      	cmp	r3, #6
 8000632:	d115      	bne.n	8000660 <GPIO_Init+0x10c>
			//configure RTSR and FTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000634:	4b2d      	ldr	r3, [pc, #180]	; (80006ec <GPIO_Init+0x198>)
 8000636:	689b      	ldr	r3, [r3, #8]
 8000638:	687a      	ldr	r2, [r7, #4]
 800063a:	7912      	ldrb	r2, [r2, #4]
 800063c:	4611      	mov	r1, r2
 800063e:	2201      	movs	r2, #1
 8000640:	408a      	lsls	r2, r1
 8000642:	4611      	mov	r1, r2
 8000644:	4a29      	ldr	r2, [pc, #164]	; (80006ec <GPIO_Init+0x198>)
 8000646:	430b      	orrs	r3, r1
 8000648:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800064a:	4b28      	ldr	r3, [pc, #160]	; (80006ec <GPIO_Init+0x198>)
 800064c:	68db      	ldr	r3, [r3, #12]
 800064e:	687a      	ldr	r2, [r7, #4]
 8000650:	7912      	ldrb	r2, [r2, #4]
 8000652:	4611      	mov	r1, r2
 8000654:	2201      	movs	r2, #1
 8000656:	408a      	lsls	r2, r1
 8000658:	4611      	mov	r1, r2
 800065a:	4a24      	ldr	r2, [pc, #144]	; (80006ec <GPIO_Init+0x198>)
 800065c:	430b      	orrs	r3, r1
 800065e:	60d3      	str	r3, [r2, #12]
		}

		//configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t index = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	791b      	ldrb	r3, [r3, #4]
 8000664:	089b      	lsrs	r3, r3, #2
 8000666:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		uint8_t position = ((pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4) * 4);
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	791b      	ldrb	r3, [r3, #4]
 800066e:	f003 0303 	and.w	r3, r3, #3
 8000672:	b2db      	uxtb	r3, r3
 8000674:	009b      	lsls	r3, r3, #2
 8000676:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		uint8_t port_code = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	4a1c      	ldr	r2, [pc, #112]	; (80006f0 <GPIO_Init+0x19c>)
 8000680:	4293      	cmp	r3, r2
 8000682:	d045      	beq.n	8000710 <GPIO_Init+0x1bc>
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a1a      	ldr	r2, [pc, #104]	; (80006f4 <GPIO_Init+0x1a0>)
 800068a:	4293      	cmp	r3, r2
 800068c:	d02b      	beq.n	80006e6 <GPIO_Init+0x192>
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4a19      	ldr	r2, [pc, #100]	; (80006f8 <GPIO_Init+0x1a4>)
 8000694:	4293      	cmp	r3, r2
 8000696:	d024      	beq.n	80006e2 <GPIO_Init+0x18e>
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a17      	ldr	r2, [pc, #92]	; (80006fc <GPIO_Init+0x1a8>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d01d      	beq.n	80006de <GPIO_Init+0x18a>
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	4a16      	ldr	r2, [pc, #88]	; (8000700 <GPIO_Init+0x1ac>)
 80006a8:	4293      	cmp	r3, r2
 80006aa:	d016      	beq.n	80006da <GPIO_Init+0x186>
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a14      	ldr	r2, [pc, #80]	; (8000704 <GPIO_Init+0x1b0>)
 80006b2:	4293      	cmp	r3, r2
 80006b4:	d00f      	beq.n	80006d6 <GPIO_Init+0x182>
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	4a13      	ldr	r2, [pc, #76]	; (8000708 <GPIO_Init+0x1b4>)
 80006bc:	4293      	cmp	r3, r2
 80006be:	d008      	beq.n	80006d2 <GPIO_Init+0x17e>
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a11      	ldr	r2, [pc, #68]	; (800070c <GPIO_Init+0x1b8>)
 80006c6:	4293      	cmp	r3, r2
 80006c8:	d101      	bne.n	80006ce <GPIO_Init+0x17a>
 80006ca:	2307      	movs	r3, #7
 80006cc:	e021      	b.n	8000712 <GPIO_Init+0x1be>
 80006ce:	2300      	movs	r3, #0
 80006d0:	e01f      	b.n	8000712 <GPIO_Init+0x1be>
 80006d2:	2306      	movs	r3, #6
 80006d4:	e01d      	b.n	8000712 <GPIO_Init+0x1be>
 80006d6:	2305      	movs	r3, #5
 80006d8:	e01b      	b.n	8000712 <GPIO_Init+0x1be>
 80006da:	2304      	movs	r3, #4
 80006dc:	e019      	b.n	8000712 <GPIO_Init+0x1be>
 80006de:	2303      	movs	r3, #3
 80006e0:	e017      	b.n	8000712 <GPIO_Init+0x1be>
 80006e2:	2302      	movs	r3, #2
 80006e4:	e015      	b.n	8000712 <GPIO_Init+0x1be>
 80006e6:	2301      	movs	r3, #1
 80006e8:	e013      	b.n	8000712 <GPIO_Init+0x1be>
 80006ea:	bf00      	nop
 80006ec:	40013c00 	.word	0x40013c00
 80006f0:	40020000 	.word	0x40020000
 80006f4:	40020400 	.word	0x40020400
 80006f8:	40020800 	.word	0x40020800
 80006fc:	40020c00 	.word	0x40020c00
 8000700:	40021000 	.word	0x40021000
 8000704:	40021400 	.word	0x40021400
 8000708:	40021800 	.word	0x40021800
 800070c:	40021c00 	.word	0x40021c00
 8000710:	2300      	movs	r3, #0
 8000712:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

		SYSCFG_PCLK_EN();
 8000716:	4b75      	ldr	r3, [pc, #468]	; (80008ec <GPIO_Init+0x398>)
 8000718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800071a:	4a74      	ldr	r2, [pc, #464]	; (80008ec <GPIO_Init+0x398>)
 800071c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000720:	6453      	str	r3, [r2, #68]	; 0x44

		reset_value = (0xF << position);
 8000722:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000726:	220f      	movs	r2, #15
 8000728:	fa02 f303 	lsl.w	r3, r2, r3
 800072c:	627b      	str	r3, [r7, #36]	; 0x24
		SYSCFG->EXTICR[index] &= ~(reset_value);
 800072e:	4a70      	ldr	r2, [pc, #448]	; (80008f0 <GPIO_Init+0x39c>)
 8000730:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000734:	3302      	adds	r3, #2
 8000736:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800073a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800073c:	43da      	mvns	r2, r3
 800073e:	486c      	ldr	r0, [pc, #432]	; (80008f0 <GPIO_Init+0x39c>)
 8000740:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000744:	400a      	ands	r2, r1
 8000746:	3302      	adds	r3, #2
 8000748:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		reset_value = 0;
 800074c:	2300      	movs	r3, #0
 800074e:	627b      	str	r3, [r7, #36]	; 0x24

		SYSCFG->EXTICR[index] |= (port_code << position);
 8000750:	4a67      	ldr	r2, [pc, #412]	; (80008f0 <GPIO_Init+0x39c>)
 8000752:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000756:	3302      	adds	r3, #2
 8000758:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800075c:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 8000760:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000764:	fa01 f303 	lsl.w	r3, r1, r3
 8000768:	4618      	mov	r0, r3
 800076a:	4961      	ldr	r1, [pc, #388]	; (80008f0 <GPIO_Init+0x39c>)
 800076c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000770:	4302      	orrs	r2, r0
 8000772:	3302      	adds	r3, #2
 8000774:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		//enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000778:	4b5e      	ldr	r3, [pc, #376]	; (80008f4 <GPIO_Init+0x3a0>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	687a      	ldr	r2, [r7, #4]
 800077e:	7912      	ldrb	r2, [r2, #4]
 8000780:	4611      	mov	r1, r2
 8000782:	2201      	movs	r2, #1
 8000784:	408a      	lsls	r2, r1
 8000786:	4611      	mov	r1, r2
 8000788:	4a5a      	ldr	r2, [pc, #360]	; (80008f4 <GPIO_Init+0x3a0>)
 800078a:	430b      	orrs	r3, r1
 800078c:	6013      	str	r3, [r2, #0]
	}

	// reset, then set speed register
	reset_value = (0x3 << ((2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)));
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	791b      	ldrb	r3, [r3, #4]
 8000792:	005b      	lsls	r3, r3, #1
 8000794:	2203      	movs	r2, #3
 8000796:	fa02 f303 	lsl.w	r3, r2, r3
 800079a:	627b      	str	r3, [r7, #36]	; 0x24
	pGPIOHandle->pGPIOx->OSPEEDER &= ~(reset_value);
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	6899      	ldr	r1, [r3, #8]
 80007a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007a4:	43da      	mvns	r2, r3
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	400a      	ands	r2, r1
 80007ac:	609a      	str	r2, [r3, #8]
	reset_value = 0;
 80007ae:	2300      	movs	r3, #0
 80007b0:	627b      	str	r3, [r7, #36]	; 0x24

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_PIN_MODE_OUT){
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	795b      	ldrb	r3, [r3, #5]
 80007b6:	2b01      	cmp	r3, #1
 80007b8:	d110      	bne.n	80007dc <GPIO_Init+0x288>
		uint32_t ospeedr_value = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	799b      	ldrb	r3, [r3, #6]
 80007be:	461a      	mov	r2, r3
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	791b      	ldrb	r3, [r3, #4]
 80007c4:	005b      	lsls	r3, r3, #1
 80007c6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ca:	61bb      	str	r3, [r7, #24]
		pGPIOHandle->pGPIOx->OSPEEDER |= ospeedr_value;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	6899      	ldr	r1, [r3, #8]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	69ba      	ldr	r2, [r7, #24]
 80007d8:	430a      	orrs	r2, r1
 80007da:	609a      	str	r2, [r3, #8]
	}
	//reset, then set pupd register
	reset_value = (0x3 << ((2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)));
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	791b      	ldrb	r3, [r3, #4]
 80007e0:	005b      	lsls	r3, r3, #1
 80007e2:	2203      	movs	r2, #3
 80007e4:	fa02 f303 	lsl.w	r3, r2, r3
 80007e8:	627b      	str	r3, [r7, #36]	; 0x24
	pGPIOHandle->pGPIOx->PUPDR &= ~(reset_value);
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	68d9      	ldr	r1, [r3, #12]
 80007f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007f2:	43da      	mvns	r2, r3
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	400a      	ands	r2, r1
 80007fa:	60da      	str	r2, [r3, #12]
	reset_value = 0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t pupdr_value = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	79db      	ldrb	r3, [r3, #7]
 8000804:	461a      	mov	r2, r3
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	791b      	ldrb	r3, [r3, #4]
 800080a:	005b      	lsls	r3, r3, #1
 800080c:	fa02 f303 	lsl.w	r3, r2, r3
 8000810:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR |= pupdr_value;
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	68d9      	ldr	r1, [r3, #12]
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	697a      	ldr	r2, [r7, #20]
 800081e:	430a      	orrs	r2, r1
 8000820:	60da      	str	r2, [r3, #12]

	//reset, then set output type register
	reset_value = (0x1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	791b      	ldrb	r3, [r3, #4]
 8000826:	461a      	mov	r2, r3
 8000828:	2301      	movs	r3, #1
 800082a:	4093      	lsls	r3, r2
 800082c:	627b      	str	r3, [r7, #36]	; 0x24
	pGPIOHandle->pGPIOx->OTYPER &= ~(reset_value);
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	6859      	ldr	r1, [r3, #4]
 8000834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000836:	43da      	mvns	r2, r3
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	400a      	ands	r2, r1
 800083e:	605a      	str	r2, [r3, #4]
	reset_value = 0;
 8000840:	2300      	movs	r3, #0
 8000842:	627b      	str	r3, [r7, #36]	; 0x24

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_PIN_MODE_OUT){
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	795b      	ldrb	r3, [r3, #5]
 8000848:	2b01      	cmp	r3, #1
 800084a:	d10f      	bne.n	800086c <GPIO_Init+0x318>
		uint32_t optyper_value = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	7a1b      	ldrb	r3, [r3, #8]
 8000850:	461a      	mov	r2, r3
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	791b      	ldrb	r3, [r3, #4]
 8000856:	fa02 f303 	lsl.w	r3, r2, r3
 800085a:	613b      	str	r3, [r7, #16]
		pGPIOHandle->pGPIOx->OTYPER |= optyper_value;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	6859      	ldr	r1, [r3, #4]
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	693a      	ldr	r2, [r7, #16]
 8000868:	430a      	orrs	r2, r1
 800086a:	605a      	str	r2, [r3, #4]
	}
	//reset, then set altfn register
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_PIN_MODE_ALTFN){
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	795b      	ldrb	r3, [r3, #5]
 8000870:	2b02      	cmp	r3, #2
 8000872:	d135      	bne.n	80008e0 <GPIO_Init+0x38c>
		uint8_t index = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8);
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	791b      	ldrb	r3, [r3, #4]
 8000878:	08db      	lsrs	r3, r3, #3
 800087a:	73fb      	strb	r3, [r7, #15]
		uint8_t position = ((pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8) * 4);
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	791b      	ldrb	r3, [r3, #4]
 8000880:	f003 0307 	and.w	r3, r3, #7
 8000884:	b2db      	uxtb	r3, r3
 8000886:	009b      	lsls	r3, r3, #2
 8000888:	73bb      	strb	r3, [r7, #14]

		//reset
		reset_value = (0xF << position);
 800088a:	7bbb      	ldrb	r3, [r7, #14]
 800088c:	220f      	movs	r2, #15
 800088e:	fa02 f303 	lsl.w	r3, r2, r3
 8000892:	627b      	str	r3, [r7, #36]	; 0x24
		pGPIOHandle->pGPIOx->AFR[index] &= ~(reset_value);
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	7bfa      	ldrb	r2, [r7, #15]
 800089a:	3208      	adds	r2, #8
 800089c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80008a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008a2:	43d9      	mvns	r1, r3
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	7bfa      	ldrb	r2, [r7, #15]
 80008aa:	4001      	ands	r1, r0
 80008ac:	3208      	adds	r2, #8
 80008ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		reset_value = 0;
 80008b2:	2300      	movs	r3, #0
 80008b4:	627b      	str	r3, [r7, #36]	; 0x24

		//set
		uint32_t afr_value = (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << position);
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	7a5b      	ldrb	r3, [r3, #9]
 80008ba:	461a      	mov	r2, r3
 80008bc:	7bbb      	ldrb	r3, [r7, #14]
 80008be:	fa02 f303 	lsl.w	r3, r2, r3
 80008c2:	60bb      	str	r3, [r7, #8]
		pGPIOHandle->pGPIOx->AFR[index] |= afr_value;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	7bfa      	ldrb	r2, [r7, #15]
 80008ca:	3208      	adds	r2, #8
 80008cc:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	7bfa      	ldrb	r2, [r7, #15]
 80008d6:	68b9      	ldr	r1, [r7, #8]
 80008d8:	4301      	orrs	r1, r0
 80008da:	3208      	adds	r2, #8
 80008dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 80008e0:	bf00      	nop
 80008e2:	372c      	adds	r7, #44	; 0x2c
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bc80      	pop	{r7}
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	40023800 	.word	0x40023800
 80008f0:	40013800 	.word	0x40013800
 80008f4:	40013c00 	.word	0x40013c00

080008f8 <GPIO_ReadFromInputPin>:
 * @return				- 0 or 1
 *
 * @note				- none
 *
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber){
 80008f8:	b480      	push	{r7}
 80008fa:	b085      	sub	sp, #20
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
 8000900:	460b      	mov	r3, r1
 8000902:	70fb      	strb	r3, [r7, #3]
	uint8_t value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x00000001);
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	691a      	ldr	r2, [r3, #16]
 8000908:	78fb      	ldrb	r3, [r7, #3]
 800090a:	fa22 f303 	lsr.w	r3, r2, r3
 800090e:	b2db      	uxtb	r3, r3
 8000910:	f003 0301 	and.w	r3, r3, #1
 8000914:	73fb      	strb	r3, [r7, #15]
	return value;
 8000916:	7bfb      	ldrb	r3, [r7, #15]
}
 8000918:	4618      	mov	r0, r3
 800091a:	3714      	adds	r7, #20
 800091c:	46bd      	mov	sp, r7
 800091e:	bc80      	pop	{r7}
 8000920:	4770      	bx	lr

08000922 <I2C_GenerateStartCondition>:
 * @return				- none
 *
 * @note				- none
 *
 */
static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx){
 8000922:	b480      	push	{r7}
 8000924:	b083      	sub	sp, #12
 8000926:	af00      	add	r7, sp, #0
 8000928:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_START);
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	601a      	str	r2, [r3, #0]
}
 8000936:	bf00      	nop
 8000938:	370c      	adds	r7, #12
 800093a:	46bd      	mov	sp, r7
 800093c:	bc80      	pop	{r7}
 800093e:	4770      	bx	lr

08000940 <ExecuteAddressPhase>:
 * @return				- none
 *
 * @note				- none
 *
 */
static void ExecuteAddressPhase(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr){
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
 8000948:	460b      	mov	r3, r1
 800094a:	70fb      	strb	r3, [r7, #3]
	//Make sure there is space for r/w bit
	SlaveAddr = SlaveAddr << 1;
 800094c:	78fb      	ldrb	r3, [r7, #3]
 800094e:	005b      	lsls	r3, r3, #1
 8000950:	70fb      	strb	r3, [r7, #3]
	//Clear 0th bit so r/w is set to write
	SlaveAddr &= ~(1);
 8000952:	78fb      	ldrb	r3, [r7, #3]
 8000954:	f023 0301 	bic.w	r3, r3, #1
 8000958:	70fb      	strb	r3, [r7, #3]
	//Place address into Data Register
	pI2Cx->DR = SlaveAddr;
 800095a:	78fa      	ldrb	r2, [r7, #3]
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	611a      	str	r2, [r3, #16]
}
 8000960:	bf00      	nop
 8000962:	370c      	adds	r7, #12
 8000964:	46bd      	mov	sp, r7
 8000966:	bc80      	pop	{r7}
 8000968:	4770      	bx	lr

0800096a <I2C_ClearADDRFlag>:
 * @return				- none
 *
 * @note				- none
 *
 */
static void I2C_ClearADDRFlag(I2C_RegDef_t *pI2Cx){
 800096a:	b480      	push	{r7}
 800096c:	b085      	sub	sp, #20
 800096e:	af00      	add	r7, sp, #0
 8000970:	6078      	str	r0, [r7, #4]
	uint32_t dummy_read = pI2Cx->SR1;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	695b      	ldr	r3, [r3, #20]
 8000976:	60fb      	str	r3, [r7, #12]
	dummy_read = pI2Cx->SR2;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	699b      	ldr	r3, [r3, #24]
 800097c:	60fb      	str	r3, [r7, #12]
	(void)dummy_read;
}
 800097e:	bf00      	nop
 8000980:	3714      	adds	r7, #20
 8000982:	46bd      	mov	sp, r7
 8000984:	bc80      	pop	{r7}
 8000986:	4770      	bx	lr

08000988 <I2C_GenerateStopCondition>:
 * @return				- none
 *
 * @note				- none
 *
 */
static void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx){
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	601a      	str	r2, [r3, #0]
}
 800099c:	bf00      	nop
 800099e:	370c      	adds	r7, #12
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bc80      	pop	{r7}
 80009a4:	4770      	bx	lr
	...

080009a8 <RCC_GetPCLK1Value>:
 * @return				- peripheral clock speed for I2C peripherals
 *
 * @note				- none
 *
 */
uint32_t RCC_GetPCLK1Value(void){
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
	uint32_t pclk1;
	uint8_t clksrc, ahbprescaler, apb1prescaler;

	clksrc = (RCC->CFGR >> 2) & 0x3;
 80009ae:	4b3d      	ldr	r3, [pc, #244]	; (8000aa4 <RCC_GetPCLK1Value+0xfc>)
 80009b0:	689b      	ldr	r3, [r3, #8]
 80009b2:	089b      	lsrs	r3, r3, #2
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	f003 0303 	and.w	r3, r3, #3
 80009ba:	70fb      	strb	r3, [r7, #3]
	if(clksrc == 0){
 80009bc:	78fb      	ldrb	r3, [r7, #3]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d102      	bne.n	80009c8 <RCC_GetPCLK1Value+0x20>
		pclk1 = 16000000;
 80009c2:	4b39      	ldr	r3, [pc, #228]	; (8000aa8 <RCC_GetPCLK1Value+0x100>)
 80009c4:	607b      	str	r3, [r7, #4]
 80009c6:	e001      	b.n	80009cc <RCC_GetPCLK1Value+0x24>
	} else{
		pclk1 = 0; //I wont use other clocks for now (i don't have external clock)
 80009c8:	2300      	movs	r3, #0
 80009ca:	607b      	str	r3, [r7, #4]
	}

	ahbprescaler = (RCC->CFGR >> 4) & 0xF;
 80009cc:	4b35      	ldr	r3, [pc, #212]	; (8000aa4 <RCC_GetPCLK1Value+0xfc>)
 80009ce:	689b      	ldr	r3, [r3, #8]
 80009d0:	091b      	lsrs	r3, r3, #4
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	f003 030f 	and.w	r3, r3, #15
 80009d8:	70bb      	strb	r3, [r7, #2]
	if(ahbprescaler < 8){
 80009da:	78bb      	ldrb	r3, [r7, #2]
 80009dc:	2b07      	cmp	r3, #7
 80009de:	d936      	bls.n	8000a4e <RCC_GetPCLK1Value+0xa6>
		//clock wont be divided
	}else if(ahbprescaler == 8){
 80009e0:	78bb      	ldrb	r3, [r7, #2]
 80009e2:	2b08      	cmp	r3, #8
 80009e4:	d103      	bne.n	80009ee <RCC_GetPCLK1Value+0x46>
		pclk1 /= 2;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	085b      	lsrs	r3, r3, #1
 80009ea:	607b      	str	r3, [r7, #4]
 80009ec:	e02f      	b.n	8000a4e <RCC_GetPCLK1Value+0xa6>
	}else if(ahbprescaler == 9){
 80009ee:	78bb      	ldrb	r3, [r7, #2]
 80009f0:	2b09      	cmp	r3, #9
 80009f2:	d103      	bne.n	80009fc <RCC_GetPCLK1Value+0x54>
		pclk1 /= 4;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	089b      	lsrs	r3, r3, #2
 80009f8:	607b      	str	r3, [r7, #4]
 80009fa:	e028      	b.n	8000a4e <RCC_GetPCLK1Value+0xa6>
	}else if(ahbprescaler == 10){
 80009fc:	78bb      	ldrb	r3, [r7, #2]
 80009fe:	2b0a      	cmp	r3, #10
 8000a00:	d103      	bne.n	8000a0a <RCC_GetPCLK1Value+0x62>
		pclk1 /= 8;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	08db      	lsrs	r3, r3, #3
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	e021      	b.n	8000a4e <RCC_GetPCLK1Value+0xa6>
	}else if(ahbprescaler == 11){
 8000a0a:	78bb      	ldrb	r3, [r7, #2]
 8000a0c:	2b0b      	cmp	r3, #11
 8000a0e:	d103      	bne.n	8000a18 <RCC_GetPCLK1Value+0x70>
		pclk1 /= 16;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	091b      	lsrs	r3, r3, #4
 8000a14:	607b      	str	r3, [r7, #4]
 8000a16:	e01a      	b.n	8000a4e <RCC_GetPCLK1Value+0xa6>
	}else if(ahbprescaler == 12){
 8000a18:	78bb      	ldrb	r3, [r7, #2]
 8000a1a:	2b0c      	cmp	r3, #12
 8000a1c:	d103      	bne.n	8000a26 <RCC_GetPCLK1Value+0x7e>
		pclk1 /= 64;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	099b      	lsrs	r3, r3, #6
 8000a22:	607b      	str	r3, [r7, #4]
 8000a24:	e013      	b.n	8000a4e <RCC_GetPCLK1Value+0xa6>
	}else if(ahbprescaler == 13){
 8000a26:	78bb      	ldrb	r3, [r7, #2]
 8000a28:	2b0d      	cmp	r3, #13
 8000a2a:	d103      	bne.n	8000a34 <RCC_GetPCLK1Value+0x8c>
		pclk1 /= 128;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	09db      	lsrs	r3, r3, #7
 8000a30:	607b      	str	r3, [r7, #4]
 8000a32:	e00c      	b.n	8000a4e <RCC_GetPCLK1Value+0xa6>
	}else if(ahbprescaler == 14){
 8000a34:	78bb      	ldrb	r3, [r7, #2]
 8000a36:	2b0e      	cmp	r3, #14
 8000a38:	d103      	bne.n	8000a42 <RCC_GetPCLK1Value+0x9a>
		pclk1 /= 256;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	0a1b      	lsrs	r3, r3, #8
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	e005      	b.n	8000a4e <RCC_GetPCLK1Value+0xa6>
	}else if(ahbprescaler == 15){
 8000a42:	78bb      	ldrb	r3, [r7, #2]
 8000a44:	2b0f      	cmp	r3, #15
 8000a46:	d102      	bne.n	8000a4e <RCC_GetPCLK1Value+0xa6>
		pclk1 /= 512;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	0a5b      	lsrs	r3, r3, #9
 8000a4c:	607b      	str	r3, [r7, #4]
	}

	apb1prescaler = (RCC->CFGR >> 10) & 0x7;
 8000a4e:	4b15      	ldr	r3, [pc, #84]	; (8000aa4 <RCC_GetPCLK1Value+0xfc>)
 8000a50:	689b      	ldr	r3, [r3, #8]
 8000a52:	0a9b      	lsrs	r3, r3, #10
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	f003 0307 	and.w	r3, r3, #7
 8000a5a:	707b      	strb	r3, [r7, #1]
	if(apb1prescaler < 4){
 8000a5c:	787b      	ldrb	r3, [r7, #1]
 8000a5e:	2b03      	cmp	r3, #3
 8000a60:	d91a      	bls.n	8000a98 <RCC_GetPCLK1Value+0xf0>
		//clk not divided
	} else if(apb1prescaler == 4){
 8000a62:	787b      	ldrb	r3, [r7, #1]
 8000a64:	2b04      	cmp	r3, #4
 8000a66:	d103      	bne.n	8000a70 <RCC_GetPCLK1Value+0xc8>
		pclk1 /= 2;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	085b      	lsrs	r3, r3, #1
 8000a6c:	607b      	str	r3, [r7, #4]
 8000a6e:	e013      	b.n	8000a98 <RCC_GetPCLK1Value+0xf0>
	} else if(apb1prescaler == 5){
 8000a70:	787b      	ldrb	r3, [r7, #1]
 8000a72:	2b05      	cmp	r3, #5
 8000a74:	d103      	bne.n	8000a7e <RCC_GetPCLK1Value+0xd6>
		pclk1 /= 4;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	089b      	lsrs	r3, r3, #2
 8000a7a:	607b      	str	r3, [r7, #4]
 8000a7c:	e00c      	b.n	8000a98 <RCC_GetPCLK1Value+0xf0>
	} else if(apb1prescaler == 6){
 8000a7e:	787b      	ldrb	r3, [r7, #1]
 8000a80:	2b06      	cmp	r3, #6
 8000a82:	d103      	bne.n	8000a8c <RCC_GetPCLK1Value+0xe4>
		pclk1 /= 8;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	08db      	lsrs	r3, r3, #3
 8000a88:	607b      	str	r3, [r7, #4]
 8000a8a:	e005      	b.n	8000a98 <RCC_GetPCLK1Value+0xf0>
	} else if(apb1prescaler == 7){
 8000a8c:	787b      	ldrb	r3, [r7, #1]
 8000a8e:	2b07      	cmp	r3, #7
 8000a90:	d102      	bne.n	8000a98 <RCC_GetPCLK1Value+0xf0>
		pclk1 /= 16;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	091b      	lsrs	r3, r3, #4
 8000a96:	607b      	str	r3, [r7, #4]
	}

	return pclk1;
 8000a98:	687b      	ldr	r3, [r7, #4]
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	370c      	adds	r7, #12
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bc80      	pop	{r7}
 8000aa2:	4770      	bx	lr
 8000aa4:	40023800 	.word	0x40023800
 8000aa8:	00f42400 	.word	0x00f42400

08000aac <I2C_PeriClockControl>:
 * @return				- none
 *
 * @note				- none
 *
 */
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi){
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
 8000ab4:	460b      	mov	r3, r1
 8000ab6:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8000ab8:	78fb      	ldrb	r3, [r7, #3]
 8000aba:	2b01      	cmp	r3, #1
 8000abc:	d120      	bne.n	8000b00 <I2C_PeriClockControl+0x54>
		if(pI2Cx == I2C1){
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4a22      	ldr	r2, [pc, #136]	; (8000b4c <I2C_PeriClockControl+0xa0>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d106      	bne.n	8000ad4 <I2C_PeriClockControl+0x28>
			I2C1_PCLK_EN();
 8000ac6:	4b22      	ldr	r3, [pc, #136]	; (8000b50 <I2C_PeriClockControl+0xa4>)
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aca:	4a21      	ldr	r2, [pc, #132]	; (8000b50 <I2C_PeriClockControl+0xa4>)
 8000acc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ad0:	6413      	str	r3, [r2, #64]	; 0x40
			I2C2_PCLK_DI();
		} else if (pI2Cx == I2C3){
			I2C3_PCLK_DI();
		}
	}
}
 8000ad2:	e035      	b.n	8000b40 <I2C_PeriClockControl+0x94>
		} else if (pI2Cx == I2C2){
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	4a1f      	ldr	r2, [pc, #124]	; (8000b54 <I2C_PeriClockControl+0xa8>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d106      	bne.n	8000aea <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 8000adc:	4b1c      	ldr	r3, [pc, #112]	; (8000b50 <I2C_PeriClockControl+0xa4>)
 8000ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae0:	4a1b      	ldr	r2, [pc, #108]	; (8000b50 <I2C_PeriClockControl+0xa4>)
 8000ae2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ae6:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000ae8:	e02a      	b.n	8000b40 <I2C_PeriClockControl+0x94>
		} else if (pI2Cx == I2C3){
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	4a1a      	ldr	r2, [pc, #104]	; (8000b58 <I2C_PeriClockControl+0xac>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d126      	bne.n	8000b40 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_EN();
 8000af2:	4b17      	ldr	r3, [pc, #92]	; (8000b50 <I2C_PeriClockControl+0xa4>)
 8000af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af6:	4a16      	ldr	r2, [pc, #88]	; (8000b50 <I2C_PeriClockControl+0xa4>)
 8000af8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000afc:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000afe:	e01f      	b.n	8000b40 <I2C_PeriClockControl+0x94>
		if(pI2Cx == I2C1){
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	4a12      	ldr	r2, [pc, #72]	; (8000b4c <I2C_PeriClockControl+0xa0>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d106      	bne.n	8000b16 <I2C_PeriClockControl+0x6a>
			I2C1_PCLK_DI();
 8000b08:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <I2C_PeriClockControl+0xa4>)
 8000b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0c:	4a10      	ldr	r2, [pc, #64]	; (8000b50 <I2C_PeriClockControl+0xa4>)
 8000b0e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000b12:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b14:	e014      	b.n	8000b40 <I2C_PeriClockControl+0x94>
		} else if (pI2Cx == I2C2){
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	4a0e      	ldr	r2, [pc, #56]	; (8000b54 <I2C_PeriClockControl+0xa8>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d106      	bne.n	8000b2c <I2C_PeriClockControl+0x80>
			I2C2_PCLK_DI();
 8000b1e:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <I2C_PeriClockControl+0xa4>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b22:	4a0b      	ldr	r2, [pc, #44]	; (8000b50 <I2C_PeriClockControl+0xa4>)
 8000b24:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000b28:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b2a:	e009      	b.n	8000b40 <I2C_PeriClockControl+0x94>
		} else if (pI2Cx == I2C3){
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	4a0a      	ldr	r2, [pc, #40]	; (8000b58 <I2C_PeriClockControl+0xac>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d105      	bne.n	8000b40 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_DI();
 8000b34:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <I2C_PeriClockControl+0xa4>)
 8000b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b38:	4a05      	ldr	r2, [pc, #20]	; (8000b50 <I2C_PeriClockControl+0xa4>)
 8000b3a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000b3e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b40:	bf00      	nop
 8000b42:	370c      	adds	r7, #12
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bc80      	pop	{r7}
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	40005400 	.word	0x40005400
 8000b50:	40023800 	.word	0x40023800
 8000b54:	40005800 	.word	0x40005800
 8000b58:	40005c00 	.word	0x40005c00

08000b5c <I2C_Init>:
 * @return				- none
 *
 * @note				- none
 *
 */
void I2C_Init(I2C_Handle_t *pI2CHandle){
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08a      	sub	sp, #40	; 0x28
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
	uint32_t i2c_cr1 = 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	623b      	str	r3, [r7, #32]
	uint32_t i2c_cr2 = 0;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	61fb      	str	r3, [r7, #28]
	uint32_t i2c_oar1 = 0;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	61bb      	str	r3, [r7, #24]
	uint32_t i2c_ccr = 0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	617b      	str	r3, [r7, #20]
	uint32_t i2c_trise = 0;
 8000b74:	2300      	movs	r3, #0
 8000b76:	613b      	str	r3, [r7, #16]

	//ack bit configuration
	i2c_cr1 |= (pI2CHandle->I2C_Config.I2C_ACKControl << I2C_CR1_ACK);
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	029b      	lsls	r3, r3, #10
 8000b7e:	6a3a      	ldr	r2, [r7, #32]
 8000b80:	4313      	orrs	r3, r2
 8000b82:	623b      	str	r3, [r7, #32]
	pI2CHandle->pI2Cx->CR1 = i2c_cr1;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	6a3a      	ldr	r2, [r7, #32]
 8000b8a:	601a      	str	r2, [r3, #0]

	//configure the FREQ bits of CR2
	i2c_cr2 |= ((RCC_GetPCLK1Value() /1000000U ) << I2C_CR2_FREQ);
 8000b8c:	f7ff ff0c 	bl	80009a8 <RCC_GetPCLK1Value>
 8000b90:	4602      	mov	r2, r0
 8000b92:	4b50      	ldr	r3, [pc, #320]	; (8000cd4 <I2C_Init+0x178>)
 8000b94:	fba3 2302 	umull	r2, r3, r3, r2
 8000b98:	0c9b      	lsrs	r3, r3, #18
 8000b9a:	69fa      	ldr	r2, [r7, #28]
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	61fb      	str	r3, [r7, #28]
	pI2CHandle->pI2Cx->CR2 = (i2c_cr2 & 0x3F);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	69fa      	ldr	r2, [r7, #28]
 8000ba6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000baa:	605a      	str	r2, [r3, #4]

	//configure own address for slave mode when using 7 bit address
	i2c_oar1 |= (pI2CHandle->I2C_Config.I2C_DeviceAddress << I2C_OAR1_ADD7_1);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	7a1b      	ldrb	r3, [r3, #8]
 8000bb0:	005b      	lsls	r3, r3, #1
 8000bb2:	461a      	mov	r2, r3
 8000bb4:	69bb      	ldr	r3, [r7, #24]
 8000bb6:	4313      	orrs	r3, r2
 8000bb8:	61bb      	str	r3, [r7, #24]
	i2c_oar1 |= (1 << 14);
 8000bba:	69bb      	ldr	r3, [r7, #24]
 8000bbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bc0:	61bb      	str	r3, [r7, #24]
	pI2CHandle->pI2Cx->OAR1 = i2c_oar1;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	69ba      	ldr	r2, [r7, #24]
 8000bc8:	609a      	str	r2, [r3, #8]

	//configure CCR register
	uint16_t ccr_value = 0;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	84fb      	strh	r3, [r7, #38]	; 0x26
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM){
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	4a41      	ldr	r2, [pc, #260]	; (8000cd8 <I2C_Init+0x17c>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d811      	bhi.n	8000bfc <I2C_Init+0xa0>
		//mode is standard mode so we don't have to touch 15th and 14th bits
		ccr_value = RCC_GetPCLK1Value() / (2 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8000bd8:	f7ff fee6 	bl	80009a8 <RCC_GetPCLK1Value>
 8000bdc:	4602      	mov	r2, r0
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000be8:	84fb      	strh	r3, [r7, #38]	; 0x26
		i2c_ccr |= (ccr_value << I2C_CCR_CCR);
 8000bea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000bec:	697a      	ldr	r2, [r7, #20]
 8000bee:	4313      	orrs	r3, r2
 8000bf0:	617b      	str	r3, [r7, #20]

		pI2CHandle->pI2Cx->CCR = i2c_ccr;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	697a      	ldr	r2, [r7, #20]
 8000bf8:	61da      	str	r2, [r3, #28]
 8000bfa:	e02e      	b.n	8000c5a <I2C_Init+0xfe>
	}else {
		//Fast mode
		i2c_ccr |= (1 << I2C_CCR_FS);
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c02:	617b      	str	r3, [r7, #20]
		i2c_ccr |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << I2C_CCR_DUTY);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	691b      	ldr	r3, [r3, #16]
 8000c08:	039b      	lsls	r3, r3, #14
 8000c0a:	697a      	ldr	r2, [r7, #20]
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	617b      	str	r3, [r7, #20]

		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2){
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	691b      	ldr	r3, [r3, #16]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d10b      	bne.n	8000c30 <I2C_Init+0xd4>
			ccr_value = RCC_GetPCLK1Value() / (3 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8000c18:	f7ff fec6 	bl	80009a8 <RCC_GetPCLK1Value>
 8000c1c:	4601      	mov	r1, r0
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	685a      	ldr	r2, [r3, #4]
 8000c22:	4613      	mov	r3, r2
 8000c24:	005b      	lsls	r3, r3, #1
 8000c26:	4413      	add	r3, r2
 8000c28:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c2c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000c2e:	e00c      	b.n	8000c4a <I2C_Init+0xee>
		}else {
			ccr_value = RCC_GetPCLK1Value() / (25 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8000c30:	f7ff feba 	bl	80009a8 <RCC_GetPCLK1Value>
 8000c34:	4601      	mov	r1, r0
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	685a      	ldr	r2, [r3, #4]
 8000c3a:	4613      	mov	r3, r2
 8000c3c:	009b      	lsls	r3, r3, #2
 8000c3e:	4413      	add	r3, r2
 8000c40:	009a      	lsls	r2, r3, #2
 8000c42:	4413      	add	r3, r2
 8000c44:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c48:	84fb      	strh	r3, [r7, #38]	; 0x26
		}
		i2c_ccr |= (ccr_value << I2C_CCR_CCR);
 8000c4a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000c4c:	697a      	ldr	r2, [r7, #20]
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	617b      	str	r3, [r7, #20]

		pI2CHandle->pI2Cx->CCR = i2c_ccr;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	697a      	ldr	r2, [r7, #20]
 8000c58:	61da      	str	r2, [r3, #28]
	}

	//Configure TRISE register
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM){
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	4a1e      	ldr	r2, [pc, #120]	; (8000cd8 <I2C_Init+0x17c>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d819      	bhi.n	8000c98 <I2C_Init+0x13c>
		//Standard mode
		uint8_t trise = ((RCC_GetPCLK1Value() * 1000) / 1000000000U) + 1;
 8000c64:	f7ff fea0 	bl	80009a8 <RCC_GetPCLK1Value>
 8000c68:	4602      	mov	r2, r0
 8000c6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c6e:	fb03 f302 	mul.w	r3, r3, r2
 8000c72:	0a5b      	lsrs	r3, r3, #9
 8000c74:	4a19      	ldr	r2, [pc, #100]	; (8000cdc <I2C_Init+0x180>)
 8000c76:	fba2 2303 	umull	r2, r3, r2, r3
 8000c7a:	09db      	lsrs	r3, r3, #7
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	3301      	adds	r3, #1
 8000c80:	73bb      	strb	r3, [r7, #14]
		i2c_trise |= (trise << I2C_TRISE_TRISE);
 8000c82:	7bbb      	ldrb	r3, [r7, #14]
 8000c84:	693a      	ldr	r2, [r7, #16]
 8000c86:	4313      	orrs	r3, r2
 8000c88:	613b      	str	r3, [r7, #16]
		pI2CHandle->pI2Cx->TRISE = i2c_trise & 0x3F;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000c94:	621a      	str	r2, [r3, #32]
		uint8_t trise = ((RCC_GetPCLK1Value() * 300) / 1000000000U) + 1;
		i2c_trise |= (trise << I2C_TRISE_TRISE);
		pI2CHandle->pI2Cx->TRISE = i2c_trise & 0x3F;
	}

}
 8000c96:	e018      	b.n	8000cca <I2C_Init+0x16e>
		uint8_t trise = ((RCC_GetPCLK1Value() * 300) / 1000000000U) + 1;
 8000c98:	f7ff fe86 	bl	80009a8 <RCC_GetPCLK1Value>
 8000c9c:	4602      	mov	r2, r0
 8000c9e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000ca2:	fb03 f302 	mul.w	r3, r3, r2
 8000ca6:	0a5b      	lsrs	r3, r3, #9
 8000ca8:	4a0c      	ldr	r2, [pc, #48]	; (8000cdc <I2C_Init+0x180>)
 8000caa:	fba2 2303 	umull	r2, r3, r2, r3
 8000cae:	09db      	lsrs	r3, r3, #7
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	73fb      	strb	r3, [r7, #15]
		i2c_trise |= (trise << I2C_TRISE_TRISE);
 8000cb6:	7bfb      	ldrb	r3, [r7, #15]
 8000cb8:	693a      	ldr	r2, [r7, #16]
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	613b      	str	r3, [r7, #16]
		pI2CHandle->pI2Cx->TRISE = i2c_trise & 0x3F;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000cc8:	621a      	str	r2, [r3, #32]
}
 8000cca:	bf00      	nop
 8000ccc:	3728      	adds	r7, #40	; 0x28
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	431bde83 	.word	0x431bde83
 8000cd8:	000186a0 	.word	0x000186a0
 8000cdc:	00044b83 	.word	0x00044b83

08000ce0 <I2C_MasterSendData>:
 * @return				- none
 *
 * @note				- none
 *
 */
void I2C_MasterSendData(I2C_Handle_t *pI2CHandle, uint8_t *pTxbuffer, uint32_t Len, uint8_t SlaveAddr){
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	60f8      	str	r0, [r7, #12]
 8000ce8:	60b9      	str	r1, [r7, #8]
 8000cea:	607a      	str	r2, [r7, #4]
 8000cec:	70fb      	strb	r3, [r7, #3]
	//Initiate start condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f7ff fe15 	bl	8000922 <I2C_GenerateStartCondition>

	//Confirm that start generation is completed by checking the SB flag in SR1
	//Until SB is cleared. CLK will be stretched (pulled to LOW)
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB));
 8000cf8:	bf00      	nop
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	2101      	movs	r1, #1
 8000d00:	4618      	mov	r0, r3
 8000d02:	f000 f86a 	bl	8000dda <I2C_GetFlagStatus>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d0f6      	beq.n	8000cfa <I2C_MasterSendData+0x1a>

	//Send the address of the slave with r/w bit set to write (0)
	ExecuteAddressPhase(pI2CHandle->pI2Cx, SlaveAddr);
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	78fa      	ldrb	r2, [r7, #3]
 8000d12:	4611      	mov	r1, r2
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff fe13 	bl	8000940 <ExecuteAddressPhase>

	//Confirm that address phase is completed by checking the ADDR flag in the SR1
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR));
 8000d1a:	bf00      	nop
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	2102      	movs	r1, #2
 8000d22:	4618      	mov	r0, r3
 8000d24:	f000 f859 	bl	8000dda <I2C_GetFlagStatus>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d0f6      	beq.n	8000d1c <I2C_MasterSendData+0x3c>
	//clear ADDR Flag
	I2C_ClearADDRFlag(pI2CHandle->pI2Cx);
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff fe19 	bl	800096a <I2C_ClearADDRFlag>

	//Send data until Len == 0
	while(Len > 0){
 8000d38:	e014      	b.n	8000d64 <I2C_MasterSendData+0x84>
		//Wait till TXE is SET
		while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE));
 8000d3a:	bf00      	nop
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2180      	movs	r1, #128	; 0x80
 8000d42:	4618      	mov	r0, r3
 8000d44:	f000 f849 	bl	8000dda <I2C_GetFlagStatus>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d0f6      	beq.n	8000d3c <I2C_MasterSendData+0x5c>
		pI2CHandle->pI2Cx->DR = *pTxbuffer;
 8000d4e:	68bb      	ldr	r3, [r7, #8]
 8000d50:	781a      	ldrb	r2, [r3, #0]
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	611a      	str	r2, [r3, #16]
		pTxbuffer++;
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	60bb      	str	r3, [r7, #8]
		Len--;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	3b01      	subs	r3, #1
 8000d62:	607b      	str	r3, [r7, #4]
	while(Len > 0){
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d1e7      	bne.n	8000d3a <I2C_MasterSendData+0x5a>
	}

	//After sending data wait until TXE is SET and BTF is SET
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE));
 8000d6a:	bf00      	nop
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	2180      	movs	r1, #128	; 0x80
 8000d72:	4618      	mov	r0, r3
 8000d74:	f000 f831 	bl	8000dda <I2C_GetFlagStatus>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d0f6      	beq.n	8000d6c <I2C_MasterSendData+0x8c>
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_BTF));
 8000d7e:	bf00      	nop
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	2104      	movs	r1, #4
 8000d86:	4618      	mov	r0, r3
 8000d88:	f000 f827 	bl	8000dda <I2C_GetFlagStatus>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d0f6      	beq.n	8000d80 <I2C_MasterSendData+0xa0>

	//After that generate STOP condition
	I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4618      	mov	r0, r3
 8000d98:	f7ff fdf6 	bl	8000988 <I2C_GenerateStopCondition>
}
 8000d9c:	bf00      	nop
 8000d9e:	3710      	adds	r7, #16
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <I2C_PeripheralControl>:
 * @return				- none
 *
 * @note				- none
 *
 */
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi){
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	460b      	mov	r3, r1
 8000dae:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE){
 8000db0:	78fb      	ldrb	r3, [r7, #3]
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d106      	bne.n	8000dc4 <I2C_PeripheralControl+0x20>
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f043 0201 	orr.w	r2, r3, #1
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	601a      	str	r2, [r3, #0]
	} else{
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
	}
}
 8000dc2:	e005      	b.n	8000dd0 <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f023 0201 	bic.w	r2, r3, #1
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	601a      	str	r2, [r3, #0]
}
 8000dd0:	bf00      	nop
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bc80      	pop	{r7}
 8000dd8:	4770      	bx	lr

08000dda <I2C_GetFlagStatus>:


uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx, uint32_t FlagName){
 8000dda:	b480      	push	{r7}
 8000ddc:	b083      	sub	sp, #12
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	6078      	str	r0, [r7, #4]
 8000de2:	6039      	str	r1, [r7, #0]
	if(pI2Cx->SR1 & FlagName){
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	695a      	ldr	r2, [r3, #20]
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	4013      	ands	r3, r2
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <I2C_GetFlagStatus+0x1a>
		return FLAG_SET;
 8000df0:	2301      	movs	r3, #1
 8000df2:	e000      	b.n	8000df6 <I2C_GetFlagStatus+0x1c>
	}

	return FLAG_RESET;
 8000df4:	2300      	movs	r3, #0
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	370c      	adds	r7, #12
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bc80      	pop	{r7}
 8000dfe:	4770      	bx	lr

08000e00 <__libc_init_array>:
 8000e00:	b570      	push	{r4, r5, r6, lr}
 8000e02:	4e0d      	ldr	r6, [pc, #52]	; (8000e38 <__libc_init_array+0x38>)
 8000e04:	4c0d      	ldr	r4, [pc, #52]	; (8000e3c <__libc_init_array+0x3c>)
 8000e06:	1ba4      	subs	r4, r4, r6
 8000e08:	10a4      	asrs	r4, r4, #2
 8000e0a:	2500      	movs	r5, #0
 8000e0c:	42a5      	cmp	r5, r4
 8000e0e:	d109      	bne.n	8000e24 <__libc_init_array+0x24>
 8000e10:	4e0b      	ldr	r6, [pc, #44]	; (8000e40 <__libc_init_array+0x40>)
 8000e12:	4c0c      	ldr	r4, [pc, #48]	; (8000e44 <__libc_init_array+0x44>)
 8000e14:	f000 f818 	bl	8000e48 <_init>
 8000e18:	1ba4      	subs	r4, r4, r6
 8000e1a:	10a4      	asrs	r4, r4, #2
 8000e1c:	2500      	movs	r5, #0
 8000e1e:	42a5      	cmp	r5, r4
 8000e20:	d105      	bne.n	8000e2e <__libc_init_array+0x2e>
 8000e22:	bd70      	pop	{r4, r5, r6, pc}
 8000e24:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e28:	4798      	blx	r3
 8000e2a:	3501      	adds	r5, #1
 8000e2c:	e7ee      	b.n	8000e0c <__libc_init_array+0xc>
 8000e2e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e32:	4798      	blx	r3
 8000e34:	3501      	adds	r5, #1
 8000e36:	e7f2      	b.n	8000e1e <__libc_init_array+0x1e>
 8000e38:	08000e6c 	.word	0x08000e6c
 8000e3c:	08000e6c 	.word	0x08000e6c
 8000e40:	08000e6c 	.word	0x08000e6c
 8000e44:	08000e70 	.word	0x08000e70

08000e48 <_init>:
 8000e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e4a:	bf00      	nop
 8000e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e4e:	bc08      	pop	{r3}
 8000e50:	469e      	mov	lr, r3
 8000e52:	4770      	bx	lr

08000e54 <_fini>:
 8000e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e56:	bf00      	nop
 8000e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e5a:	bc08      	pop	{r3}
 8000e5c:	469e      	mov	lr, r3
 8000e5e:	4770      	bx	lr
