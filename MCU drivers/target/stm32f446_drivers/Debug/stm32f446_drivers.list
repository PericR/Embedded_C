
stm32f446_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000009cc  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000b90  08000b90  00010b90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000b9c  08000b9c  00010ba4  2**0
                  CONTENTS
  4 .ARM          00000000  08000b9c  08000b9c  00010ba4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000b9c  08000ba4  00010ba4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b9c  08000b9c  00010b9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ba0  08000ba0  00010ba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010ba4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000ba4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000ba4  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00010ba4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001831  00000000  00000000  00010bce  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000041c  00000000  00000000  000123ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000118  00000000  00000000  00012820  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000e0  00000000  00000000  00012938  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002121  00000000  00000000  00012a18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001124  00000000  00000000  00014b39  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000090b5  00000000  00000000  00015c5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0001ed12  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000390  00000000  00000000  0001ed90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000b78 	.word	0x08000b78

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000b78 	.word	0x08000b78

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <SPI2_GPIO_Inits>:
 */

#include "string.h"
#include "stm32f446.h"

void SPI2_GPIO_Inits(void){
 8000214:	b580      	push	{r7, lr}
 8000216:	b084      	sub	sp, #16
 8000218:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPI_Pins;
	SPI_Pins.pGPIOx = GPIOB;
 800021a:	4b16      	ldr	r3, [pc, #88]	; (8000274 <SPI2_GPIO_Inits+0x60>)
 800021c:	607b      	str	r3, [r7, #4]

	SPI_Pins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800021e:	2302      	movs	r3, #2
 8000220:	727b      	strb	r3, [r7, #9]
	SPI_Pins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 8000222:	2305      	movs	r3, #5
 8000224:	737b      	strb	r3, [r7, #13]
	SPI_Pins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000226:	2300      	movs	r3, #0
 8000228:	733b      	strb	r3, [r7, #12]
	SPI_Pins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800022a:	2300      	movs	r3, #0
 800022c:	72fb      	strb	r3, [r7, #11]
	SPI_Pins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OP_SPEED_FAST;
 800022e:	2302      	movs	r3, #2
 8000230:	72bb      	strb	r3, [r7, #10]

	//GPIOB PCLK enable
	GPIO_PeriClockControl(SPI_Pins.pGPIOx, ENABLE);
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	2101      	movs	r1, #1
 8000236:	4618      	mov	r0, r3
 8000238:	f000 f88e 	bl	8000358 <GPIO_PeriClockControl>

	//NSS
	SPI_Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 800023c:	230c      	movs	r3, #12
 800023e:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPI_Pins);
 8000240:	1d3b      	adds	r3, r7, #4
 8000242:	4618      	mov	r0, r3
 8000244:	f000 f95a 	bl	80004fc <GPIO_Init>

	//SCLK
	SPI_Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000248:	230d      	movs	r3, #13
 800024a:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPI_Pins);
 800024c:	1d3b      	adds	r3, r7, #4
 800024e:	4618      	mov	r0, r3
 8000250:	f000 f954 	bl	80004fc <GPIO_Init>

	//MISO
	SPI_Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
 8000254:	230e      	movs	r3, #14
 8000256:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPI_Pins);
 8000258:	1d3b      	adds	r3, r7, #4
 800025a:	4618      	mov	r0, r3
 800025c:	f000 f94e 	bl	80004fc <GPIO_Init>

	//MOSI
	SPI_Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 8000260:	230f      	movs	r3, #15
 8000262:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPI_Pins);
 8000264:	1d3b      	adds	r3, r7, #4
 8000266:	4618      	mov	r0, r3
 8000268:	f000 f948 	bl	80004fc <GPIO_Init>
}
 800026c:	bf00      	nop
 800026e:	3710      	adds	r7, #16
 8000270:	46bd      	mov	sp, r7
 8000272:	bd80      	pop	{r7, pc}
 8000274:	40020400 	.word	0x40020400

08000278 <SPI2_Inits>:

void SPI2_Inits(void){
 8000278:	b580      	push	{r7, lr}
 800027a:	b084      	sub	sp, #16
 800027c:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2_Handle;

	SPI2_Handle.pSPIx = SPI2;
 800027e:	4b0e      	ldr	r3, [pc, #56]	; (80002b8 <SPI2_Inits+0x40>)
 8000280:	607b      	str	r3, [r7, #4]

	SPI2_Handle.SPI_Config.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 8000282:	2301      	movs	r3, #1
 8000284:	727b      	strb	r3, [r7, #9]
	SPI2_Handle.SPI_Config.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 8000286:	2301      	movs	r3, #1
 8000288:	723b      	strb	r3, [r7, #8]
	SPI2_Handle.SPI_Config.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV2;			//Generate SCLK of 8MHz
 800028a:	2300      	movs	r3, #0
 800028c:	72bb      	strb	r3, [r7, #10]
	SPI2_Handle.SPI_Config.SPI_DFF = SPI_DFF_8BITS;
 800028e:	2300      	movs	r3, #0
 8000290:	72fb      	strb	r3, [r7, #11]
	SPI2_Handle.SPI_Config.SPI_CPOL = SPI_CPOL_LOW;
 8000292:	2300      	movs	r3, #0
 8000294:	733b      	strb	r3, [r7, #12]
	SPI2_Handle.SPI_Config.SPI_CPHA = SPI_CPHA_LOW;
 8000296:	2300      	movs	r3, #0
 8000298:	737b      	strb	r3, [r7, #13]
	SPI2_Handle.SPI_Config.SPI_SSM = SPI_SSM_EN;						//Software slave management enabled
 800029a:	2301      	movs	r3, #1
 800029c:	73bb      	strb	r3, [r7, #14]

	SPI_PeriClockControl(SPI2_Handle.pSPIx, ENABLE);
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	2101      	movs	r1, #1
 80002a2:	4618      	mov	r0, r3
 80002a4:	f000 fafc 	bl	80008a0 <SPI_PeriClockControl>

	SPI_Init(&SPI2_Handle);
 80002a8:	1d3b      	adds	r3, r7, #4
 80002aa:	4618      	mov	r0, r3
 80002ac:	f000 fb6a 	bl	8000984 <SPI_Init>
}
 80002b0:	bf00      	nop
 80002b2:	3710      	adds	r7, #16
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bd80      	pop	{r7, pc}
 80002b8:	40003800 	.word	0x40003800

080002bc <main>:

int main(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af00      	add	r7, sp, #0
	char userData[] = "Hello Pepsy";
 80002c2:	4a0e      	ldr	r2, [pc, #56]	; (80002fc <main+0x40>)
 80002c4:	1d3b      	adds	r3, r7, #4
 80002c6:	ca07      	ldmia	r2, {r0, r1, r2}
 80002c8:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	//Initialize GPIO pins to behave as SPI pins
	SPI2_GPIO_Inits();
 80002cc:	f7ff ffa2 	bl	8000214 <SPI2_GPIO_Inits>

	SPI2_Inits();
 80002d0:	f7ff ffd2 	bl	8000278 <SPI2_Inits>

	//Enable SSI bit
	SPI_SSI_Config(SPI2, ENABLE);
 80002d4:	2101      	movs	r1, #1
 80002d6:	480a      	ldr	r0, [pc, #40]	; (8000300 <main+0x44>)
 80002d8:	f000 fc0e 	bl	8000af8 <SPI_SSI_Config>

	//Enable SPI peripheral
	SPI_PeripheralControl(SPI2, ENABLE);
 80002dc:	2101      	movs	r1, #1
 80002de:	4808      	ldr	r0, [pc, #32]	; (8000300 <main+0x44>)
 80002e0:	f000 fbef 	bl	8000ac2 <SPI_PeripheralControl>

	SPI_SendData(SPI2, (uint8_t*)userData, strlen(userData));
 80002e4:	1d3b      	adds	r3, r7, #4
 80002e6:	4618      	mov	r0, r3
 80002e8:	f7ff ff8c 	bl	8000204 <strlen>
 80002ec:	4602      	mov	r2, r0
 80002ee:	1d3b      	adds	r3, r7, #4
 80002f0:	4619      	mov	r1, r3
 80002f2:	4803      	ldr	r0, [pc, #12]	; (8000300 <main+0x44>)
 80002f4:	f000 fbaf 	bl	8000a56 <SPI_SendData>

	for(;;);
 80002f8:	e7fe      	b.n	80002f8 <main+0x3c>
 80002fa:	bf00      	nop
 80002fc:	08000b90 	.word	0x08000b90
 8000300:	40003800 	.word	0x40003800

08000304 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000304:	480d      	ldr	r0, [pc, #52]	; (800033c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000306:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000308:	480d      	ldr	r0, [pc, #52]	; (8000340 <LoopForever+0x6>)
  ldr r1, =_edata
 800030a:	490e      	ldr	r1, [pc, #56]	; (8000344 <LoopForever+0xa>)
  ldr r2, =_sidata
 800030c:	4a0e      	ldr	r2, [pc, #56]	; (8000348 <LoopForever+0xe>)
  movs r3, #0
 800030e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000310:	e002      	b.n	8000318 <LoopCopyDataInit>

08000312 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000312:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000314:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000316:	3304      	adds	r3, #4

08000318 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000318:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800031a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800031c:	d3f9      	bcc.n	8000312 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800031e:	4a0b      	ldr	r2, [pc, #44]	; (800034c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000320:	4c0b      	ldr	r4, [pc, #44]	; (8000350 <LoopForever+0x16>)
  movs r3, #0
 8000322:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000324:	e001      	b.n	800032a <LoopFillZerobss>

08000326 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000326:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000328:	3204      	adds	r2, #4

0800032a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800032a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800032c:	d3fb      	bcc.n	8000326 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800032e:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8000332:	f000 fbfd 	bl	8000b30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000336:	f7ff ffc1 	bl	80002bc <main>

0800033a <LoopForever>:

LoopForever:
    b LoopForever
 800033a:	e7fe      	b.n	800033a <LoopForever>
  ldr   r0, =_estack
 800033c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000340:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000344:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000348:	08000ba4 	.word	0x08000ba4
  ldr r2, =_sbss
 800034c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000350:	2000001c 	.word	0x2000001c

08000354 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000354:	e7fe      	b.n	8000354 <ADC_IRQHandler>
	...

08000358 <GPIO_PeriClockControl>:
 * @return				- none
 *
 * @note				- none
 *
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
 8000358:	b480      	push	{r7}
 800035a:	b083      	sub	sp, #12
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
 8000360:	460b      	mov	r3, r1
 8000362:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8000364:	78fb      	ldrb	r3, [r7, #3]
 8000366:	2b01      	cmp	r3, #1
 8000368:	d157      	bne.n	800041a <GPIO_PeriClockControl+0xc2>
		if(pGPIOx == GPIOA){
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	4a5a      	ldr	r2, [pc, #360]	; (80004d8 <GPIO_PeriClockControl+0x180>)
 800036e:	4293      	cmp	r3, r2
 8000370:	d106      	bne.n	8000380 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 8000372:	4b5a      	ldr	r3, [pc, #360]	; (80004dc <GPIO_PeriClockControl+0x184>)
 8000374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000376:	4a59      	ldr	r2, [pc, #356]	; (80004dc <GPIO_PeriClockControl+0x184>)
 8000378:	f043 0301 	orr.w	r3, r3, #1
 800037c:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOG_PCLK_DI();
		} else if(pGPIOx == GPIOH){
			GPIOH_PCLK_DI();
		}
	}
}
 800037e:	e0a6      	b.n	80004ce <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOB){
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	4a57      	ldr	r2, [pc, #348]	; (80004e0 <GPIO_PeriClockControl+0x188>)
 8000384:	4293      	cmp	r3, r2
 8000386:	d106      	bne.n	8000396 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000388:	4b54      	ldr	r3, [pc, #336]	; (80004dc <GPIO_PeriClockControl+0x184>)
 800038a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800038c:	4a53      	ldr	r2, [pc, #332]	; (80004dc <GPIO_PeriClockControl+0x184>)
 800038e:	f043 0302 	orr.w	r3, r3, #2
 8000392:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000394:	e09b      	b.n	80004ce <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOC){
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	4a52      	ldr	r2, [pc, #328]	; (80004e4 <GPIO_PeriClockControl+0x18c>)
 800039a:	4293      	cmp	r3, r2
 800039c:	d106      	bne.n	80003ac <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800039e:	4b4f      	ldr	r3, [pc, #316]	; (80004dc <GPIO_PeriClockControl+0x184>)
 80003a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003a2:	4a4e      	ldr	r2, [pc, #312]	; (80004dc <GPIO_PeriClockControl+0x184>)
 80003a4:	f043 0304 	orr.w	r3, r3, #4
 80003a8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003aa:	e090      	b.n	80004ce <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOD){
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	4a4e      	ldr	r2, [pc, #312]	; (80004e8 <GPIO_PeriClockControl+0x190>)
 80003b0:	4293      	cmp	r3, r2
 80003b2:	d106      	bne.n	80003c2 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80003b4:	4b49      	ldr	r3, [pc, #292]	; (80004dc <GPIO_PeriClockControl+0x184>)
 80003b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003b8:	4a48      	ldr	r2, [pc, #288]	; (80004dc <GPIO_PeriClockControl+0x184>)
 80003ba:	f043 0308 	orr.w	r3, r3, #8
 80003be:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003c0:	e085      	b.n	80004ce <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOE){
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	4a49      	ldr	r2, [pc, #292]	; (80004ec <GPIO_PeriClockControl+0x194>)
 80003c6:	4293      	cmp	r3, r2
 80003c8:	d106      	bne.n	80003d8 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80003ca:	4b44      	ldr	r3, [pc, #272]	; (80004dc <GPIO_PeriClockControl+0x184>)
 80003cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ce:	4a43      	ldr	r2, [pc, #268]	; (80004dc <GPIO_PeriClockControl+0x184>)
 80003d0:	f043 0310 	orr.w	r3, r3, #16
 80003d4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003d6:	e07a      	b.n	80004ce <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOF){
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	4a45      	ldr	r2, [pc, #276]	; (80004f0 <GPIO_PeriClockControl+0x198>)
 80003dc:	4293      	cmp	r3, r2
 80003de:	d106      	bne.n	80003ee <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80003e0:	4b3e      	ldr	r3, [pc, #248]	; (80004dc <GPIO_PeriClockControl+0x184>)
 80003e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003e4:	4a3d      	ldr	r2, [pc, #244]	; (80004dc <GPIO_PeriClockControl+0x184>)
 80003e6:	f043 0320 	orr.w	r3, r3, #32
 80003ea:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003ec:	e06f      	b.n	80004ce <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOG){
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	4a40      	ldr	r2, [pc, #256]	; (80004f4 <GPIO_PeriClockControl+0x19c>)
 80003f2:	4293      	cmp	r3, r2
 80003f4:	d106      	bne.n	8000404 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80003f6:	4b39      	ldr	r3, [pc, #228]	; (80004dc <GPIO_PeriClockControl+0x184>)
 80003f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003fa:	4a38      	ldr	r2, [pc, #224]	; (80004dc <GPIO_PeriClockControl+0x184>)
 80003fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000400:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000402:	e064      	b.n	80004ce <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOH){
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	4a3c      	ldr	r2, [pc, #240]	; (80004f8 <GPIO_PeriClockControl+0x1a0>)
 8000408:	4293      	cmp	r3, r2
 800040a:	d160      	bne.n	80004ce <GPIO_PeriClockControl+0x176>
			GPIOH_PCLK_EN();
 800040c:	4b33      	ldr	r3, [pc, #204]	; (80004dc <GPIO_PeriClockControl+0x184>)
 800040e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000410:	4a32      	ldr	r2, [pc, #200]	; (80004dc <GPIO_PeriClockControl+0x184>)
 8000412:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000416:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000418:	e059      	b.n	80004ce <GPIO_PeriClockControl+0x176>
	} else if(EnorDi == DISABLE){
 800041a:	78fb      	ldrb	r3, [r7, #3]
 800041c:	2b00      	cmp	r3, #0
 800041e:	d156      	bne.n	80004ce <GPIO_PeriClockControl+0x176>
		if(pGPIOx == GPIOA){
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	4a2d      	ldr	r2, [pc, #180]	; (80004d8 <GPIO_PeriClockControl+0x180>)
 8000424:	4293      	cmp	r3, r2
 8000426:	d106      	bne.n	8000436 <GPIO_PeriClockControl+0xde>
			GPIOA_PCLK_DI();
 8000428:	4b2c      	ldr	r3, [pc, #176]	; (80004dc <GPIO_PeriClockControl+0x184>)
 800042a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800042c:	4a2b      	ldr	r2, [pc, #172]	; (80004dc <GPIO_PeriClockControl+0x184>)
 800042e:	f023 0301 	bic.w	r3, r3, #1
 8000432:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000434:	e04b      	b.n	80004ce <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOB){
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	4a29      	ldr	r2, [pc, #164]	; (80004e0 <GPIO_PeriClockControl+0x188>)
 800043a:	4293      	cmp	r3, r2
 800043c:	d106      	bne.n	800044c <GPIO_PeriClockControl+0xf4>
			GPIOB_PCLK_DI();
 800043e:	4b27      	ldr	r3, [pc, #156]	; (80004dc <GPIO_PeriClockControl+0x184>)
 8000440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000442:	4a26      	ldr	r2, [pc, #152]	; (80004dc <GPIO_PeriClockControl+0x184>)
 8000444:	f023 0302 	bic.w	r3, r3, #2
 8000448:	6313      	str	r3, [r2, #48]	; 0x30
}
 800044a:	e040      	b.n	80004ce <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOC){
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	4a25      	ldr	r2, [pc, #148]	; (80004e4 <GPIO_PeriClockControl+0x18c>)
 8000450:	4293      	cmp	r3, r2
 8000452:	d106      	bne.n	8000462 <GPIO_PeriClockControl+0x10a>
			GPIOC_PCLK_DI();
 8000454:	4b21      	ldr	r3, [pc, #132]	; (80004dc <GPIO_PeriClockControl+0x184>)
 8000456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000458:	4a20      	ldr	r2, [pc, #128]	; (80004dc <GPIO_PeriClockControl+0x184>)
 800045a:	f023 0304 	bic.w	r3, r3, #4
 800045e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000460:	e035      	b.n	80004ce <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOD){
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	4a20      	ldr	r2, [pc, #128]	; (80004e8 <GPIO_PeriClockControl+0x190>)
 8000466:	4293      	cmp	r3, r2
 8000468:	d106      	bne.n	8000478 <GPIO_PeriClockControl+0x120>
			GPIOD_PCLK_DI();
 800046a:	4b1c      	ldr	r3, [pc, #112]	; (80004dc <GPIO_PeriClockControl+0x184>)
 800046c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800046e:	4a1b      	ldr	r2, [pc, #108]	; (80004dc <GPIO_PeriClockControl+0x184>)
 8000470:	f023 0308 	bic.w	r3, r3, #8
 8000474:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000476:	e02a      	b.n	80004ce <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOE){
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	4a1c      	ldr	r2, [pc, #112]	; (80004ec <GPIO_PeriClockControl+0x194>)
 800047c:	4293      	cmp	r3, r2
 800047e:	d106      	bne.n	800048e <GPIO_PeriClockControl+0x136>
			GPIOE_PCLK_DI();
 8000480:	4b16      	ldr	r3, [pc, #88]	; (80004dc <GPIO_PeriClockControl+0x184>)
 8000482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000484:	4a15      	ldr	r2, [pc, #84]	; (80004dc <GPIO_PeriClockControl+0x184>)
 8000486:	f023 0310 	bic.w	r3, r3, #16
 800048a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800048c:	e01f      	b.n	80004ce <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOF){
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	4a17      	ldr	r2, [pc, #92]	; (80004f0 <GPIO_PeriClockControl+0x198>)
 8000492:	4293      	cmp	r3, r2
 8000494:	d106      	bne.n	80004a4 <GPIO_PeriClockControl+0x14c>
			GPIOF_PCLK_DI();
 8000496:	4b11      	ldr	r3, [pc, #68]	; (80004dc <GPIO_PeriClockControl+0x184>)
 8000498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800049a:	4a10      	ldr	r2, [pc, #64]	; (80004dc <GPIO_PeriClockControl+0x184>)
 800049c:	f023 0320 	bic.w	r3, r3, #32
 80004a0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004a2:	e014      	b.n	80004ce <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOG){
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	4a13      	ldr	r2, [pc, #76]	; (80004f4 <GPIO_PeriClockControl+0x19c>)
 80004a8:	4293      	cmp	r3, r2
 80004aa:	d106      	bne.n	80004ba <GPIO_PeriClockControl+0x162>
			GPIOG_PCLK_DI();
 80004ac:	4b0b      	ldr	r3, [pc, #44]	; (80004dc <GPIO_PeriClockControl+0x184>)
 80004ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004b0:	4a0a      	ldr	r2, [pc, #40]	; (80004dc <GPIO_PeriClockControl+0x184>)
 80004b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80004b6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004b8:	e009      	b.n	80004ce <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOH){
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	4a0e      	ldr	r2, [pc, #56]	; (80004f8 <GPIO_PeriClockControl+0x1a0>)
 80004be:	4293      	cmp	r3, r2
 80004c0:	d105      	bne.n	80004ce <GPIO_PeriClockControl+0x176>
			GPIOH_PCLK_DI();
 80004c2:	4b06      	ldr	r3, [pc, #24]	; (80004dc <GPIO_PeriClockControl+0x184>)
 80004c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004c6:	4a05      	ldr	r2, [pc, #20]	; (80004dc <GPIO_PeriClockControl+0x184>)
 80004c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80004cc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004ce:	bf00      	nop
 80004d0:	370c      	adds	r7, #12
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bc80      	pop	{r7}
 80004d6:	4770      	bx	lr
 80004d8:	40020000 	.word	0x40020000
 80004dc:	40023800 	.word	0x40023800
 80004e0:	40020400 	.word	0x40020400
 80004e4:	40020800 	.word	0x40020800
 80004e8:	40020c00 	.word	0x40020c00
 80004ec:	40021000 	.word	0x40021000
 80004f0:	40021400 	.word	0x40021400
 80004f4:	40021800 	.word	0x40021800
 80004f8:	40021c00 	.word	0x40021c00

080004fc <GPIO_Init>:
 * @return				- none
 *
 * @note				- none
 *
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 80004fc:	b480      	push	{r7}
 80004fe:	b08b      	sub	sp, #44	; 0x2c
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
	uint32_t reset_value = 0;
 8000504:	2300      	movs	r3, #0
 8000506:	627b      	str	r3, [r7, #36]	; 0x24

	//reset, then set mode register
	if( pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	795b      	ldrb	r3, [r3, #5]
 800050c:	2b03      	cmp	r3, #3
 800050e:	d823      	bhi.n	8000558 <GPIO_Init+0x5c>
		reset_value = (0x3 << ((2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)));
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	791b      	ldrb	r3, [r3, #4]
 8000514:	005b      	lsls	r3, r3, #1
 8000516:	2203      	movs	r2, #3
 8000518:	fa02 f303 	lsl.w	r3, r2, r3
 800051c:	627b      	str	r3, [r7, #36]	; 0x24
		pGPIOHandle->pGPIOx->MODER &= ~(reset_value);
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	6819      	ldr	r1, [r3, #0]
 8000524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000526:	43da      	mvns	r2, r3
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	400a      	ands	r2, r1
 800052e:	601a      	str	r2, [r3, #0]
		reset_value = 0;
 8000530:	2300      	movs	r3, #0
 8000532:	627b      	str	r3, [r7, #36]	; 0x24

		uint32_t moder_value = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	795b      	ldrb	r3, [r3, #5]
 8000538:	461a      	mov	r2, r3
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	791b      	ldrb	r3, [r3, #4]
 800053e:	005b      	lsls	r3, r3, #1
 8000540:	fa02 f303 	lsl.w	r3, r2, r3
 8000544:	61fb      	str	r3, [r7, #28]
		pGPIOHandle->pGPIOx->MODER |= moder_value;
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	6819      	ldr	r1, [r3, #0]
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	69fa      	ldr	r2, [r7, #28]
 8000552:	430a      	orrs	r2, r1
 8000554:	601a      	str	r2, [r3, #0]
 8000556:	e0ee      	b.n	8000736 <GPIO_Init+0x23a>
	} else{
		//interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	795b      	ldrb	r3, [r3, #5]
 800055c:	2b04      	cmp	r3, #4
 800055e:	d11a      	bne.n	8000596 <GPIO_Init+0x9a>
			//reset RTSR
			reset_value = (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	791b      	ldrb	r3, [r3, #4]
 8000564:	461a      	mov	r2, r3
 8000566:	2301      	movs	r3, #1
 8000568:	4093      	lsls	r3, r2
 800056a:	627b      	str	r3, [r7, #36]	; 0x24
			EXTI->RTSR &= ~(reset_value);
 800056c:	4b49      	ldr	r3, [pc, #292]	; (8000694 <GPIO_Init+0x198>)
 800056e:	689a      	ldr	r2, [r3, #8]
 8000570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000572:	43db      	mvns	r3, r3
 8000574:	4947      	ldr	r1, [pc, #284]	; (8000694 <GPIO_Init+0x198>)
 8000576:	4013      	ands	r3, r2
 8000578:	608b      	str	r3, [r1, #8]
			reset_value = 0;
 800057a:	2300      	movs	r3, #0
 800057c:	627b      	str	r3, [r7, #36]	; 0x24

			//configure FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800057e:	4b45      	ldr	r3, [pc, #276]	; (8000694 <GPIO_Init+0x198>)
 8000580:	68db      	ldr	r3, [r3, #12]
 8000582:	687a      	ldr	r2, [r7, #4]
 8000584:	7912      	ldrb	r2, [r2, #4]
 8000586:	4611      	mov	r1, r2
 8000588:	2201      	movs	r2, #1
 800058a:	408a      	lsls	r2, r1
 800058c:	4611      	mov	r1, r2
 800058e:	4a41      	ldr	r2, [pc, #260]	; (8000694 <GPIO_Init+0x198>)
 8000590:	430b      	orrs	r3, r1
 8000592:	60d3      	str	r3, [r2, #12]
 8000594:	e038      	b.n	8000608 <GPIO_Init+0x10c>
		} else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	795b      	ldrb	r3, [r3, #5]
 800059a:	2b05      	cmp	r3, #5
 800059c:	d11a      	bne.n	80005d4 <GPIO_Init+0xd8>
			//reset FTSR
			reset_value = (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	791b      	ldrb	r3, [r3, #4]
 80005a2:	461a      	mov	r2, r3
 80005a4:	2301      	movs	r3, #1
 80005a6:	4093      	lsls	r3, r2
 80005a8:	627b      	str	r3, [r7, #36]	; 0x24
			EXTI->FTSR &= ~(reset_value);
 80005aa:	4b3a      	ldr	r3, [pc, #232]	; (8000694 <GPIO_Init+0x198>)
 80005ac:	68da      	ldr	r2, [r3, #12]
 80005ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005b0:	43db      	mvns	r3, r3
 80005b2:	4938      	ldr	r1, [pc, #224]	; (8000694 <GPIO_Init+0x198>)
 80005b4:	4013      	ands	r3, r2
 80005b6:	60cb      	str	r3, [r1, #12]
			reset_value = 0;
 80005b8:	2300      	movs	r3, #0
 80005ba:	627b      	str	r3, [r7, #36]	; 0x24

			//configure RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005bc:	4b35      	ldr	r3, [pc, #212]	; (8000694 <GPIO_Init+0x198>)
 80005be:	689b      	ldr	r3, [r3, #8]
 80005c0:	687a      	ldr	r2, [r7, #4]
 80005c2:	7912      	ldrb	r2, [r2, #4]
 80005c4:	4611      	mov	r1, r2
 80005c6:	2201      	movs	r2, #1
 80005c8:	408a      	lsls	r2, r1
 80005ca:	4611      	mov	r1, r2
 80005cc:	4a31      	ldr	r2, [pc, #196]	; (8000694 <GPIO_Init+0x198>)
 80005ce:	430b      	orrs	r3, r1
 80005d0:	6093      	str	r3, [r2, #8]
 80005d2:	e019      	b.n	8000608 <GPIO_Init+0x10c>
		} else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	795b      	ldrb	r3, [r3, #5]
 80005d8:	2b06      	cmp	r3, #6
 80005da:	d115      	bne.n	8000608 <GPIO_Init+0x10c>
			//configure RTSR and FTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005dc:	4b2d      	ldr	r3, [pc, #180]	; (8000694 <GPIO_Init+0x198>)
 80005de:	689b      	ldr	r3, [r3, #8]
 80005e0:	687a      	ldr	r2, [r7, #4]
 80005e2:	7912      	ldrb	r2, [r2, #4]
 80005e4:	4611      	mov	r1, r2
 80005e6:	2201      	movs	r2, #1
 80005e8:	408a      	lsls	r2, r1
 80005ea:	4611      	mov	r1, r2
 80005ec:	4a29      	ldr	r2, [pc, #164]	; (8000694 <GPIO_Init+0x198>)
 80005ee:	430b      	orrs	r3, r1
 80005f0:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005f2:	4b28      	ldr	r3, [pc, #160]	; (8000694 <GPIO_Init+0x198>)
 80005f4:	68db      	ldr	r3, [r3, #12]
 80005f6:	687a      	ldr	r2, [r7, #4]
 80005f8:	7912      	ldrb	r2, [r2, #4]
 80005fa:	4611      	mov	r1, r2
 80005fc:	2201      	movs	r2, #1
 80005fe:	408a      	lsls	r2, r1
 8000600:	4611      	mov	r1, r2
 8000602:	4a24      	ldr	r2, [pc, #144]	; (8000694 <GPIO_Init+0x198>)
 8000604:	430b      	orrs	r3, r1
 8000606:	60d3      	str	r3, [r2, #12]
		}

		//configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t index = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4);
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	791b      	ldrb	r3, [r3, #4]
 800060c:	089b      	lsrs	r3, r3, #2
 800060e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		uint8_t position = ((pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4) * 4);
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	791b      	ldrb	r3, [r3, #4]
 8000616:	f003 0303 	and.w	r3, r3, #3
 800061a:	b2db      	uxtb	r3, r3
 800061c:	009b      	lsls	r3, r3, #2
 800061e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		uint8_t port_code = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4a1c      	ldr	r2, [pc, #112]	; (8000698 <GPIO_Init+0x19c>)
 8000628:	4293      	cmp	r3, r2
 800062a:	d045      	beq.n	80006b8 <GPIO_Init+0x1bc>
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a1a      	ldr	r2, [pc, #104]	; (800069c <GPIO_Init+0x1a0>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d02b      	beq.n	800068e <GPIO_Init+0x192>
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4a19      	ldr	r2, [pc, #100]	; (80006a0 <GPIO_Init+0x1a4>)
 800063c:	4293      	cmp	r3, r2
 800063e:	d024      	beq.n	800068a <GPIO_Init+0x18e>
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a17      	ldr	r2, [pc, #92]	; (80006a4 <GPIO_Init+0x1a8>)
 8000646:	4293      	cmp	r3, r2
 8000648:	d01d      	beq.n	8000686 <GPIO_Init+0x18a>
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	4a16      	ldr	r2, [pc, #88]	; (80006a8 <GPIO_Init+0x1ac>)
 8000650:	4293      	cmp	r3, r2
 8000652:	d016      	beq.n	8000682 <GPIO_Init+0x186>
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a14      	ldr	r2, [pc, #80]	; (80006ac <GPIO_Init+0x1b0>)
 800065a:	4293      	cmp	r3, r2
 800065c:	d00f      	beq.n	800067e <GPIO_Init+0x182>
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4a13      	ldr	r2, [pc, #76]	; (80006b0 <GPIO_Init+0x1b4>)
 8000664:	4293      	cmp	r3, r2
 8000666:	d008      	beq.n	800067a <GPIO_Init+0x17e>
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a11      	ldr	r2, [pc, #68]	; (80006b4 <GPIO_Init+0x1b8>)
 800066e:	4293      	cmp	r3, r2
 8000670:	d101      	bne.n	8000676 <GPIO_Init+0x17a>
 8000672:	2307      	movs	r3, #7
 8000674:	e021      	b.n	80006ba <GPIO_Init+0x1be>
 8000676:	2300      	movs	r3, #0
 8000678:	e01f      	b.n	80006ba <GPIO_Init+0x1be>
 800067a:	2306      	movs	r3, #6
 800067c:	e01d      	b.n	80006ba <GPIO_Init+0x1be>
 800067e:	2305      	movs	r3, #5
 8000680:	e01b      	b.n	80006ba <GPIO_Init+0x1be>
 8000682:	2304      	movs	r3, #4
 8000684:	e019      	b.n	80006ba <GPIO_Init+0x1be>
 8000686:	2303      	movs	r3, #3
 8000688:	e017      	b.n	80006ba <GPIO_Init+0x1be>
 800068a:	2302      	movs	r3, #2
 800068c:	e015      	b.n	80006ba <GPIO_Init+0x1be>
 800068e:	2301      	movs	r3, #1
 8000690:	e013      	b.n	80006ba <GPIO_Init+0x1be>
 8000692:	bf00      	nop
 8000694:	40013c00 	.word	0x40013c00
 8000698:	40020000 	.word	0x40020000
 800069c:	40020400 	.word	0x40020400
 80006a0:	40020800 	.word	0x40020800
 80006a4:	40020c00 	.word	0x40020c00
 80006a8:	40021000 	.word	0x40021000
 80006ac:	40021400 	.word	0x40021400
 80006b0:	40021800 	.word	0x40021800
 80006b4:	40021c00 	.word	0x40021c00
 80006b8:	2300      	movs	r3, #0
 80006ba:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

		SYSCFG_PCLK_EN();
 80006be:	4b75      	ldr	r3, [pc, #468]	; (8000894 <GPIO_Init+0x398>)
 80006c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006c2:	4a74      	ldr	r2, [pc, #464]	; (8000894 <GPIO_Init+0x398>)
 80006c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006c8:	6453      	str	r3, [r2, #68]	; 0x44

		reset_value = (0xF << position);
 80006ca:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80006ce:	220f      	movs	r2, #15
 80006d0:	fa02 f303 	lsl.w	r3, r2, r3
 80006d4:	627b      	str	r3, [r7, #36]	; 0x24
		SYSCFG->EXTICR[index] &= ~(reset_value);
 80006d6:	4a70      	ldr	r2, [pc, #448]	; (8000898 <GPIO_Init+0x39c>)
 80006d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80006dc:	3302      	adds	r3, #2
 80006de:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80006e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006e4:	43da      	mvns	r2, r3
 80006e6:	486c      	ldr	r0, [pc, #432]	; (8000898 <GPIO_Init+0x39c>)
 80006e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80006ec:	400a      	ands	r2, r1
 80006ee:	3302      	adds	r3, #2
 80006f0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		reset_value = 0;
 80006f4:	2300      	movs	r3, #0
 80006f6:	627b      	str	r3, [r7, #36]	; 0x24

		SYSCFG->EXTICR[index] |= (port_code << position);
 80006f8:	4a67      	ldr	r2, [pc, #412]	; (8000898 <GPIO_Init+0x39c>)
 80006fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80006fe:	3302      	adds	r3, #2
 8000700:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000704:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 8000708:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800070c:	fa01 f303 	lsl.w	r3, r1, r3
 8000710:	4618      	mov	r0, r3
 8000712:	4961      	ldr	r1, [pc, #388]	; (8000898 <GPIO_Init+0x39c>)
 8000714:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000718:	4302      	orrs	r2, r0
 800071a:	3302      	adds	r3, #2
 800071c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		//enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000720:	4b5e      	ldr	r3, [pc, #376]	; (800089c <GPIO_Init+0x3a0>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	687a      	ldr	r2, [r7, #4]
 8000726:	7912      	ldrb	r2, [r2, #4]
 8000728:	4611      	mov	r1, r2
 800072a:	2201      	movs	r2, #1
 800072c:	408a      	lsls	r2, r1
 800072e:	4611      	mov	r1, r2
 8000730:	4a5a      	ldr	r2, [pc, #360]	; (800089c <GPIO_Init+0x3a0>)
 8000732:	430b      	orrs	r3, r1
 8000734:	6013      	str	r3, [r2, #0]
	}

	// reset, then set speed register
	reset_value = (0x3 << ((2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)));
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	791b      	ldrb	r3, [r3, #4]
 800073a:	005b      	lsls	r3, r3, #1
 800073c:	2203      	movs	r2, #3
 800073e:	fa02 f303 	lsl.w	r3, r2, r3
 8000742:	627b      	str	r3, [r7, #36]	; 0x24
	pGPIOHandle->pGPIOx->OSPEEDER &= ~(reset_value);
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	6899      	ldr	r1, [r3, #8]
 800074a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800074c:	43da      	mvns	r2, r3
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	400a      	ands	r2, r1
 8000754:	609a      	str	r2, [r3, #8]
	reset_value = 0;
 8000756:	2300      	movs	r3, #0
 8000758:	627b      	str	r3, [r7, #36]	; 0x24

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_OUT){
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	795b      	ldrb	r3, [r3, #5]
 800075e:	2b01      	cmp	r3, #1
 8000760:	d110      	bne.n	8000784 <GPIO_Init+0x288>
		uint32_t ospeedr_value = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	799b      	ldrb	r3, [r3, #6]
 8000766:	461a      	mov	r2, r3
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	791b      	ldrb	r3, [r3, #4]
 800076c:	005b      	lsls	r3, r3, #1
 800076e:	fa02 f303 	lsl.w	r3, r2, r3
 8000772:	61bb      	str	r3, [r7, #24]
		pGPIOHandle->pGPIOx->OSPEEDER |= ospeedr_value;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	6899      	ldr	r1, [r3, #8]
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	69ba      	ldr	r2, [r7, #24]
 8000780:	430a      	orrs	r2, r1
 8000782:	609a      	str	r2, [r3, #8]
	}
	//reset, then set pupd register
	reset_value = (0x3 << ((2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)));
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	791b      	ldrb	r3, [r3, #4]
 8000788:	005b      	lsls	r3, r3, #1
 800078a:	2203      	movs	r2, #3
 800078c:	fa02 f303 	lsl.w	r3, r2, r3
 8000790:	627b      	str	r3, [r7, #36]	; 0x24
	pGPIOHandle->pGPIOx->PUPDR &= ~(reset_value);
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	68d9      	ldr	r1, [r3, #12]
 8000798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800079a:	43da      	mvns	r2, r3
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	400a      	ands	r2, r1
 80007a2:	60da      	str	r2, [r3, #12]
	reset_value = 0;
 80007a4:	2300      	movs	r3, #0
 80007a6:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t pupdr_value = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	79db      	ldrb	r3, [r3, #7]
 80007ac:	461a      	mov	r2, r3
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	791b      	ldrb	r3, [r3, #4]
 80007b2:	005b      	lsls	r3, r3, #1
 80007b4:	fa02 f303 	lsl.w	r3, r2, r3
 80007b8:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR |= pupdr_value;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	68d9      	ldr	r1, [r3, #12]
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	697a      	ldr	r2, [r7, #20]
 80007c6:	430a      	orrs	r2, r1
 80007c8:	60da      	str	r2, [r3, #12]

	//reset, then set output type register
	reset_value = (0x1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	791b      	ldrb	r3, [r3, #4]
 80007ce:	461a      	mov	r2, r3
 80007d0:	2301      	movs	r3, #1
 80007d2:	4093      	lsls	r3, r2
 80007d4:	627b      	str	r3, [r7, #36]	; 0x24
	pGPIOHandle->pGPIOx->OTYPER &= ~(reset_value);
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	6859      	ldr	r1, [r3, #4]
 80007dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007de:	43da      	mvns	r2, r3
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	400a      	ands	r2, r1
 80007e6:	605a      	str	r2, [r3, #4]
	reset_value = 0;
 80007e8:	2300      	movs	r3, #0
 80007ea:	627b      	str	r3, [r7, #36]	; 0x24

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_OUT){
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	795b      	ldrb	r3, [r3, #5]
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	d10f      	bne.n	8000814 <GPIO_Init+0x318>
		uint32_t optyper_value = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	7a1b      	ldrb	r3, [r3, #8]
 80007f8:	461a      	mov	r2, r3
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	791b      	ldrb	r3, [r3, #4]
 80007fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000802:	613b      	str	r3, [r7, #16]
		pGPIOHandle->pGPIOx->OTYPER |= optyper_value;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	6859      	ldr	r1, [r3, #4]
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	693a      	ldr	r2, [r7, #16]
 8000810:	430a      	orrs	r2, r1
 8000812:	605a      	str	r2, [r3, #4]
	}
	//reset, then set altfn register
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode == GPIO_MODE_ALTFN){
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	7a5b      	ldrb	r3, [r3, #9]
 8000818:	2b02      	cmp	r3, #2
 800081a:	d135      	bne.n	8000888 <GPIO_Init+0x38c>
		uint8_t index = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	791b      	ldrb	r3, [r3, #4]
 8000820:	08db      	lsrs	r3, r3, #3
 8000822:	73fb      	strb	r3, [r7, #15]
		uint8_t position = ((pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8) * 4);
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	791b      	ldrb	r3, [r3, #4]
 8000828:	f003 0307 	and.w	r3, r3, #7
 800082c:	b2db      	uxtb	r3, r3
 800082e:	009b      	lsls	r3, r3, #2
 8000830:	73bb      	strb	r3, [r7, #14]

		//reset
		reset_value = (0xF << position);
 8000832:	7bbb      	ldrb	r3, [r7, #14]
 8000834:	220f      	movs	r2, #15
 8000836:	fa02 f303 	lsl.w	r3, r2, r3
 800083a:	627b      	str	r3, [r7, #36]	; 0x24
		pGPIOHandle->pGPIOx->AFR[index] &= ~(reset_value);
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	7bfa      	ldrb	r2, [r7, #15]
 8000842:	3208      	adds	r2, #8
 8000844:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800084a:	43d9      	mvns	r1, r3
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	7bfa      	ldrb	r2, [r7, #15]
 8000852:	4001      	ands	r1, r0
 8000854:	3208      	adds	r2, #8
 8000856:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		reset_value = 0;
 800085a:	2300      	movs	r3, #0
 800085c:	627b      	str	r3, [r7, #36]	; 0x24

		//set
		uint32_t afr_value = (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << position);
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	7a5b      	ldrb	r3, [r3, #9]
 8000862:	461a      	mov	r2, r3
 8000864:	7bbb      	ldrb	r3, [r7, #14]
 8000866:	fa02 f303 	lsl.w	r3, r2, r3
 800086a:	60bb      	str	r3, [r7, #8]
		pGPIOHandle->pGPIOx->AFR[index] |= afr_value;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	7bfa      	ldrb	r2, [r7, #15]
 8000872:	3208      	adds	r2, #8
 8000874:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	7bfa      	ldrb	r2, [r7, #15]
 800087e:	68b9      	ldr	r1, [r7, #8]
 8000880:	4301      	orrs	r1, r0
 8000882:	3208      	adds	r2, #8
 8000884:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8000888:	bf00      	nop
 800088a:	372c      	adds	r7, #44	; 0x2c
 800088c:	46bd      	mov	sp, r7
 800088e:	bc80      	pop	{r7}
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	40023800 	.word	0x40023800
 8000898:	40013800 	.word	0x40013800
 800089c:	40013c00 	.word	0x40013c00

080008a0 <SPI_PeriClockControl>:
 * @return				- none
 *
 * @note				- none
 *
 */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi){
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
 80008a8:	460b      	mov	r3, r1
 80008aa:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 80008ac:	78fb      	ldrb	r3, [r7, #3]
 80008ae:	2b01      	cmp	r3, #1
 80008b0:	d12b      	bne.n	800090a <SPI_PeriClockControl+0x6a>
		if(pSPIx == SPI1){
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	4a2e      	ldr	r2, [pc, #184]	; (8000970 <SPI_PeriClockControl+0xd0>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d106      	bne.n	80008c8 <SPI_PeriClockControl+0x28>
			SPI1_PCLK_EN();
 80008ba:	4b2e      	ldr	r3, [pc, #184]	; (8000974 <SPI_PeriClockControl+0xd4>)
 80008bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008be:	4a2d      	ldr	r2, [pc, #180]	; (8000974 <SPI_PeriClockControl+0xd4>)
 80008c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008c4:	6453      	str	r3, [r2, #68]	; 0x44
			SPI3_PCLK_DI();
		} else if(pSPIx == SPI4){
			SPI4_PCLK_DI();
		}
	}
}
 80008c6:	e04e      	b.n	8000966 <SPI_PeriClockControl+0xc6>
		} else if(pSPIx == SPI2){
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	4a2b      	ldr	r2, [pc, #172]	; (8000978 <SPI_PeriClockControl+0xd8>)
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d106      	bne.n	80008de <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 80008d0:	4b28      	ldr	r3, [pc, #160]	; (8000974 <SPI_PeriClockControl+0xd4>)
 80008d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d4:	4a27      	ldr	r2, [pc, #156]	; (8000974 <SPI_PeriClockControl+0xd4>)
 80008d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008da:	6413      	str	r3, [r2, #64]	; 0x40
}
 80008dc:	e043      	b.n	8000966 <SPI_PeriClockControl+0xc6>
		} else if(pSPIx == SPI3){
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	4a26      	ldr	r2, [pc, #152]	; (800097c <SPI_PeriClockControl+0xdc>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d106      	bne.n	80008f4 <SPI_PeriClockControl+0x54>
			SPI3_PCLK_EN();
 80008e6:	4b23      	ldr	r3, [pc, #140]	; (8000974 <SPI_PeriClockControl+0xd4>)
 80008e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ea:	4a22      	ldr	r2, [pc, #136]	; (8000974 <SPI_PeriClockControl+0xd4>)
 80008ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008f0:	6413      	str	r3, [r2, #64]	; 0x40
}
 80008f2:	e038      	b.n	8000966 <SPI_PeriClockControl+0xc6>
		} else if(pSPIx == SPI4){
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	4a22      	ldr	r2, [pc, #136]	; (8000980 <SPI_PeriClockControl+0xe0>)
 80008f8:	4293      	cmp	r3, r2
 80008fa:	d134      	bne.n	8000966 <SPI_PeriClockControl+0xc6>
			SPI4_PCLK_EN();
 80008fc:	4b1d      	ldr	r3, [pc, #116]	; (8000974 <SPI_PeriClockControl+0xd4>)
 80008fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000900:	4a1c      	ldr	r2, [pc, #112]	; (8000974 <SPI_PeriClockControl+0xd4>)
 8000902:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000906:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000908:	e02d      	b.n	8000966 <SPI_PeriClockControl+0xc6>
	} else if(EnorDi == DISABLE){
 800090a:	78fb      	ldrb	r3, [r7, #3]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d12a      	bne.n	8000966 <SPI_PeriClockControl+0xc6>
		if(pSPIx == SPI1){
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	4a17      	ldr	r2, [pc, #92]	; (8000970 <SPI_PeriClockControl+0xd0>)
 8000914:	4293      	cmp	r3, r2
 8000916:	d106      	bne.n	8000926 <SPI_PeriClockControl+0x86>
			SPI1_PCLK_DI();
 8000918:	4b16      	ldr	r3, [pc, #88]	; (8000974 <SPI_PeriClockControl+0xd4>)
 800091a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800091c:	4a15      	ldr	r2, [pc, #84]	; (8000974 <SPI_PeriClockControl+0xd4>)
 800091e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000922:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000924:	e01f      	b.n	8000966 <SPI_PeriClockControl+0xc6>
		} else if(pSPIx == SPI2){
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	4a13      	ldr	r2, [pc, #76]	; (8000978 <SPI_PeriClockControl+0xd8>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d106      	bne.n	800093c <SPI_PeriClockControl+0x9c>
			SPI2_PCLK_DI();
 800092e:	4b11      	ldr	r3, [pc, #68]	; (8000974 <SPI_PeriClockControl+0xd4>)
 8000930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000932:	4a10      	ldr	r2, [pc, #64]	; (8000974 <SPI_PeriClockControl+0xd4>)
 8000934:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000938:	6413      	str	r3, [r2, #64]	; 0x40
}
 800093a:	e014      	b.n	8000966 <SPI_PeriClockControl+0xc6>
		} else if(pSPIx == SPI3){
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	4a0f      	ldr	r2, [pc, #60]	; (800097c <SPI_PeriClockControl+0xdc>)
 8000940:	4293      	cmp	r3, r2
 8000942:	d106      	bne.n	8000952 <SPI_PeriClockControl+0xb2>
			SPI3_PCLK_DI();
 8000944:	4b0b      	ldr	r3, [pc, #44]	; (8000974 <SPI_PeriClockControl+0xd4>)
 8000946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000948:	4a0a      	ldr	r2, [pc, #40]	; (8000974 <SPI_PeriClockControl+0xd4>)
 800094a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800094e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000950:	e009      	b.n	8000966 <SPI_PeriClockControl+0xc6>
		} else if(pSPIx == SPI4){
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	4a0a      	ldr	r2, [pc, #40]	; (8000980 <SPI_PeriClockControl+0xe0>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d105      	bne.n	8000966 <SPI_PeriClockControl+0xc6>
			SPI4_PCLK_DI();
 800095a:	4b06      	ldr	r3, [pc, #24]	; (8000974 <SPI_PeriClockControl+0xd4>)
 800095c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095e:	4a05      	ldr	r2, [pc, #20]	; (8000974 <SPI_PeriClockControl+0xd4>)
 8000960:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000964:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000966:	bf00      	nop
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	bc80      	pop	{r7}
 800096e:	4770      	bx	lr
 8000970:	40013000 	.word	0x40013000
 8000974:	40023800 	.word	0x40023800
 8000978:	40003800 	.word	0x40003800
 800097c:	40003c00 	.word	0x40003c00
 8000980:	40013400 	.word	0x40013400

08000984 <SPI_Init>:
 * @return				- none
 *
 * @note				- none
 *
 */
void SPI_Init(SPI_Handle_t *pSPIHandle){
 8000984:	b480      	push	{r7}
 8000986:	b085      	sub	sp, #20
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
	uint32_t ControlReg1 = 0;
 800098c:	2300      	movs	r3, #0
 800098e:	60fb      	str	r3, [r7, #12]

	//configure device mode
	ControlReg1 |= pSPIHandle->SPI_Config.SPI_DeviceMode << 2;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	791b      	ldrb	r3, [r3, #4]
 8000994:	009b      	lsls	r3, r3, #2
 8000996:	461a      	mov	r2, r3
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	4313      	orrs	r3, r2
 800099c:	60fb      	str	r3, [r7, #12]

	//Bus Configuration
	if(pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CONFIG_FD){
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	795b      	ldrb	r3, [r3, #5]
 80009a2:	2b01      	cmp	r3, #1
 80009a4:	d104      	bne.n	80009b0 <SPI_Init+0x2c>
		//bidi mode should be cleared
		ControlReg1 &= ~(1 << SPI_CR1_BIDIMODE);
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80009ac:	60fb      	str	r3, [r7, #12]
 80009ae:	e014      	b.n	80009da <SPI_Init+0x56>
	} else if(pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CONFIG_HD){
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	795b      	ldrb	r3, [r3, #5]
 80009b4:	2b02      	cmp	r3, #2
 80009b6:	d104      	bne.n	80009c2 <SPI_Init+0x3e>
		//bidi mode should be set
		ControlReg1 |= (1 << SPI_CR1_BIDIMODE);
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	e00b      	b.n	80009da <SPI_Init+0x56>
	} else if(pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY){
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	795b      	ldrb	r3, [r3, #5]
 80009c6:	2b03      	cmp	r3, #3
 80009c8:	d107      	bne.n	80009da <SPI_Init+0x56>
		//bidi mode should be cleared
		ControlReg1 &= ~(1 << SPI_CR1_BIDIMODE);
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80009d0:	60fb      	str	r3, [r7, #12]
		//rxonly bit must be set
		ControlReg1 |= (1 << SPI_CR1_RXONLY);
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009d8:	60fb      	str	r3, [r7, #12]
	}

	//Serial clk Configuration
	ControlReg1 |= (pSPIHandle->SPI_Config.SPI_SclkSpeed << SPI_CR1_BR);
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	799b      	ldrb	r3, [r3, #6]
 80009de:	00db      	lsls	r3, r3, #3
 80009e0:	461a      	mov	r2, r3
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	4313      	orrs	r3, r2
 80009e6:	60fb      	str	r3, [r7, #12]

	//Data Frame Format Configuration
	ControlReg1 |= (pSPIHandle->SPI_Config.SPI_DFF << SPI_CR1_DFF);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	79db      	ldrb	r3, [r3, #7]
 80009ec:	02db      	lsls	r3, r3, #11
 80009ee:	461a      	mov	r2, r3
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	4313      	orrs	r3, r2
 80009f4:	60fb      	str	r3, [r7, #12]

	//CPOL Configuration
	ControlReg1 |= (pSPIHandle->SPI_Config.SPI_CPOL << SPI_CR1_CPOL);
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	7a1b      	ldrb	r3, [r3, #8]
 80009fa:	005b      	lsls	r3, r3, #1
 80009fc:	461a      	mov	r2, r3
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	4313      	orrs	r3, r2
 8000a02:	60fb      	str	r3, [r7, #12]

	//CPHA Configuration
	ControlReg1 |= (pSPIHandle->SPI_Config.SPI_CPHA << SPI_CR1_CPHA);
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	7a5b      	ldrb	r3, [r3, #9]
 8000a08:	461a      	mov	r2, r3
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	60fb      	str	r3, [r7, #12]

	//Software Slave Select Configuration
	ControlReg1 |= (pSPIHandle->SPI_Config.SPI_SSM << SPI_CR1_SSM);
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	7a9b      	ldrb	r3, [r3, #10]
 8000a14:	025b      	lsls	r3, r3, #9
 8000a16:	461a      	mov	r2, r3
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = ControlReg1;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	68fa      	ldr	r2, [r7, #12]
 8000a24:	601a      	str	r2, [r3, #0]
}
 8000a26:	bf00      	nop
 8000a28:	3714      	adds	r7, #20
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bc80      	pop	{r7}
 8000a2e:	4770      	bx	lr

08000a30 <SPI_GetFlagStatus>:

/*
 * 	Data Send and Receive
 */

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName){
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
 8000a38:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & FlagName){
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	689a      	ldr	r2, [r3, #8]
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	4013      	ands	r3, r2
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <SPI_GetFlagStatus+0x1a>
		return FLAG_SET;
 8000a46:	2301      	movs	r3, #1
 8000a48:	e000      	b.n	8000a4c <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000a4a:	2300      	movs	r3, #0
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	370c      	adds	r7, #12
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bc80      	pop	{r7}
 8000a54:	4770      	bx	lr

08000a56 <SPI_SendData>:
 * @return				- none
 *
 * @note				- This is blocking call
 *
 */
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len){
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b084      	sub	sp, #16
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	60f8      	str	r0, [r7, #12]
 8000a5e:	60b9      	str	r1, [r7, #8]
 8000a60:	607a      	str	r2, [r7, #4]
	while(Len > 0){
 8000a62:	e027      	b.n	8000ab4 <SPI_SendData+0x5e>
		//Wait until TX is set
		while(SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET);
 8000a64:	bf00      	nop
 8000a66:	2102      	movs	r1, #2
 8000a68:	68f8      	ldr	r0, [r7, #12]
 8000a6a:	f7ff ffe1 	bl	8000a30 <SPI_GetFlagStatus>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d0f8      	beq.n	8000a66 <SPI_SendData+0x10>
		//Check DFF bit in CR1
		if(pSPIx->CR1 & (1 << SPI_CR1_DFF)){
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d00e      	beq.n	8000a9e <SPI_SendData+0x48>
			//16 bit data frame format
			pSPIx->DR = *((uint16_t*) pTxBuffer);
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	881b      	ldrh	r3, [r3, #0]
 8000a84:	461a      	mov	r2, r3
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	60da      	str	r2, [r3, #12]
			Len--;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	3b01      	subs	r3, #1
 8000a8e:	607b      	str	r3, [r7, #4]
			Len--;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	3b01      	subs	r3, #1
 8000a94:	607b      	str	r3, [r7, #4]
			(uint16_t*) pTxBuffer++;
 8000a96:	68bb      	ldr	r3, [r7, #8]
 8000a98:	3301      	adds	r3, #1
 8000a9a:	60bb      	str	r3, [r7, #8]
 8000a9c:	e00a      	b.n	8000ab4 <SPI_SendData+0x5e>
		} else{
			//8 bit data frame format
			pSPIx->DR = *pTxBuffer;
 8000a9e:	68bb      	ldr	r3, [r7, #8]
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	60da      	str	r2, [r3, #12]
			Len--;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	3b01      	subs	r3, #1
 8000aac:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 8000aae:	68bb      	ldr	r3, [r7, #8]
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	60bb      	str	r3, [r7, #8]
	while(Len > 0){
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d1d4      	bne.n	8000a64 <SPI_SendData+0xe>
		}
	}
}
 8000aba:	bf00      	nop
 8000abc:	3710      	adds	r7, #16
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}

08000ac2 <SPI_PeripheralControl>:
 * @return				- none
 *
 * @note				- none
 *
 */
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi){
 8000ac2:	b480      	push	{r7}
 8000ac4:	b083      	sub	sp, #12
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	6078      	str	r0, [r7, #4]
 8000aca:	460b      	mov	r3, r1
 8000acc:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE){
 8000ace:	78fb      	ldrb	r3, [r7, #3]
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	d106      	bne.n	8000ae2 <SPI_PeripheralControl+0x20>
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	601a      	str	r2, [r3, #0]
	} else{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}
 8000ae0:	e005      	b.n	8000aee <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	601a      	str	r2, [r3, #0]
}
 8000aee:	bf00      	nop
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bc80      	pop	{r7}
 8000af6:	4770      	bx	lr

08000af8 <SPI_SSI_Config>:
 * @return				- none
 *
 * @note				- none
 *
 */
void SPI_SSI_Config(SPI_RegDef_t *pSPIx, uint8_t EnOrDi){
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	460b      	mov	r3, r1
 8000b02:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE){
 8000b04:	78fb      	ldrb	r3, [r7, #3]
 8000b06:	2b01      	cmp	r3, #1
 8000b08:	d106      	bne.n	8000b18 <SPI_SSI_Config+0x20>
		pSPIx->CR1 |= (1 << SPI_CR1_SSI);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	601a      	str	r2, [r3, #0]
	} else{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SSI);
	}
}
 8000b16:	e005      	b.n	8000b24 <SPI_SSI_Config+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SSI);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	601a      	str	r2, [r3, #0]
}
 8000b24:	bf00      	nop
 8000b26:	370c      	adds	r7, #12
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bc80      	pop	{r7}
 8000b2c:	4770      	bx	lr
	...

08000b30 <__libc_init_array>:
 8000b30:	b570      	push	{r4, r5, r6, lr}
 8000b32:	4e0d      	ldr	r6, [pc, #52]	; (8000b68 <__libc_init_array+0x38>)
 8000b34:	4c0d      	ldr	r4, [pc, #52]	; (8000b6c <__libc_init_array+0x3c>)
 8000b36:	1ba4      	subs	r4, r4, r6
 8000b38:	10a4      	asrs	r4, r4, #2
 8000b3a:	2500      	movs	r5, #0
 8000b3c:	42a5      	cmp	r5, r4
 8000b3e:	d109      	bne.n	8000b54 <__libc_init_array+0x24>
 8000b40:	4e0b      	ldr	r6, [pc, #44]	; (8000b70 <__libc_init_array+0x40>)
 8000b42:	4c0c      	ldr	r4, [pc, #48]	; (8000b74 <__libc_init_array+0x44>)
 8000b44:	f000 f818 	bl	8000b78 <_init>
 8000b48:	1ba4      	subs	r4, r4, r6
 8000b4a:	10a4      	asrs	r4, r4, #2
 8000b4c:	2500      	movs	r5, #0
 8000b4e:	42a5      	cmp	r5, r4
 8000b50:	d105      	bne.n	8000b5e <__libc_init_array+0x2e>
 8000b52:	bd70      	pop	{r4, r5, r6, pc}
 8000b54:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000b58:	4798      	blx	r3
 8000b5a:	3501      	adds	r5, #1
 8000b5c:	e7ee      	b.n	8000b3c <__libc_init_array+0xc>
 8000b5e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000b62:	4798      	blx	r3
 8000b64:	3501      	adds	r5, #1
 8000b66:	e7f2      	b.n	8000b4e <__libc_init_array+0x1e>
 8000b68:	08000b9c 	.word	0x08000b9c
 8000b6c:	08000b9c 	.word	0x08000b9c
 8000b70:	08000b9c 	.word	0x08000b9c
 8000b74:	08000ba0 	.word	0x08000ba0

08000b78 <_init>:
 8000b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b7a:	bf00      	nop
 8000b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b7e:	bc08      	pop	{r3}
 8000b80:	469e      	mov	lr, r3
 8000b82:	4770      	bx	lr

08000b84 <_fini>:
 8000b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b86:	bf00      	nop
 8000b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b8a:	bc08      	pop	{r3}
 8000b8c:	469e      	mov	lr, r3
 8000b8e:	4770      	bx	lr
