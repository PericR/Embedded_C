
stm32f446_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001248  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800140c  0800140c  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800140c  0800140c  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  0800140c  0800140c  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800140c  0800140c  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800140c  0800140c  0001140c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001410  08001410  00011410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08001414  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000050  20000020  08001434  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000070  08001434  00020070  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002178  00000000  00000000  0002004a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000005dd  00000000  00000000  000221c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001f8  00000000  00000000  000227a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000001b0  00000000  00000000  00022998  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002e55  00000000  00000000  00022b48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001ac4  00000000  00000000  0002599d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000bceb  00000000  00000000  00027461  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0003314c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000073c  00000000  00000000  000331c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000020 	.word	0x20000020
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080013f4 	.word	0x080013f4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000024 	.word	0x20000024
 8000200:	080013f4 	.word	0x080013f4

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <GPIO_Button_Init>:

void delay(void){
	for(uint32_t i = 0; i < 500000; i++);
}

void GPIO_Button_Init(){
 8000214:	b580      	push	{r7, lr}
 8000216:	b084      	sub	sp, #16
 8000218:	af00      	add	r7, sp, #0
	GPIO_Handle_t gpioc_button;
	gpioc_button.pGPIOx = GPIOC;
 800021a:	4b09      	ldr	r3, [pc, #36]	; (8000240 <GPIO_Button_Init+0x2c>)
 800021c:	607b      	str	r3, [r7, #4]

	gpioc_button.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 800021e:	230d      	movs	r3, #13
 8000220:	723b      	strb	r3, [r7, #8]
	gpioc_button.GPIO_PinConfig.GPIO_PinMode = GPIO_PIN_MODE_IN;
 8000222:	2300      	movs	r3, #0
 8000224:	727b      	strb	r3, [r7, #9]

	GPIO_PeriClockControl(gpioc_button.pGPIOx, ENABLE);
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	2101      	movs	r1, #1
 800022a:	4618      	mov	r0, r3
 800022c:	f000 f8f2 	bl	8000414 <GPIO_PeriClockControl>
	GPIO_Init(&gpioc_button);
 8000230:	1d3b      	adds	r3, r7, #4
 8000232:	4618      	mov	r0, r3
 8000234:	f000 f9c0 	bl	80005b8 <GPIO_Init>
}
 8000238:	bf00      	nop
 800023a:	3710      	adds	r7, #16
 800023c:	46bd      	mov	sp, r7
 800023e:	bd80      	pop	{r7, pc}
 8000240:	40020800 	.word	0x40020800

08000244 <I2C1_GPIOInits>:

void I2C1_GPIOInits(void){
 8000244:	b580      	push	{r7, lr}
 8000246:	b084      	sub	sp, #16
 8000248:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2C_pins;
	I2C_pins.pGPIOx = GPIOB;
 800024a:	4b10      	ldr	r3, [pc, #64]	; (800028c <I2C1_GPIOInits+0x48>)
 800024c:	607b      	str	r3, [r7, #4]

	I2C_pins.GPIO_PinConfig.GPIO_PinMode = GPIO_PIN_MODE_ALTFN;
 800024e:	2302      	movs	r3, #2
 8000250:	727b      	strb	r3, [r7, #9]
	I2C_pins.GPIO_PinConfig.GPIO_PinAltFunMode = GPIO_PIN_ALT_FUN_4;
 8000252:	2304      	movs	r3, #4
 8000254:	737b      	strb	r3, [r7, #13]
	I2C_pins.GPIO_PinConfig.GPIO_PinOPType = GPIO_PIN_OP_TYPE_OD;
 8000256:	2301      	movs	r3, #1
 8000258:	733b      	strb	r3, [r7, #12]
	I2C_pins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 800025a:	2301      	movs	r3, #1
 800025c:	72fb      	strb	r3, [r7, #11]
	I2C_pins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_PIN_OP_SPEED_FAST;
 800025e:	2302      	movs	r3, #2
 8000260:	72bb      	strb	r3, [r7, #10]

	//Start GPIO peripheral clock
	GPIO_PeriClockControl(I2C_pins.pGPIOx, ENABLE);
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	2101      	movs	r1, #1
 8000266:	4618      	mov	r0, r3
 8000268:	f000 f8d4 	bl	8000414 <GPIO_PeriClockControl>

	//Configure I2C1_SCL
	I2C_pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 800026c:	2306      	movs	r3, #6
 800026e:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2C_pins);
 8000270:	1d3b      	adds	r3, r7, #4
 8000272:	4618      	mov	r0, r3
 8000274:	f000 f9a0 	bl	80005b8 <GPIO_Init>

	//Configure I2C1_SDA
	I2C_pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 8000278:	2307      	movs	r3, #7
 800027a:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2C_pins);
 800027c:	1d3b      	adds	r3, r7, #4
 800027e:	4618      	mov	r0, r3
 8000280:	f000 f99a 	bl	80005b8 <GPIO_Init>
}
 8000284:	bf00      	nop
 8000286:	3710      	adds	r7, #16
 8000288:	46bd      	mov	sp, r7
 800028a:	bd80      	pop	{r7, pc}
 800028c:	40020400 	.word	0x40020400

08000290 <I2C1_Inits>:

void I2C1_Inits(void){
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
	I2C1_handle.pI2Cx = I2C1;
 8000294:	4b09      	ldr	r3, [pc, #36]	; (80002bc <I2C1_Inits+0x2c>)
 8000296:	4a0a      	ldr	r2, [pc, #40]	; (80002c0 <I2C1_Inits+0x30>)
 8000298:	601a      	str	r2, [r3, #0]

	I2C1_handle.I2C_Config.I2C_ACKControl = I2C_ACK_ENABLE;
 800029a:	4b08      	ldr	r3, [pc, #32]	; (80002bc <I2C1_Inits+0x2c>)
 800029c:	2201      	movs	r2, #1
 800029e:	60da      	str	r2, [r3, #12]
	I2C1_handle.I2C_Config.I2C_DeviceAddress = MY_ADDR;
 80002a0:	4b06      	ldr	r3, [pc, #24]	; (80002bc <I2C1_Inits+0x2c>)
 80002a2:	2269      	movs	r2, #105	; 0x69
 80002a4:	721a      	strb	r2, [r3, #8]
	I2C1_handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 80002a6:	4b05      	ldr	r3, [pc, #20]	; (80002bc <I2C1_Inits+0x2c>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	611a      	str	r2, [r3, #16]
	I2C1_handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 80002ac:	4b03      	ldr	r3, [pc, #12]	; (80002bc <I2C1_Inits+0x2c>)
 80002ae:	4a05      	ldr	r2, [pc, #20]	; (80002c4 <I2C1_Inits+0x34>)
 80002b0:	605a      	str	r2, [r3, #4]

	I2C_Init(&I2C1_handle);
 80002b2:	4802      	ldr	r0, [pc, #8]	; (80002bc <I2C1_Inits+0x2c>)
 80002b4:	f000 fc6c 	bl	8000b90 <I2C_Init>
}
 80002b8:	bf00      	nop
 80002ba:	bd80      	pop	{r7, pc}
 80002bc:	20000040 	.word	0x20000040
 80002c0:	40005400 	.word	0x40005400
 80002c4:	000186a0 	.word	0x000186a0

080002c8 <main>:

int main(void){
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0
	GPIO_Button_Init();
 80002cc:	f7ff ffa2 	bl	8000214 <GPIO_Button_Init>
	I2C1_GPIOInits();
 80002d0:	f7ff ffb8 	bl	8000244 <I2C1_GPIOInits>
	I2C1_Inits();
 80002d4:	f7ff ffdc 	bl	8000290 <I2C1_Inits>

	I2C_IRQInterruptConfig(IRQ_NO_I2C1_EV, ENABLE);
 80002d8:	2101      	movs	r1, #1
 80002da:	201f      	movs	r0, #31
 80002dc:	f000 fd2e 	bl	8000d3c <I2C_IRQInterruptConfig>
	I2C_IRQInterruptConfig(IRQ_NO_I2C1_ER, ENABLE);
 80002e0:	2101      	movs	r1, #1
 80002e2:	2020      	movs	r0, #32
 80002e4:	f000 fd2a 	bl	8000d3c <I2C_IRQInterruptConfig>

	I2C_SlaveEnableDisableCallbackEvents(I2C1, ENABLE);
 80002e8:	2101      	movs	r1, #1
 80002ea:	4804      	ldr	r0, [pc, #16]	; (80002fc <main+0x34>)
 80002ec:	f000 ffa9 	bl	8001242 <I2C_SlaveEnableDisableCallbackEvents>

	I2C_ManageAcking(I2C1, ENABLE);
 80002f0:	2101      	movs	r1, #1
 80002f2:	4802      	ldr	r0, [pc, #8]	; (80002fc <main+0x34>)
 80002f4:	f000 ff8a 	bl	800120c <I2C_ManageAcking>

	while(1);
 80002f8:	e7fe      	b.n	80002f8 <main+0x30>
 80002fa:	bf00      	nop
 80002fc:	40005400 	.word	0x40005400

08000300 <I2C1_EV_IRQHandler>:
}

void I2C1_EV_IRQHandler(void){
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
	I2C_EV_IRQHandling(&I2C1_handle);
 8000304:	4802      	ldr	r0, [pc, #8]	; (8000310 <I2C1_EV_IRQHandler+0x10>)
 8000306:	f000 fdfe 	bl	8000f06 <I2C_EV_IRQHandling>
}
 800030a:	bf00      	nop
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	20000040 	.word	0x20000040

08000314 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void){
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
	I2C_ER_IRQHandling(&I2C1_handle);
 8000318:	4802      	ldr	r0, [pc, #8]	; (8000324 <I2C1_ER_IRQHandler+0x10>)
 800031a:	f000 fed6 	bl	80010ca <I2C_ER_IRQHandling>
}
 800031e:	bf00      	nop
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	20000040 	.word	0x20000040

08000328 <I2C_ApplicationEventCallback>:

void I2C_ApplicationEventCallback(I2C_Handle_t *pI2CHandle, uint8_t AppEv){
 8000328:	b590      	push	{r4, r7, lr}
 800032a:	b083      	sub	sp, #12
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
 8000330:	460b      	mov	r3, r1
 8000332:	70fb      	strb	r3, [r7, #3]
	static uint8_t command_code = 0;
	static uint8_t cnt = 0;

	if(AppEv == I2C_EV_DATA_REQ){
 8000334:	78fb      	ldrb	r3, [r7, #3]
 8000336:	2b08      	cmp	r3, #8
 8000338:	d122      	bne.n	8000380 <I2C_ApplicationEventCallback+0x58>
		//MASTER asks for data
		if(command_code == LEN_COMMAND){
 800033a:	4b1e      	ldr	r3, [pc, #120]	; (80003b4 <I2C_ApplicationEventCallback+0x8c>)
 800033c:	781b      	ldrb	r3, [r3, #0]
 800033e:	2b51      	cmp	r3, #81	; 0x51
 8000340:	d10b      	bne.n	800035a <I2C_ApplicationEventCallback+0x32>
			//Send LEN information to MASTER
			I2C_SlaveSendData(pI2CHandle->pI2Cx, strlen((char*)tx_buf));
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	681c      	ldr	r4, [r3, #0]
 8000346:	481c      	ldr	r0, [pc, #112]	; (80003b8 <I2C_ApplicationEventCallback+0x90>)
 8000348:	f7ff ff5c 	bl	8000204 <strlen>
 800034c:	4603      	mov	r3, r0
 800034e:	b2db      	uxtb	r3, r3
 8000350:	4619      	mov	r1, r3
 8000352:	4620      	mov	r0, r4
 8000354:	f000 fcd8 	bl	8000d08 <I2C_SlaveSendData>
		cnt = 0;
	} else if(AppEv == I2C_EV_STOP){
		//Happens only during reception
		//MASTER has ended I2C communication
	}
}
 8000358:	e028      	b.n	80003ac <I2C_ApplicationEventCallback+0x84>
		}else if(command_code == SEND_COMMAND){
 800035a:	4b16      	ldr	r3, [pc, #88]	; (80003b4 <I2C_ApplicationEventCallback+0x8c>)
 800035c:	781b      	ldrb	r3, [r3, #0]
 800035e:	2b52      	cmp	r3, #82	; 0x52
 8000360:	d124      	bne.n	80003ac <I2C_ApplicationEventCallback+0x84>
			I2C_SlaveSendData(pI2CHandle->pI2Cx, tx_buf[cnt++]);
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	6818      	ldr	r0, [r3, #0]
 8000366:	4b15      	ldr	r3, [pc, #84]	; (80003bc <I2C_ApplicationEventCallback+0x94>)
 8000368:	781b      	ldrb	r3, [r3, #0]
 800036a:	1c5a      	adds	r2, r3, #1
 800036c:	b2d1      	uxtb	r1, r2
 800036e:	4a13      	ldr	r2, [pc, #76]	; (80003bc <I2C_ApplicationEventCallback+0x94>)
 8000370:	7011      	strb	r1, [r2, #0]
 8000372:	461a      	mov	r2, r3
 8000374:	4b10      	ldr	r3, [pc, #64]	; (80003b8 <I2C_ApplicationEventCallback+0x90>)
 8000376:	5c9b      	ldrb	r3, [r3, r2]
 8000378:	4619      	mov	r1, r3
 800037a:	f000 fcc5 	bl	8000d08 <I2C_SlaveSendData>
}
 800037e:	e015      	b.n	80003ac <I2C_ApplicationEventCallback+0x84>
	} else if(AppEv == I2C_EV_DATA_RCV){
 8000380:	78fb      	ldrb	r3, [r7, #3]
 8000382:	2b09      	cmp	r3, #9
 8000384:	d109      	bne.n	800039a <I2C_ApplicationEventCallback+0x72>
		command_code = I2C_SlaveReceiveData(pI2CHandle->pI2Cx);
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	4618      	mov	r0, r3
 800038c:	f000 fcca 	bl	8000d24 <I2C_SlaveReceiveData>
 8000390:	4603      	mov	r3, r0
 8000392:	461a      	mov	r2, r3
 8000394:	4b07      	ldr	r3, [pc, #28]	; (80003b4 <I2C_ApplicationEventCallback+0x8c>)
 8000396:	701a      	strb	r2, [r3, #0]
}
 8000398:	e008      	b.n	80003ac <I2C_ApplicationEventCallback+0x84>
	} else if(AppEv == I2C_ERROR_AF){
 800039a:	78fb      	ldrb	r3, [r7, #3]
 800039c:	2b05      	cmp	r3, #5
 800039e:	d105      	bne.n	80003ac <I2C_ApplicationEventCallback+0x84>
		command_code = 0xFF;
 80003a0:	4b04      	ldr	r3, [pc, #16]	; (80003b4 <I2C_ApplicationEventCallback+0x8c>)
 80003a2:	22ff      	movs	r2, #255	; 0xff
 80003a4:	701a      	strb	r2, [r3, #0]
		cnt = 0;
 80003a6:	4b05      	ldr	r3, [pc, #20]	; (80003bc <I2C_ApplicationEventCallback+0x94>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	701a      	strb	r2, [r3, #0]
}
 80003ac:	bf00      	nop
 80003ae:	370c      	adds	r7, #12
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd90      	pop	{r4, r7, pc}
 80003b4:	2000003c 	.word	0x2000003c
 80003b8:	20000000 	.word	0x20000000
 80003bc:	2000003d 	.word	0x2000003d

080003c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003c0:	480d      	ldr	r0, [pc, #52]	; (80003f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003c2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003c4:	480d      	ldr	r0, [pc, #52]	; (80003fc <LoopForever+0x6>)
  ldr r1, =_edata
 80003c6:	490e      	ldr	r1, [pc, #56]	; (8000400 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003c8:	4a0e      	ldr	r2, [pc, #56]	; (8000404 <LoopForever+0xe>)
  movs r3, #0
 80003ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003cc:	e002      	b.n	80003d4 <LoopCopyDataInit>

080003ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003d2:	3304      	adds	r3, #4

080003d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003d8:	d3f9      	bcc.n	80003ce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003da:	4a0b      	ldr	r2, [pc, #44]	; (8000408 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003dc:	4c0b      	ldr	r4, [pc, #44]	; (800040c <LoopForever+0x16>)
  movs r3, #0
 80003de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003e0:	e001      	b.n	80003e6 <LoopFillZerobss>

080003e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003e4:	3204      	adds	r2, #4

080003e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003e8:	d3fb      	bcc.n	80003e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80003ea:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 80003ee:	f000 ffdd 	bl	80013ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003f2:	f7ff ff69 	bl	80002c8 <main>

080003f6 <LoopForever>:

LoopForever:
    b LoopForever
 80003f6:	e7fe      	b.n	80003f6 <LoopForever>
  ldr   r0, =_estack
 80003f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000400:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000404:	08001414 	.word	0x08001414
  ldr r2, =_sbss
 8000408:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 800040c:	20000070 	.word	0x20000070

08000410 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000410:	e7fe      	b.n	8000410 <ADC_IRQHandler>
	...

08000414 <GPIO_PeriClockControl>:
 * @return				- none
 *
 * @note				- none
 *
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
 8000414:	b480      	push	{r7}
 8000416:	b083      	sub	sp, #12
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
 800041c:	460b      	mov	r3, r1
 800041e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8000420:	78fb      	ldrb	r3, [r7, #3]
 8000422:	2b01      	cmp	r3, #1
 8000424:	d157      	bne.n	80004d6 <GPIO_PeriClockControl+0xc2>
		if(pGPIOx == GPIOA){
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	4a5a      	ldr	r2, [pc, #360]	; (8000594 <GPIO_PeriClockControl+0x180>)
 800042a:	4293      	cmp	r3, r2
 800042c:	d106      	bne.n	800043c <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 800042e:	4b5a      	ldr	r3, [pc, #360]	; (8000598 <GPIO_PeriClockControl+0x184>)
 8000430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000432:	4a59      	ldr	r2, [pc, #356]	; (8000598 <GPIO_PeriClockControl+0x184>)
 8000434:	f043 0301 	orr.w	r3, r3, #1
 8000438:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOG_PCLK_DI();
		} else if(pGPIOx == GPIOH){
			GPIOH_PCLK_DI();
		}
	}
}
 800043a:	e0a6      	b.n	800058a <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOB){
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	4a57      	ldr	r2, [pc, #348]	; (800059c <GPIO_PeriClockControl+0x188>)
 8000440:	4293      	cmp	r3, r2
 8000442:	d106      	bne.n	8000452 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000444:	4b54      	ldr	r3, [pc, #336]	; (8000598 <GPIO_PeriClockControl+0x184>)
 8000446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000448:	4a53      	ldr	r2, [pc, #332]	; (8000598 <GPIO_PeriClockControl+0x184>)
 800044a:	f043 0302 	orr.w	r3, r3, #2
 800044e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000450:	e09b      	b.n	800058a <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOC){
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	4a52      	ldr	r2, [pc, #328]	; (80005a0 <GPIO_PeriClockControl+0x18c>)
 8000456:	4293      	cmp	r3, r2
 8000458:	d106      	bne.n	8000468 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800045a:	4b4f      	ldr	r3, [pc, #316]	; (8000598 <GPIO_PeriClockControl+0x184>)
 800045c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800045e:	4a4e      	ldr	r2, [pc, #312]	; (8000598 <GPIO_PeriClockControl+0x184>)
 8000460:	f043 0304 	orr.w	r3, r3, #4
 8000464:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000466:	e090      	b.n	800058a <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOD){
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	4a4e      	ldr	r2, [pc, #312]	; (80005a4 <GPIO_PeriClockControl+0x190>)
 800046c:	4293      	cmp	r3, r2
 800046e:	d106      	bne.n	800047e <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000470:	4b49      	ldr	r3, [pc, #292]	; (8000598 <GPIO_PeriClockControl+0x184>)
 8000472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000474:	4a48      	ldr	r2, [pc, #288]	; (8000598 <GPIO_PeriClockControl+0x184>)
 8000476:	f043 0308 	orr.w	r3, r3, #8
 800047a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800047c:	e085      	b.n	800058a <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOE){
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	4a49      	ldr	r2, [pc, #292]	; (80005a8 <GPIO_PeriClockControl+0x194>)
 8000482:	4293      	cmp	r3, r2
 8000484:	d106      	bne.n	8000494 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000486:	4b44      	ldr	r3, [pc, #272]	; (8000598 <GPIO_PeriClockControl+0x184>)
 8000488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800048a:	4a43      	ldr	r2, [pc, #268]	; (8000598 <GPIO_PeriClockControl+0x184>)
 800048c:	f043 0310 	orr.w	r3, r3, #16
 8000490:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000492:	e07a      	b.n	800058a <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOF){
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	4a45      	ldr	r2, [pc, #276]	; (80005ac <GPIO_PeriClockControl+0x198>)
 8000498:	4293      	cmp	r3, r2
 800049a:	d106      	bne.n	80004aa <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 800049c:	4b3e      	ldr	r3, [pc, #248]	; (8000598 <GPIO_PeriClockControl+0x184>)
 800049e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004a0:	4a3d      	ldr	r2, [pc, #244]	; (8000598 <GPIO_PeriClockControl+0x184>)
 80004a2:	f043 0320 	orr.w	r3, r3, #32
 80004a6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004a8:	e06f      	b.n	800058a <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOG){
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	4a40      	ldr	r2, [pc, #256]	; (80005b0 <GPIO_PeriClockControl+0x19c>)
 80004ae:	4293      	cmp	r3, r2
 80004b0:	d106      	bne.n	80004c0 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80004b2:	4b39      	ldr	r3, [pc, #228]	; (8000598 <GPIO_PeriClockControl+0x184>)
 80004b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004b6:	4a38      	ldr	r2, [pc, #224]	; (8000598 <GPIO_PeriClockControl+0x184>)
 80004b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004bc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004be:	e064      	b.n	800058a <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOH){
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	4a3c      	ldr	r2, [pc, #240]	; (80005b4 <GPIO_PeriClockControl+0x1a0>)
 80004c4:	4293      	cmp	r3, r2
 80004c6:	d160      	bne.n	800058a <GPIO_PeriClockControl+0x176>
			GPIOH_PCLK_EN();
 80004c8:	4b33      	ldr	r3, [pc, #204]	; (8000598 <GPIO_PeriClockControl+0x184>)
 80004ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004cc:	4a32      	ldr	r2, [pc, #200]	; (8000598 <GPIO_PeriClockControl+0x184>)
 80004ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004d2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004d4:	e059      	b.n	800058a <GPIO_PeriClockControl+0x176>
	} else if(EnorDi == DISABLE){
 80004d6:	78fb      	ldrb	r3, [r7, #3]
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d156      	bne.n	800058a <GPIO_PeriClockControl+0x176>
		if(pGPIOx == GPIOA){
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	4a2d      	ldr	r2, [pc, #180]	; (8000594 <GPIO_PeriClockControl+0x180>)
 80004e0:	4293      	cmp	r3, r2
 80004e2:	d106      	bne.n	80004f2 <GPIO_PeriClockControl+0xde>
			GPIOA_PCLK_DI();
 80004e4:	4b2c      	ldr	r3, [pc, #176]	; (8000598 <GPIO_PeriClockControl+0x184>)
 80004e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e8:	4a2b      	ldr	r2, [pc, #172]	; (8000598 <GPIO_PeriClockControl+0x184>)
 80004ea:	f023 0301 	bic.w	r3, r3, #1
 80004ee:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004f0:	e04b      	b.n	800058a <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOB){
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	4a29      	ldr	r2, [pc, #164]	; (800059c <GPIO_PeriClockControl+0x188>)
 80004f6:	4293      	cmp	r3, r2
 80004f8:	d106      	bne.n	8000508 <GPIO_PeriClockControl+0xf4>
			GPIOB_PCLK_DI();
 80004fa:	4b27      	ldr	r3, [pc, #156]	; (8000598 <GPIO_PeriClockControl+0x184>)
 80004fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fe:	4a26      	ldr	r2, [pc, #152]	; (8000598 <GPIO_PeriClockControl+0x184>)
 8000500:	f023 0302 	bic.w	r3, r3, #2
 8000504:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000506:	e040      	b.n	800058a <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOC){
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	4a25      	ldr	r2, [pc, #148]	; (80005a0 <GPIO_PeriClockControl+0x18c>)
 800050c:	4293      	cmp	r3, r2
 800050e:	d106      	bne.n	800051e <GPIO_PeriClockControl+0x10a>
			GPIOC_PCLK_DI();
 8000510:	4b21      	ldr	r3, [pc, #132]	; (8000598 <GPIO_PeriClockControl+0x184>)
 8000512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000514:	4a20      	ldr	r2, [pc, #128]	; (8000598 <GPIO_PeriClockControl+0x184>)
 8000516:	f023 0304 	bic.w	r3, r3, #4
 800051a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800051c:	e035      	b.n	800058a <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOD){
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	4a20      	ldr	r2, [pc, #128]	; (80005a4 <GPIO_PeriClockControl+0x190>)
 8000522:	4293      	cmp	r3, r2
 8000524:	d106      	bne.n	8000534 <GPIO_PeriClockControl+0x120>
			GPIOD_PCLK_DI();
 8000526:	4b1c      	ldr	r3, [pc, #112]	; (8000598 <GPIO_PeriClockControl+0x184>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052a:	4a1b      	ldr	r2, [pc, #108]	; (8000598 <GPIO_PeriClockControl+0x184>)
 800052c:	f023 0308 	bic.w	r3, r3, #8
 8000530:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000532:	e02a      	b.n	800058a <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOE){
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	4a1c      	ldr	r2, [pc, #112]	; (80005a8 <GPIO_PeriClockControl+0x194>)
 8000538:	4293      	cmp	r3, r2
 800053a:	d106      	bne.n	800054a <GPIO_PeriClockControl+0x136>
			GPIOE_PCLK_DI();
 800053c:	4b16      	ldr	r3, [pc, #88]	; (8000598 <GPIO_PeriClockControl+0x184>)
 800053e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000540:	4a15      	ldr	r2, [pc, #84]	; (8000598 <GPIO_PeriClockControl+0x184>)
 8000542:	f023 0310 	bic.w	r3, r3, #16
 8000546:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000548:	e01f      	b.n	800058a <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOF){
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	4a17      	ldr	r2, [pc, #92]	; (80005ac <GPIO_PeriClockControl+0x198>)
 800054e:	4293      	cmp	r3, r2
 8000550:	d106      	bne.n	8000560 <GPIO_PeriClockControl+0x14c>
			GPIOF_PCLK_DI();
 8000552:	4b11      	ldr	r3, [pc, #68]	; (8000598 <GPIO_PeriClockControl+0x184>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000556:	4a10      	ldr	r2, [pc, #64]	; (8000598 <GPIO_PeriClockControl+0x184>)
 8000558:	f023 0320 	bic.w	r3, r3, #32
 800055c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800055e:	e014      	b.n	800058a <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOG){
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	4a13      	ldr	r2, [pc, #76]	; (80005b0 <GPIO_PeriClockControl+0x19c>)
 8000564:	4293      	cmp	r3, r2
 8000566:	d106      	bne.n	8000576 <GPIO_PeriClockControl+0x162>
			GPIOG_PCLK_DI();
 8000568:	4b0b      	ldr	r3, [pc, #44]	; (8000598 <GPIO_PeriClockControl+0x184>)
 800056a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056c:	4a0a      	ldr	r2, [pc, #40]	; (8000598 <GPIO_PeriClockControl+0x184>)
 800056e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000572:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000574:	e009      	b.n	800058a <GPIO_PeriClockControl+0x176>
		} else if(pGPIOx == GPIOH){
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	4a0e      	ldr	r2, [pc, #56]	; (80005b4 <GPIO_PeriClockControl+0x1a0>)
 800057a:	4293      	cmp	r3, r2
 800057c:	d105      	bne.n	800058a <GPIO_PeriClockControl+0x176>
			GPIOH_PCLK_DI();
 800057e:	4b06      	ldr	r3, [pc, #24]	; (8000598 <GPIO_PeriClockControl+0x184>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000582:	4a05      	ldr	r2, [pc, #20]	; (8000598 <GPIO_PeriClockControl+0x184>)
 8000584:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000588:	6313      	str	r3, [r2, #48]	; 0x30
}
 800058a:	bf00      	nop
 800058c:	370c      	adds	r7, #12
 800058e:	46bd      	mov	sp, r7
 8000590:	bc80      	pop	{r7}
 8000592:	4770      	bx	lr
 8000594:	40020000 	.word	0x40020000
 8000598:	40023800 	.word	0x40023800
 800059c:	40020400 	.word	0x40020400
 80005a0:	40020800 	.word	0x40020800
 80005a4:	40020c00 	.word	0x40020c00
 80005a8:	40021000 	.word	0x40021000
 80005ac:	40021400 	.word	0x40021400
 80005b0:	40021800 	.word	0x40021800
 80005b4:	40021c00 	.word	0x40021c00

080005b8 <GPIO_Init>:
 * @return				- none
 *
 * @note				- none
 *
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 80005b8:	b480      	push	{r7}
 80005ba:	b08b      	sub	sp, #44	; 0x2c
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
	uint32_t reset_value = 0;
 80005c0:	2300      	movs	r3, #0
 80005c2:	627b      	str	r3, [r7, #36]	; 0x24

	//reset, then set mode register
	if( pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_PIN_MODE_ANALOG){
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	795b      	ldrb	r3, [r3, #5]
 80005c8:	2b03      	cmp	r3, #3
 80005ca:	d823      	bhi.n	8000614 <GPIO_Init+0x5c>
		reset_value = (0x3 << ((2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)));
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	791b      	ldrb	r3, [r3, #4]
 80005d0:	005b      	lsls	r3, r3, #1
 80005d2:	2203      	movs	r2, #3
 80005d4:	fa02 f303 	lsl.w	r3, r2, r3
 80005d8:	627b      	str	r3, [r7, #36]	; 0x24
		pGPIOHandle->pGPIOx->MODER &= ~(reset_value);
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	6819      	ldr	r1, [r3, #0]
 80005e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005e2:	43da      	mvns	r2, r3
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	400a      	ands	r2, r1
 80005ea:	601a      	str	r2, [r3, #0]
		reset_value = 0;
 80005ec:	2300      	movs	r3, #0
 80005ee:	627b      	str	r3, [r7, #36]	; 0x24

		uint32_t moder_value = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	795b      	ldrb	r3, [r3, #5]
 80005f4:	461a      	mov	r2, r3
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	791b      	ldrb	r3, [r3, #4]
 80005fa:	005b      	lsls	r3, r3, #1
 80005fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000600:	61fb      	str	r3, [r7, #28]
		pGPIOHandle->pGPIOx->MODER |= moder_value;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	6819      	ldr	r1, [r3, #0]
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	69fa      	ldr	r2, [r7, #28]
 800060e:	430a      	orrs	r2, r1
 8000610:	601a      	str	r2, [r3, #0]
 8000612:	e0ee      	b.n	80007f2 <GPIO_Init+0x23a>
	} else{
		//interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_PIN_MODE_IT_FT){
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	795b      	ldrb	r3, [r3, #5]
 8000618:	2b04      	cmp	r3, #4
 800061a:	d11a      	bne.n	8000652 <GPIO_Init+0x9a>
			//reset RTSR
			reset_value = (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	791b      	ldrb	r3, [r3, #4]
 8000620:	461a      	mov	r2, r3
 8000622:	2301      	movs	r3, #1
 8000624:	4093      	lsls	r3, r2
 8000626:	627b      	str	r3, [r7, #36]	; 0x24
			EXTI->RTSR &= ~(reset_value);
 8000628:	4b49      	ldr	r3, [pc, #292]	; (8000750 <GPIO_Init+0x198>)
 800062a:	689a      	ldr	r2, [r3, #8]
 800062c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800062e:	43db      	mvns	r3, r3
 8000630:	4947      	ldr	r1, [pc, #284]	; (8000750 <GPIO_Init+0x198>)
 8000632:	4013      	ands	r3, r2
 8000634:	608b      	str	r3, [r1, #8]
			reset_value = 0;
 8000636:	2300      	movs	r3, #0
 8000638:	627b      	str	r3, [r7, #36]	; 0x24

			//configure FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800063a:	4b45      	ldr	r3, [pc, #276]	; (8000750 <GPIO_Init+0x198>)
 800063c:	68db      	ldr	r3, [r3, #12]
 800063e:	687a      	ldr	r2, [r7, #4]
 8000640:	7912      	ldrb	r2, [r2, #4]
 8000642:	4611      	mov	r1, r2
 8000644:	2201      	movs	r2, #1
 8000646:	408a      	lsls	r2, r1
 8000648:	4611      	mov	r1, r2
 800064a:	4a41      	ldr	r2, [pc, #260]	; (8000750 <GPIO_Init+0x198>)
 800064c:	430b      	orrs	r3, r1
 800064e:	60d3      	str	r3, [r2, #12]
 8000650:	e038      	b.n	80006c4 <GPIO_Init+0x10c>
		} else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_PIN_MODE_IT_RT){
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	795b      	ldrb	r3, [r3, #5]
 8000656:	2b05      	cmp	r3, #5
 8000658:	d11a      	bne.n	8000690 <GPIO_Init+0xd8>
			//reset FTSR
			reset_value = (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	791b      	ldrb	r3, [r3, #4]
 800065e:	461a      	mov	r2, r3
 8000660:	2301      	movs	r3, #1
 8000662:	4093      	lsls	r3, r2
 8000664:	627b      	str	r3, [r7, #36]	; 0x24
			EXTI->FTSR &= ~(reset_value);
 8000666:	4b3a      	ldr	r3, [pc, #232]	; (8000750 <GPIO_Init+0x198>)
 8000668:	68da      	ldr	r2, [r3, #12]
 800066a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800066c:	43db      	mvns	r3, r3
 800066e:	4938      	ldr	r1, [pc, #224]	; (8000750 <GPIO_Init+0x198>)
 8000670:	4013      	ands	r3, r2
 8000672:	60cb      	str	r3, [r1, #12]
			reset_value = 0;
 8000674:	2300      	movs	r3, #0
 8000676:	627b      	str	r3, [r7, #36]	; 0x24

			//configure RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000678:	4b35      	ldr	r3, [pc, #212]	; (8000750 <GPIO_Init+0x198>)
 800067a:	689b      	ldr	r3, [r3, #8]
 800067c:	687a      	ldr	r2, [r7, #4]
 800067e:	7912      	ldrb	r2, [r2, #4]
 8000680:	4611      	mov	r1, r2
 8000682:	2201      	movs	r2, #1
 8000684:	408a      	lsls	r2, r1
 8000686:	4611      	mov	r1, r2
 8000688:	4a31      	ldr	r2, [pc, #196]	; (8000750 <GPIO_Init+0x198>)
 800068a:	430b      	orrs	r3, r1
 800068c:	6093      	str	r3, [r2, #8]
 800068e:	e019      	b.n	80006c4 <GPIO_Init+0x10c>
		} else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_PIN_MODE_IT_RFT){
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	795b      	ldrb	r3, [r3, #5]
 8000694:	2b06      	cmp	r3, #6
 8000696:	d115      	bne.n	80006c4 <GPIO_Init+0x10c>
			//configure RTSR and FTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000698:	4b2d      	ldr	r3, [pc, #180]	; (8000750 <GPIO_Init+0x198>)
 800069a:	689b      	ldr	r3, [r3, #8]
 800069c:	687a      	ldr	r2, [r7, #4]
 800069e:	7912      	ldrb	r2, [r2, #4]
 80006a0:	4611      	mov	r1, r2
 80006a2:	2201      	movs	r2, #1
 80006a4:	408a      	lsls	r2, r1
 80006a6:	4611      	mov	r1, r2
 80006a8:	4a29      	ldr	r2, [pc, #164]	; (8000750 <GPIO_Init+0x198>)
 80006aa:	430b      	orrs	r3, r1
 80006ac:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006ae:	4b28      	ldr	r3, [pc, #160]	; (8000750 <GPIO_Init+0x198>)
 80006b0:	68db      	ldr	r3, [r3, #12]
 80006b2:	687a      	ldr	r2, [r7, #4]
 80006b4:	7912      	ldrb	r2, [r2, #4]
 80006b6:	4611      	mov	r1, r2
 80006b8:	2201      	movs	r2, #1
 80006ba:	408a      	lsls	r2, r1
 80006bc:	4611      	mov	r1, r2
 80006be:	4a24      	ldr	r2, [pc, #144]	; (8000750 <GPIO_Init+0x198>)
 80006c0:	430b      	orrs	r3, r1
 80006c2:	60d3      	str	r3, [r2, #12]
		}

		//configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t index = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4);
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	791b      	ldrb	r3, [r3, #4]
 80006c8:	089b      	lsrs	r3, r3, #2
 80006ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		uint8_t position = ((pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4) * 4);
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	791b      	ldrb	r3, [r3, #4]
 80006d2:	f003 0303 	and.w	r3, r3, #3
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	009b      	lsls	r3, r3, #2
 80006da:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		uint8_t port_code = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	4a1c      	ldr	r2, [pc, #112]	; (8000754 <GPIO_Init+0x19c>)
 80006e4:	4293      	cmp	r3, r2
 80006e6:	d045      	beq.n	8000774 <GPIO_Init+0x1bc>
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a1a      	ldr	r2, [pc, #104]	; (8000758 <GPIO_Init+0x1a0>)
 80006ee:	4293      	cmp	r3, r2
 80006f0:	d02b      	beq.n	800074a <GPIO_Init+0x192>
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4a19      	ldr	r2, [pc, #100]	; (800075c <GPIO_Init+0x1a4>)
 80006f8:	4293      	cmp	r3, r2
 80006fa:	d024      	beq.n	8000746 <GPIO_Init+0x18e>
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a17      	ldr	r2, [pc, #92]	; (8000760 <GPIO_Init+0x1a8>)
 8000702:	4293      	cmp	r3, r2
 8000704:	d01d      	beq.n	8000742 <GPIO_Init+0x18a>
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4a16      	ldr	r2, [pc, #88]	; (8000764 <GPIO_Init+0x1ac>)
 800070c:	4293      	cmp	r3, r2
 800070e:	d016      	beq.n	800073e <GPIO_Init+0x186>
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a14      	ldr	r2, [pc, #80]	; (8000768 <GPIO_Init+0x1b0>)
 8000716:	4293      	cmp	r3, r2
 8000718:	d00f      	beq.n	800073a <GPIO_Init+0x182>
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	4a13      	ldr	r2, [pc, #76]	; (800076c <GPIO_Init+0x1b4>)
 8000720:	4293      	cmp	r3, r2
 8000722:	d008      	beq.n	8000736 <GPIO_Init+0x17e>
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a11      	ldr	r2, [pc, #68]	; (8000770 <GPIO_Init+0x1b8>)
 800072a:	4293      	cmp	r3, r2
 800072c:	d101      	bne.n	8000732 <GPIO_Init+0x17a>
 800072e:	2307      	movs	r3, #7
 8000730:	e021      	b.n	8000776 <GPIO_Init+0x1be>
 8000732:	2300      	movs	r3, #0
 8000734:	e01f      	b.n	8000776 <GPIO_Init+0x1be>
 8000736:	2306      	movs	r3, #6
 8000738:	e01d      	b.n	8000776 <GPIO_Init+0x1be>
 800073a:	2305      	movs	r3, #5
 800073c:	e01b      	b.n	8000776 <GPIO_Init+0x1be>
 800073e:	2304      	movs	r3, #4
 8000740:	e019      	b.n	8000776 <GPIO_Init+0x1be>
 8000742:	2303      	movs	r3, #3
 8000744:	e017      	b.n	8000776 <GPIO_Init+0x1be>
 8000746:	2302      	movs	r3, #2
 8000748:	e015      	b.n	8000776 <GPIO_Init+0x1be>
 800074a:	2301      	movs	r3, #1
 800074c:	e013      	b.n	8000776 <GPIO_Init+0x1be>
 800074e:	bf00      	nop
 8000750:	40013c00 	.word	0x40013c00
 8000754:	40020000 	.word	0x40020000
 8000758:	40020400 	.word	0x40020400
 800075c:	40020800 	.word	0x40020800
 8000760:	40020c00 	.word	0x40020c00
 8000764:	40021000 	.word	0x40021000
 8000768:	40021400 	.word	0x40021400
 800076c:	40021800 	.word	0x40021800
 8000770:	40021c00 	.word	0x40021c00
 8000774:	2300      	movs	r3, #0
 8000776:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

		SYSCFG_PCLK_EN();
 800077a:	4b71      	ldr	r3, [pc, #452]	; (8000940 <GPIO_Init+0x388>)
 800077c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800077e:	4a70      	ldr	r2, [pc, #448]	; (8000940 <GPIO_Init+0x388>)
 8000780:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000784:	6453      	str	r3, [r2, #68]	; 0x44

		reset_value = (0xF << position);
 8000786:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800078a:	220f      	movs	r2, #15
 800078c:	fa02 f303 	lsl.w	r3, r2, r3
 8000790:	627b      	str	r3, [r7, #36]	; 0x24
		SYSCFG->EXTICR[index] &= ~(reset_value);
 8000792:	4a6c      	ldr	r2, [pc, #432]	; (8000944 <GPIO_Init+0x38c>)
 8000794:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000798:	3302      	adds	r3, #2
 800079a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800079e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007a0:	43da      	mvns	r2, r3
 80007a2:	4868      	ldr	r0, [pc, #416]	; (8000944 <GPIO_Init+0x38c>)
 80007a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80007a8:	400a      	ands	r2, r1
 80007aa:	3302      	adds	r3, #2
 80007ac:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		reset_value = 0;
 80007b0:	2300      	movs	r3, #0
 80007b2:	627b      	str	r3, [r7, #36]	; 0x24

		SYSCFG->EXTICR[index] |= (port_code << position);
 80007b4:	4a63      	ldr	r2, [pc, #396]	; (8000944 <GPIO_Init+0x38c>)
 80007b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80007ba:	3302      	adds	r3, #2
 80007bc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007c0:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 80007c4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80007c8:	fa01 f303 	lsl.w	r3, r1, r3
 80007cc:	4618      	mov	r0, r3
 80007ce:	495d      	ldr	r1, [pc, #372]	; (8000944 <GPIO_Init+0x38c>)
 80007d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80007d4:	4302      	orrs	r2, r0
 80007d6:	3302      	adds	r3, #2
 80007d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		//enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007dc:	4b5a      	ldr	r3, [pc, #360]	; (8000948 <GPIO_Init+0x390>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	687a      	ldr	r2, [r7, #4]
 80007e2:	7912      	ldrb	r2, [r2, #4]
 80007e4:	4611      	mov	r1, r2
 80007e6:	2201      	movs	r2, #1
 80007e8:	408a      	lsls	r2, r1
 80007ea:	4611      	mov	r1, r2
 80007ec:	4a56      	ldr	r2, [pc, #344]	; (8000948 <GPIO_Init+0x390>)
 80007ee:	430b      	orrs	r3, r1
 80007f0:	6013      	str	r3, [r2, #0]
	}

	// reset, then set speed register
	reset_value = (0x3 << ((2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)));
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	791b      	ldrb	r3, [r3, #4]
 80007f6:	005b      	lsls	r3, r3, #1
 80007f8:	2203      	movs	r2, #3
 80007fa:	fa02 f303 	lsl.w	r3, r2, r3
 80007fe:	627b      	str	r3, [r7, #36]	; 0x24
	pGPIOHandle->pGPIOx->OSPEEDER &= ~(reset_value);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	6899      	ldr	r1, [r3, #8]
 8000806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000808:	43da      	mvns	r2, r3
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	400a      	ands	r2, r1
 8000810:	609a      	str	r2, [r3, #8]
	reset_value = 0;
 8000812:	2300      	movs	r3, #0
 8000814:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ospeedr_value = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	799b      	ldrb	r3, [r3, #6]
 800081a:	461a      	mov	r2, r3
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	791b      	ldrb	r3, [r3, #4]
 8000820:	005b      	lsls	r3, r3, #1
 8000822:	fa02 f303 	lsl.w	r3, r2, r3
 8000826:	61bb      	str	r3, [r7, #24]
	pGPIOHandle->pGPIOx->OSPEEDER |= ospeedr_value;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	6899      	ldr	r1, [r3, #8]
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	69ba      	ldr	r2, [r7, #24]
 8000834:	430a      	orrs	r2, r1
 8000836:	609a      	str	r2, [r3, #8]

	//reset, then set pupd register
	reset_value = (0x3 << ((2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)));
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	791b      	ldrb	r3, [r3, #4]
 800083c:	005b      	lsls	r3, r3, #1
 800083e:	2203      	movs	r2, #3
 8000840:	fa02 f303 	lsl.w	r3, r2, r3
 8000844:	627b      	str	r3, [r7, #36]	; 0x24
	pGPIOHandle->pGPIOx->PUPDR &= ~(reset_value);
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	68d9      	ldr	r1, [r3, #12]
 800084c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800084e:	43da      	mvns	r2, r3
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	400a      	ands	r2, r1
 8000856:	60da      	str	r2, [r3, #12]
	reset_value = 0;
 8000858:	2300      	movs	r3, #0
 800085a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t pupdr_value = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	79db      	ldrb	r3, [r3, #7]
 8000860:	461a      	mov	r2, r3
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	791b      	ldrb	r3, [r3, #4]
 8000866:	005b      	lsls	r3, r3, #1
 8000868:	fa02 f303 	lsl.w	r3, r2, r3
 800086c:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR |= pupdr_value;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	68d9      	ldr	r1, [r3, #12]
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	697a      	ldr	r2, [r7, #20]
 800087a:	430a      	orrs	r2, r1
 800087c:	60da      	str	r2, [r3, #12]

	//reset, then set output type register
	reset_value = (0x1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	791b      	ldrb	r3, [r3, #4]
 8000882:	461a      	mov	r2, r3
 8000884:	2301      	movs	r3, #1
 8000886:	4093      	lsls	r3, r2
 8000888:	627b      	str	r3, [r7, #36]	; 0x24
	pGPIOHandle->pGPIOx->OTYPER &= ~(reset_value);
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	6859      	ldr	r1, [r3, #4]
 8000890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000892:	43da      	mvns	r2, r3
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	400a      	ands	r2, r1
 800089a:	605a      	str	r2, [r3, #4]
	reset_value = 0;
 800089c:	2300      	movs	r3, #0
 800089e:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t optyper_value = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	7a1b      	ldrb	r3, [r3, #8]
 80008a4:	461a      	mov	r2, r3
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	791b      	ldrb	r3, [r3, #4]
 80008aa:	fa02 f303 	lsl.w	r3, r2, r3
 80008ae:	613b      	str	r3, [r7, #16]
	pGPIOHandle->pGPIOx->OTYPER |= optyper_value;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	6859      	ldr	r1, [r3, #4]
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	693a      	ldr	r2, [r7, #16]
 80008bc:	430a      	orrs	r2, r1
 80008be:	605a      	str	r2, [r3, #4]

	//reset, then set altfn register
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_PIN_MODE_ALTFN){
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	795b      	ldrb	r3, [r3, #5]
 80008c4:	2b02      	cmp	r3, #2
 80008c6:	d135      	bne.n	8000934 <GPIO_Init+0x37c>
		uint8_t index = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	791b      	ldrb	r3, [r3, #4]
 80008cc:	08db      	lsrs	r3, r3, #3
 80008ce:	73fb      	strb	r3, [r7, #15]
		uint8_t position = ((pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8) * 4);
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	791b      	ldrb	r3, [r3, #4]
 80008d4:	f003 0307 	and.w	r3, r3, #7
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	009b      	lsls	r3, r3, #2
 80008dc:	73bb      	strb	r3, [r7, #14]

		//reset
		reset_value = (0xF << position);
 80008de:	7bbb      	ldrb	r3, [r7, #14]
 80008e0:	220f      	movs	r2, #15
 80008e2:	fa02 f303 	lsl.w	r3, r2, r3
 80008e6:	627b      	str	r3, [r7, #36]	; 0x24
		pGPIOHandle->pGPIOx->AFR[index] &= ~(reset_value);
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	7bfa      	ldrb	r2, [r7, #15]
 80008ee:	3208      	adds	r2, #8
 80008f0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80008f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008f6:	43d9      	mvns	r1, r3
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	7bfa      	ldrb	r2, [r7, #15]
 80008fe:	4001      	ands	r1, r0
 8000900:	3208      	adds	r2, #8
 8000902:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		reset_value = 0;
 8000906:	2300      	movs	r3, #0
 8000908:	627b      	str	r3, [r7, #36]	; 0x24

		//set
		uint32_t afr_value = (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << position);
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	7a5b      	ldrb	r3, [r3, #9]
 800090e:	461a      	mov	r2, r3
 8000910:	7bbb      	ldrb	r3, [r7, #14]
 8000912:	fa02 f303 	lsl.w	r3, r2, r3
 8000916:	60bb      	str	r3, [r7, #8]
		pGPIOHandle->pGPIOx->AFR[index] |= afr_value;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	7bfa      	ldrb	r2, [r7, #15]
 800091e:	3208      	adds	r2, #8
 8000920:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	7bfa      	ldrb	r2, [r7, #15]
 800092a:	68b9      	ldr	r1, [r7, #8]
 800092c:	4301      	orrs	r1, r0
 800092e:	3208      	adds	r2, #8
 8000930:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8000934:	bf00      	nop
 8000936:	372c      	adds	r7, #44	; 0x2c
 8000938:	46bd      	mov	sp, r7
 800093a:	bc80      	pop	{r7}
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	40023800 	.word	0x40023800
 8000944:	40013800 	.word	0x40013800
 8000948:	40013c00 	.word	0x40013c00

0800094c <I2C_ExecuteAddressPhaseWrite>:
 * @return				- none
 *
 * @note				- none
 *
 */
static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr){
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
 8000954:	460b      	mov	r3, r1
 8000956:	70fb      	strb	r3, [r7, #3]
	//Make sure there is space for r/w bit
	SlaveAddr = SlaveAddr << 1;
 8000958:	78fb      	ldrb	r3, [r7, #3]
 800095a:	005b      	lsls	r3, r3, #1
 800095c:	70fb      	strb	r3, [r7, #3]
	//Clear 0th bit so r/w is set to write
	SlaveAddr &= ~(1 << 0);
 800095e:	78fb      	ldrb	r3, [r7, #3]
 8000960:	f023 0301 	bic.w	r3, r3, #1
 8000964:	70fb      	strb	r3, [r7, #3]
	//Place address into Data Register
	pI2Cx->DR = SlaveAddr;
 8000966:	78fa      	ldrb	r2, [r7, #3]
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	611a      	str	r2, [r3, #16]
}
 800096c:	bf00      	nop
 800096e:	370c      	adds	r7, #12
 8000970:	46bd      	mov	sp, r7
 8000972:	bc80      	pop	{r7}
 8000974:	4770      	bx	lr

08000976 <I2C_ExecuteAddressPhaseRead>:
 * @return				- none
 *
 * @note				- none
 *
 */
static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr){
 8000976:	b480      	push	{r7}
 8000978:	b083      	sub	sp, #12
 800097a:	af00      	add	r7, sp, #0
 800097c:	6078      	str	r0, [r7, #4]
 800097e:	460b      	mov	r3, r1
 8000980:	70fb      	strb	r3, [r7, #3]
	//Make sure there is space for r/w bit
	SlaveAddr = SlaveAddr << 1;
 8000982:	78fb      	ldrb	r3, [r7, #3]
 8000984:	005b      	lsls	r3, r3, #1
 8000986:	70fb      	strb	r3, [r7, #3]
	//Clear 0th bit so r/w is set to read
	SlaveAddr |= (1 << 0);
 8000988:	78fb      	ldrb	r3, [r7, #3]
 800098a:	f043 0301 	orr.w	r3, r3, #1
 800098e:	70fb      	strb	r3, [r7, #3]
	//Place address into Data Register
	pI2Cx->DR = SlaveAddr;
 8000990:	78fa      	ldrb	r2, [r7, #3]
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	611a      	str	r2, [r3, #16]
}
 8000996:	bf00      	nop
 8000998:	370c      	adds	r7, #12
 800099a:	46bd      	mov	sp, r7
 800099c:	bc80      	pop	{r7}
 800099e:	4770      	bx	lr

080009a0 <I2C_ClearADDRFlag>:
 * @return				- none
 *
 * @note				- none
 *
 */
static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle){
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b084      	sub	sp, #16
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
	uint8_t dummy_read;

	//Check for device mode (MASTER/SLAVE)
	if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL)){
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	699b      	ldr	r3, [r3, #24]
 80009ae:	f003 0301 	and.w	r3, r3, #1
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d020      	beq.n	80009f8 <I2C_ClearADDRFlag+0x58>
		//MASTER mode
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX){
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80009bc:	2b01      	cmp	r3, #1
 80009be:	d112      	bne.n	80009e6 <I2C_ClearADDRFlag+0x46>
			if(pI2CHandle->RxSize == 1){
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009c4:	2b01      	cmp	r3, #1
 80009c6:	d11f      	bne.n	8000a08 <I2C_ClearADDRFlag+0x68>
				//First disable ACK
				I2C_ManageAcking(pI2CHandle->pI2Cx, DISABLE);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	2100      	movs	r1, #0
 80009ce:	4618      	mov	r0, r3
 80009d0:	f000 fc1c 	bl	800120c <I2C_ManageAcking>

				//Clear ADDR FLAG (Read SR1, Read SR2)
				dummy_read = pI2CHandle->pI2Cx->SR1;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	695b      	ldr	r3, [r3, #20]
 80009da:	73fb      	strb	r3, [r7, #15]
				dummy_read = pI2CHandle->pI2Cx->SR2;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	699b      	ldr	r3, [r3, #24]
 80009e2:	73fb      	strb	r3, [r7, #15]
		//Clear ADDR FLAG (Read SR1, Read SR2)
		dummy_read = pI2CHandle->pI2Cx->SR1;
		dummy_read = pI2CHandle->pI2Cx->SR2;
		(void)dummy_read;
	}
}
 80009e4:	e010      	b.n	8000a08 <I2C_ClearADDRFlag+0x68>
			dummy_read = pI2CHandle->pI2Cx->SR1;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	695b      	ldr	r3, [r3, #20]
 80009ec:	73fb      	strb	r3, [r7, #15]
			dummy_read = pI2CHandle->pI2Cx->SR2;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	699b      	ldr	r3, [r3, #24]
 80009f4:	73fb      	strb	r3, [r7, #15]
}
 80009f6:	e007      	b.n	8000a08 <I2C_ClearADDRFlag+0x68>
		dummy_read = pI2CHandle->pI2Cx->SR1;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	695b      	ldr	r3, [r3, #20]
 80009fe:	73fb      	strb	r3, [r7, #15]
		dummy_read = pI2CHandle->pI2Cx->SR2;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	699b      	ldr	r3, [r3, #24]
 8000a06:	73fb      	strb	r3, [r7, #15]
}
 8000a08:	bf00      	nop
 8000a0a:	3710      	adds	r7, #16
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <I2C_MasterHandleTXEInterrupt>:
 * @return				- none
 *
 * @note				- none
 *
 */
void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle){
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
	if(pI2CHandle->TxLen > 0){
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	69db      	ldr	r3, [r3, #28]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d00f      	beq.n	8000a40 <I2C_MasterHandleTXEInterrupt+0x30>
		//load data in DR
		pI2CHandle->pI2Cx->DR = *(pI2CHandle->pTxBuffer);
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	695b      	ldr	r3, [r3, #20]
 8000a24:	781a      	ldrb	r2, [r3, #0]
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	611a      	str	r2, [r3, #16]

		//Decrement the LEN
		pI2CHandle->TxLen--;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	69db      	ldr	r3, [r3, #28]
 8000a30:	1e5a      	subs	r2, r3, #1
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	61da      	str	r2, [r3, #28]

		//Increment the buffer
		pI2CHandle->pTxBuffer++;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	695b      	ldr	r3, [r3, #20]
 8000a3a:	1c5a      	adds	r2, r3, #1
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	615a      	str	r2, [r3, #20]
	}
}
 8000a40:	bf00      	nop
 8000a42:	370c      	adds	r7, #12
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bc80      	pop	{r7}
 8000a48:	4770      	bx	lr

08000a4a <I2C_MasterHandleRXNEInterrupt>:
 * @return				- none
 *
 * @note				- none
 *
 */
void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle){
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	b082      	sub	sp, #8
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
	//We have to do the data reception
	if(pI2CHandle->RxSize == 1){
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a56:	2b01      	cmp	r3, #1
 8000a58:	d10b      	bne.n	8000a72 <I2C_MasterHandleRXNEInterrupt+0x28>
		*pI2CHandle->pRxBuffer = pI2CHandle->pI2Cx->DR;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	691a      	ldr	r2, [r3, #16]
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	699b      	ldr	r3, [r3, #24]
 8000a64:	b2d2      	uxtb	r2, r2
 8000a66:	701a      	strb	r2, [r3, #0]
		pI2CHandle->RxLen--;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	6a1b      	ldr	r3, [r3, #32]
 8000a6c:	1e5a      	subs	r2, r3, #1
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	621a      	str	r2, [r3, #32]
	}

	if(pI2CHandle->RxSize > 1){
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d91a      	bls.n	8000ab0 <I2C_MasterHandleRXNEInterrupt+0x66>
		if(pI2CHandle->RxLen == 2){
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	6a1b      	ldr	r3, [r3, #32]
 8000a7e:	2b02      	cmp	r3, #2
 8000a80:	d105      	bne.n	8000a8e <I2C_MasterHandleRXNEInterrupt+0x44>
			//Disable ACKing
			I2C_ManageAcking(pI2CHandle->pI2Cx, ENABLE);
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	2101      	movs	r1, #1
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f000 fbbf 	bl	800120c <I2C_ManageAcking>
		}

		//Read DR
		*pI2CHandle->pRxBuffer = pI2CHandle->pI2Cx->DR;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	691a      	ldr	r2, [r3, #16]
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	699b      	ldr	r3, [r3, #24]
 8000a98:	b2d2      	uxtb	r2, r2
 8000a9a:	701a      	strb	r2, [r3, #0]
		pI2CHandle->pRxBuffer++;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	1c5a      	adds	r2, r3, #1
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	619a      	str	r2, [r3, #24]
		pI2CHandle->RxLen--;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	6a1b      	ldr	r3, [r3, #32]
 8000aaa:	1e5a      	subs	r2, r3, #1
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	621a      	str	r2, [r3, #32]
	}

	if(pI2CHandle->RxLen == 0){
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	6a1b      	ldr	r3, [r3, #32]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d10f      	bne.n	8000ad8 <I2C_MasterHandleRXNEInterrupt+0x8e>
		//Close the I2C data reception and notify the application

		//Generate the STOP condition
		if(pI2CHandle->Sr == I2C_DISABLE_SR){
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d104      	bne.n	8000aca <I2C_MasterHandleRXNEInterrupt+0x80>
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f000 fa0f 	bl	8000ee8 <I2C_GenerateStopCondition>
		}

		//Close the I2C Rx
		I2C_CloseRx(pI2CHandle);
 8000aca:	6878      	ldr	r0, [r7, #4]
 8000acc:	f000 f9ba 	bl	8000e44 <I2C_CloseRx>

		//Notify the application about transmission complete
		I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_RX_CMPLT);
 8000ad0:	2101      	movs	r1, #1
 8000ad2:	6878      	ldr	r0, [r7, #4]
 8000ad4:	f7ff fc28 	bl	8000328 <I2C_ApplicationEventCallback>
	}
}
 8000ad8:	bf00      	nop
 8000ada:	3708      	adds	r7, #8
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <I2C_PeriClockControl>:
 * @return				- none
 *
 * @note				- none
 *
 */
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi){
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
 8000ae8:	460b      	mov	r3, r1
 8000aea:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8000aec:	78fb      	ldrb	r3, [r7, #3]
 8000aee:	2b01      	cmp	r3, #1
 8000af0:	d120      	bne.n	8000b34 <I2C_PeriClockControl+0x54>
		if(pI2Cx == I2C1){
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	4a22      	ldr	r2, [pc, #136]	; (8000b80 <I2C_PeriClockControl+0xa0>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d106      	bne.n	8000b08 <I2C_PeriClockControl+0x28>
			I2C1_PCLK_EN();
 8000afa:	4b22      	ldr	r3, [pc, #136]	; (8000b84 <I2C_PeriClockControl+0xa4>)
 8000afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afe:	4a21      	ldr	r2, [pc, #132]	; (8000b84 <I2C_PeriClockControl+0xa4>)
 8000b00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b04:	6413      	str	r3, [r2, #64]	; 0x40
			I2C2_PCLK_DI();
		} else if (pI2Cx == I2C3){
			I2C3_PCLK_DI();
		}
	}
}
 8000b06:	e035      	b.n	8000b74 <I2C_PeriClockControl+0x94>
		} else if (pI2Cx == I2C2){
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	4a1f      	ldr	r2, [pc, #124]	; (8000b88 <I2C_PeriClockControl+0xa8>)
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d106      	bne.n	8000b1e <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 8000b10:	4b1c      	ldr	r3, [pc, #112]	; (8000b84 <I2C_PeriClockControl+0xa4>)
 8000b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b14:	4a1b      	ldr	r2, [pc, #108]	; (8000b84 <I2C_PeriClockControl+0xa4>)
 8000b16:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b1a:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b1c:	e02a      	b.n	8000b74 <I2C_PeriClockControl+0x94>
		} else if (pI2Cx == I2C3){
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	4a1a      	ldr	r2, [pc, #104]	; (8000b8c <I2C_PeriClockControl+0xac>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d126      	bne.n	8000b74 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_EN();
 8000b26:	4b17      	ldr	r3, [pc, #92]	; (8000b84 <I2C_PeriClockControl+0xa4>)
 8000b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2a:	4a16      	ldr	r2, [pc, #88]	; (8000b84 <I2C_PeriClockControl+0xa4>)
 8000b2c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000b30:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b32:	e01f      	b.n	8000b74 <I2C_PeriClockControl+0x94>
		if(pI2Cx == I2C1){
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	4a12      	ldr	r2, [pc, #72]	; (8000b80 <I2C_PeriClockControl+0xa0>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d106      	bne.n	8000b4a <I2C_PeriClockControl+0x6a>
			I2C1_PCLK_DI();
 8000b3c:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <I2C_PeriClockControl+0xa4>)
 8000b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b40:	4a10      	ldr	r2, [pc, #64]	; (8000b84 <I2C_PeriClockControl+0xa4>)
 8000b42:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000b46:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b48:	e014      	b.n	8000b74 <I2C_PeriClockControl+0x94>
		} else if (pI2Cx == I2C2){
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	4a0e      	ldr	r2, [pc, #56]	; (8000b88 <I2C_PeriClockControl+0xa8>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d106      	bne.n	8000b60 <I2C_PeriClockControl+0x80>
			I2C2_PCLK_DI();
 8000b52:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <I2C_PeriClockControl+0xa4>)
 8000b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b56:	4a0b      	ldr	r2, [pc, #44]	; (8000b84 <I2C_PeriClockControl+0xa4>)
 8000b58:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000b5c:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b5e:	e009      	b.n	8000b74 <I2C_PeriClockControl+0x94>
		} else if (pI2Cx == I2C3){
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	4a0a      	ldr	r2, [pc, #40]	; (8000b8c <I2C_PeriClockControl+0xac>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d105      	bne.n	8000b74 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_DI();
 8000b68:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <I2C_PeriClockControl+0xa4>)
 8000b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6c:	4a05      	ldr	r2, [pc, #20]	; (8000b84 <I2C_PeriClockControl+0xa4>)
 8000b6e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000b72:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b74:	bf00      	nop
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bc80      	pop	{r7}
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	40005400 	.word	0x40005400
 8000b84:	40023800 	.word	0x40023800
 8000b88:	40005800 	.word	0x40005800
 8000b8c:	40005c00 	.word	0x40005c00

08000b90 <I2C_Init>:
 * @return				- none
 *
 * @note				- none
 *
 */
void I2C_Init(I2C_Handle_t *pI2CHandle){
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b088      	sub	sp, #32
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
	uint32_t i2c_cr2 = 0;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	61bb      	str	r3, [r7, #24]
	uint32_t i2c_oar1 = 0;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	617b      	str	r3, [r7, #20]
	uint32_t i2c_ccr = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	613b      	str	r3, [r7, #16]
	uint32_t i2c_trise = 0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	60fb      	str	r3, [r7, #12]

	//enable the clock for the i2cx peripheral
	I2C_PeriClockControl(pI2CHandle->pI2Cx,ENABLE);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	2101      	movs	r1, #1
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f7ff ff96 	bl	8000ae0 <I2C_PeriClockControl>
	I2C_PeripheralControl(pI2CHandle->pI2Cx, ENABLE);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	2101      	movs	r1, #1
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f000 fb0b 	bl	80011d6 <I2C_PeripheralControl>
	//ack bit configuration
	pI2CHandle->pI2Cx->CR1 |= (pI2CHandle->I2C_Config.I2C_ACKControl << I2C_CR1_ACK);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	6819      	ldr	r1, [r3, #0]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	68db      	ldr	r3, [r3, #12]
 8000bca:	029a      	lsls	r2, r3, #10
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	430a      	orrs	r2, r1
 8000bd2:	601a      	str	r2, [r3, #0]


	//configure the FREQ bits of CR2
	i2c_cr2 |= ((RCC_GetPCLK1Value() /1000000U ) << I2C_CR2_FREQ);
 8000bd4:	f000 fb68 	bl	80012a8 <RCC_GetPCLK1Value>
 8000bd8:	4602      	mov	r2, r0
 8000bda:	4b48      	ldr	r3, [pc, #288]	; (8000cfc <I2C_Init+0x16c>)
 8000bdc:	fba3 2302 	umull	r2, r3, r3, r2
 8000be0:	0c9b      	lsrs	r3, r3, #18
 8000be2:	69ba      	ldr	r2, [r7, #24]
 8000be4:	4313      	orrs	r3, r2
 8000be6:	61bb      	str	r3, [r7, #24]
	pI2CHandle->pI2Cx->CR2 = (i2c_cr2 & 0x3F);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	69ba      	ldr	r2, [r7, #24]
 8000bee:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000bf2:	605a      	str	r2, [r3, #4]

	//configure own address for slave mode when using 7 bit address
	i2c_oar1 |= (pI2CHandle->I2C_Config.I2C_DeviceAddress << I2C_OAR1_ADD7_1);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	7a1b      	ldrb	r3, [r3, #8]
 8000bf8:	005b      	lsls	r3, r3, #1
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	617b      	str	r3, [r7, #20]
	i2c_oar1 |= (1 << 14);
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c08:	617b      	str	r3, [r7, #20]
	pI2CHandle->pI2Cx->OAR1 = i2c_oar1;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	697a      	ldr	r2, [r7, #20]
 8000c10:	609a      	str	r2, [r3, #8]

	//configure CCR register
	uint16_t ccr_value = 0;
 8000c12:	2300      	movs	r3, #0
 8000c14:	83fb      	strh	r3, [r7, #30]
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM){
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	4a39      	ldr	r2, [pc, #228]	; (8000d00 <I2C_Init+0x170>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d811      	bhi.n	8000c44 <I2C_Init+0xb4>
		//mode is standard mode so we don't have to touch 15th and 14th bits
		ccr_value = RCC_GetPCLK1Value() / (2 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8000c20:	f000 fb42 	bl	80012a8 <RCC_GetPCLK1Value>
 8000c24:	4602      	mov	r2, r0
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	005b      	lsls	r3, r3, #1
 8000c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c30:	83fb      	strh	r3, [r7, #30]
		i2c_ccr |= (ccr_value << I2C_CCR_CCR);
 8000c32:	8bfb      	ldrh	r3, [r7, #30]
 8000c34:	693a      	ldr	r2, [r7, #16]
 8000c36:	4313      	orrs	r3, r2
 8000c38:	613b      	str	r3, [r7, #16]

		pI2CHandle->pI2Cx->CCR = i2c_ccr;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	61da      	str	r2, [r3, #28]
 8000c42:	e02e      	b.n	8000ca2 <I2C_Init+0x112>
	}else {
		//Fast mode
		i2c_ccr |= (1 << I2C_CCR_FS);
 8000c44:	693b      	ldr	r3, [r7, #16]
 8000c46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c4a:	613b      	str	r3, [r7, #16]
		i2c_ccr |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << I2C_CCR_DUTY);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	691b      	ldr	r3, [r3, #16]
 8000c50:	039b      	lsls	r3, r3, #14
 8000c52:	693a      	ldr	r2, [r7, #16]
 8000c54:	4313      	orrs	r3, r2
 8000c56:	613b      	str	r3, [r7, #16]

		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2){
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	691b      	ldr	r3, [r3, #16]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d10b      	bne.n	8000c78 <I2C_Init+0xe8>
			ccr_value = RCC_GetPCLK1Value() / (3 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8000c60:	f000 fb22 	bl	80012a8 <RCC_GetPCLK1Value>
 8000c64:	4601      	mov	r1, r0
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	685a      	ldr	r2, [r3, #4]
 8000c6a:	4613      	mov	r3, r2
 8000c6c:	005b      	lsls	r3, r3, #1
 8000c6e:	4413      	add	r3, r2
 8000c70:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c74:	83fb      	strh	r3, [r7, #30]
 8000c76:	e00c      	b.n	8000c92 <I2C_Init+0x102>
		}else {
			ccr_value = RCC_GetPCLK1Value() / (25 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8000c78:	f000 fb16 	bl	80012a8 <RCC_GetPCLK1Value>
 8000c7c:	4601      	mov	r1, r0
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	685a      	ldr	r2, [r3, #4]
 8000c82:	4613      	mov	r3, r2
 8000c84:	009b      	lsls	r3, r3, #2
 8000c86:	4413      	add	r3, r2
 8000c88:	009a      	lsls	r2, r3, #2
 8000c8a:	4413      	add	r3, r2
 8000c8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c90:	83fb      	strh	r3, [r7, #30]
		}
		i2c_ccr |= (ccr_value << I2C_CCR_CCR);
 8000c92:	8bfb      	ldrh	r3, [r7, #30]
 8000c94:	693a      	ldr	r2, [r7, #16]
 8000c96:	4313      	orrs	r3, r2
 8000c98:	613b      	str	r3, [r7, #16]

		pI2CHandle->pI2Cx->CCR = i2c_ccr;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	693a      	ldr	r2, [r7, #16]
 8000ca0:	61da      	str	r2, [r3, #28]
	}

	//Configure TRISE register
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM){
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	4a16      	ldr	r2, [pc, #88]	; (8000d00 <I2C_Init+0x170>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d80f      	bhi.n	8000ccc <I2C_Init+0x13c>
		//Standard mode
		i2c_trise = (RCC_GetPCLK1Value() / 1000000U) + 1;
 8000cac:	f000 fafc 	bl	80012a8 <RCC_GetPCLK1Value>
 8000cb0:	4602      	mov	r2, r0
 8000cb2:	4b12      	ldr	r3, [pc, #72]	; (8000cfc <I2C_Init+0x16c>)
 8000cb4:	fba3 2302 	umull	r2, r3, r3, r2
 8000cb8:	0c9b      	lsrs	r3, r3, #18
 8000cba:	3301      	adds	r3, #1
 8000cbc:	60fb      	str	r3, [r7, #12]
		pI2CHandle->pI2Cx->TRISE = i2c_trise & 0x3F;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	68fa      	ldr	r2, [r7, #12]
 8000cc4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000cc8:	621a      	str	r2, [r3, #32]
		//Fast mode
		i2c_trise = ((RCC_GetPCLK1Value() * 300) / 1000000000U) + 1;
		pI2CHandle->pI2Cx->TRISE = i2c_trise & 0x3F;
	}

}
 8000cca:	e013      	b.n	8000cf4 <I2C_Init+0x164>
		i2c_trise = ((RCC_GetPCLK1Value() * 300) / 1000000000U) + 1;
 8000ccc:	f000 faec 	bl	80012a8 <RCC_GetPCLK1Value>
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000cd6:	fb03 f302 	mul.w	r3, r3, r2
 8000cda:	0a5b      	lsrs	r3, r3, #9
 8000cdc:	4a09      	ldr	r2, [pc, #36]	; (8000d04 <I2C_Init+0x174>)
 8000cde:	fba2 2303 	umull	r2, r3, r2, r3
 8000ce2:	09db      	lsrs	r3, r3, #7
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	60fb      	str	r3, [r7, #12]
		pI2CHandle->pI2Cx->TRISE = i2c_trise & 0x3F;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	68fa      	ldr	r2, [r7, #12]
 8000cee:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000cf2:	621a      	str	r2, [r3, #32]
}
 8000cf4:	bf00      	nop
 8000cf6:	3720      	adds	r7, #32
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	431bde83 	.word	0x431bde83
 8000d00:	000186a0 	.word	0x000186a0
 8000d04:	00044b83 	.word	0x00044b83

08000d08 <I2C_SlaveSendData>:
 * @return				- Application state
 *
 * @note				- none
 *
 */
void I2C_SlaveSendData(I2C_RegDef_t *pI2Cx, uint8_t data){
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	460b      	mov	r3, r1
 8000d12:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = data;
 8000d14:	78fa      	ldrb	r2, [r7, #3]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	611a      	str	r2, [r3, #16]
}
 8000d1a:	bf00      	nop
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bc80      	pop	{r7}
 8000d22:	4770      	bx	lr

08000d24 <I2C_SlaveReceiveData>:
 * @return				- Application state
 *
 * @note				- received data from I2C master device
 *
 */
uint8_t I2C_SlaveReceiveData(I2C_RegDef_t *pI2Cx){
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
	return (uint8_t)pI2Cx->DR;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	691b      	ldr	r3, [r3, #16]
 8000d30:	b2db      	uxtb	r3, r3
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	370c      	adds	r7, #12
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bc80      	pop	{r7}
 8000d3a:	4770      	bx	lr

08000d3c <I2C_IRQInterruptConfig>:
 * @return				- none
 *
 * @note				- none
 *
 */
void I2C_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi){
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	460a      	mov	r2, r1
 8000d46:	71fb      	strb	r3, [r7, #7]
 8000d48:	4613      	mov	r3, r2
 8000d4a:	71bb      	strb	r3, [r7, #6]
	if(EnorDi == ENABLE){
 8000d4c:	79bb      	ldrb	r3, [r7, #6]
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d133      	bne.n	8000dba <I2C_IRQInterruptConfig+0x7e>
		if(IRQNumber <= 31){
 8000d52:	79fb      	ldrb	r3, [r7, #7]
 8000d54:	2b1f      	cmp	r3, #31
 8000d56:	d80a      	bhi.n	8000d6e <I2C_IRQInterruptConfig+0x32>
			*NVIC_ISER0 |= (1 << IRQNumber);
 8000d58:	4b34      	ldr	r3, [pc, #208]	; (8000e2c <I2C_IRQInterruptConfig+0xf0>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	79fa      	ldrb	r2, [r7, #7]
 8000d5e:	2101      	movs	r1, #1
 8000d60:	fa01 f202 	lsl.w	r2, r1, r2
 8000d64:	4611      	mov	r1, r2
 8000d66:	4a31      	ldr	r2, [pc, #196]	; (8000e2c <I2C_IRQInterruptConfig+0xf0>)
 8000d68:	430b      	orrs	r3, r1
 8000d6a:	6013      	str	r3, [r2, #0]
			*NVIC_ICER1 |= (1 << IRQNumber % 32);
		}else if(IRQNumber > 63 && IRQNumber < 96){
			*NVIC_ICER2 |= (1 << IRQNumber % 32);
		}
	}
}
 8000d6c:	e059      	b.n	8000e22 <I2C_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber <= 63){
 8000d6e:	79fb      	ldrb	r3, [r7, #7]
 8000d70:	2b1f      	cmp	r3, #31
 8000d72:	d90f      	bls.n	8000d94 <I2C_IRQInterruptConfig+0x58>
 8000d74:	79fb      	ldrb	r3, [r7, #7]
 8000d76:	2b3f      	cmp	r3, #63	; 0x3f
 8000d78:	d80c      	bhi.n	8000d94 <I2C_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 8000d7a:	4b2d      	ldr	r3, [pc, #180]	; (8000e30 <I2C_IRQInterruptConfig+0xf4>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	79fa      	ldrb	r2, [r7, #7]
 8000d80:	f002 021f 	and.w	r2, r2, #31
 8000d84:	2101      	movs	r1, #1
 8000d86:	fa01 f202 	lsl.w	r2, r1, r2
 8000d8a:	4611      	mov	r1, r2
 8000d8c:	4a28      	ldr	r2, [pc, #160]	; (8000e30 <I2C_IRQInterruptConfig+0xf4>)
 8000d8e:	430b      	orrs	r3, r1
 8000d90:	6013      	str	r3, [r2, #0]
 8000d92:	e046      	b.n	8000e22 <I2C_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 63 && IRQNumber < 96){
 8000d94:	79fb      	ldrb	r3, [r7, #7]
 8000d96:	2b3f      	cmp	r3, #63	; 0x3f
 8000d98:	d943      	bls.n	8000e22 <I2C_IRQInterruptConfig+0xe6>
 8000d9a:	79fb      	ldrb	r3, [r7, #7]
 8000d9c:	2b5f      	cmp	r3, #95	; 0x5f
 8000d9e:	d840      	bhi.n	8000e22 <I2C_IRQInterruptConfig+0xe6>
			*NVIC_ISER2 |= (1 << (IRQNumber % 32));
 8000da0:	4b24      	ldr	r3, [pc, #144]	; (8000e34 <I2C_IRQInterruptConfig+0xf8>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	79fa      	ldrb	r2, [r7, #7]
 8000da6:	f002 021f 	and.w	r2, r2, #31
 8000daa:	2101      	movs	r1, #1
 8000dac:	fa01 f202 	lsl.w	r2, r1, r2
 8000db0:	4611      	mov	r1, r2
 8000db2:	4a20      	ldr	r2, [pc, #128]	; (8000e34 <I2C_IRQInterruptConfig+0xf8>)
 8000db4:	430b      	orrs	r3, r1
 8000db6:	6013      	str	r3, [r2, #0]
}
 8000db8:	e033      	b.n	8000e22 <I2C_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31){
 8000dba:	79fb      	ldrb	r3, [r7, #7]
 8000dbc:	2b1f      	cmp	r3, #31
 8000dbe:	d80a      	bhi.n	8000dd6 <I2C_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= (1 << IRQNumber);
 8000dc0:	4b1d      	ldr	r3, [pc, #116]	; (8000e38 <I2C_IRQInterruptConfig+0xfc>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	79fa      	ldrb	r2, [r7, #7]
 8000dc6:	2101      	movs	r1, #1
 8000dc8:	fa01 f202 	lsl.w	r2, r1, r2
 8000dcc:	4611      	mov	r1, r2
 8000dce:	4a1a      	ldr	r2, [pc, #104]	; (8000e38 <I2C_IRQInterruptConfig+0xfc>)
 8000dd0:	430b      	orrs	r3, r1
 8000dd2:	6013      	str	r3, [r2, #0]
}
 8000dd4:	e025      	b.n	8000e22 <I2C_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber <= 63){
 8000dd6:	79fb      	ldrb	r3, [r7, #7]
 8000dd8:	2b1f      	cmp	r3, #31
 8000dda:	d90f      	bls.n	8000dfc <I2C_IRQInterruptConfig+0xc0>
 8000ddc:	79fb      	ldrb	r3, [r7, #7]
 8000dde:	2b3f      	cmp	r3, #63	; 0x3f
 8000de0:	d80c      	bhi.n	8000dfc <I2C_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= (1 << IRQNumber % 32);
 8000de2:	4b16      	ldr	r3, [pc, #88]	; (8000e3c <I2C_IRQInterruptConfig+0x100>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	79fa      	ldrb	r2, [r7, #7]
 8000de8:	f002 021f 	and.w	r2, r2, #31
 8000dec:	2101      	movs	r1, #1
 8000dee:	fa01 f202 	lsl.w	r2, r1, r2
 8000df2:	4611      	mov	r1, r2
 8000df4:	4a11      	ldr	r2, [pc, #68]	; (8000e3c <I2C_IRQInterruptConfig+0x100>)
 8000df6:	430b      	orrs	r3, r1
 8000df8:	6013      	str	r3, [r2, #0]
 8000dfa:	e012      	b.n	8000e22 <I2C_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 63 && IRQNumber < 96){
 8000dfc:	79fb      	ldrb	r3, [r7, #7]
 8000dfe:	2b3f      	cmp	r3, #63	; 0x3f
 8000e00:	d90f      	bls.n	8000e22 <I2C_IRQInterruptConfig+0xe6>
 8000e02:	79fb      	ldrb	r3, [r7, #7]
 8000e04:	2b5f      	cmp	r3, #95	; 0x5f
 8000e06:	d80c      	bhi.n	8000e22 <I2C_IRQInterruptConfig+0xe6>
			*NVIC_ICER2 |= (1 << IRQNumber % 32);
 8000e08:	4b0d      	ldr	r3, [pc, #52]	; (8000e40 <I2C_IRQInterruptConfig+0x104>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	79fa      	ldrb	r2, [r7, #7]
 8000e0e:	f002 021f 	and.w	r2, r2, #31
 8000e12:	2101      	movs	r1, #1
 8000e14:	fa01 f202 	lsl.w	r2, r1, r2
 8000e18:	4611      	mov	r1, r2
 8000e1a:	4a09      	ldr	r2, [pc, #36]	; (8000e40 <I2C_IRQInterruptConfig+0x104>)
 8000e1c:	430b      	orrs	r3, r1
 8000e1e:	6013      	str	r3, [r2, #0]
}
 8000e20:	e7ff      	b.n	8000e22 <I2C_IRQInterruptConfig+0xe6>
 8000e22:	bf00      	nop
 8000e24:	370c      	adds	r7, #12
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bc80      	pop	{r7}
 8000e2a:	4770      	bx	lr
 8000e2c:	e000e100 	.word	0xe000e100
 8000e30:	e000e104 	.word	0xe000e104
 8000e34:	e000e108 	.word	0xe000e108
 8000e38:	e000e180 	.word	0xe000e180
 8000e3c:	e000e184 	.word	0xe000e184
 8000e40:	e000e188 	.word	0xe000e188

08000e44 <I2C_CloseRx>:
 * @return				- none
 *
 * @note				- none
 *
 */
void I2C_CloseRx(I2C_Handle_t *pI2CHandle){
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
	//Disable interrupt registers
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	685a      	ldr	r2, [r3, #4]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000e5a:	605a      	str	r2, [r3, #4]
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	685a      	ldr	r2, [r3, #4]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000e6a:	605a      	str	r2, [r3, #4]

	pI2CHandle->TxRxState = I2C_READY;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2200      	movs	r2, #0
 8000e70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pI2CHandle->pRxBuffer = NULL;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2200      	movs	r2, #0
 8000e78:	619a      	str	r2, [r3, #24]
	pI2CHandle->RxLen = 0;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	621a      	str	r2, [r3, #32]
	pI2CHandle->RxSize = 0;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2200      	movs	r2, #0
 8000e84:	629a      	str	r2, [r3, #40]	; 0x28

	if(pI2CHandle->I2C_Config.I2C_ACKControl == I2C_ACK_ENABLE){
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	68db      	ldr	r3, [r3, #12]
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d105      	bne.n	8000e9a <I2C_CloseRx+0x56>
		I2C_ManageAcking(pI2CHandle->pI2Cx, ENABLE);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	2101      	movs	r1, #1
 8000e94:	4618      	mov	r0, r3
 8000e96:	f000 f9b9 	bl	800120c <I2C_ManageAcking>
	}
}
 8000e9a:	bf00      	nop
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <I2C_CloseTx>:
 * @return				- none
 *
 * @note				- none
 *
 */
void I2C_CloseTx(I2C_Handle_t *pI2CHandle){
 8000ea2:	b480      	push	{r7}
 8000ea4:	b083      	sub	sp, #12
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
	//Disable interrupt registers
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	685a      	ldr	r2, [r3, #4]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000eb8:	605a      	str	r2, [r3, #4]
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	685a      	ldr	r2, [r3, #4]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000ec8:	605a      	str	r2, [r3, #4]

	pI2CHandle->TxRxState = I2C_READY;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pI2CHandle->pTxBuffer = NULL;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	615a      	str	r2, [r3, #20]
	pI2CHandle->TxLen = 0;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2200      	movs	r2, #0
 8000edc:	61da      	str	r2, [r3, #28]

}
 8000ede:	bf00      	nop
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bc80      	pop	{r7}
 8000ee6:	4770      	bx	lr

08000ee8 <I2C_GenerateStopCondition>:
 * @return				- none
 *
 * @note				- none
 *
 */
void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx){
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	601a      	str	r2, [r3, #0]
}
 8000efc:	bf00      	nop
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bc80      	pop	{r7}
 8000f04:	4770      	bx	lr

08000f06 <I2C_EV_IRQHandling>:
 * @return				- none
 *
 * @note				- none
 *
 */
void I2C_EV_IRQHandling(I2C_Handle_t *pI2CHandle){
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b08a      	sub	sp, #40	; 0x28
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
	//Interrupt handling for both master and slave devices

	uint32_t i2c_cr2_itevten, i2c_cr2_itbufen;
	uint32_t i2c_flag_sb, i2c_flag_addr, i2c_flag_btf, i2c_flag_stopf, i2c_flag_txe, i2c_flag_rxne;

	i2c_cr2_itevten = pI2CHandle->pI2Cx->CR2 & (1 << I2C_CR2_ITEVTEN);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f18:	627b      	str	r3, [r7, #36]	; 0x24

	//Handle for interrupt generated by SB event (only applicable in MASTER mode, for SLAVE SB is always 0)
	i2c_flag_sb = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_SB);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	695b      	ldr	r3, [r3, #20]
 8000f20:	f003 0301 	and.w	r3, r3, #1
 8000f24:	623b      	str	r3, [r7, #32]
	if(i2c_cr2_itevten && i2c_flag_sb){
 8000f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d01f      	beq.n	8000f6c <I2C_EV_IRQHandling+0x66>
 8000f2c:	6a3b      	ldr	r3, [r7, #32]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d01c      	beq.n	8000f6c <I2C_EV_IRQHandling+0x66>
		//Check to see if application is in Tx or Rx
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX){
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f38:	2b02      	cmp	r3, #2
 8000f3a:	d109      	bne.n	8000f50 <I2C_EV_IRQHandling+0x4a>
			I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx, pI2CHandle->DevAddress);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000f46:	4619      	mov	r1, r3
 8000f48:	4610      	mov	r0, r2
 8000f4a:	f7ff fcff 	bl	800094c <I2C_ExecuteAddressPhaseWrite>
 8000f4e:	e00d      	b.n	8000f6c <I2C_EV_IRQHandling+0x66>
		}else if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX){
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d108      	bne.n	8000f6c <I2C_EV_IRQHandling+0x66>
			I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx, pI2CHandle->DevAddress);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000f64:	4619      	mov	r1, r3
 8000f66:	4610      	mov	r0, r2
 8000f68:	f7ff fd05 	bl	8000976 <I2C_ExecuteAddressPhaseRead>
	}

	//Handle for interrupt generated by ADDR event
	//MASTER: Address is sent
	//SLAVE: Address is matched
	i2c_flag_addr = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_ADDR);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	695b      	ldr	r3, [r3, #20]
 8000f72:	f003 0302 	and.w	r3, r3, #2
 8000f76:	61fb      	str	r3, [r7, #28]
	if(i2c_cr2_itevten && i2c_flag_addr){
 8000f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d005      	beq.n	8000f8a <I2C_EV_IRQHandling+0x84>
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d002      	beq.n	8000f8a <I2C_EV_IRQHandling+0x84>
		//Interrupt is generated because of ADDR flag
		//Clear ADDR flag
		I2C_ClearADDRFlag(pI2CHandle);
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f7ff fd0b 	bl	80009a0 <I2C_ClearADDRFlag>
	}

	//Handle for interrupt generated by BTF event (Byte transfer finished)
	i2c_flag_btf = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_BTF);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	695b      	ldr	r3, [r3, #20]
 8000f90:	f003 0304 	and.w	r3, r3, #4
 8000f94:	61bb      	str	r3, [r7, #24]
	if(i2c_cr2_itevten && i2c_flag_btf){
 8000f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d022      	beq.n	8000fe2 <I2C_EV_IRQHandling+0xdc>
 8000f9c:	69bb      	ldr	r3, [r7, #24]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d01f      	beq.n	8000fe2 <I2C_EV_IRQHandling+0xdc>
		//Check to see if application is in Tx or Rx
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX){
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000fa8:	2b02      	cmp	r3, #2
 8000faa:	d11a      	bne.n	8000fe2 <I2C_EV_IRQHandling+0xdc>
			//make sure TXE is SET
			if(pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_TxE)){
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	695b      	ldr	r3, [r3, #20]
 8000fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d013      	beq.n	8000fe2 <I2C_EV_IRQHandling+0xdc>

				if(pI2CHandle->TxLen == 0){
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	69db      	ldr	r3, [r3, #28]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d10f      	bne.n	8000fe2 <I2C_EV_IRQHandling+0xdc>
					//Generate STOP condition
					if(pI2CHandle->Sr == I2C_DISABLE_SR){
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d104      	bne.n	8000fd4 <I2C_EV_IRQHandling+0xce>
						I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff ff8a 	bl	8000ee8 <I2C_GenerateStopCondition>
					}

					//Reset all the members elements of handle structure
					I2C_CloseTx(pI2CHandle);
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f7ff ff64 	bl	8000ea2 <I2C_CloseTx>

					//Notify the application about transmission complete
					I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_TX_CMPLT);
 8000fda:	2100      	movs	r1, #0
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f7ff f9a3 	bl	8000328 <I2C_ApplicationEventCallback>
		}
	}

	//Handle for interrupt generated by STOPF event
	//Stop detection flag is applicable only in SLAVE mode, for MASTER this flag will never be SET
	i2c_flag_stopf = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_STOPF);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	695b      	ldr	r3, [r3, #20]
 8000fe8:	f003 0310 	and.w	r3, r3, #16
 8000fec:	617b      	str	r3, [r7, #20]
	if(i2c_cr2_itevten && i2c_flag_stopf){
 8000fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d00c      	beq.n	800100e <I2C_EV_IRQHandling+0x108>
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d009      	beq.n	800100e <I2C_EV_IRQHandling+0x108>
		//Clear the STOPF flag by reading SR1(already done), then writing to CR1
		pI2CHandle->pI2Cx->CR1 |= 0x0000;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	6812      	ldr	r2, [r2, #0]
 8001004:	601a      	str	r2, [r3, #0]

		//Notify the application that STOP is detected
		I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_STOP);
 8001006:	2102      	movs	r1, #2
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f7ff f98d 	bl	8000328 <I2C_ApplicationEventCallback>
	}

	i2c_cr2_itbufen = pI2CHandle->pI2Cx->CR2 & (1 << I2C_CR2_ITBUFEN);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001018:	613b      	str	r3, [r7, #16]
	//Handle for interrupt generated by TXE event (Transmission buffer empty)
	i2c_flag_txe = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_TxE);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	695b      	ldr	r3, [r3, #20]
 8001020:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001024:	60fb      	str	r3, [r7, #12]
	if(i2c_cr2_itevten && i2c_cr2_itbufen && i2c_flag_txe){
 8001026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001028:	2b00      	cmp	r3, #0
 800102a:	d020      	beq.n	800106e <I2C_EV_IRQHandling+0x168>
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d01d      	beq.n	800106e <I2C_EV_IRQHandling+0x168>
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d01a      	beq.n	800106e <I2C_EV_IRQHandling+0x168>
		//Check for device mode
		if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL)){
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	699b      	ldr	r3, [r3, #24]
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	2b00      	cmp	r3, #0
 8001044:	d008      	beq.n	8001058 <I2C_EV_IRQHandling+0x152>
			//MASTER mode
			//We have to do the data Transmission
			if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX){
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800104c:	2b02      	cmp	r3, #2
 800104e:	d10e      	bne.n	800106e <I2C_EV_IRQHandling+0x168>
				I2C_MasterHandleTXEInterrupt(pI2CHandle);
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f7ff fcdd 	bl	8000a10 <I2C_MasterHandleTXEInterrupt>
 8001056:	e00a      	b.n	800106e <I2C_EV_IRQHandling+0x168>
			}
		} else{
			//SLAVE mode
			//Check if device is in Transmitter mode
			if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_TRA)){
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	699b      	ldr	r3, [r3, #24]
 800105e:	f003 0304 	and.w	r3, r3, #4
 8001062:	2b00      	cmp	r3, #0
 8001064:	d003      	beq.n	800106e <I2C_EV_IRQHandling+0x168>
				I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_DATA_REQ);
 8001066:	2108      	movs	r1, #8
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f7ff f95d 	bl	8000328 <I2C_ApplicationEventCallback>
			}
		}
	}

	//Handle for interrupt generated by RXNE event (Receiver buffer not empty)
	i2c_flag_rxne = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_RxNE);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	695b      	ldr	r3, [r3, #20]
 8001074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001078:	60bb      	str	r3, [r7, #8]
	if(i2c_cr2_itevten && i2c_cr2_itbufen && i2c_flag_rxne){
 800107a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800107c:	2b00      	cmp	r3, #0
 800107e:	d020      	beq.n	80010c2 <I2C_EV_IRQHandling+0x1bc>
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d01d      	beq.n	80010c2 <I2C_EV_IRQHandling+0x1bc>
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d01a      	beq.n	80010c2 <I2C_EV_IRQHandling+0x1bc>
		//Check for device mode (MASTER/SLAVE)
		if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL)){
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	699b      	ldr	r3, [r3, #24]
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	2b00      	cmp	r3, #0
 8001098:	d008      	beq.n	80010ac <I2C_EV_IRQHandling+0x1a6>
			if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX){
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d10e      	bne.n	80010c2 <I2C_EV_IRQHandling+0x1bc>
				I2C_MasterHandleRXNEInterrupt(pI2CHandle);
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f7ff fcd0 	bl	8000a4a <I2C_MasterHandleRXNEInterrupt>
			if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_TRA)){
				I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_DATA_RCV);
			}
		}
	}
}
 80010aa:	e00a      	b.n	80010c2 <I2C_EV_IRQHandling+0x1bc>
			if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_TRA)){
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	699b      	ldr	r3, [r3, #24]
 80010b2:	f003 0304 	and.w	r3, r3, #4
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d003      	beq.n	80010c2 <I2C_EV_IRQHandling+0x1bc>
				I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_DATA_RCV);
 80010ba:	2109      	movs	r1, #9
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f7ff f933 	bl	8000328 <I2C_ApplicationEventCallback>
}
 80010c2:	bf00      	nop
 80010c4:	3728      	adds	r7, #40	; 0x28
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <I2C_ER_IRQHandling>:
 *
 * @note				- none
 *
 */
void I2C_ER_IRQHandling(I2C_Handle_t *pI2CHandle)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b084      	sub	sp, #16
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	6078      	str	r0, [r7, #4]

	uint32_t sr1_error_bit, cr2_iterren_bit;

    //Know the status of  ITERREN control bit in the CR2
	cr2_iterren_bit = (pI2CHandle->pI2Cx->CR2) & ( 1 << I2C_CR2_ITERREN);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010dc:	60fb      	str	r3, [r7, #12]


/***********************Check for Bus error************************************/
	sr1_error_bit = (pI2CHandle->pI2Cx->SR1) & ( 1<< I2C_SR1_BERR);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	695b      	ldr	r3, [r3, #20]
 80010e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010e8:	60bb      	str	r3, [r7, #8]
	if(sr1_error_bit  && cr2_iterren_bit )
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d00e      	beq.n	800110e <I2C_ER_IRQHandling+0x44>
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d00b      	beq.n	800110e <I2C_ER_IRQHandling+0x44>
	{
		//This is Bus error
		//Implement the code to clear the buss error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_BERR);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	695a      	ldr	r2, [r3, #20]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001104:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_BERR);
 8001106:	2103      	movs	r1, #3
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f7ff f90d 	bl	8000328 <I2C_ApplicationEventCallback>
	}

/***********************Check for arbitration lost error************************************/
	sr1_error_bit = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_ARLO );
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	695b      	ldr	r3, [r3, #20]
 8001114:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001118:	60bb      	str	r3, [r7, #8]
	if(sr1_error_bit  && cr2_iterren_bit)
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d00e      	beq.n	800113e <I2C_ER_IRQHandling+0x74>
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d00b      	beq.n	800113e <I2C_ER_IRQHandling+0x74>
	{
		//This is arbitration lost error
		//Implement the code to clear the arbitration lost error flag
		pI2CHandle->pI2Cx->SR1 &= ~(1 << I2C_SR1_ARLO);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	695a      	ldr	r2, [r3, #20]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001134:	615a      	str	r2, [r3, #20]
		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle, I2C_ERROR_ARLO);
 8001136:	2104      	movs	r1, #4
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f7ff f8f5 	bl	8000328 <I2C_ApplicationEventCallback>
	}

/***********************Check for ACK failure  error************************************/

	sr1_error_bit = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_AF);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	695b      	ldr	r3, [r3, #20]
 8001144:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001148:	60bb      	str	r3, [r7, #8]
	if(sr1_error_bit  && cr2_iterren_bit)
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d00e      	beq.n	800116e <I2C_ER_IRQHandling+0xa4>
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d00b      	beq.n	800116e <I2C_ER_IRQHandling+0xa4>
	{
		//This is ACK failure error
	    //Implement the code to clear the ACK failure error flag
		pI2CHandle->pI2Cx->SR1 &= ~(1 << I2C_SR1_AF);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	695a      	ldr	r2, [r3, #20]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001164:	615a      	str	r2, [r3, #20]
		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle, I2C_ERROR_AF);
 8001166:	2105      	movs	r1, #5
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f7ff f8dd 	bl	8000328 <I2C_ApplicationEventCallback>
	}

/***********************Check for Overrun/underrun error************************************/
	sr1_error_bit = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_OVR);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	695b      	ldr	r3, [r3, #20]
 8001174:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001178:	60bb      	str	r3, [r7, #8]
	if(sr1_error_bit  && cr2_iterren_bit)
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d00e      	beq.n	800119e <I2C_ER_IRQHandling+0xd4>
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d00b      	beq.n	800119e <I2C_ER_IRQHandling+0xd4>
	{
		//This is Overrun/underrun
	    //Implement the code to clear the Overrun/underrun error flag
		pI2CHandle->pI2Cx->SR1 &= ~(1 << I2C_SR1_OVR);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	695a      	ldr	r2, [r3, #20]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001194:	615a      	str	r2, [r3, #20]
		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle, I2C_ERROR_OVR);
 8001196:	2106      	movs	r1, #6
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f7ff f8c5 	bl	8000328 <I2C_ApplicationEventCallback>
	}

/***********************Check for Time out error************************************/
	sr1_error_bit = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_TIMEOUT);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	695b      	ldr	r3, [r3, #20]
 80011a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011a8:	60bb      	str	r3, [r7, #8]
	if(sr1_error_bit  && cr2_iterren_bit)
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d00e      	beq.n	80011ce <I2C_ER_IRQHandling+0x104>
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d00b      	beq.n	80011ce <I2C_ER_IRQHandling+0x104>
	{
		//This is Time out error
	    //Implement the code to clear the Time out error flag
		pI2CHandle->pI2Cx->SR1 &= ~(1 << I2C_SR1_TIMEOUT);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	695a      	ldr	r2, [r3, #20]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80011c4:	615a      	str	r2, [r3, #20]
		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle, I2C_ERROR_TIMEOUT);
 80011c6:	2107      	movs	r1, #7
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f7ff f8ad 	bl	8000328 <I2C_ApplicationEventCallback>
	}

}
 80011ce:	bf00      	nop
 80011d0:	3710      	adds	r7, #16
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <I2C_PeripheralControl>:
 * @return				- none
 *
 * @note				- none
 *
 */
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi){
 80011d6:	b480      	push	{r7}
 80011d8:	b083      	sub	sp, #12
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
 80011de:	460b      	mov	r3, r1
 80011e0:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE){
 80011e2:	78fb      	ldrb	r3, [r7, #3]
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d106      	bne.n	80011f6 <I2C_PeripheralControl+0x20>
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f043 0201 	orr.w	r2, r3, #1
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	601a      	str	r2, [r3, #0]
	} else{
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
	}
}
 80011f4:	e005      	b.n	8001202 <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f023 0201 	bic.w	r2, r3, #1
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	601a      	str	r2, [r3, #0]
}
 8001202:	bf00      	nop
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	bc80      	pop	{r7}
 800120a:	4770      	bx	lr

0800120c <I2C_ManageAcking>:
 * @return				- none
 *
 * @note				- none
 *
 */
void I2C_ManageAcking(I2C_RegDef_t *pI2CX, uint8_t EnOrDi){
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	460b      	mov	r3, r1
 8001216:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == I2C_ACK_ENABLE){
 8001218:	78fb      	ldrb	r3, [r7, #3]
 800121a:	2b01      	cmp	r3, #1
 800121c:	d106      	bne.n	800122c <I2C_ManageAcking+0x20>
		pI2CX->CR1 |= (1 << I2C_CR1_ACK);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	601a      	str	r2, [r3, #0]
	}else{
		pI2CX->CR1 &= ~(1 << I2C_CR1_ACK);
	}
}
 800122a:	e005      	b.n	8001238 <I2C_ManageAcking+0x2c>
		pI2CX->CR1 &= ~(1 << I2C_CR1_ACK);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	601a      	str	r2, [r3, #0]
}
 8001238:	bf00      	nop
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	bc80      	pop	{r7}
 8001240:	4770      	bx	lr

08001242 <I2C_SlaveEnableDisableCallbackEvents>:
 * @return				- none
 *
 * @note				- none
 *
 */
void I2C_SlaveEnableDisableCallbackEvents(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi){
 8001242:	b480      	push	{r7}
 8001244:	b083      	sub	sp, #12
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
 800124a:	460b      	mov	r3, r1
 800124c:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE){
 800124e:	78fb      	ldrb	r3, [r7, #3]
 8001250:	2b01      	cmp	r3, #1
 8001252:	d112      	bne.n	800127a <I2C_SlaveEnableDisableCallbackEvents+0x38>
		pI2Cx->CR2 |= (1 << I2C_CR2_ITEVTEN);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	605a      	str	r2, [r3, #4]
		pI2Cx->CR2 |= (1 << I2C_CR2_ITBUFEN);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	605a      	str	r2, [r3, #4]
		pI2Cx->CR2 |= (1 << I2C_CR2_ITERREN);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	605a      	str	r2, [r3, #4]
	}else{
		pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);
		pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);
		pI2Cx->CR2 &= ~(1 << I2C_CR2_ITERREN);
	}
}
 8001278:	e011      	b.n	800129e <I2C_SlaveEnableDisableCallbackEvents+0x5c>
		pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	605a      	str	r2, [r3, #4]
		pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	605a      	str	r2, [r3, #4]
		pI2Cx->CR2 &= ~(1 << I2C_CR2_ITERREN);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	605a      	str	r2, [r3, #4]
}
 800129e:	bf00      	nop
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bc80      	pop	{r7}
 80012a6:	4770      	bx	lr

080012a8 <RCC_GetPCLK1Value>:
 * @return				- peripheral clock speed for I2C peripherals
 *
 * @note				- none
 *
 */
uint32_t RCC_GetPCLK1Value(void){
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
	uint32_t pclk1;
	uint8_t clksrc, ahbprescaler, apb1prescaler;

	clksrc = (RCC->CFGR >> 2) & 0x3;
 80012ae:	4b3d      	ldr	r3, [pc, #244]	; (80013a4 <RCC_GetPCLK1Value+0xfc>)
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	089b      	lsrs	r3, r3, #2
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	f003 0303 	and.w	r3, r3, #3
 80012ba:	70fb      	strb	r3, [r7, #3]
	if(clksrc == 0){
 80012bc:	78fb      	ldrb	r3, [r7, #3]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d102      	bne.n	80012c8 <RCC_GetPCLK1Value+0x20>
		pclk1 = 16000000;
 80012c2:	4b39      	ldr	r3, [pc, #228]	; (80013a8 <RCC_GetPCLK1Value+0x100>)
 80012c4:	607b      	str	r3, [r7, #4]
 80012c6:	e001      	b.n	80012cc <RCC_GetPCLK1Value+0x24>
	} else{
		pclk1 = 0; //I wont use other clocks for now (i don't have external clock)
 80012c8:	2300      	movs	r3, #0
 80012ca:	607b      	str	r3, [r7, #4]
	}

	ahbprescaler = (RCC->CFGR >> 4) & 0xF;
 80012cc:	4b35      	ldr	r3, [pc, #212]	; (80013a4 <RCC_GetPCLK1Value+0xfc>)
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	091b      	lsrs	r3, r3, #4
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	f003 030f 	and.w	r3, r3, #15
 80012d8:	70bb      	strb	r3, [r7, #2]
	if(ahbprescaler < 8){
 80012da:	78bb      	ldrb	r3, [r7, #2]
 80012dc:	2b07      	cmp	r3, #7
 80012de:	d936      	bls.n	800134e <RCC_GetPCLK1Value+0xa6>
		//clock wont be divided
	}else if(ahbprescaler == 8){
 80012e0:	78bb      	ldrb	r3, [r7, #2]
 80012e2:	2b08      	cmp	r3, #8
 80012e4:	d103      	bne.n	80012ee <RCC_GetPCLK1Value+0x46>
		pclk1 /= 2;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	085b      	lsrs	r3, r3, #1
 80012ea:	607b      	str	r3, [r7, #4]
 80012ec:	e02f      	b.n	800134e <RCC_GetPCLK1Value+0xa6>
	}else if(ahbprescaler == 9){
 80012ee:	78bb      	ldrb	r3, [r7, #2]
 80012f0:	2b09      	cmp	r3, #9
 80012f2:	d103      	bne.n	80012fc <RCC_GetPCLK1Value+0x54>
		pclk1 /= 4;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	089b      	lsrs	r3, r3, #2
 80012f8:	607b      	str	r3, [r7, #4]
 80012fa:	e028      	b.n	800134e <RCC_GetPCLK1Value+0xa6>
	}else if(ahbprescaler == 10){
 80012fc:	78bb      	ldrb	r3, [r7, #2]
 80012fe:	2b0a      	cmp	r3, #10
 8001300:	d103      	bne.n	800130a <RCC_GetPCLK1Value+0x62>
		pclk1 /= 8;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	08db      	lsrs	r3, r3, #3
 8001306:	607b      	str	r3, [r7, #4]
 8001308:	e021      	b.n	800134e <RCC_GetPCLK1Value+0xa6>
	}else if(ahbprescaler == 11){
 800130a:	78bb      	ldrb	r3, [r7, #2]
 800130c:	2b0b      	cmp	r3, #11
 800130e:	d103      	bne.n	8001318 <RCC_GetPCLK1Value+0x70>
		pclk1 /= 16;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	091b      	lsrs	r3, r3, #4
 8001314:	607b      	str	r3, [r7, #4]
 8001316:	e01a      	b.n	800134e <RCC_GetPCLK1Value+0xa6>
	}else if(ahbprescaler == 12){
 8001318:	78bb      	ldrb	r3, [r7, #2]
 800131a:	2b0c      	cmp	r3, #12
 800131c:	d103      	bne.n	8001326 <RCC_GetPCLK1Value+0x7e>
		pclk1 /= 64;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	099b      	lsrs	r3, r3, #6
 8001322:	607b      	str	r3, [r7, #4]
 8001324:	e013      	b.n	800134e <RCC_GetPCLK1Value+0xa6>
	}else if(ahbprescaler == 13){
 8001326:	78bb      	ldrb	r3, [r7, #2]
 8001328:	2b0d      	cmp	r3, #13
 800132a:	d103      	bne.n	8001334 <RCC_GetPCLK1Value+0x8c>
		pclk1 /= 128;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	09db      	lsrs	r3, r3, #7
 8001330:	607b      	str	r3, [r7, #4]
 8001332:	e00c      	b.n	800134e <RCC_GetPCLK1Value+0xa6>
	}else if(ahbprescaler == 14){
 8001334:	78bb      	ldrb	r3, [r7, #2]
 8001336:	2b0e      	cmp	r3, #14
 8001338:	d103      	bne.n	8001342 <RCC_GetPCLK1Value+0x9a>
		pclk1 /= 256;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	0a1b      	lsrs	r3, r3, #8
 800133e:	607b      	str	r3, [r7, #4]
 8001340:	e005      	b.n	800134e <RCC_GetPCLK1Value+0xa6>
	}else if(ahbprescaler == 15){
 8001342:	78bb      	ldrb	r3, [r7, #2]
 8001344:	2b0f      	cmp	r3, #15
 8001346:	d102      	bne.n	800134e <RCC_GetPCLK1Value+0xa6>
		pclk1 /= 512;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	0a5b      	lsrs	r3, r3, #9
 800134c:	607b      	str	r3, [r7, #4]
	}

	apb1prescaler = (RCC->CFGR >> 10) & 0x7;
 800134e:	4b15      	ldr	r3, [pc, #84]	; (80013a4 <RCC_GetPCLK1Value+0xfc>)
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	0a9b      	lsrs	r3, r3, #10
 8001354:	b2db      	uxtb	r3, r3
 8001356:	f003 0307 	and.w	r3, r3, #7
 800135a:	707b      	strb	r3, [r7, #1]
	if(apb1prescaler < 4){
 800135c:	787b      	ldrb	r3, [r7, #1]
 800135e:	2b03      	cmp	r3, #3
 8001360:	d91a      	bls.n	8001398 <RCC_GetPCLK1Value+0xf0>
		//clk not divided
	} else if(apb1prescaler == 4){
 8001362:	787b      	ldrb	r3, [r7, #1]
 8001364:	2b04      	cmp	r3, #4
 8001366:	d103      	bne.n	8001370 <RCC_GetPCLK1Value+0xc8>
		pclk1 /= 2;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	085b      	lsrs	r3, r3, #1
 800136c:	607b      	str	r3, [r7, #4]
 800136e:	e013      	b.n	8001398 <RCC_GetPCLK1Value+0xf0>
	} else if(apb1prescaler == 5){
 8001370:	787b      	ldrb	r3, [r7, #1]
 8001372:	2b05      	cmp	r3, #5
 8001374:	d103      	bne.n	800137e <RCC_GetPCLK1Value+0xd6>
		pclk1 /= 4;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	089b      	lsrs	r3, r3, #2
 800137a:	607b      	str	r3, [r7, #4]
 800137c:	e00c      	b.n	8001398 <RCC_GetPCLK1Value+0xf0>
	} else if(apb1prescaler == 6){
 800137e:	787b      	ldrb	r3, [r7, #1]
 8001380:	2b06      	cmp	r3, #6
 8001382:	d103      	bne.n	800138c <RCC_GetPCLK1Value+0xe4>
		pclk1 /= 8;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	08db      	lsrs	r3, r3, #3
 8001388:	607b      	str	r3, [r7, #4]
 800138a:	e005      	b.n	8001398 <RCC_GetPCLK1Value+0xf0>
	} else if(apb1prescaler == 7){
 800138c:	787b      	ldrb	r3, [r7, #1]
 800138e:	2b07      	cmp	r3, #7
 8001390:	d102      	bne.n	8001398 <RCC_GetPCLK1Value+0xf0>
		pclk1 /= 16;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	091b      	lsrs	r3, r3, #4
 8001396:	607b      	str	r3, [r7, #4]
	}

	return pclk1;
 8001398:	687b      	ldr	r3, [r7, #4]
}
 800139a:	4618      	mov	r0, r3
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	bc80      	pop	{r7}
 80013a2:	4770      	bx	lr
 80013a4:	40023800 	.word	0x40023800
 80013a8:	00f42400 	.word	0x00f42400

080013ac <__libc_init_array>:
 80013ac:	b570      	push	{r4, r5, r6, lr}
 80013ae:	4e0d      	ldr	r6, [pc, #52]	; (80013e4 <__libc_init_array+0x38>)
 80013b0:	4c0d      	ldr	r4, [pc, #52]	; (80013e8 <__libc_init_array+0x3c>)
 80013b2:	1ba4      	subs	r4, r4, r6
 80013b4:	10a4      	asrs	r4, r4, #2
 80013b6:	2500      	movs	r5, #0
 80013b8:	42a5      	cmp	r5, r4
 80013ba:	d109      	bne.n	80013d0 <__libc_init_array+0x24>
 80013bc:	4e0b      	ldr	r6, [pc, #44]	; (80013ec <__libc_init_array+0x40>)
 80013be:	4c0c      	ldr	r4, [pc, #48]	; (80013f0 <__libc_init_array+0x44>)
 80013c0:	f000 f818 	bl	80013f4 <_init>
 80013c4:	1ba4      	subs	r4, r4, r6
 80013c6:	10a4      	asrs	r4, r4, #2
 80013c8:	2500      	movs	r5, #0
 80013ca:	42a5      	cmp	r5, r4
 80013cc:	d105      	bne.n	80013da <__libc_init_array+0x2e>
 80013ce:	bd70      	pop	{r4, r5, r6, pc}
 80013d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80013d4:	4798      	blx	r3
 80013d6:	3501      	adds	r5, #1
 80013d8:	e7ee      	b.n	80013b8 <__libc_init_array+0xc>
 80013da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80013de:	4798      	blx	r3
 80013e0:	3501      	adds	r5, #1
 80013e2:	e7f2      	b.n	80013ca <__libc_init_array+0x1e>
 80013e4:	0800140c 	.word	0x0800140c
 80013e8:	0800140c 	.word	0x0800140c
 80013ec:	0800140c 	.word	0x0800140c
 80013f0:	08001410 	.word	0x08001410

080013f4 <_init>:
 80013f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013f6:	bf00      	nop
 80013f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013fa:	bc08      	pop	{r3}
 80013fc:	469e      	mov	lr, r3
 80013fe:	4770      	bx	lr

08001400 <_fini>:
 8001400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001402:	bf00      	nop
 8001404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001406:	bc08      	pop	{r3}
 8001408:	469e      	mov	lr, r3
 800140a:	4770      	bx	lr
