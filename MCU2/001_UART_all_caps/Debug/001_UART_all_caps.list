
001_UART_all_caps.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003f4  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005b8  080005b8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080005b8  080005b8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080005b8  080005b8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005b8  080005b8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005b8  080005b8  000105b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080005bc  080005bc  000105bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080005c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  2000000c  080005cc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  080005cc  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002486  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000007b5  00000000  00000000  000224c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000002a0  00000000  00000000  00022c78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000248  00000000  00000000  00022f18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001eb4e  00000000  00000000  00023160  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000025d6  00000000  00000000  00041cae  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c1fac  00000000  00000000  00044284  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00106230  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000908  00000000  00000000  001062ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080005a0 	.word	0x080005a0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	080005a0 	.word	0x080005a0

08000204 <main>:
#include "main.h"

void SystemClockConfig(void);

int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
	HAL_Init();
 8000208:	f000 f86e 	bl	80002e8 <HAL_Init>
	SystemClockConfig();
 800020c:	f000 f803 	bl	8000216 <SystemClockConfig>
 8000210:	2300      	movs	r3, #0
}
 8000212:	4618      	mov	r0, r3
 8000214:	bd80      	pop	{r7, pc}

08000216 <SystemClockConfig>:

void SystemClockConfig(void)
{
 8000216:	b480      	push	{r7}
 8000218:	af00      	add	r7, sp, #0

}
 800021a:	bf00      	nop
 800021c:	46bd      	mov	sp, r7
 800021e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000222:	4770      	bx	lr

08000224 <HAL_MspInit>:
 */

#include "stm32f4xx.h"

void HAL_MspInit(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	//Here we will keep low level processor specific inits
	//1. Configure priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000228:	2003      	movs	r0, #3
 800022a:	f000 f961 	bl	80004f0 <HAL_NVIC_SetPriorityGrouping>

	//2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= (0X7 << 16);		//usage fault, memory fault, bus fault
 800022e:	4b0d      	ldr	r3, [pc, #52]	; (8000264 <HAL_MspInit+0x40>)
 8000230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000232:	4a0c      	ldr	r2, [pc, #48]	; (8000264 <HAL_MspInit+0x40>)
 8000234:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8000238:	6253      	str	r3, [r2, #36]	; 0x24

	//3. Configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800023a:	2200      	movs	r2, #0
 800023c:	2100      	movs	r1, #0
 800023e:	f06f 000b 	mvn.w	r0, #11
 8000242:	f000 f960 	bl	8000506 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000246:	2200      	movs	r2, #0
 8000248:	2100      	movs	r1, #0
 800024a:	f06f 000a 	mvn.w	r0, #10
 800024e:	f000 f95a 	bl	8000506 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000252:	2200      	movs	r2, #0
 8000254:	2100      	movs	r1, #0
 8000256:	f06f 0009 	mvn.w	r0, #9
 800025a:	f000 f954 	bl	8000506 <HAL_NVIC_SetPriority>
}
 800025e:	bf00      	nop
 8000260:	bd80      	pop	{r7, pc}
 8000262:	bf00      	nop
 8000264:	e000ed00 	.word	0xe000ed00

08000268 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000268:	b480      	push	{r7}
 800026a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800026c:	4b08      	ldr	r3, [pc, #32]	; (8000290 <SystemInit+0x28>)
 800026e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000272:	4a07      	ldr	r2, [pc, #28]	; (8000290 <SystemInit+0x28>)
 8000274:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000278:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800027c:	4b04      	ldr	r3, [pc, #16]	; (8000290 <SystemInit+0x28>)
 800027e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000282:	609a      	str	r2, [r3, #8]
#endif
}
 8000284:	bf00      	nop
 8000286:	46bd      	mov	sp, r7
 8000288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop
 8000290:	e000ed00 	.word	0xe000ed00

08000294 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000294:	f8df d034 	ldr.w	sp, [pc, #52]	; 80002cc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000298:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800029a:	e003      	b.n	80002a4 <LoopCopyDataInit>

0800029c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800029c:	4b0c      	ldr	r3, [pc, #48]	; (80002d0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800029e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80002a0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80002a2:	3104      	adds	r1, #4

080002a4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80002a4:	480b      	ldr	r0, [pc, #44]	; (80002d4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80002a6:	4b0c      	ldr	r3, [pc, #48]	; (80002d8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80002a8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80002aa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80002ac:	d3f6      	bcc.n	800029c <CopyDataInit>
  ldr  r2, =_sbss
 80002ae:	4a0b      	ldr	r2, [pc, #44]	; (80002dc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80002b0:	e002      	b.n	80002b8 <LoopFillZerobss>

080002b2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80002b2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80002b4:	f842 3b04 	str.w	r3, [r2], #4

080002b8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80002b8:	4b09      	ldr	r3, [pc, #36]	; (80002e0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80002ba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80002bc:	d3f9      	bcc.n	80002b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80002be:	f7ff ffd3 	bl	8000268 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80002c2:	f000 f949 	bl	8000558 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80002c6:	f7ff ff9d 	bl	8000204 <main>
  bx  lr    
 80002ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80002cc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80002d0:	080005c0 	.word	0x080005c0
  ldr  r0, =_sdata
 80002d4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80002d8:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80002dc:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80002e0:	20000028 	.word	0x20000028

080002e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80002e4:	e7fe      	b.n	80002e4 <ADC_IRQHandler>
	...

080002e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80002ec:	4b0e      	ldr	r3, [pc, #56]	; (8000328 <HAL_Init+0x40>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	4a0d      	ldr	r2, [pc, #52]	; (8000328 <HAL_Init+0x40>)
 80002f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80002f8:	4b0b      	ldr	r3, [pc, #44]	; (8000328 <HAL_Init+0x40>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	4a0a      	ldr	r2, [pc, #40]	; (8000328 <HAL_Init+0x40>)
 80002fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000302:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000304:	4b08      	ldr	r3, [pc, #32]	; (8000328 <HAL_Init+0x40>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	4a07      	ldr	r2, [pc, #28]	; (8000328 <HAL_Init+0x40>)
 800030a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800030e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000310:	2003      	movs	r0, #3
 8000312:	f000 f8ed 	bl	80004f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000316:	2000      	movs	r0, #0
 8000318:	f000 f808 	bl	800032c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800031c:	f7ff ff82 	bl	8000224 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000320:	2300      	movs	r3, #0
}
 8000322:	4618      	mov	r0, r3
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	40023c00 	.word	0x40023c00

0800032c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000334:	4b12      	ldr	r3, [pc, #72]	; (8000380 <HAL_InitTick+0x54>)
 8000336:	681a      	ldr	r2, [r3, #0]
 8000338:	4b12      	ldr	r3, [pc, #72]	; (8000384 <HAL_InitTick+0x58>)
 800033a:	781b      	ldrb	r3, [r3, #0]
 800033c:	4619      	mov	r1, r3
 800033e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000342:	fbb3 f3f1 	udiv	r3, r3, r1
 8000346:	fbb2 f3f3 	udiv	r3, r2, r3
 800034a:	4618      	mov	r0, r3
 800034c:	f000 f8f7 	bl	800053e <HAL_SYSTICK_Config>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000356:	2301      	movs	r3, #1
 8000358:	e00e      	b.n	8000378 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	2b0f      	cmp	r3, #15
 800035e:	d80a      	bhi.n	8000376 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000360:	2200      	movs	r2, #0
 8000362:	6879      	ldr	r1, [r7, #4]
 8000364:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000368:	f000 f8cd 	bl	8000506 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800036c:	4a06      	ldr	r2, [pc, #24]	; (8000388 <HAL_InitTick+0x5c>)
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000372:	2300      	movs	r3, #0
 8000374:	e000      	b.n	8000378 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000376:	2301      	movs	r3, #1
}
 8000378:	4618      	mov	r0, r3
 800037a:	3708      	adds	r7, #8
 800037c:	46bd      	mov	sp, r7
 800037e:	bd80      	pop	{r7, pc}
 8000380:	20000000 	.word	0x20000000
 8000384:	20000008 	.word	0x20000008
 8000388:	20000004 	.word	0x20000004

0800038c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800038c:	b480      	push	{r7}
 800038e:	b085      	sub	sp, #20
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	f003 0307 	and.w	r3, r3, #7
 800039a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800039c:	4b0c      	ldr	r3, [pc, #48]	; (80003d0 <__NVIC_SetPriorityGrouping+0x44>)
 800039e:	68db      	ldr	r3, [r3, #12]
 80003a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80003a2:	68ba      	ldr	r2, [r7, #8]
 80003a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80003a8:	4013      	ands	r3, r2
 80003aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80003b0:	68bb      	ldr	r3, [r7, #8]
 80003b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80003b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80003b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80003be:	4a04      	ldr	r2, [pc, #16]	; (80003d0 <__NVIC_SetPriorityGrouping+0x44>)
 80003c0:	68bb      	ldr	r3, [r7, #8]
 80003c2:	60d3      	str	r3, [r2, #12]
}
 80003c4:	bf00      	nop
 80003c6:	3714      	adds	r7, #20
 80003c8:	46bd      	mov	sp, r7
 80003ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ce:	4770      	bx	lr
 80003d0:	e000ed00 	.word	0xe000ed00

080003d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80003d8:	4b04      	ldr	r3, [pc, #16]	; (80003ec <__NVIC_GetPriorityGrouping+0x18>)
 80003da:	68db      	ldr	r3, [r3, #12]
 80003dc:	0a1b      	lsrs	r3, r3, #8
 80003de:	f003 0307 	and.w	r3, r3, #7
}
 80003e2:	4618      	mov	r0, r3
 80003e4:	46bd      	mov	sp, r7
 80003e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ea:	4770      	bx	lr
 80003ec:	e000ed00 	.word	0xe000ed00

080003f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80003f0:	b480      	push	{r7}
 80003f2:	b083      	sub	sp, #12
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	4603      	mov	r3, r0
 80003f8:	6039      	str	r1, [r7, #0]
 80003fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000400:	2b00      	cmp	r3, #0
 8000402:	db0a      	blt.n	800041a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000404:	683b      	ldr	r3, [r7, #0]
 8000406:	b2da      	uxtb	r2, r3
 8000408:	490c      	ldr	r1, [pc, #48]	; (800043c <__NVIC_SetPriority+0x4c>)
 800040a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800040e:	0112      	lsls	r2, r2, #4
 8000410:	b2d2      	uxtb	r2, r2
 8000412:	440b      	add	r3, r1
 8000414:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000418:	e00a      	b.n	8000430 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800041a:	683b      	ldr	r3, [r7, #0]
 800041c:	b2da      	uxtb	r2, r3
 800041e:	4908      	ldr	r1, [pc, #32]	; (8000440 <__NVIC_SetPriority+0x50>)
 8000420:	79fb      	ldrb	r3, [r7, #7]
 8000422:	f003 030f 	and.w	r3, r3, #15
 8000426:	3b04      	subs	r3, #4
 8000428:	0112      	lsls	r2, r2, #4
 800042a:	b2d2      	uxtb	r2, r2
 800042c:	440b      	add	r3, r1
 800042e:	761a      	strb	r2, [r3, #24]
}
 8000430:	bf00      	nop
 8000432:	370c      	adds	r7, #12
 8000434:	46bd      	mov	sp, r7
 8000436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043a:	4770      	bx	lr
 800043c:	e000e100 	.word	0xe000e100
 8000440:	e000ed00 	.word	0xe000ed00

08000444 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000444:	b480      	push	{r7}
 8000446:	b089      	sub	sp, #36	; 0x24
 8000448:	af00      	add	r7, sp, #0
 800044a:	60f8      	str	r0, [r7, #12]
 800044c:	60b9      	str	r1, [r7, #8]
 800044e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000450:	68fb      	ldr	r3, [r7, #12]
 8000452:	f003 0307 	and.w	r3, r3, #7
 8000456:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000458:	69fb      	ldr	r3, [r7, #28]
 800045a:	f1c3 0307 	rsb	r3, r3, #7
 800045e:	2b04      	cmp	r3, #4
 8000460:	bf28      	it	cs
 8000462:	2304      	movcs	r3, #4
 8000464:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000466:	69fb      	ldr	r3, [r7, #28]
 8000468:	3304      	adds	r3, #4
 800046a:	2b06      	cmp	r3, #6
 800046c:	d902      	bls.n	8000474 <NVIC_EncodePriority+0x30>
 800046e:	69fb      	ldr	r3, [r7, #28]
 8000470:	3b03      	subs	r3, #3
 8000472:	e000      	b.n	8000476 <NVIC_EncodePriority+0x32>
 8000474:	2300      	movs	r3, #0
 8000476:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000478:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800047c:	69bb      	ldr	r3, [r7, #24]
 800047e:	fa02 f303 	lsl.w	r3, r2, r3
 8000482:	43da      	mvns	r2, r3
 8000484:	68bb      	ldr	r3, [r7, #8]
 8000486:	401a      	ands	r2, r3
 8000488:	697b      	ldr	r3, [r7, #20]
 800048a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800048c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000490:	697b      	ldr	r3, [r7, #20]
 8000492:	fa01 f303 	lsl.w	r3, r1, r3
 8000496:	43d9      	mvns	r1, r3
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800049c:	4313      	orrs	r3, r2
         );
}
 800049e:	4618      	mov	r0, r3
 80004a0:	3724      	adds	r7, #36	; 0x24
 80004a2:	46bd      	mov	sp, r7
 80004a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a8:	4770      	bx	lr
	...

080004ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b082      	sub	sp, #8
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	3b01      	subs	r3, #1
 80004b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80004bc:	d301      	bcc.n	80004c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80004be:	2301      	movs	r3, #1
 80004c0:	e00f      	b.n	80004e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80004c2:	4a0a      	ldr	r2, [pc, #40]	; (80004ec <SysTick_Config+0x40>)
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	3b01      	subs	r3, #1
 80004c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80004ca:	210f      	movs	r1, #15
 80004cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80004d0:	f7ff ff8e 	bl	80003f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80004d4:	4b05      	ldr	r3, [pc, #20]	; (80004ec <SysTick_Config+0x40>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004da:	4b04      	ldr	r3, [pc, #16]	; (80004ec <SysTick_Config+0x40>)
 80004dc:	2207      	movs	r2, #7
 80004de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80004e0:	2300      	movs	r3, #0
}
 80004e2:	4618      	mov	r0, r3
 80004e4:	3708      	adds	r7, #8
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	e000e010 	.word	0xe000e010

080004f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80004f8:	6878      	ldr	r0, [r7, #4]
 80004fa:	f7ff ff47 	bl	800038c <__NVIC_SetPriorityGrouping>
}
 80004fe:	bf00      	nop
 8000500:	3708      	adds	r7, #8
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}

08000506 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000506:	b580      	push	{r7, lr}
 8000508:	b086      	sub	sp, #24
 800050a:	af00      	add	r7, sp, #0
 800050c:	4603      	mov	r3, r0
 800050e:	60b9      	str	r1, [r7, #8]
 8000510:	607a      	str	r2, [r7, #4]
 8000512:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000514:	2300      	movs	r3, #0
 8000516:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000518:	f7ff ff5c 	bl	80003d4 <__NVIC_GetPriorityGrouping>
 800051c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800051e:	687a      	ldr	r2, [r7, #4]
 8000520:	68b9      	ldr	r1, [r7, #8]
 8000522:	6978      	ldr	r0, [r7, #20]
 8000524:	f7ff ff8e 	bl	8000444 <NVIC_EncodePriority>
 8000528:	4602      	mov	r2, r0
 800052a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800052e:	4611      	mov	r1, r2
 8000530:	4618      	mov	r0, r3
 8000532:	f7ff ff5d 	bl	80003f0 <__NVIC_SetPriority>
}
 8000536:	bf00      	nop
 8000538:	3718      	adds	r7, #24
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}

0800053e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800053e:	b580      	push	{r7, lr}
 8000540:	b082      	sub	sp, #8
 8000542:	af00      	add	r7, sp, #0
 8000544:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000546:	6878      	ldr	r0, [r7, #4]
 8000548:	f7ff ffb0 	bl	80004ac <SysTick_Config>
 800054c:	4603      	mov	r3, r0
}
 800054e:	4618      	mov	r0, r3
 8000550:	3708      	adds	r7, #8
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
	...

08000558 <__libc_init_array>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	4e0d      	ldr	r6, [pc, #52]	; (8000590 <__libc_init_array+0x38>)
 800055c:	4c0d      	ldr	r4, [pc, #52]	; (8000594 <__libc_init_array+0x3c>)
 800055e:	1ba4      	subs	r4, r4, r6
 8000560:	10a4      	asrs	r4, r4, #2
 8000562:	2500      	movs	r5, #0
 8000564:	42a5      	cmp	r5, r4
 8000566:	d109      	bne.n	800057c <__libc_init_array+0x24>
 8000568:	4e0b      	ldr	r6, [pc, #44]	; (8000598 <__libc_init_array+0x40>)
 800056a:	4c0c      	ldr	r4, [pc, #48]	; (800059c <__libc_init_array+0x44>)
 800056c:	f000 f818 	bl	80005a0 <_init>
 8000570:	1ba4      	subs	r4, r4, r6
 8000572:	10a4      	asrs	r4, r4, #2
 8000574:	2500      	movs	r5, #0
 8000576:	42a5      	cmp	r5, r4
 8000578:	d105      	bne.n	8000586 <__libc_init_array+0x2e>
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000580:	4798      	blx	r3
 8000582:	3501      	adds	r5, #1
 8000584:	e7ee      	b.n	8000564 <__libc_init_array+0xc>
 8000586:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800058a:	4798      	blx	r3
 800058c:	3501      	adds	r5, #1
 800058e:	e7f2      	b.n	8000576 <__libc_init_array+0x1e>
 8000590:	080005b8 	.word	0x080005b8
 8000594:	080005b8 	.word	0x080005b8
 8000598:	080005b8 	.word	0x080005b8
 800059c:	080005bc 	.word	0x080005bc

080005a0 <_init>:
 80005a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005a2:	bf00      	nop
 80005a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005a6:	bc08      	pop	{r3}
 80005a8:	469e      	mov	lr, r3
 80005aa:	4770      	bx	lr

080005ac <_fini>:
 80005ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005ae:	bf00      	nop
 80005b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005b2:	bc08      	pop	{r3}
 80005b4:	469e      	mov	lr, r3
 80005b6:	4770      	bx	lr
