
ds18d20_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002530  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080026f8  080026f8  000126f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002708  08002708  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002708  08002708  00012708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002710  08002710  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002710  08002710  00012710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002714  08002714  00012714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002718  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000000c  08002724  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  08002724  00020074  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000953e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000181f  00000000  00000000  0002957a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a60  00000000  00000000  0002ada0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000988  00000000  00000000  0002b800  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020bfa  00000000  00000000  0002c188  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007f74  00000000  00000000  0004cd82  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c8d51  00000000  00000000  00054cf6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011da47  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002aa8  00000000  00000000  0011dac4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080026e0 	.word	0x080026e0

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	080026e0 	.word	0x080026e0

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000218:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800021c:	f000 b972 	b.w	8000504 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	4688      	mov	r8, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14b      	bne.n	80002de <__udivmoddi4+0xa6>
 8000246:	428a      	cmp	r2, r1
 8000248:	4615      	mov	r5, r2
 800024a:	d967      	bls.n	800031c <__udivmoddi4+0xe4>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0720 	rsb	r7, r2, #32
 8000256:	fa01 f302 	lsl.w	r3, r1, r2
 800025a:	fa20 f707 	lsr.w	r7, r0, r7
 800025e:	4095      	lsls	r5, r2
 8000260:	ea47 0803 	orr.w	r8, r7, r3
 8000264:	4094      	lsls	r4, r2
 8000266:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800026a:	0c23      	lsrs	r3, r4, #16
 800026c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000270:	fa1f fc85 	uxth.w	ip, r5
 8000274:	fb0e 8817 	mls	r8, lr, r7, r8
 8000278:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027c:	fb07 f10c 	mul.w	r1, r7, ip
 8000280:	4299      	cmp	r1, r3
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x60>
 8000284:	18eb      	adds	r3, r5, r3
 8000286:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800028a:	f080 811b 	bcs.w	80004c4 <__udivmoddi4+0x28c>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 8118 	bls.w	80004c4 <__udivmoddi4+0x28c>
 8000294:	3f02      	subs	r7, #2
 8000296:	442b      	add	r3, r5
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002ac:	45a4      	cmp	ip, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x8c>
 80002b0:	192c      	adds	r4, r5, r4
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x290>
 80002ba:	45a4      	cmp	ip, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x290>
 80002c0:	3802      	subs	r0, #2
 80002c2:	442c      	add	r4, r5
 80002c4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c8:	eba4 040c 	sub.w	r4, r4, ip
 80002cc:	2700      	movs	r7, #0
 80002ce:	b11e      	cbz	r6, 80002d8 <__udivmoddi4+0xa0>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c6 4300 	strd	r4, r3, [r6]
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xbe>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80eb 	beq.w	80004be <__udivmoddi4+0x286>
 80002e8:	2700      	movs	r7, #0
 80002ea:	e9c6 0100 	strd	r0, r1, [r6]
 80002ee:	4638      	mov	r0, r7
 80002f0:	4639      	mov	r1, r7
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f783 	clz	r7, r3
 80002fa:	2f00      	cmp	r7, #0
 80002fc:	d147      	bne.n	800038e <__udivmoddi4+0x156>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd0>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80fa 	bhi.w	80004fc <__udivmoddi4+0x2c4>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	4698      	mov	r8, r3
 8000312:	2e00      	cmp	r6, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa0>
 8000316:	e9c6 4800 	strd	r4, r8, [r6]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa0>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xe8>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 808f 	bne.w	8000448 <__udivmoddi4+0x210>
 800032a:	1b49      	subs	r1, r1, r5
 800032c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000330:	fa1f f885 	uxth.w	r8, r5
 8000334:	2701      	movs	r7, #1
 8000336:	fbb1 fcfe 	udiv	ip, r1, lr
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000340:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000344:	fb08 f10c 	mul.w	r1, r8, ip
 8000348:	4299      	cmp	r1, r3
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x124>
 800034c:	18eb      	adds	r3, r5, r3
 800034e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4299      	cmp	r1, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2bc>
 800035a:	4684      	mov	ip, r0
 800035c:	1a59      	subs	r1, r3, r1
 800035e:	b2a3      	uxth	r3, r4
 8000360:	fbb1 f0fe 	udiv	r0, r1, lr
 8000364:	fb0e 1410 	mls	r4, lr, r0, r1
 8000368:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800036c:	fb08 f800 	mul.w	r8, r8, r0
 8000370:	45a0      	cmp	r8, r4
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x14c>
 8000374:	192c      	adds	r4, r5, r4
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x14a>
 800037c:	45a0      	cmp	r8, r4
 800037e:	f200 80b6 	bhi.w	80004ee <__udivmoddi4+0x2b6>
 8000382:	4618      	mov	r0, r3
 8000384:	eba4 0408 	sub.w	r4, r4, r8
 8000388:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800038c:	e79f      	b.n	80002ce <__udivmoddi4+0x96>
 800038e:	f1c7 0c20 	rsb	ip, r7, #32
 8000392:	40bb      	lsls	r3, r7
 8000394:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000398:	ea4e 0e03 	orr.w	lr, lr, r3
 800039c:	fa01 f407 	lsl.w	r4, r1, r7
 80003a0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003ac:	4325      	orrs	r5, r4
 80003ae:	fbb3 f9f8 	udiv	r9, r3, r8
 80003b2:	0c2c      	lsrs	r4, r5, #16
 80003b4:	fb08 3319 	mls	r3, r8, r9, r3
 80003b8:	fa1f fa8e 	uxth.w	sl, lr
 80003bc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c0:	fb09 f40a 	mul.w	r4, r9, sl
 80003c4:	429c      	cmp	r4, r3
 80003c6:	fa02 f207 	lsl.w	r2, r2, r7
 80003ca:	fa00 f107 	lsl.w	r1, r0, r7
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1e 0303 	adds.w	r3, lr, r3
 80003d4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003d8:	f080 8087 	bcs.w	80004ea <__udivmoddi4+0x2b2>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f240 8084 	bls.w	80004ea <__udivmoddi4+0x2b2>
 80003e2:	f1a9 0902 	sub.w	r9, r9, #2
 80003e6:	4473      	add	r3, lr
 80003e8:	1b1b      	subs	r3, r3, r4
 80003ea:	b2ad      	uxth	r5, r5
 80003ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f0:	fb08 3310 	mls	r3, r8, r0, r3
 80003f4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003fc:	45a2      	cmp	sl, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1e 0404 	adds.w	r4, lr, r4
 8000404:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000408:	d26b      	bcs.n	80004e2 <__udivmoddi4+0x2aa>
 800040a:	45a2      	cmp	sl, r4
 800040c:	d969      	bls.n	80004e2 <__udivmoddi4+0x2aa>
 800040e:	3802      	subs	r0, #2
 8000410:	4474      	add	r4, lr
 8000412:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000416:	fba0 8902 	umull	r8, r9, r0, r2
 800041a:	eba4 040a 	sub.w	r4, r4, sl
 800041e:	454c      	cmp	r4, r9
 8000420:	46c2      	mov	sl, r8
 8000422:	464b      	mov	r3, r9
 8000424:	d354      	bcc.n	80004d0 <__udivmoddi4+0x298>
 8000426:	d051      	beq.n	80004cc <__udivmoddi4+0x294>
 8000428:	2e00      	cmp	r6, #0
 800042a:	d069      	beq.n	8000500 <__udivmoddi4+0x2c8>
 800042c:	ebb1 050a 	subs.w	r5, r1, sl
 8000430:	eb64 0403 	sbc.w	r4, r4, r3
 8000434:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000438:	40fd      	lsrs	r5, r7
 800043a:	40fc      	lsrs	r4, r7
 800043c:	ea4c 0505 	orr.w	r5, ip, r5
 8000440:	e9c6 5400 	strd	r5, r4, [r6]
 8000444:	2700      	movs	r7, #0
 8000446:	e747      	b.n	80002d8 <__udivmoddi4+0xa0>
 8000448:	f1c2 0320 	rsb	r3, r2, #32
 800044c:	fa20 f703 	lsr.w	r7, r0, r3
 8000450:	4095      	lsls	r5, r2
 8000452:	fa01 f002 	lsl.w	r0, r1, r2
 8000456:	fa21 f303 	lsr.w	r3, r1, r3
 800045a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045e:	4338      	orrs	r0, r7
 8000460:	0c01      	lsrs	r1, r0, #16
 8000462:	fbb3 f7fe 	udiv	r7, r3, lr
 8000466:	fa1f f885 	uxth.w	r8, r5
 800046a:	fb0e 3317 	mls	r3, lr, r7, r3
 800046e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000472:	fb07 f308 	mul.w	r3, r7, r8
 8000476:	428b      	cmp	r3, r1
 8000478:	fa04 f402 	lsl.w	r4, r4, r2
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x256>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000484:	d22f      	bcs.n	80004e6 <__udivmoddi4+0x2ae>
 8000486:	428b      	cmp	r3, r1
 8000488:	d92d      	bls.n	80004e6 <__udivmoddi4+0x2ae>
 800048a:	3f02      	subs	r7, #2
 800048c:	4429      	add	r1, r5
 800048e:	1acb      	subs	r3, r1, r3
 8000490:	b281      	uxth	r1, r0
 8000492:	fbb3 f0fe 	udiv	r0, r3, lr
 8000496:	fb0e 3310 	mls	r3, lr, r0, r3
 800049a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049e:	fb00 f308 	mul.w	r3, r0, r8
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d907      	bls.n	80004b6 <__udivmoddi4+0x27e>
 80004a6:	1869      	adds	r1, r5, r1
 80004a8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004ac:	d217      	bcs.n	80004de <__udivmoddi4+0x2a6>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d915      	bls.n	80004de <__udivmoddi4+0x2a6>
 80004b2:	3802      	subs	r0, #2
 80004b4:	4429      	add	r1, r5
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004bc:	e73b      	b.n	8000336 <__udivmoddi4+0xfe>
 80004be:	4637      	mov	r7, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e709      	b.n	80002d8 <__udivmoddi4+0xa0>
 80004c4:	4607      	mov	r7, r0
 80004c6:	e6e7      	b.n	8000298 <__udivmoddi4+0x60>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x8c>
 80004cc:	4541      	cmp	r1, r8
 80004ce:	d2ab      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d4:	eb69 020e 	sbc.w	r2, r9, lr
 80004d8:	3801      	subs	r0, #1
 80004da:	4613      	mov	r3, r2
 80004dc:	e7a4      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004de:	4660      	mov	r0, ip
 80004e0:	e7e9      	b.n	80004b6 <__udivmoddi4+0x27e>
 80004e2:	4618      	mov	r0, r3
 80004e4:	e795      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e6:	4667      	mov	r7, ip
 80004e8:	e7d1      	b.n	800048e <__udivmoddi4+0x256>
 80004ea:	4681      	mov	r9, r0
 80004ec:	e77c      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004ee:	3802      	subs	r0, #2
 80004f0:	442c      	add	r4, r5
 80004f2:	e747      	b.n	8000384 <__udivmoddi4+0x14c>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	442b      	add	r3, r5
 80004fa:	e72f      	b.n	800035c <__udivmoddi4+0x124>
 80004fc:	4638      	mov	r0, r7
 80004fe:	e708      	b.n	8000312 <__udivmoddi4+0xda>
 8000500:	4637      	mov	r7, r6
 8000502:	e6e9      	b.n	80002d8 <__udivmoddi4+0xa0>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <MX_TIM1_Init>:
 *
 * @Note              -  this is generated with MX cube and modified to meet requirements

 */
uint8_t MX_TIM1_Init(TIM_HandleTypeDef *pHtim1)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b088      	sub	sp, #32
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000510:	f107 0310 	add.w	r3, r7, #16
 8000514:	2200      	movs	r2, #0
 8000516:	601a      	str	r2, [r3, #0]
 8000518:	605a      	str	r2, [r3, #4]
 800051a:	609a      	str	r2, [r3, #8]
 800051c:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800051e:	f107 0308 	add.w	r3, r7, #8
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  pHtim1->Instance = TIM1;
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	4a1f      	ldr	r2, [pc, #124]	; (80005a8 <MX_TIM1_Init+0xa0>)
 800052c:	601a      	str	r2, [r3, #0]
  pHtim1->Init.Prescaler = 84-1;
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	2253      	movs	r2, #83	; 0x53
 8000532:	605a      	str	r2, [r3, #4]
  pHtim1->Init.CounterMode = TIM_COUNTERMODE_UP;
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	2200      	movs	r2, #0
 8000538:	609a      	str	r2, [r3, #8]
  pHtim1->Init.Period = 0xffff-1;
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000540:	60da      	str	r2, [r3, #12]
  pHtim1->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	2200      	movs	r2, #0
 8000546:	611a      	str	r2, [r3, #16]
  pHtim1->Init.RepetitionCounter = 0;
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	2200      	movs	r2, #0
 800054c:	615a      	str	r2, [r3, #20]
  pHtim1->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	2200      	movs	r2, #0
 8000552:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(pHtim1) != HAL_OK)
 8000554:	6878      	ldr	r0, [r7, #4]
 8000556:	f001 fddb 	bl	8002110 <HAL_TIM_Base_Init>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <MX_TIM1_Init+0x5c>
  {
    return 0;
 8000560:	2300      	movs	r3, #0
 8000562:	e01d      	b.n	80005a0 <MX_TIM1_Init+0x98>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000564:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000568:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(pHtim1, &sClockSourceConfig) != HAL_OK)
 800056a:	f107 0310 	add.w	r3, r7, #16
 800056e:	4619      	mov	r1, r3
 8000570:	6878      	ldr	r0, [r7, #4]
 8000572:	f001 fe1c 	bl	80021ae <HAL_TIM_ConfigClockSource>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <MX_TIM1_Init+0x78>
  {
	  return 0;
 800057c:	2300      	movs	r3, #0
 800057e:	e00f      	b.n	80005a0 <MX_TIM1_Init+0x98>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000580:	2300      	movs	r3, #0
 8000582:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000584:	2300      	movs	r3, #0
 8000586:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(pHtim1, &sMasterConfig) != HAL_OK)
 8000588:	f107 0308 	add.w	r3, r7, #8
 800058c:	4619      	mov	r1, r3
 800058e:	6878      	ldr	r0, [r7, #4]
 8000590:	f001 fffe 	bl	8002590 <HAL_TIMEx_MasterConfigSynchronization>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <MX_TIM1_Init+0x96>
  {
	  return 0;
 800059a:	2300      	movs	r3, #0
 800059c:	e000      	b.n	80005a0 <MX_TIM1_Init+0x98>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  return 1;
 800059e:	2301      	movs	r3, #1
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	3720      	adds	r7, #32
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	40010000 	.word	0x40010000

080005ac <Delay_us>:
 *
 * @Note              -  tested with salea logic analyzer, works good enough (1-3 microseconds variability)

 */
void Delay_us (uint32_t u_seconds)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b093      	sub	sp, #76	; 0x4c
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef htim1;
	htim1.Instance = TIM1;
 80005b4:	4b08      	ldr	r3, [pc, #32]	; (80005d8 <Delay_us+0x2c>)
 80005b6:	60bb      	str	r3, [r7, #8]

	__HAL_TIM_SET_COUNTER(&htim1, 0);			//this func starts counter at 0 and waits until its greater than u_seconds parameter
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	2200      	movs	r2, #0
 80005bc:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim1) < u_seconds);
 80005be:	bf00      	nop
 80005c0:	68bb      	ldr	r3, [r7, #8]
 80005c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005c4:	687a      	ldr	r2, [r7, #4]
 80005c6:	429a      	cmp	r2, r3
 80005c8:	d8fa      	bhi.n	80005c0 <Delay_us+0x14>
}
 80005ca:	bf00      	nop
 80005cc:	374c      	adds	r7, #76	; 0x4c
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	40010000 	.word	0x40010000

080005dc <Ds18b20_init_phase>:
 *
 * @Note              -  none

 */
uint8_t Ds18b20_init_phase(DS18B20_Handle_t *hds18b20)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	uint8_t response = 0;
 80005e4:	2300      	movs	r3, #0
 80005e6:	73fb      	strb	r3, [r7, #15]

	Set_pin_as_out(hds18b20->pGPIOx, hds18b20->GPIO_pin);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	685a      	ldr	r2, [r3, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	4619      	mov	r1, r3
 80005f2:	4610      	mov	r0, r2
 80005f4:	f000 fb18 	bl	8000c28 <Set_pin_as_out>

	Write_pin(hds18b20->pGPIOx, hds18b20->GPIO_pin, LOW);	//pull data line to LOW for 480-950 microseconds (RESET signal)
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	6858      	ldr	r0, [r3, #4]
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	2200      	movs	r2, #0
 8000602:	4619      	mov	r1, r3
 8000604:	f000 fb48 	bl	8000c98 <Write_pin>
	Delay_us(550);
 8000608:	f240 2026 	movw	r0, #550	; 0x226
 800060c:	f7ff ffce 	bl	80005ac <Delay_us>

	Set_pin_as_in(hds18b20->pGPIOx, hds18b20->GPIO_pin);
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	685a      	ldr	r2, [r3, #4]
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	4619      	mov	r1, r3
 800061a:	4610      	mov	r0, r2
 800061c:	f000 fb25 	bl	8000c6a <Set_pin_as_in>
	Delay_us(80);
 8000620:	2050      	movs	r0, #80	; 0x50
 8000622:	f7ff ffc3 	bl	80005ac <Delay_us>

	if(!Read_pin(hds18b20->pGPIOx, hds18b20->GPIO_pin))	//scan for PRESENCE signal (LOW data line)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	685a      	ldr	r2, [r3, #4]
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	4619      	mov	r1, r3
 8000630:	4610      	mov	r0, r2
 8000632:	f000 fb56 	bl	8000ce2 <Read_pin>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d101      	bne.n	8000640 <Ds18b20_init_phase+0x64>
	{
		response = 1;
 800063c:	2301      	movs	r3, #1
 800063e:	73fb      	strb	r3, [r7, #15]
	}

	Delay_us(200);
 8000640:	20c8      	movs	r0, #200	; 0xc8
 8000642:	f7ff ffb3 	bl	80005ac <Delay_us>
	return response;
 8000646:	7bfb      	ldrb	r3, [r7, #15]
}
 8000648:	4618      	mov	r0, r3
 800064a:	3710      	adds	r7, #16
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}

08000650 <Ds18b20_command>:
 * @return            -  none
 *
 * @Note              -  This is used after presence signal is received
 */
void Ds18b20_command(DS18B20_Handle_t *pDs18b20, uint8_t command)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
 8000658:	460b      	mov	r3, r1
 800065a:	70fb      	strb	r3, [r7, #3]
	Ds18b20_write_byte(pDs18b20, command);
 800065c:	78fb      	ldrb	r3, [r7, #3]
 800065e:	4619      	mov	r1, r3
 8000660:	6878      	ldr	r0, [r7, #4]
 8000662:	f000 fa21 	bl	8000aa8 <Ds18b20_write_byte>
}
 8000666:	bf00      	nop
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}

0800066e <Ds18b20_rom_read>:
 * @return            - uint64_t unique device code
 *
 * @Note              -  This is used after presence signal is received
 */
uint64_t Ds18b20_rom_read(DS18B20_Handle_t *pDs18b20)
{
 800066e:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8000672:	b086      	sub	sp, #24
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
	Ds18b20_command(pDs18b20, DS18B20_ROM_READ);
 8000678:	2133      	movs	r1, #51	; 0x33
 800067a:	6878      	ldr	r0, [r7, #4]
 800067c:	f7ff ffe8 	bl	8000650 <Ds18b20_command>
	uint64_t rom = 0;
 8000680:	f04f 0200 	mov.w	r2, #0
 8000684:	f04f 0300 	mov.w	r3, #0
 8000688:	e9c7 2304 	strd	r2, r3, [r7, #16]

	//the first 8 bits are 1-Wire family code
	rom |= (((uint64_t)Ds18b20_read_byte(pDs18b20) & 0xFF) << 7*8);
 800068c:	6878      	ldr	r0, [r7, #4]
 800068e:	f000 fa60 	bl	8000b52 <Ds18b20_read_byte>
 8000692:	4603      	mov	r3, r0
 8000694:	b2d8      	uxtb	r0, r3
 8000696:	f04f 0100 	mov.w	r1, #0
 800069a:	f04f 0b00 	mov.w	fp, #0
 800069e:	f04f 0c00 	mov.w	ip, #0
 80006a2:	ea4f 6c00 	mov.w	ip, r0, lsl #24
 80006a6:	f04f 0b00 	mov.w	fp, #0
 80006aa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80006ae:	ea4b 0200 	orr.w	r2, fp, r0
 80006b2:	ea4c 0301 	orr.w	r3, ip, r1
 80006b6:	e9c7 2304 	strd	r2, r3, [r7, #16]

	//the next 48 bits are unique serial number
	for(int i = 1; i < 7; i++)
 80006ba:	2301      	movs	r3, #1
 80006bc:	60fb      	str	r3, [r7, #12]
 80006be:	e021      	b.n	8000704 <Ds18b20_rom_read+0x96>
	{
		rom |= (((uint64_t)Ds18b20_read_byte(pDs18b20) & 0xFF) << i*8);
 80006c0:	6878      	ldr	r0, [r7, #4]
 80006c2:	f000 fa46 	bl	8000b52 <Ds18b20_read_byte>
 80006c6:	4603      	mov	r3, r0
 80006c8:	b2da      	uxtb	r2, r3
 80006ca:	f04f 0300 	mov.w	r3, #0
 80006ce:	68f9      	ldr	r1, [r7, #12]
 80006d0:	00c9      	lsls	r1, r1, #3
 80006d2:	f1a1 0620 	sub.w	r6, r1, #32
 80006d6:	f1c1 0020 	rsb	r0, r1, #32
 80006da:	fa03 f501 	lsl.w	r5, r3, r1
 80006de:	fa02 f606 	lsl.w	r6, r2, r6
 80006e2:	4335      	orrs	r5, r6
 80006e4:	fa22 f000 	lsr.w	r0, r2, r0
 80006e8:	4305      	orrs	r5, r0
 80006ea:	fa02 f401 	lsl.w	r4, r2, r1
 80006ee:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80006f2:	ea42 0004 	orr.w	r0, r2, r4
 80006f6:	ea43 0105 	orr.w	r1, r3, r5
 80006fa:	e9c7 0104 	strd	r0, r1, [r7, #16]
	for(int i = 1; i < 7; i++)
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	3301      	adds	r3, #1
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	2b06      	cmp	r3, #6
 8000708:	ddda      	ble.n	80006c0 <Ds18b20_rom_read+0x52>
	}

	//last 8 bits are CRC of the firs 56 bits
	rom |= (((uint64_t)Ds18b20_read_byte(pDs18b20) & 0xFF) << 0);
 800070a:	6878      	ldr	r0, [r7, #4]
 800070c:	f000 fa21 	bl	8000b52 <Ds18b20_read_byte>
 8000710:	4603      	mov	r3, r0
 8000712:	b2dd      	uxtb	r5, r3
 8000714:	f04f 0600 	mov.w	r6, #0
 8000718:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800071c:	ea45 0301 	orr.w	r3, r5, r1
 8000720:	ea46 0402 	orr.w	r4, r6, r2
 8000724:	e9c7 3404 	strd	r3, r4, [r7, #16]

	return rom;
 8000728:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
}
 800072c:	4618      	mov	r0, r3
 800072e:	4621      	mov	r1, r4
 8000730:	3718      	adds	r7, #24
 8000732:	46bd      	mov	sp, r7
 8000734:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}

08000738 <Ds18b20_rom_match>:
 * @return            - none
 *
 * @Note              - If match is found device will accept next command, else it will wait for reset signal
 */
void Ds18b20_rom_match(DS18B20_Handle_t *pDs18b20, uint64_t rom_sequence)
{
 8000738:	b5f0      	push	{r4, r5, r6, r7, lr}
 800073a:	b087      	sub	sp, #28
 800073c:	af00      	add	r7, sp, #0
 800073e:	60f8      	str	r0, [r7, #12]
 8000740:	e9c7 2300 	strd	r2, r3, [r7]
	uint8_t next_byte = 0;
 8000744:	2300      	movs	r3, #0
 8000746:	74fb      	strb	r3, [r7, #19]

	//Send command to match rom
	Ds18b20_command(pDs18b20, DS18B20_ROM_MATCH);
 8000748:	2155      	movs	r1, #85	; 0x55
 800074a:	68f8      	ldr	r0, [r7, #12]
 800074c:	f7ff ff80 	bl	8000650 <Ds18b20_command>

	next_byte |= ((rom_sequence >> (7*8)) & 0xFF);
 8000750:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000754:	f04f 0200 	mov.w	r2, #0
 8000758:	f04f 0300 	mov.w	r3, #0
 800075c:	0e0a      	lsrs	r2, r1, #24
 800075e:	2300      	movs	r3, #0
 8000760:	b2d2      	uxtb	r2, r2
 8000762:	7cfb      	ldrb	r3, [r7, #19]
 8000764:	4313      	orrs	r3, r2
 8000766:	74fb      	strb	r3, [r7, #19]
	Ds18b20_write_byte(pDs18b20, next_byte);
 8000768:	7cfb      	ldrb	r3, [r7, #19]
 800076a:	4619      	mov	r1, r3
 800076c:	68f8      	ldr	r0, [r7, #12]
 800076e:	f000 f99b 	bl	8000aa8 <Ds18b20_write_byte>

	//Send unique ROM code to Data line
	for(int i = 1; i < 7; i++)
 8000772:	2301      	movs	r3, #1
 8000774:	617b      	str	r3, [r7, #20]
 8000776:	e01f      	b.n	80007b8 <Ds18b20_rom_match+0x80>
	{
		next_byte = 0;
 8000778:	2300      	movs	r3, #0
 800077a:	74fb      	strb	r3, [r7, #19]
		next_byte |= (rom_sequence >> i * 8) & 0xFF;
 800077c:	697b      	ldr	r3, [r7, #20]
 800077e:	00d9      	lsls	r1, r3, #3
 8000780:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000784:	f1c1 0620 	rsb	r6, r1, #32
 8000788:	f1a1 0020 	sub.w	r0, r1, #32
 800078c:	fa22 f401 	lsr.w	r4, r2, r1
 8000790:	fa03 f606 	lsl.w	r6, r3, r6
 8000794:	4334      	orrs	r4, r6
 8000796:	fa23 f000 	lsr.w	r0, r3, r0
 800079a:	4304      	orrs	r4, r0
 800079c:	fa23 f501 	lsr.w	r5, r3, r1
 80007a0:	b2e2      	uxtb	r2, r4
 80007a2:	7cfb      	ldrb	r3, [r7, #19]
 80007a4:	4313      	orrs	r3, r2
 80007a6:	74fb      	strb	r3, [r7, #19]
		Ds18b20_write_byte(pDs18b20, next_byte);
 80007a8:	7cfb      	ldrb	r3, [r7, #19]
 80007aa:	4619      	mov	r1, r3
 80007ac:	68f8      	ldr	r0, [r7, #12]
 80007ae:	f000 f97b 	bl	8000aa8 <Ds18b20_write_byte>
	for(int i = 1; i < 7; i++)
 80007b2:	697b      	ldr	r3, [r7, #20]
 80007b4:	3301      	adds	r3, #1
 80007b6:	617b      	str	r3, [r7, #20]
 80007b8:	697b      	ldr	r3, [r7, #20]
 80007ba:	2b06      	cmp	r3, #6
 80007bc:	dddc      	ble.n	8000778 <Ds18b20_rom_match+0x40>
	}

	next_byte = 0;
 80007be:	2300      	movs	r3, #0
 80007c0:	74fb      	strb	r3, [r7, #19]
	next_byte |= ((rom_sequence >> 0) & 0xFF);
 80007c2:	783a      	ldrb	r2, [r7, #0]
 80007c4:	7cfb      	ldrb	r3, [r7, #19]
 80007c6:	4313      	orrs	r3, r2
 80007c8:	74fb      	strb	r3, [r7, #19]
	Ds18b20_write_byte(pDs18b20, next_byte);
 80007ca:	7cfb      	ldrb	r3, [r7, #19]
 80007cc:	4619      	mov	r1, r3
 80007ce:	68f8      	ldr	r0, [r7, #12]
 80007d0:	f000 f96a 	bl	8000aa8 <Ds18b20_write_byte>
}
 80007d4:	bf00      	nop
 80007d6:	371c      	adds	r7, #28
 80007d8:	46bd      	mov	sp, r7
 80007da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080007dc <Ds18b20_rom_skip>:
 * @return            - none
 *
 * @Note              - If more than one device is present, data collision will ocur
 */
void Ds18b20_rom_skip(DS18B20_Handle_t *pDs18b20)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
	Ds18b20_command(pDs18b20, DS18B20_ROM_SKIP);
 80007e4:	21cc      	movs	r1, #204	; 0xcc
 80007e6:	6878      	ldr	r0, [r7, #4]
 80007e8:	f7ff ff32 	bl	8000650 <Ds18b20_command>
}
 80007ec:	bf00      	nop
 80007ee:	3708      	adds	r7, #8
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}

080007f4 <Ds18b20_pad_write>:
 * @return            - none
 *
 * @Note              - scratchpad registers 2, 3, 4 must all be writen beffore reset is issued
 */
void Ds18b20_pad_write(DS18B20_Handle_t *pDs18b20, uint8_t temp_resolution, uint8_t th, uint8_t tl)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b084      	sub	sp, #16
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
 80007fc:	4608      	mov	r0, r1
 80007fe:	4611      	mov	r1, r2
 8000800:	461a      	mov	r2, r3
 8000802:	4603      	mov	r3, r0
 8000804:	70fb      	strb	r3, [r7, #3]
 8000806:	460b      	mov	r3, r1
 8000808:	70bb      	strb	r3, [r7, #2]
 800080a:	4613      	mov	r3, r2
 800080c:	707b      	strb	r3, [r7, #1]
	Ds18b20_command(pDs18b20, DS18B20_MEMORY_PAD_WRITE);
 800080e:	214e      	movs	r1, #78	; 0x4e
 8000810:	6878      	ldr	r0, [r7, #4]
 8000812:	f7ff ff1d 	bl	8000650 <Ds18b20_command>
	Ds18b20_write_byte(pDs18b20, th);
 8000816:	78bb      	ldrb	r3, [r7, #2]
 8000818:	4619      	mov	r1, r3
 800081a:	6878      	ldr	r0, [r7, #4]
 800081c:	f000 f944 	bl	8000aa8 <Ds18b20_write_byte>
	Ds18b20_write_byte(pDs18b20, tl);
 8000820:	787b      	ldrb	r3, [r7, #1]
 8000822:	4619      	mov	r1, r3
 8000824:	6878      	ldr	r0, [r7, #4]
 8000826:	f000 f93f 	bl	8000aa8 <Ds18b20_write_byte>

	uint8_t temp_resolution_reg = 0;
 800082a:	2300      	movs	r3, #0
 800082c:	73fb      	strb	r3, [r7, #15]
	temp_resolution_reg |= (temp_resolution << 5);
 800082e:	78fb      	ldrb	r3, [r7, #3]
 8000830:	015b      	lsls	r3, r3, #5
 8000832:	b25a      	sxtb	r2, r3
 8000834:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000838:	4313      	orrs	r3, r2
 800083a:	b25b      	sxtb	r3, r3
 800083c:	73fb      	strb	r3, [r7, #15]
	Ds18b20_write_byte(pDs18b20, temp_resolution_reg);
 800083e:	7bfb      	ldrb	r3, [r7, #15]
 8000840:	4619      	mov	r1, r3
 8000842:	6878      	ldr	r0, [r7, #4]
 8000844:	f000 f930 	bl	8000aa8 <Ds18b20_write_byte>
}
 8000848:	bf00      	nop
 800084a:	3710      	adds	r7, #16
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}

08000850 <Ds18b20_pad_read>:
 * @return            - uint64_t scratcpad
 *
 * @Note              - Must be followed by Ds18b20_conv_t function
 */
uint64_t Ds18b20_pad_read(DS18B20_Handle_t *pDs18b20)
{
 8000850:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8000854:	b086      	sub	sp, #24
 8000856:	af00      	add	r7, sp, #0
 8000858:	6078      	str	r0, [r7, #4]
	uint64_t pad = 0;
 800085a:	f04f 0300 	mov.w	r3, #0
 800085e:	f04f 0400 	mov.w	r4, #0
 8000862:	e9c7 3404 	strd	r3, r4, [r7, #16]
	Ds18b20_command(pDs18b20, DS18B20_MEMORY_PAD_READ);
 8000866:	21be      	movs	r1, #190	; 0xbe
 8000868:	6878      	ldr	r0, [r7, #4]
 800086a:	f7ff fef1 	bl	8000650 <Ds18b20_command>

	for(int i = 0; i < 8; i++)
 800086e:	2300      	movs	r3, #0
 8000870:	60fb      	str	r3, [r7, #12]
 8000872:	e016      	b.n	80008a2 <Ds18b20_pad_read+0x52>
	{
		pad |= (Ds18b20_read_byte(pDs18b20) << i * 8);
 8000874:	6878      	ldr	r0, [r7, #4]
 8000876:	f000 f96c 	bl	8000b52 <Ds18b20_read_byte>
 800087a:	4603      	mov	r3, r0
 800087c:	461a      	mov	r2, r3
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	00db      	lsls	r3, r3, #3
 8000882:	fa02 f303 	lsl.w	r3, r2, r3
 8000886:	469b      	mov	fp, r3
 8000888:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 800088c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8000890:	ea4b 0301 	orr.w	r3, fp, r1
 8000894:	ea4c 0402 	orr.w	r4, ip, r2
 8000898:	e9c7 3404 	strd	r3, r4, [r7, #16]
	for(int i = 0; i < 8; i++)
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	3301      	adds	r3, #1
 80008a0:	60fb      	str	r3, [r7, #12]
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	2b07      	cmp	r3, #7
 80008a6:	dde5      	ble.n	8000874 <Ds18b20_pad_read+0x24>
	}

	return pad;
 80008a8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	4621      	mov	r1, r4
 80008b0:	3718      	adds	r7, #24
 80008b2:	46bd      	mov	sp, r7
 80008b4:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

080008b8 <Ds18b20_read_temp>:
 * @return            - float celsius
 *
 * @Note              - Must be followed by Ds18b20_conv_t function
 */
float Ds18b20_read_temp(DS18B20_Handle_t *pDs18b20)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b086      	sub	sp, #24
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
	float celsius = 0;
 80008c0:	f04f 0300 	mov.w	r3, #0
 80008c4:	617b      	str	r3, [r7, #20]
	uint16_t temp = 0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	827b      	strh	r3, [r7, #18]
	uint8_t dummy;
	uint8_t config = 0;
 80008ca:	2300      	movs	r3, #0
 80008cc:	72fb      	strb	r3, [r7, #11]

	Ds18b20_command(pDs18b20, DS18B20_MEMORY_PAD_READ);
 80008ce:	21be      	movs	r1, #190	; 0xbe
 80008d0:	6878      	ldr	r0, [r7, #4]
 80008d2:	f7ff febd 	bl	8000650 <Ds18b20_command>

	//Read Temp
	for(int i = 0; i < 2; i++)
 80008d6:	2300      	movs	r3, #0
 80008d8:	60fb      	str	r3, [r7, #12]
 80008da:	e011      	b.n	8000900 <Ds18b20_read_temp+0x48>
	{
		temp |= (Ds18b20_read_byte(pDs18b20) << i * 8);
 80008dc:	6878      	ldr	r0, [r7, #4]
 80008de:	f000 f938 	bl	8000b52 <Ds18b20_read_byte>
 80008e2:	4603      	mov	r3, r0
 80008e4:	461a      	mov	r2, r3
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	00db      	lsls	r3, r3, #3
 80008ea:	fa02 f303 	lsl.w	r3, r2, r3
 80008ee:	b21a      	sxth	r2, r3
 80008f0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80008f4:	4313      	orrs	r3, r2
 80008f6:	b21b      	sxth	r3, r3
 80008f8:	827b      	strh	r3, [r7, #18]
	for(int i = 0; i < 2; i++)
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	3301      	adds	r3, #1
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	2b01      	cmp	r3, #1
 8000904:	ddea      	ble.n	80008dc <Ds18b20_read_temp+0x24>
	}

	//Two dummy reads
	dummy = Ds18b20_read_byte(pDs18b20);
 8000906:	6878      	ldr	r0, [r7, #4]
 8000908:	f000 f923 	bl	8000b52 <Ds18b20_read_byte>
 800090c:	4603      	mov	r3, r0
 800090e:	72bb      	strb	r3, [r7, #10]
	dummy = Ds18b20_read_byte(pDs18b20);
 8000910:	6878      	ldr	r0, [r7, #4]
 8000912:	f000 f91e 	bl	8000b52 <Ds18b20_read_byte>
 8000916:	4603      	mov	r3, r0
 8000918:	72bb      	strb	r3, [r7, #10]
	(void)dummy;

	//Configuration register read
	config = Ds18b20_read_byte(pDs18b20);
 800091a:	6878      	ldr	r0, [r7, #4]
 800091c:	f000 f919 	bl	8000b52 <Ds18b20_read_byte>
 8000920:	4603      	mov	r3, r0
 8000922:	72fb      	strb	r3, [r7, #11]
	config = config >> 5;
 8000924:	7afb      	ldrb	r3, [r7, #11]
 8000926:	095b      	lsrs	r3, r3, #5
 8000928:	72fb      	strb	r3, [r7, #11]

	//select right resolution
	switch (config)
 800092a:	7afb      	ldrb	r3, [r7, #11]
 800092c:	2b03      	cmp	r3, #3
 800092e:	d846      	bhi.n	80009be <Ds18b20_read_temp+0x106>
 8000930:	a201      	add	r2, pc, #4	; (adr r2, 8000938 <Ds18b20_read_temp+0x80>)
 8000932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000936:	bf00      	nop
 8000938:	08000949 	.word	0x08000949
 800093c:	08000967 	.word	0x08000967
 8000940:	08000985 	.word	0x08000985
 8000944:	080009a3 	.word	0x080009a3
	{
	case 0:
		celsius = ((temp & ~(0xF800)) >> 3) * 0.5f;
 8000948:	8a7b      	ldrh	r3, [r7, #18]
 800094a:	10db      	asrs	r3, r3, #3
 800094c:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8000950:	ee07 3a90 	vmov	s15, r3
 8000954:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000958:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800095c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000960:	edc7 7a05 	vstr	s15, [r7, #20]
		break;
 8000964:	e02b      	b.n	80009be <Ds18b20_read_temp+0x106>
	case 1:
		celsius = ((temp & ~(0xF800)) >> 2)* 0.25f;
 8000966:	8a7b      	ldrh	r3, [r7, #18]
 8000968:	109b      	asrs	r3, r3, #2
 800096a:	f423 5378 	bic.w	r3, r3, #15872	; 0x3e00
 800096e:	ee07 3a90 	vmov	s15, r3
 8000972:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000976:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 800097a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800097e:	edc7 7a05 	vstr	s15, [r7, #20]
		break;
 8000982:	e01c      	b.n	80009be <Ds18b20_read_temp+0x106>
	case 2:
		celsius = ((temp & ~(0xF800)) >> 1) * 0.125f;
 8000984:	8a7b      	ldrh	r3, [r7, #18]
 8000986:	105b      	asrs	r3, r3, #1
 8000988:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800098c:	ee07 3a90 	vmov	s15, r3
 8000990:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000994:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8000998:	ee67 7a87 	vmul.f32	s15, s15, s14
 800099c:	edc7 7a05 	vstr	s15, [r7, #20]
		break;
 80009a0:	e00d      	b.n	80009be <Ds18b20_read_temp+0x106>
	case 3:
		celsius = (temp & ~(0xF800)) * 0.0625f;
 80009a2:	8a7b      	ldrh	r3, [r7, #18]
 80009a4:	f423 4378 	bic.w	r3, r3, #63488	; 0xf800
 80009a8:	ee07 3a90 	vmov	s15, r3
 80009ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009b0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80009e4 <Ds18b20_read_temp+0x12c>
 80009b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009b8:	edc7 7a05 	vstr	s15, [r7, #20]
		break;
 80009bc:	bf00      	nop
	}

	//select right sign
	if(temp & (1 << 15))
 80009be:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	da05      	bge.n	80009d2 <Ds18b20_read_temp+0x11a>
	{
		celsius *= -1;
 80009c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80009ca:	eef1 7a67 	vneg.f32	s15, s15
 80009ce:	edc7 7a05 	vstr	s15, [r7, #20]
	}

	return celsius;
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	ee07 3a90 	vmov	s15, r3

}
 80009d8:	eeb0 0a67 	vmov.f32	s0, s15
 80009dc:	3718      	adds	r7, #24
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	3d800000 	.word	0x3d800000

080009e8 <Ds18b20_pad_copy>:
 * @return            - float celsius
 *
 * @Note              - none
 */
void Ds18b20_pad_copy(DS18B20_Handle_t *pDs18b20)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
	Ds18b20_command(pDs18b20, DS18B20_MEMORY_PAD_COPY);
 80009f0:	2148      	movs	r1, #72	; 0x48
 80009f2:	6878      	ldr	r0, [r7, #4]
 80009f4:	f7ff fe2c 	bl	8000650 <Ds18b20_command>
	while(!Ds18b20_read_bit(pDs18b20));				//Wait till copy is complete
 80009f8:	bf00      	nop
 80009fa:	6878      	ldr	r0, [r7, #4]
 80009fc:	f000 f813 	bl	8000a26 <Ds18b20_read_bit>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d0f9      	beq.n	80009fa <Ds18b20_pad_copy+0x12>
}
 8000a06:	bf00      	nop
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}

08000a0e <Ds18b20_conv_t>:
 * @return            - float celsius
 *
 * @Note              - none
 */
void Ds18b20_conv_t(DS18B20_Handle_t *pDs18b20)
{
 8000a0e:	b580      	push	{r7, lr}
 8000a10:	b082      	sub	sp, #8
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	6078      	str	r0, [r7, #4]
	Ds18b20_command(pDs18b20, DS18B20_MEMORY_CONVERT_T);
 8000a16:	2144      	movs	r1, #68	; 0x44
 8000a18:	6878      	ldr	r0, [r7, #4]
 8000a1a:	f7ff fe19 	bl	8000650 <Ds18b20_command>
}
 8000a1e:	bf00      	nop
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}

08000a26 <Ds18b20_read_bit>:
 * @return            - uint8_t data received from device (HIGH or LOW)
 *
 * @Note              -
 */
uint8_t Ds18b20_read_bit(DS18B20_Handle_t *pDs18b20)
{
 8000a26:	b580      	push	{r7, lr}
 8000a28:	b084      	sub	sp, #16
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	6078      	str	r0, [r7, #4]
	uint8_t read_data = 0;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	73fb      	strb	r3, [r7, #15]
	Set_pin_as_in(pDs18b20->pGPIOx, pDs18b20->GPIO_pin);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	685a      	ldr	r2, [r3, #4]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4610      	mov	r0, r2
 8000a3e:	f000 f914 	bl	8000c6a <Set_pin_as_in>

	//First we pull line to LOW for 2us to signal device that we are ready for reception
	Set_pin_as_out(pDs18b20->pGPIOx, pDs18b20->GPIO_pin);
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	685a      	ldr	r2, [r3, #4]
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4610      	mov	r0, r2
 8000a4e:	f000 f8eb 	bl	8000c28 <Set_pin_as_out>
	Write_pin(pDs18b20->pGPIOx, pDs18b20->GPIO_pin, LOW);
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	6858      	ldr	r0, [r3, #4]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	f000 f91b 	bl	8000c98 <Write_pin>
	Delay_us(2);
 8000a62:	2002      	movs	r0, #2
 8000a64:	f7ff fda2 	bl	80005ac <Delay_us>

	//Then release and wait 5 us to give device time to react
	Set_pin_as_in(pDs18b20->pGPIOx, pDs18b20->GPIO_pin);
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	685a      	ldr	r2, [r3, #4]
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	4619      	mov	r1, r3
 8000a72:	4610      	mov	r0, r2
 8000a74:	f000 f8f9 	bl	8000c6a <Set_pin_as_in>
	Delay_us(5);
 8000a78:	2005      	movs	r0, #5
 8000a7a:	f7ff fd97 	bl	80005ac <Delay_us>

	//Read bit and wait 55us before signaling again
	if(Read_pin(pDs18b20->pGPIOx, pDs18b20->GPIO_pin))
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	685a      	ldr	r2, [r3, #4]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	4619      	mov	r1, r3
 8000a88:	4610      	mov	r0, r2
 8000a8a:	f000 f92a 	bl	8000ce2 <Read_pin>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <Ds18b20_read_bit+0x72>
	{
		read_data = 1;
 8000a94:	2301      	movs	r3, #1
 8000a96:	73fb      	strb	r3, [r7, #15]
	}

	Delay_us(55);
 8000a98:	2037      	movs	r0, #55	; 0x37
 8000a9a:	f7ff fd87 	bl	80005ac <Delay_us>

	return read_data;
 8000a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3710      	adds	r7, #16
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <Ds18b20_write_byte>:
 * @return            - none
 *
 * @Note              - none
 */
void Ds18b20_write_byte(DS18B20_Handle_t *pDs18b20, uint8_t write_data)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
 8000ab0:	460b      	mov	r3, r1
 8000ab2:	70fb      	strb	r3, [r7, #3]
	for(int i = 0; i < 8; i++)
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	e044      	b.n	8000b44 <Ds18b20_write_byte+0x9c>
	{
		if((write_data & (1 << i)) == 0)
 8000aba:	78fa      	ldrb	r2, [r7, #3]
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	fa42 f303 	asr.w	r3, r2, r3
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d11b      	bne.n	8000b02 <Ds18b20_write_byte+0x5a>
		{
			//bit is LOW so we keep line LOW for 60 us
			Set_pin_as_out(pDs18b20->pGPIOx, pDs18b20->GPIO_pin);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	685a      	ldr	r2, [r3, #4]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4610      	mov	r0, r2
 8000ad6:	f000 f8a7 	bl	8000c28 <Set_pin_as_out>
			Write_pin(pDs18b20->pGPIOx, pDs18b20->GPIO_pin, LOW);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	6858      	ldr	r0, [r3, #4]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	f000 f8d7 	bl	8000c98 <Write_pin>
			Delay_us(60);
 8000aea:	203c      	movs	r0, #60	; 0x3c
 8000aec:	f7ff fd5e 	bl	80005ac <Delay_us>
			Set_pin_as_in(pDs18b20->pGPIOx, pDs18b20->GPIO_pin);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	685a      	ldr	r2, [r3, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	4619      	mov	r1, r3
 8000afa:	4610      	mov	r0, r2
 8000afc:	f000 f8b5 	bl	8000c6a <Set_pin_as_in>
 8000b00:	e01d      	b.n	8000b3e <Ds18b20_write_byte+0x96>
		}
		else
		{
			//Bit is HIGH so we pull low for 1us, then release line so its pulled HIGH for 60us
			Set_pin_as_out(pDs18b20->pGPIOx, pDs18b20->GPIO_pin);
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	685a      	ldr	r2, [r3, #4]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4610      	mov	r0, r2
 8000b0e:	f000 f88b 	bl	8000c28 <Set_pin_as_out>
			Write_pin(pDs18b20->pGPIOx, pDs18b20->GPIO_pin, LOW);
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	6858      	ldr	r0, [r3, #4]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	f000 f8bb 	bl	8000c98 <Write_pin>
			Delay_us(1);
 8000b22:	2001      	movs	r0, #1
 8000b24:	f7ff fd42 	bl	80005ac <Delay_us>
			Set_pin_as_in(pDs18b20->pGPIOx, pDs18b20->GPIO_pin);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	685a      	ldr	r2, [r3, #4]
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	4619      	mov	r1, r3
 8000b32:	4610      	mov	r0, r2
 8000b34:	f000 f899 	bl	8000c6a <Set_pin_as_in>
			Delay_us(60);
 8000b38:	203c      	movs	r0, #60	; 0x3c
 8000b3a:	f7ff fd37 	bl	80005ac <Delay_us>
	for(int i = 0; i < 8; i++)
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	3301      	adds	r3, #1
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	2b07      	cmp	r3, #7
 8000b48:	ddb7      	ble.n	8000aba <Ds18b20_write_byte+0x12>
		}
	}
}
 8000b4a:	bf00      	nop
 8000b4c:	3710      	adds	r7, #16
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <Ds18b20_read_byte>:
 * @return            - uint8_t data received from device
 *
 * @Note              -
 */
uint8_t Ds18b20_read_byte(DS18B20_Handle_t *pDs18b20)
{
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b084      	sub	sp, #16
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
	uint8_t read_data = 0;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	73fb      	strb	r3, [r7, #15]
	Set_pin_as_in(pDs18b20->pGPIOx, pDs18b20->GPIO_pin);
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	685a      	ldr	r2, [r3, #4]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	4619      	mov	r1, r3
 8000b68:	4610      	mov	r0, r2
 8000b6a:	f000 f87e 	bl	8000c6a <Set_pin_as_in>

	for(int i = 0; i < 8; i++)
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60bb      	str	r3, [r7, #8]
 8000b72:	e038      	b.n	8000be6 <Ds18b20_read_byte+0x94>
	{
		//First we pull line to LOW for 2us to signal device that we are ready for reception
		Set_pin_as_out(pDs18b20->pGPIOx, pDs18b20->GPIO_pin);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	685a      	ldr	r2, [r3, #4]
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4610      	mov	r0, r2
 8000b80:	f000 f852 	bl	8000c28 <Set_pin_as_out>
		Write_pin(pDs18b20->pGPIOx, pDs18b20->GPIO_pin, LOW);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	6858      	ldr	r0, [r3, #4]
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	4619      	mov	r1, r3
 8000b90:	f000 f882 	bl	8000c98 <Write_pin>
		Delay_us(2);
 8000b94:	2002      	movs	r0, #2
 8000b96:	f7ff fd09 	bl	80005ac <Delay_us>

		//Then release and wait 5 us to give device time to react
		Set_pin_as_in(pDs18b20->pGPIOx, pDs18b20->GPIO_pin);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	685a      	ldr	r2, [r3, #4]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4610      	mov	r0, r2
 8000ba6:	f000 f860 	bl	8000c6a <Set_pin_as_in>
		Delay_us(5);
 8000baa:	2005      	movs	r0, #5
 8000bac:	f7ff fcfe 	bl	80005ac <Delay_us>

		//Read bit and wait 55us before signaling again
		if(Read_pin(pDs18b20->pGPIOx, pDs18b20->GPIO_pin))
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	685a      	ldr	r2, [r3, #4]
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4610      	mov	r0, r2
 8000bbc:	f000 f891 	bl	8000ce2 <Read_pin>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d009      	beq.n	8000bda <Ds18b20_read_byte+0x88>
		{
			read_data |= (1 << i);
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	fa02 f303 	lsl.w	r3, r2, r3
 8000bce:	b25a      	sxtb	r2, r3
 8000bd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	b25b      	sxtb	r3, r3
 8000bd8:	73fb      	strb	r3, [r7, #15]
		}

		Delay_us(55);
 8000bda:	2037      	movs	r0, #55	; 0x37
 8000bdc:	f7ff fce6 	bl	80005ac <Delay_us>
	for(int i = 0; i < 8; i++)
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	3301      	adds	r3, #1
 8000be4:	60bb      	str	r3, [r7, #8]
 8000be6:	68bb      	ldr	r3, [r7, #8]
 8000be8:	2b07      	cmp	r3, #7
 8000bea:	ddc3      	ble.n	8000b74 <Ds18b20_read_byte+0x22>
	}

	return read_data;
 8000bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3710      	adds	r7, #16
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <sd18b20_gpio_init>:
 *
 * @Note              -  none

 */
void sd18b20_gpio_init(DS18B20_Handle_t *pDs18b20)
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	b088      	sub	sp, #32
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef ds_gpio;

	ds_gpio.Pin = pDs18b20->GPIO_pin;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	60fb      	str	r3, [r7, #12]
	ds_gpio.Mode = GPIO_MODE_OUTPUT_OD;
 8000c04:	2311      	movs	r3, #17
 8000c06:	613b      	str	r3, [r7, #16]
	ds_gpio.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	617b      	str	r3, [r7, #20]
	ds_gpio.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	61bb      	str	r3, [r7, #24]

	HAL_GPIO_Init(pDs18b20->pGPIOx, &ds_gpio);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	f107 020c 	add.w	r2, r7, #12
 8000c18:	4611      	mov	r1, r2
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f000 fbec 	bl	80013f8 <HAL_GPIO_Init>
}
 8000c20:	bf00      	nop
 8000c22:	3720      	adds	r7, #32
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <Set_pin_as_out>:
 *
 * @Note              -  none

 */
static void Set_pin_as_out(GPIO_TypeDef *pGpio_port, uint8_t gpio_pin)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	460b      	mov	r3, r1
 8000c32:	70fb      	strb	r3, [r7, #3]
	//reset then set mode as output
	pGpio_port->MODER &= ~(0x3 << (2 * gpio_pin));
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	78fa      	ldrb	r2, [r7, #3]
 8000c3a:	0052      	lsls	r2, r2, #1
 8000c3c:	2103      	movs	r1, #3
 8000c3e:	fa01 f202 	lsl.w	r2, r1, r2
 8000c42:	43d2      	mvns	r2, r2
 8000c44:	401a      	ands	r2, r3
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	601a      	str	r2, [r3, #0]
	pGpio_port->MODER |= (1 << (2 * gpio_pin));
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	78fa      	ldrb	r2, [r7, #3]
 8000c50:	0052      	lsls	r2, r2, #1
 8000c52:	2101      	movs	r1, #1
 8000c54:	fa01 f202 	lsl.w	r2, r1, r2
 8000c58:	431a      	orrs	r2, r3
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	601a      	str	r2, [r3, #0]
}
 8000c5e:	bf00      	nop
 8000c60:	370c      	adds	r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr

08000c6a <Set_pin_as_in>:
 *
 * @Note              -  none

 */
static void Set_pin_as_in(GPIO_TypeDef *pGpio_port, uint8_t gpio_pin)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	b083      	sub	sp, #12
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
 8000c72:	460b      	mov	r3, r1
 8000c74:	70fb      	strb	r3, [r7, #3]
	//set pin as in
	pGpio_port->MODER &= ~(0x3 << (2 * gpio_pin));
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	78fa      	ldrb	r2, [r7, #3]
 8000c7c:	0052      	lsls	r2, r2, #1
 8000c7e:	2103      	movs	r1, #3
 8000c80:	fa01 f202 	lsl.w	r2, r1, r2
 8000c84:	43d2      	mvns	r2, r2
 8000c86:	401a      	ands	r2, r3
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	601a      	str	r2, [r3, #0]
}
 8000c8c:	bf00      	nop
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr

08000c98 <Write_pin>:
 *
 * @Note              -  none

 */
static void Write_pin(GPIO_TypeDef *pGpio_port, uint8_t gpio_pin, uint8_t value)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	460b      	mov	r3, r1
 8000ca2:	70fb      	strb	r3, [r7, #3]
 8000ca4:	4613      	mov	r3, r2
 8000ca6:	70bb      	strb	r3, [r7, #2]
	if(value == 1)
 8000ca8:	78bb      	ldrb	r3, [r7, #2]
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d109      	bne.n	8000cc2 <Write_pin+0x2a>
	{
		pGpio_port->ODR |= (1 << gpio_pin);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	695b      	ldr	r3, [r3, #20]
 8000cb2:	78fa      	ldrb	r2, [r7, #3]
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	fa01 f202 	lsl.w	r2, r1, r2
 8000cba:	431a      	orrs	r2, r3
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	615a      	str	r2, [r3, #20]
	}
	else
	{
		pGpio_port->ODR &= ~(1 << gpio_pin);
	}
}
 8000cc0:	e009      	b.n	8000cd6 <Write_pin+0x3e>
		pGpio_port->ODR &= ~(1 << gpio_pin);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	695b      	ldr	r3, [r3, #20]
 8000cc6:	78fa      	ldrb	r2, [r7, #3]
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fa01 f202 	lsl.w	r2, r1, r2
 8000cce:	43d2      	mvns	r2, r2
 8000cd0:	401a      	ands	r2, r3
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	615a      	str	r2, [r3, #20]
}
 8000cd6:	bf00      	nop
 8000cd8:	370c      	adds	r7, #12
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr

08000ce2 <Read_pin>:
 *
 * @Note              -  none

 */
static uint8_t Read_pin(GPIO_TypeDef *pGpio_port, uint8_t gpio_pin)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	b085      	sub	sp, #20
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	6078      	str	r0, [r7, #4]
 8000cea:	460b      	mov	r3, r1
 8000cec:	70fb      	strb	r3, [r7, #3]
	uint8_t value = (uint8_t)((pGpio_port->IDR >> gpio_pin) & 0x00000001);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	691a      	ldr	r2, [r3, #16]
 8000cf2:	78fb      	ldrb	r3, [r7, #3]
 8000cf4:	fa22 f303 	lsr.w	r3, r2, r3
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	73fb      	strb	r3, [r7, #15]
	return value;
 8000d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3714      	adds	r7, #20
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
	...

08000d10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d10:	b590      	push	{r4, r7, lr}
 8000d12:	b089      	sub	sp, #36	; 0x24
 8000d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint64_t rom;
	uint64_t pad;

	uint64_t matched_rom= 0x283c01b55633b9c4;
 8000d16:	a434      	add	r4, pc, #208	; (adr r4, 8000de8 <main+0xd8>)
 8000d18:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000d1c:	e9c7 3406 	strd	r3, r4, [r7, #24]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d20:	f000 fa12 	bl	8001148 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d24:	f000 f864 	bl	8000df0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d28:	f000 f8d0 	bl	8000ecc <MX_GPIO_Init>
  if(!MX_TIM1_Init(&htim1))
 8000d2c:	482c      	ldr	r0, [pc, #176]	; (8000de0 <main+0xd0>)
 8000d2e:	f7ff fbeb 	bl	8000508 <MX_TIM1_Init>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d101      	bne.n	8000d3c <main+0x2c>
  {
	  Error_Handler();
 8000d38:	f000 f94a 	bl	8000fd0 <Error_Handler>
  }


  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8000d3c:	4828      	ldr	r0, [pc, #160]	; (8000de0 <main+0xd0>)
 8000d3e:	f001 fa12 	bl	8002166 <HAL_TIM_Base_Start>

  Ds18b20_handle_init(&hds18b20);
 8000d42:	4828      	ldr	r0, [pc, #160]	; (8000de4 <main+0xd4>)
 8000d44:	f000 f932 	bl	8000fac <Ds18b20_handle_init>
  sd18b20_gpio_init(&hds18b20);
 8000d48:	4826      	ldr	r0, [pc, #152]	; (8000de4 <main+0xd4>)
 8000d4a:	f7ff ff54 	bl	8000bf6 <sd18b20_gpio_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  //read unique ROM code
  Ds18b20_init_phase(&hds18b20);
 8000d4e:	4825      	ldr	r0, [pc, #148]	; (8000de4 <main+0xd4>)
 8000d50:	f7ff fc44 	bl	80005dc <Ds18b20_init_phase>
  rom = Ds18b20_rom_read(&hds18b20);
 8000d54:	4823      	ldr	r0, [pc, #140]	; (8000de4 <main+0xd4>)
 8000d56:	f7ff fc8a 	bl	800066e <Ds18b20_rom_read>
 8000d5a:	e9c7 0104 	strd	r0, r1, [r7, #16]

  //Change resoluiton
  Ds18b20_init_phase(&hds18b20);
 8000d5e:	4821      	ldr	r0, [pc, #132]	; (8000de4 <main+0xd4>)
 8000d60:	f7ff fc3c 	bl	80005dc <Ds18b20_init_phase>
  Ds18b20_rom_skip(&hds18b20);
 8000d64:	481f      	ldr	r0, [pc, #124]	; (8000de4 <main+0xd4>)
 8000d66:	f7ff fd39 	bl	80007dc <Ds18b20_rom_skip>
  Ds18b20_pad_write(&hds18b20, DS18B20_TEMP_RES_12BIT, 1, 1);
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	2103      	movs	r1, #3
 8000d70:	481c      	ldr	r0, [pc, #112]	; (8000de4 <main+0xd4>)
 8000d72:	f7ff fd3f 	bl	80007f4 <Ds18b20_pad_write>

  Ds18b20_init_phase(&hds18b20);
 8000d76:	481b      	ldr	r0, [pc, #108]	; (8000de4 <main+0xd4>)
 8000d78:	f7ff fc30 	bl	80005dc <Ds18b20_init_phase>
  Ds18b20_rom_skip(&hds18b20);
 8000d7c:	4819      	ldr	r0, [pc, #100]	; (8000de4 <main+0xd4>)
 8000d7e:	f7ff fd2d 	bl	80007dc <Ds18b20_rom_skip>
  pad = Ds18b20_pad_read(&hds18b20);
 8000d82:	4818      	ldr	r0, [pc, #96]	; (8000de4 <main+0xd4>)
 8000d84:	f7ff fd64 	bl	8000850 <Ds18b20_pad_read>
 8000d88:	e9c7 0102 	strd	r0, r1, [r7, #8]

  //copy data
  Ds18b20_init_phase(&hds18b20);
 8000d8c:	4815      	ldr	r0, [pc, #84]	; (8000de4 <main+0xd4>)
 8000d8e:	f7ff fc25 	bl	80005dc <Ds18b20_init_phase>
  Ds18b20_rom_skip(&hds18b20);
 8000d92:	4814      	ldr	r0, [pc, #80]	; (8000de4 <main+0xd4>)
 8000d94:	f7ff fd22 	bl	80007dc <Ds18b20_rom_skip>
  Ds18b20_pad_copy(&hds18b20);
 8000d98:	4812      	ldr	r0, [pc, #72]	; (8000de4 <main+0xd4>)
 8000d9a:	f7ff fe25 	bl	80009e8 <Ds18b20_pad_copy>

  //skip rom and convert T
  Ds18b20_init_phase(&hds18b20);
 8000d9e:	4811      	ldr	r0, [pc, #68]	; (8000de4 <main+0xd4>)
 8000da0:	f7ff fc1c 	bl	80005dc <Ds18b20_init_phase>
  Ds18b20_rom_skip(&hds18b20);
 8000da4:	480f      	ldr	r0, [pc, #60]	; (8000de4 <main+0xd4>)
 8000da6:	f7ff fd19 	bl	80007dc <Ds18b20_rom_skip>
  Ds18b20_conv_t(&hds18b20);
 8000daa:	480e      	ldr	r0, [pc, #56]	; (8000de4 <main+0xd4>)
 8000dac:	f7ff fe2f 	bl	8000a0e <Ds18b20_conv_t>
  while(!Ds18b20_read_bit(&hds18b20)); //Wait until conversion is complete
 8000db0:	bf00      	nop
 8000db2:	480c      	ldr	r0, [pc, #48]	; (8000de4 <main+0xd4>)
 8000db4:	f7ff fe37 	bl	8000a26 <Ds18b20_read_bit>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d0f9      	beq.n	8000db2 <main+0xa2>

  //match rom code and temp read
  Ds18b20_init_phase(&hds18b20);
 8000dbe:	4809      	ldr	r0, [pc, #36]	; (8000de4 <main+0xd4>)
 8000dc0:	f7ff fc0c 	bl	80005dc <Ds18b20_init_phase>
  Ds18b20_rom_match(&hds18b20, matched_rom);
 8000dc4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000dc8:	4806      	ldr	r0, [pc, #24]	; (8000de4 <main+0xd4>)
 8000dca:	f7ff fcb5 	bl	8000738 <Ds18b20_rom_match>
  float temp2 = Ds18b20_read_temp(&hds18b20);
 8000dce:	4805      	ldr	r0, [pc, #20]	; (8000de4 <main+0xd4>)
 8000dd0:	f7ff fd72 	bl	80008b8 <Ds18b20_read_temp>
 8000dd4:	ed87 0a01 	vstr	s0, [r7, #4]


  while (1)
 8000dd8:	e7fe      	b.n	8000dd8 <main+0xc8>
 8000dda:	bf00      	nop
 8000ddc:	f3af 8000 	nop.w
 8000de0:	20000030 	.word	0x20000030
 8000de4:	20000028 	.word	0x20000028
 8000de8:	5633b9c4 	.word	0x5633b9c4
 8000dec:	283c01b5 	.word	0x283c01b5

08000df0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b094      	sub	sp, #80	; 0x50
 8000df4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000df6:	f107 031c 	add.w	r3, r7, #28
 8000dfa:	2234      	movs	r2, #52	; 0x34
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f001 fc66 	bl	80026d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e04:	f107 0308 	add.w	r3, r7, #8
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e14:	2300      	movs	r3, #0
 8000e16:	607b      	str	r3, [r7, #4]
 8000e18:	4b2a      	ldr	r3, [pc, #168]	; (8000ec4 <SystemClock_Config+0xd4>)
 8000e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1c:	4a29      	ldr	r2, [pc, #164]	; (8000ec4 <SystemClock_Config+0xd4>)
 8000e1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e22:	6413      	str	r3, [r2, #64]	; 0x40
 8000e24:	4b27      	ldr	r3, [pc, #156]	; (8000ec4 <SystemClock_Config+0xd4>)
 8000e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e2c:	607b      	str	r3, [r7, #4]
 8000e2e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e30:	2300      	movs	r3, #0
 8000e32:	603b      	str	r3, [r7, #0]
 8000e34:	4b24      	ldr	r3, [pc, #144]	; (8000ec8 <SystemClock_Config+0xd8>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e3c:	4a22      	ldr	r2, [pc, #136]	; (8000ec8 <SystemClock_Config+0xd8>)
 8000e3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e42:	6013      	str	r3, [r2, #0]
 8000e44:	4b20      	ldr	r3, [pc, #128]	; (8000ec8 <SystemClock_Config+0xd8>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e4c:	603b      	str	r3, [r7, #0]
 8000e4e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e50:	2302      	movs	r3, #2
 8000e52:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e54:	2301      	movs	r3, #1
 8000e56:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e58:	2310      	movs	r3, #16
 8000e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e60:	2300      	movs	r3, #0
 8000e62:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000e64:	2310      	movs	r3, #16
 8000e66:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000e68:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000e6c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000e6e:	2304      	movs	r3, #4
 8000e70:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e72:	2302      	movs	r3, #2
 8000e74:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e76:	2302      	movs	r3, #2
 8000e78:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e7a:	f107 031c 	add.w	r3, r7, #28
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f000 feec 	bl	8001c5c <HAL_RCC_OscConfig>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000e8a:	f000 f8a1 	bl	8000fd0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e8e:	230f      	movs	r3, #15
 8000e90:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e92:	2302      	movs	r3, #2
 8000e94:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e96:	2300      	movs	r3, #0
 8000e98:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e9e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ea4:	f107 0308 	add.w	r3, r7, #8
 8000ea8:	2102      	movs	r1, #2
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f000 fc50 	bl	8001750 <HAL_RCC_ClockConfig>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000eb6:	f000 f88b 	bl	8000fd0 <Error_Handler>
  }
}
 8000eba:	bf00      	nop
 8000ebc:	3750      	adds	r7, #80	; 0x50
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40023800 	.word	0x40023800
 8000ec8:	40007000 	.word	0x40007000

08000ecc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b08a      	sub	sp, #40	; 0x28
 8000ed0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed2:	f107 0314 	add.w	r3, r7, #20
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	605a      	str	r2, [r3, #4]
 8000edc:	609a      	str	r2, [r3, #8]
 8000ede:	60da      	str	r2, [r3, #12]
 8000ee0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	613b      	str	r3, [r7, #16]
 8000ee6:	4b2d      	ldr	r3, [pc, #180]	; (8000f9c <MX_GPIO_Init+0xd0>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	4a2c      	ldr	r2, [pc, #176]	; (8000f9c <MX_GPIO_Init+0xd0>)
 8000eec:	f043 0304 	orr.w	r3, r3, #4
 8000ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef2:	4b2a      	ldr	r3, [pc, #168]	; (8000f9c <MX_GPIO_Init+0xd0>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	f003 0304 	and.w	r3, r3, #4
 8000efa:	613b      	str	r3, [r7, #16]
 8000efc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	60fb      	str	r3, [r7, #12]
 8000f02:	4b26      	ldr	r3, [pc, #152]	; (8000f9c <MX_GPIO_Init+0xd0>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	4a25      	ldr	r2, [pc, #148]	; (8000f9c <MX_GPIO_Init+0xd0>)
 8000f08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0e:	4b23      	ldr	r3, [pc, #140]	; (8000f9c <MX_GPIO_Init+0xd0>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60bb      	str	r3, [r7, #8]
 8000f1e:	4b1f      	ldr	r3, [pc, #124]	; (8000f9c <MX_GPIO_Init+0xd0>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	4a1e      	ldr	r2, [pc, #120]	; (8000f9c <MX_GPIO_Init+0xd0>)
 8000f24:	f043 0301 	orr.w	r3, r3, #1
 8000f28:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2a:	4b1c      	ldr	r3, [pc, #112]	; (8000f9c <MX_GPIO_Init+0xd0>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	f003 0301 	and.w	r3, r3, #1
 8000f32:	60bb      	str	r3, [r7, #8]
 8000f34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	607b      	str	r3, [r7, #4]
 8000f3a:	4b18      	ldr	r3, [pc, #96]	; (8000f9c <MX_GPIO_Init+0xd0>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	4a17      	ldr	r2, [pc, #92]	; (8000f9c <MX_GPIO_Init+0xd0>)
 8000f40:	f043 0302 	orr.w	r3, r3, #2
 8000f44:	6313      	str	r3, [r2, #48]	; 0x30
 8000f46:	4b15      	ldr	r3, [pc, #84]	; (8000f9c <MX_GPIO_Init+0xd0>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	f003 0302 	and.w	r3, r3, #2
 8000f4e:	607b      	str	r3, [r7, #4]
 8000f50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000f52:	2200      	movs	r2, #0
 8000f54:	2120      	movs	r1, #32
 8000f56:	4812      	ldr	r0, [pc, #72]	; (8000fa0 <MX_GPIO_Init+0xd4>)
 8000f58:	f000 fbe0 	bl	800171c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f62:	4b10      	ldr	r3, [pc, #64]	; (8000fa4 <MX_GPIO_Init+0xd8>)
 8000f64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f6a:	f107 0314 	add.w	r3, r7, #20
 8000f6e:	4619      	mov	r1, r3
 8000f70:	480d      	ldr	r0, [pc, #52]	; (8000fa8 <MX_GPIO_Init+0xdc>)
 8000f72:	f000 fa41 	bl	80013f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000f76:	2320      	movs	r3, #32
 8000f78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f82:	2300      	movs	r3, #0
 8000f84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f86:	f107 0314 	add.w	r3, r7, #20
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4804      	ldr	r0, [pc, #16]	; (8000fa0 <MX_GPIO_Init+0xd4>)
 8000f8e:	f000 fa33 	bl	80013f8 <HAL_GPIO_Init>

}
 8000f92:	bf00      	nop
 8000f94:	3728      	adds	r7, #40	; 0x28
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40023800 	.word	0x40023800
 8000fa0:	40020000 	.word	0x40020000
 8000fa4:	10210000 	.word	0x10210000
 8000fa8:	40020800 	.word	0x40020800

08000fac <Ds18b20_handle_init>:
 *
 * @Note              -  none

 */
void Ds18b20_handle_init(DS18B20_Handle_t *pDs18b20)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
	pDs18b20->GPIO_pin = DS18B20_PIN;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2203      	movs	r2, #3
 8000fb8:	701a      	strb	r2, [r3, #0]
	pDs18b20->pGPIOx = DS18B20_PORT;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a03      	ldr	r2, [pc, #12]	; (8000fcc <Ds18b20_handle_init+0x20>)
 8000fbe:	605a      	str	r2, [r3, #4]
}
 8000fc0:	bf00      	nop
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	40020800 	.word	0x40020800

08000fd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	while(1);
 8000fd4:	e7fe      	b.n	8000fd4 <Error_Handler+0x4>
	...

08000fd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	607b      	str	r3, [r7, #4]
 8000fe2:	4b10      	ldr	r3, [pc, #64]	; (8001024 <HAL_MspInit+0x4c>)
 8000fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe6:	4a0f      	ldr	r2, [pc, #60]	; (8001024 <HAL_MspInit+0x4c>)
 8000fe8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fec:	6453      	str	r3, [r2, #68]	; 0x44
 8000fee:	4b0d      	ldr	r3, [pc, #52]	; (8001024 <HAL_MspInit+0x4c>)
 8000ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ff6:	607b      	str	r3, [r7, #4]
 8000ff8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	603b      	str	r3, [r7, #0]
 8000ffe:	4b09      	ldr	r3, [pc, #36]	; (8001024 <HAL_MspInit+0x4c>)
 8001000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001002:	4a08      	ldr	r2, [pc, #32]	; (8001024 <HAL_MspInit+0x4c>)
 8001004:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001008:	6413      	str	r3, [r2, #64]	; 0x40
 800100a:	4b06      	ldr	r3, [pc, #24]	; (8001024 <HAL_MspInit+0x4c>)
 800100c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001012:	603b      	str	r3, [r7, #0]
 8001014:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001016:	2007      	movs	r0, #7
 8001018:	f000 f9ba 	bl	8001390 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800101c:	bf00      	nop
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	40023800 	.word	0x40023800

08001028 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a0b      	ldr	r2, [pc, #44]	; (8001064 <HAL_TIM_Base_MspInit+0x3c>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d10d      	bne.n	8001056 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	60fb      	str	r3, [r7, #12]
 800103e:	4b0a      	ldr	r3, [pc, #40]	; (8001068 <HAL_TIM_Base_MspInit+0x40>)
 8001040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001042:	4a09      	ldr	r2, [pc, #36]	; (8001068 <HAL_TIM_Base_MspInit+0x40>)
 8001044:	f043 0301 	orr.w	r3, r3, #1
 8001048:	6453      	str	r3, [r2, #68]	; 0x44
 800104a:	4b07      	ldr	r3, [pc, #28]	; (8001068 <HAL_TIM_Base_MspInit+0x40>)
 800104c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001056:	bf00      	nop
 8001058:	3714      	adds	r7, #20
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	40010000 	.word	0x40010000
 8001068:	40023800 	.word	0x40023800

0800106c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001070:	bf00      	nop
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr

0800107a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800107a:	b480      	push	{r7}
 800107c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800107e:	e7fe      	b.n	800107e <HardFault_Handler+0x4>

08001080 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001084:	e7fe      	b.n	8001084 <MemManage_Handler+0x4>

08001086 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001086:	b480      	push	{r7}
 8001088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800108a:	e7fe      	b.n	800108a <BusFault_Handler+0x4>

0800108c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001090:	e7fe      	b.n	8001090 <UsageFault_Handler+0x4>

08001092 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001092:	b480      	push	{r7}
 8001094:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001096:	bf00      	nop
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010a4:	bf00      	nop
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr

080010ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ae:	b480      	push	{r7}
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010c0:	f000 f894 	bl	80011ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010c4:	bf00      	nop
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010cc:	4b08      	ldr	r3, [pc, #32]	; (80010f0 <SystemInit+0x28>)
 80010ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010d2:	4a07      	ldr	r2, [pc, #28]	; (80010f0 <SystemInit+0x28>)
 80010d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80010dc:	4b04      	ldr	r3, [pc, #16]	; (80010f0 <SystemInit+0x28>)
 80010de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010e2:	609a      	str	r2, [r3, #8]
#endif
}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	e000ed00 	.word	0xe000ed00

080010f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80010f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800112c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80010f8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80010fa:	e003      	b.n	8001104 <LoopCopyDataInit>

080010fc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80010fc:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80010fe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001100:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001102:	3104      	adds	r1, #4

08001104 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001104:	480b      	ldr	r0, [pc, #44]	; (8001134 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001106:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001108:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800110a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800110c:	d3f6      	bcc.n	80010fc <CopyDataInit>
  ldr  r2, =_sbss
 800110e:	4a0b      	ldr	r2, [pc, #44]	; (800113c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001110:	e002      	b.n	8001118 <LoopFillZerobss>

08001112 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001112:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001114:	f842 3b04 	str.w	r3, [r2], #4

08001118 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001118:	4b09      	ldr	r3, [pc, #36]	; (8001140 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800111a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800111c:	d3f9      	bcc.n	8001112 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800111e:	f7ff ffd3 	bl	80010c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001122:	f001 fab1 	bl	8002688 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001126:	f7ff fdf3 	bl	8000d10 <main>
  bx  lr    
 800112a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800112c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001130:	08002718 	.word	0x08002718
  ldr  r0, =_sdata
 8001134:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001138:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 800113c:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001140:	20000074 	.word	0x20000074

08001144 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001144:	e7fe      	b.n	8001144 <ADC_IRQHandler>
	...

08001148 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800114c:	4b0e      	ldr	r3, [pc, #56]	; (8001188 <HAL_Init+0x40>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a0d      	ldr	r2, [pc, #52]	; (8001188 <HAL_Init+0x40>)
 8001152:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001156:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001158:	4b0b      	ldr	r3, [pc, #44]	; (8001188 <HAL_Init+0x40>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a0a      	ldr	r2, [pc, #40]	; (8001188 <HAL_Init+0x40>)
 800115e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001162:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001164:	4b08      	ldr	r3, [pc, #32]	; (8001188 <HAL_Init+0x40>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a07      	ldr	r2, [pc, #28]	; (8001188 <HAL_Init+0x40>)
 800116a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800116e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001170:	2003      	movs	r0, #3
 8001172:	f000 f90d 	bl	8001390 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001176:	2000      	movs	r0, #0
 8001178:	f000 f808 	bl	800118c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800117c:	f7ff ff2c 	bl	8000fd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001180:	2300      	movs	r3, #0
}
 8001182:	4618      	mov	r0, r3
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40023c00 	.word	0x40023c00

0800118c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001194:	4b12      	ldr	r3, [pc, #72]	; (80011e0 <HAL_InitTick+0x54>)
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	4b12      	ldr	r3, [pc, #72]	; (80011e4 <HAL_InitTick+0x58>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	4619      	mov	r1, r3
 800119e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011aa:	4618      	mov	r0, r3
 80011ac:	f000 f917 	bl	80013de <HAL_SYSTICK_Config>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e00e      	b.n	80011d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2b0f      	cmp	r3, #15
 80011be:	d80a      	bhi.n	80011d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011c0:	2200      	movs	r2, #0
 80011c2:	6879      	ldr	r1, [r7, #4]
 80011c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011c8:	f000 f8ed 	bl	80013a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011cc:	4a06      	ldr	r2, [pc, #24]	; (80011e8 <HAL_InitTick+0x5c>)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011d2:	2300      	movs	r3, #0
 80011d4:	e000      	b.n	80011d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20000000 	.word	0x20000000
 80011e4:	20000008 	.word	0x20000008
 80011e8:	20000004 	.word	0x20000004

080011ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011f0:	4b06      	ldr	r3, [pc, #24]	; (800120c <HAL_IncTick+0x20>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	461a      	mov	r2, r3
 80011f6:	4b06      	ldr	r3, [pc, #24]	; (8001210 <HAL_IncTick+0x24>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4413      	add	r3, r2
 80011fc:	4a04      	ldr	r2, [pc, #16]	; (8001210 <HAL_IncTick+0x24>)
 80011fe:	6013      	str	r3, [r2, #0]
}
 8001200:	bf00      	nop
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	20000008 	.word	0x20000008
 8001210:	20000070 	.word	0x20000070

08001214 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  return uwTick;
 8001218:	4b03      	ldr	r3, [pc, #12]	; (8001228 <HAL_GetTick+0x14>)
 800121a:	681b      	ldr	r3, [r3, #0]
}
 800121c:	4618      	mov	r0, r3
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	20000070 	.word	0x20000070

0800122c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800122c:	b480      	push	{r7}
 800122e:	b085      	sub	sp, #20
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	f003 0307 	and.w	r3, r3, #7
 800123a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800123c:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <__NVIC_SetPriorityGrouping+0x44>)
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001242:	68ba      	ldr	r2, [r7, #8]
 8001244:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001248:	4013      	ands	r3, r2
 800124a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001254:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001258:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800125c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800125e:	4a04      	ldr	r2, [pc, #16]	; (8001270 <__NVIC_SetPriorityGrouping+0x44>)
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	60d3      	str	r3, [r2, #12]
}
 8001264:	bf00      	nop
 8001266:	3714      	adds	r7, #20
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	e000ed00 	.word	0xe000ed00

08001274 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001278:	4b04      	ldr	r3, [pc, #16]	; (800128c <__NVIC_GetPriorityGrouping+0x18>)
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	0a1b      	lsrs	r3, r3, #8
 800127e:	f003 0307 	and.w	r3, r3, #7
}
 8001282:	4618      	mov	r0, r3
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr
 800128c:	e000ed00 	.word	0xe000ed00

08001290 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	6039      	str	r1, [r7, #0]
 800129a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800129c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	db0a      	blt.n	80012ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	b2da      	uxtb	r2, r3
 80012a8:	490c      	ldr	r1, [pc, #48]	; (80012dc <__NVIC_SetPriority+0x4c>)
 80012aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ae:	0112      	lsls	r2, r2, #4
 80012b0:	b2d2      	uxtb	r2, r2
 80012b2:	440b      	add	r3, r1
 80012b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012b8:	e00a      	b.n	80012d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	b2da      	uxtb	r2, r3
 80012be:	4908      	ldr	r1, [pc, #32]	; (80012e0 <__NVIC_SetPriority+0x50>)
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	f003 030f 	and.w	r3, r3, #15
 80012c6:	3b04      	subs	r3, #4
 80012c8:	0112      	lsls	r2, r2, #4
 80012ca:	b2d2      	uxtb	r2, r2
 80012cc:	440b      	add	r3, r1
 80012ce:	761a      	strb	r2, [r3, #24]
}
 80012d0:	bf00      	nop
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	e000e100 	.word	0xe000e100
 80012e0:	e000ed00 	.word	0xe000ed00

080012e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b089      	sub	sp, #36	; 0x24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	60b9      	str	r1, [r7, #8]
 80012ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	f003 0307 	and.w	r3, r3, #7
 80012f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	f1c3 0307 	rsb	r3, r3, #7
 80012fe:	2b04      	cmp	r3, #4
 8001300:	bf28      	it	cs
 8001302:	2304      	movcs	r3, #4
 8001304:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	3304      	adds	r3, #4
 800130a:	2b06      	cmp	r3, #6
 800130c:	d902      	bls.n	8001314 <NVIC_EncodePriority+0x30>
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	3b03      	subs	r3, #3
 8001312:	e000      	b.n	8001316 <NVIC_EncodePriority+0x32>
 8001314:	2300      	movs	r3, #0
 8001316:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001318:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	43da      	mvns	r2, r3
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	401a      	ands	r2, r3
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800132c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	fa01 f303 	lsl.w	r3, r1, r3
 8001336:	43d9      	mvns	r1, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800133c:	4313      	orrs	r3, r2
         );
}
 800133e:	4618      	mov	r0, r3
 8001340:	3724      	adds	r7, #36	; 0x24
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
	...

0800134c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	3b01      	subs	r3, #1
 8001358:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800135c:	d301      	bcc.n	8001362 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800135e:	2301      	movs	r3, #1
 8001360:	e00f      	b.n	8001382 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001362:	4a0a      	ldr	r2, [pc, #40]	; (800138c <SysTick_Config+0x40>)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	3b01      	subs	r3, #1
 8001368:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800136a:	210f      	movs	r1, #15
 800136c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001370:	f7ff ff8e 	bl	8001290 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001374:	4b05      	ldr	r3, [pc, #20]	; (800138c <SysTick_Config+0x40>)
 8001376:	2200      	movs	r2, #0
 8001378:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800137a:	4b04      	ldr	r3, [pc, #16]	; (800138c <SysTick_Config+0x40>)
 800137c:	2207      	movs	r2, #7
 800137e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001380:	2300      	movs	r3, #0
}
 8001382:	4618      	mov	r0, r3
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	e000e010 	.word	0xe000e010

08001390 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f7ff ff47 	bl	800122c <__NVIC_SetPriorityGrouping>
}
 800139e:	bf00      	nop
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b086      	sub	sp, #24
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	4603      	mov	r3, r0
 80013ae:	60b9      	str	r1, [r7, #8]
 80013b0:	607a      	str	r2, [r7, #4]
 80013b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013b4:	2300      	movs	r3, #0
 80013b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013b8:	f7ff ff5c 	bl	8001274 <__NVIC_GetPriorityGrouping>
 80013bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	68b9      	ldr	r1, [r7, #8]
 80013c2:	6978      	ldr	r0, [r7, #20]
 80013c4:	f7ff ff8e 	bl	80012e4 <NVIC_EncodePriority>
 80013c8:	4602      	mov	r2, r0
 80013ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ce:	4611      	mov	r1, r2
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff ff5d 	bl	8001290 <__NVIC_SetPriority>
}
 80013d6:	bf00      	nop
 80013d8:	3718      	adds	r7, #24
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013de:	b580      	push	{r7, lr}
 80013e0:	b082      	sub	sp, #8
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f7ff ffb0 	bl	800134c <SysTick_Config>
 80013ec:	4603      	mov	r3, r0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
	...

080013f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b089      	sub	sp, #36	; 0x24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001402:	2300      	movs	r3, #0
 8001404:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001406:	2300      	movs	r3, #0
 8001408:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800140a:	2300      	movs	r3, #0
 800140c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800140e:	2300      	movs	r3, #0
 8001410:	61fb      	str	r3, [r7, #28]
 8001412:	e165      	b.n	80016e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001414:	2201      	movs	r2, #1
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	fa02 f303 	lsl.w	r3, r2, r3
 800141c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	697a      	ldr	r2, [r7, #20]
 8001424:	4013      	ands	r3, r2
 8001426:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001428:	693a      	ldr	r2, [r7, #16]
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	429a      	cmp	r2, r3
 800142e:	f040 8154 	bne.w	80016da <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	2b01      	cmp	r3, #1
 8001438:	d00b      	beq.n	8001452 <HAL_GPIO_Init+0x5a>
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	2b02      	cmp	r3, #2
 8001440:	d007      	beq.n	8001452 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001446:	2b11      	cmp	r3, #17
 8001448:	d003      	beq.n	8001452 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	2b12      	cmp	r3, #18
 8001450:	d130      	bne.n	80014b4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	2203      	movs	r2, #3
 800145e:	fa02 f303 	lsl.w	r3, r2, r3
 8001462:	43db      	mvns	r3, r3
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	4013      	ands	r3, r2
 8001468:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	68da      	ldr	r2, [r3, #12]
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	4313      	orrs	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001488:	2201      	movs	r2, #1
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	fa02 f303 	lsl.w	r3, r2, r3
 8001490:	43db      	mvns	r3, r3
 8001492:	69ba      	ldr	r2, [r7, #24]
 8001494:	4013      	ands	r3, r2
 8001496:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	091b      	lsrs	r3, r3, #4
 800149e:	f003 0201 	and.w	r2, r3, #1
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	2203      	movs	r2, #3
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	43db      	mvns	r3, r3
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	4013      	ands	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	689a      	ldr	r2, [r3, #8]
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	4313      	orrs	r3, r2
 80014dc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	d003      	beq.n	80014f4 <HAL_GPIO_Init+0xfc>
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	2b12      	cmp	r3, #18
 80014f2:	d123      	bne.n	800153c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	08da      	lsrs	r2, r3, #3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	3208      	adds	r2, #8
 80014fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001500:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	f003 0307 	and.w	r3, r3, #7
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	220f      	movs	r2, #15
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	43db      	mvns	r3, r3
 8001512:	69ba      	ldr	r2, [r7, #24]
 8001514:	4013      	ands	r3, r2
 8001516:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	691a      	ldr	r2, [r3, #16]
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	f003 0307 	and.w	r3, r3, #7
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	4313      	orrs	r3, r2
 800152c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	08da      	lsrs	r2, r3, #3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	3208      	adds	r2, #8
 8001536:	69b9      	ldr	r1, [r7, #24]
 8001538:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	2203      	movs	r2, #3
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	43db      	mvns	r3, r3
 800154e:	69ba      	ldr	r2, [r7, #24]
 8001550:	4013      	ands	r3, r2
 8001552:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f003 0203 	and.w	r2, r3, #3
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	4313      	orrs	r3, r2
 8001568:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001578:	2b00      	cmp	r3, #0
 800157a:	f000 80ae 	beq.w	80016da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	60fb      	str	r3, [r7, #12]
 8001582:	4b5c      	ldr	r3, [pc, #368]	; (80016f4 <HAL_GPIO_Init+0x2fc>)
 8001584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001586:	4a5b      	ldr	r2, [pc, #364]	; (80016f4 <HAL_GPIO_Init+0x2fc>)
 8001588:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800158c:	6453      	str	r3, [r2, #68]	; 0x44
 800158e:	4b59      	ldr	r3, [pc, #356]	; (80016f4 <HAL_GPIO_Init+0x2fc>)
 8001590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001592:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800159a:	4a57      	ldr	r2, [pc, #348]	; (80016f8 <HAL_GPIO_Init+0x300>)
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	089b      	lsrs	r3, r3, #2
 80015a0:	3302      	adds	r3, #2
 80015a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	f003 0303 	and.w	r3, r3, #3
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	220f      	movs	r2, #15
 80015b2:	fa02 f303 	lsl.w	r3, r2, r3
 80015b6:	43db      	mvns	r3, r3
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	4013      	ands	r3, r2
 80015bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a4e      	ldr	r2, [pc, #312]	; (80016fc <HAL_GPIO_Init+0x304>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d025      	beq.n	8001612 <HAL_GPIO_Init+0x21a>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4a4d      	ldr	r2, [pc, #308]	; (8001700 <HAL_GPIO_Init+0x308>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d01f      	beq.n	800160e <HAL_GPIO_Init+0x216>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4a4c      	ldr	r2, [pc, #304]	; (8001704 <HAL_GPIO_Init+0x30c>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d019      	beq.n	800160a <HAL_GPIO_Init+0x212>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4a4b      	ldr	r2, [pc, #300]	; (8001708 <HAL_GPIO_Init+0x310>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d013      	beq.n	8001606 <HAL_GPIO_Init+0x20e>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a4a      	ldr	r2, [pc, #296]	; (800170c <HAL_GPIO_Init+0x314>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d00d      	beq.n	8001602 <HAL_GPIO_Init+0x20a>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a49      	ldr	r2, [pc, #292]	; (8001710 <HAL_GPIO_Init+0x318>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d007      	beq.n	80015fe <HAL_GPIO_Init+0x206>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a48      	ldr	r2, [pc, #288]	; (8001714 <HAL_GPIO_Init+0x31c>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d101      	bne.n	80015fa <HAL_GPIO_Init+0x202>
 80015f6:	2306      	movs	r3, #6
 80015f8:	e00c      	b.n	8001614 <HAL_GPIO_Init+0x21c>
 80015fa:	2307      	movs	r3, #7
 80015fc:	e00a      	b.n	8001614 <HAL_GPIO_Init+0x21c>
 80015fe:	2305      	movs	r3, #5
 8001600:	e008      	b.n	8001614 <HAL_GPIO_Init+0x21c>
 8001602:	2304      	movs	r3, #4
 8001604:	e006      	b.n	8001614 <HAL_GPIO_Init+0x21c>
 8001606:	2303      	movs	r3, #3
 8001608:	e004      	b.n	8001614 <HAL_GPIO_Init+0x21c>
 800160a:	2302      	movs	r3, #2
 800160c:	e002      	b.n	8001614 <HAL_GPIO_Init+0x21c>
 800160e:	2301      	movs	r3, #1
 8001610:	e000      	b.n	8001614 <HAL_GPIO_Init+0x21c>
 8001612:	2300      	movs	r3, #0
 8001614:	69fa      	ldr	r2, [r7, #28]
 8001616:	f002 0203 	and.w	r2, r2, #3
 800161a:	0092      	lsls	r2, r2, #2
 800161c:	4093      	lsls	r3, r2
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	4313      	orrs	r3, r2
 8001622:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001624:	4934      	ldr	r1, [pc, #208]	; (80016f8 <HAL_GPIO_Init+0x300>)
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	089b      	lsrs	r3, r3, #2
 800162a:	3302      	adds	r3, #2
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001632:	4b39      	ldr	r3, [pc, #228]	; (8001718 <HAL_GPIO_Init+0x320>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	43db      	mvns	r3, r3
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	4013      	ands	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d003      	beq.n	8001656 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	4313      	orrs	r3, r2
 8001654:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001656:	4a30      	ldr	r2, [pc, #192]	; (8001718 <HAL_GPIO_Init+0x320>)
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800165c:	4b2e      	ldr	r3, [pc, #184]	; (8001718 <HAL_GPIO_Init+0x320>)
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	43db      	mvns	r3, r3
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	4013      	ands	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d003      	beq.n	8001680 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	4313      	orrs	r3, r2
 800167e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001680:	4a25      	ldr	r2, [pc, #148]	; (8001718 <HAL_GPIO_Init+0x320>)
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001686:	4b24      	ldr	r3, [pc, #144]	; (8001718 <HAL_GPIO_Init+0x320>)
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	43db      	mvns	r3, r3
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	4013      	ands	r3, r2
 8001694:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d003      	beq.n	80016aa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016aa:	4a1b      	ldr	r2, [pc, #108]	; (8001718 <HAL_GPIO_Init+0x320>)
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016b0:	4b19      	ldr	r3, [pc, #100]	; (8001718 <HAL_GPIO_Init+0x320>)
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	43db      	mvns	r3, r3
 80016ba:	69ba      	ldr	r2, [r7, #24]
 80016bc:	4013      	ands	r3, r2
 80016be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d003      	beq.n	80016d4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016d4:	4a10      	ldr	r2, [pc, #64]	; (8001718 <HAL_GPIO_Init+0x320>)
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	3301      	adds	r3, #1
 80016de:	61fb      	str	r3, [r7, #28]
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	2b0f      	cmp	r3, #15
 80016e4:	f67f ae96 	bls.w	8001414 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016e8:	bf00      	nop
 80016ea:	3724      	adds	r7, #36	; 0x24
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	40023800 	.word	0x40023800
 80016f8:	40013800 	.word	0x40013800
 80016fc:	40020000 	.word	0x40020000
 8001700:	40020400 	.word	0x40020400
 8001704:	40020800 	.word	0x40020800
 8001708:	40020c00 	.word	0x40020c00
 800170c:	40021000 	.word	0x40021000
 8001710:	40021400 	.word	0x40021400
 8001714:	40021800 	.word	0x40021800
 8001718:	40013c00 	.word	0x40013c00

0800171c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	460b      	mov	r3, r1
 8001726:	807b      	strh	r3, [r7, #2]
 8001728:	4613      	mov	r3, r2
 800172a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800172c:	787b      	ldrb	r3, [r7, #1]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d003      	beq.n	800173a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001732:	887a      	ldrh	r2, [r7, #2]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001738:	e003      	b.n	8001742 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800173a:	887b      	ldrh	r3, [r7, #2]
 800173c:	041a      	lsls	r2, r3, #16
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	619a      	str	r2, [r3, #24]
}
 8001742:	bf00      	nop
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
	...

08001750 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d101      	bne.n	8001764 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e0cc      	b.n	80018fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001764:	4b68      	ldr	r3, [pc, #416]	; (8001908 <HAL_RCC_ClockConfig+0x1b8>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 030f 	and.w	r3, r3, #15
 800176c:	683a      	ldr	r2, [r7, #0]
 800176e:	429a      	cmp	r2, r3
 8001770:	d90c      	bls.n	800178c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001772:	4b65      	ldr	r3, [pc, #404]	; (8001908 <HAL_RCC_ClockConfig+0x1b8>)
 8001774:	683a      	ldr	r2, [r7, #0]
 8001776:	b2d2      	uxtb	r2, r2
 8001778:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800177a:	4b63      	ldr	r3, [pc, #396]	; (8001908 <HAL_RCC_ClockConfig+0x1b8>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 030f 	and.w	r3, r3, #15
 8001782:	683a      	ldr	r2, [r7, #0]
 8001784:	429a      	cmp	r2, r3
 8001786:	d001      	beq.n	800178c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e0b8      	b.n	80018fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0302 	and.w	r3, r3, #2
 8001794:	2b00      	cmp	r3, #0
 8001796:	d020      	beq.n	80017da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0304 	and.w	r3, r3, #4
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d005      	beq.n	80017b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017a4:	4b59      	ldr	r3, [pc, #356]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	4a58      	ldr	r2, [pc, #352]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80017aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0308 	and.w	r3, r3, #8
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d005      	beq.n	80017c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017bc:	4b53      	ldr	r3, [pc, #332]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	4a52      	ldr	r2, [pc, #328]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80017c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017c8:	4b50      	ldr	r3, [pc, #320]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	494d      	ldr	r1, [pc, #308]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80017d6:	4313      	orrs	r3, r2
 80017d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d044      	beq.n	8001870 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d107      	bne.n	80017fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ee:	4b47      	ldr	r3, [pc, #284]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d119      	bne.n	800182e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e07f      	b.n	80018fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	2b02      	cmp	r3, #2
 8001804:	d003      	beq.n	800180e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800180a:	2b03      	cmp	r3, #3
 800180c:	d107      	bne.n	800181e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800180e:	4b3f      	ldr	r3, [pc, #252]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d109      	bne.n	800182e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e06f      	b.n	80018fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800181e:	4b3b      	ldr	r3, [pc, #236]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0302 	and.w	r3, r3, #2
 8001826:	2b00      	cmp	r3, #0
 8001828:	d101      	bne.n	800182e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e067      	b.n	80018fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800182e:	4b37      	ldr	r3, [pc, #220]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	f023 0203 	bic.w	r2, r3, #3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	4934      	ldr	r1, [pc, #208]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 800183c:	4313      	orrs	r3, r2
 800183e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001840:	f7ff fce8 	bl	8001214 <HAL_GetTick>
 8001844:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001846:	e00a      	b.n	800185e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001848:	f7ff fce4 	bl	8001214 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	f241 3288 	movw	r2, #5000	; 0x1388
 8001856:	4293      	cmp	r3, r2
 8001858:	d901      	bls.n	800185e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e04f      	b.n	80018fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800185e:	4b2b      	ldr	r3, [pc, #172]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	f003 020c 	and.w	r2, r3, #12
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	429a      	cmp	r2, r3
 800186e:	d1eb      	bne.n	8001848 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001870:	4b25      	ldr	r3, [pc, #148]	; (8001908 <HAL_RCC_ClockConfig+0x1b8>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 030f 	and.w	r3, r3, #15
 8001878:	683a      	ldr	r2, [r7, #0]
 800187a:	429a      	cmp	r2, r3
 800187c:	d20c      	bcs.n	8001898 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800187e:	4b22      	ldr	r3, [pc, #136]	; (8001908 <HAL_RCC_ClockConfig+0x1b8>)
 8001880:	683a      	ldr	r2, [r7, #0]
 8001882:	b2d2      	uxtb	r2, r2
 8001884:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001886:	4b20      	ldr	r3, [pc, #128]	; (8001908 <HAL_RCC_ClockConfig+0x1b8>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 030f 	and.w	r3, r3, #15
 800188e:	683a      	ldr	r2, [r7, #0]
 8001890:	429a      	cmp	r2, r3
 8001892:	d001      	beq.n	8001898 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e032      	b.n	80018fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0304 	and.w	r3, r3, #4
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d008      	beq.n	80018b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018a4:	4b19      	ldr	r3, [pc, #100]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	4916      	ldr	r1, [pc, #88]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80018b2:	4313      	orrs	r3, r2
 80018b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0308 	and.w	r3, r3, #8
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d009      	beq.n	80018d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018c2:	4b12      	ldr	r3, [pc, #72]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	691b      	ldr	r3, [r3, #16]
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	490e      	ldr	r1, [pc, #56]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80018d2:	4313      	orrs	r3, r2
 80018d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018d6:	f000 f821 	bl	800191c <HAL_RCC_GetSysClockFreq>
 80018da:	4601      	mov	r1, r0
 80018dc:	4b0b      	ldr	r3, [pc, #44]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	091b      	lsrs	r3, r3, #4
 80018e2:	f003 030f 	and.w	r3, r3, #15
 80018e6:	4a0a      	ldr	r2, [pc, #40]	; (8001910 <HAL_RCC_ClockConfig+0x1c0>)
 80018e8:	5cd3      	ldrb	r3, [r2, r3]
 80018ea:	fa21 f303 	lsr.w	r3, r1, r3
 80018ee:	4a09      	ldr	r2, [pc, #36]	; (8001914 <HAL_RCC_ClockConfig+0x1c4>)
 80018f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018f2:	4b09      	ldr	r3, [pc, #36]	; (8001918 <HAL_RCC_ClockConfig+0x1c8>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff fc48 	bl	800118c <HAL_InitTick>

  return HAL_OK;
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40023c00 	.word	0x40023c00
 800190c:	40023800 	.word	0x40023800
 8001910:	080026f8 	.word	0x080026f8
 8001914:	20000000 	.word	0x20000000
 8001918:	20000004 	.word	0x20000004

0800191c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800191c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800191e:	b087      	sub	sp, #28
 8001920:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001922:	2300      	movs	r3, #0
 8001924:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8001926:	2300      	movs	r3, #0
 8001928:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800192a:	2300      	movs	r3, #0
 800192c:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 800192e:	2300      	movs	r3, #0
 8001930:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001932:	2300      	movs	r3, #0
 8001934:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001936:	4bc6      	ldr	r3, [pc, #792]	; (8001c50 <HAL_RCC_GetSysClockFreq+0x334>)
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	f003 030c 	and.w	r3, r3, #12
 800193e:	2b0c      	cmp	r3, #12
 8001940:	f200 817e 	bhi.w	8001c40 <HAL_RCC_GetSysClockFreq+0x324>
 8001944:	a201      	add	r2, pc, #4	; (adr r2, 800194c <HAL_RCC_GetSysClockFreq+0x30>)
 8001946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800194a:	bf00      	nop
 800194c:	08001981 	.word	0x08001981
 8001950:	08001c41 	.word	0x08001c41
 8001954:	08001c41 	.word	0x08001c41
 8001958:	08001c41 	.word	0x08001c41
 800195c:	08001987 	.word	0x08001987
 8001960:	08001c41 	.word	0x08001c41
 8001964:	08001c41 	.word	0x08001c41
 8001968:	08001c41 	.word	0x08001c41
 800196c:	0800198d 	.word	0x0800198d
 8001970:	08001c41 	.word	0x08001c41
 8001974:	08001c41 	.word	0x08001c41
 8001978:	08001c41 	.word	0x08001c41
 800197c:	08001ae9 	.word	0x08001ae9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001980:	4bb4      	ldr	r3, [pc, #720]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x338>)
 8001982:	613b      	str	r3, [r7, #16]
       break;
 8001984:	e15f      	b.n	8001c46 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001986:	4bb4      	ldr	r3, [pc, #720]	; (8001c58 <HAL_RCC_GetSysClockFreq+0x33c>)
 8001988:	613b      	str	r3, [r7, #16]
      break;
 800198a:	e15c      	b.n	8001c46 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800198c:	4bb0      	ldr	r3, [pc, #704]	; (8001c50 <HAL_RCC_GetSysClockFreq+0x334>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001994:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001996:	4bae      	ldr	r3, [pc, #696]	; (8001c50 <HAL_RCC_GetSysClockFreq+0x334>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d04a      	beq.n	8001a38 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019a2:	4bab      	ldr	r3, [pc, #684]	; (8001c50 <HAL_RCC_GetSysClockFreq+0x334>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	099b      	lsrs	r3, r3, #6
 80019a8:	f04f 0400 	mov.w	r4, #0
 80019ac:	f240 11ff 	movw	r1, #511	; 0x1ff
 80019b0:	f04f 0200 	mov.w	r2, #0
 80019b4:	ea03 0501 	and.w	r5, r3, r1
 80019b8:	ea04 0602 	and.w	r6, r4, r2
 80019bc:	4629      	mov	r1, r5
 80019be:	4632      	mov	r2, r6
 80019c0:	f04f 0300 	mov.w	r3, #0
 80019c4:	f04f 0400 	mov.w	r4, #0
 80019c8:	0154      	lsls	r4, r2, #5
 80019ca:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80019ce:	014b      	lsls	r3, r1, #5
 80019d0:	4619      	mov	r1, r3
 80019d2:	4622      	mov	r2, r4
 80019d4:	1b49      	subs	r1, r1, r5
 80019d6:	eb62 0206 	sbc.w	r2, r2, r6
 80019da:	f04f 0300 	mov.w	r3, #0
 80019de:	f04f 0400 	mov.w	r4, #0
 80019e2:	0194      	lsls	r4, r2, #6
 80019e4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80019e8:	018b      	lsls	r3, r1, #6
 80019ea:	1a5b      	subs	r3, r3, r1
 80019ec:	eb64 0402 	sbc.w	r4, r4, r2
 80019f0:	f04f 0100 	mov.w	r1, #0
 80019f4:	f04f 0200 	mov.w	r2, #0
 80019f8:	00e2      	lsls	r2, r4, #3
 80019fa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80019fe:	00d9      	lsls	r1, r3, #3
 8001a00:	460b      	mov	r3, r1
 8001a02:	4614      	mov	r4, r2
 8001a04:	195b      	adds	r3, r3, r5
 8001a06:	eb44 0406 	adc.w	r4, r4, r6
 8001a0a:	f04f 0100 	mov.w	r1, #0
 8001a0e:	f04f 0200 	mov.w	r2, #0
 8001a12:	0262      	lsls	r2, r4, #9
 8001a14:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001a18:	0259      	lsls	r1, r3, #9
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	4614      	mov	r4, r2
 8001a1e:	4618      	mov	r0, r3
 8001a20:	4621      	mov	r1, r4
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	f04f 0400 	mov.w	r4, #0
 8001a28:	461a      	mov	r2, r3
 8001a2a:	4623      	mov	r3, r4
 8001a2c:	f7fe fbec 	bl	8000208 <__aeabi_uldivmod>
 8001a30:	4603      	mov	r3, r0
 8001a32:	460c      	mov	r4, r1
 8001a34:	617b      	str	r3, [r7, #20]
 8001a36:	e049      	b.n	8001acc <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a38:	4b85      	ldr	r3, [pc, #532]	; (8001c50 <HAL_RCC_GetSysClockFreq+0x334>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	099b      	lsrs	r3, r3, #6
 8001a3e:	f04f 0400 	mov.w	r4, #0
 8001a42:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001a46:	f04f 0200 	mov.w	r2, #0
 8001a4a:	ea03 0501 	and.w	r5, r3, r1
 8001a4e:	ea04 0602 	and.w	r6, r4, r2
 8001a52:	4629      	mov	r1, r5
 8001a54:	4632      	mov	r2, r6
 8001a56:	f04f 0300 	mov.w	r3, #0
 8001a5a:	f04f 0400 	mov.w	r4, #0
 8001a5e:	0154      	lsls	r4, r2, #5
 8001a60:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a64:	014b      	lsls	r3, r1, #5
 8001a66:	4619      	mov	r1, r3
 8001a68:	4622      	mov	r2, r4
 8001a6a:	1b49      	subs	r1, r1, r5
 8001a6c:	eb62 0206 	sbc.w	r2, r2, r6
 8001a70:	f04f 0300 	mov.w	r3, #0
 8001a74:	f04f 0400 	mov.w	r4, #0
 8001a78:	0194      	lsls	r4, r2, #6
 8001a7a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001a7e:	018b      	lsls	r3, r1, #6
 8001a80:	1a5b      	subs	r3, r3, r1
 8001a82:	eb64 0402 	sbc.w	r4, r4, r2
 8001a86:	f04f 0100 	mov.w	r1, #0
 8001a8a:	f04f 0200 	mov.w	r2, #0
 8001a8e:	00e2      	lsls	r2, r4, #3
 8001a90:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001a94:	00d9      	lsls	r1, r3, #3
 8001a96:	460b      	mov	r3, r1
 8001a98:	4614      	mov	r4, r2
 8001a9a:	195b      	adds	r3, r3, r5
 8001a9c:	eb44 0406 	adc.w	r4, r4, r6
 8001aa0:	f04f 0100 	mov.w	r1, #0
 8001aa4:	f04f 0200 	mov.w	r2, #0
 8001aa8:	02a2      	lsls	r2, r4, #10
 8001aaa:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001aae:	0299      	lsls	r1, r3, #10
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	4614      	mov	r4, r2
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	4621      	mov	r1, r4
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f04f 0400 	mov.w	r4, #0
 8001abe:	461a      	mov	r2, r3
 8001ac0:	4623      	mov	r3, r4
 8001ac2:	f7fe fba1 	bl	8000208 <__aeabi_uldivmod>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	460c      	mov	r4, r1
 8001aca:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001acc:	4b60      	ldr	r3, [pc, #384]	; (8001c50 <HAL_RCC_GetSysClockFreq+0x334>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	0c1b      	lsrs	r3, r3, #16
 8001ad2:	f003 0303 	and.w	r3, r3, #3
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8001adc:	697a      	ldr	r2, [r7, #20]
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ae4:	613b      	str	r3, [r7, #16]
      break;
 8001ae6:	e0ae      	b.n	8001c46 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ae8:	4b59      	ldr	r3, [pc, #356]	; (8001c50 <HAL_RCC_GetSysClockFreq+0x334>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001af0:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001af2:	4b57      	ldr	r3, [pc, #348]	; (8001c50 <HAL_RCC_GetSysClockFreq+0x334>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d04a      	beq.n	8001b94 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001afe:	4b54      	ldr	r3, [pc, #336]	; (8001c50 <HAL_RCC_GetSysClockFreq+0x334>)
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	099b      	lsrs	r3, r3, #6
 8001b04:	f04f 0400 	mov.w	r4, #0
 8001b08:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001b0c:	f04f 0200 	mov.w	r2, #0
 8001b10:	ea03 0501 	and.w	r5, r3, r1
 8001b14:	ea04 0602 	and.w	r6, r4, r2
 8001b18:	4629      	mov	r1, r5
 8001b1a:	4632      	mov	r2, r6
 8001b1c:	f04f 0300 	mov.w	r3, #0
 8001b20:	f04f 0400 	mov.w	r4, #0
 8001b24:	0154      	lsls	r4, r2, #5
 8001b26:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001b2a:	014b      	lsls	r3, r1, #5
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4622      	mov	r2, r4
 8001b30:	1b49      	subs	r1, r1, r5
 8001b32:	eb62 0206 	sbc.w	r2, r2, r6
 8001b36:	f04f 0300 	mov.w	r3, #0
 8001b3a:	f04f 0400 	mov.w	r4, #0
 8001b3e:	0194      	lsls	r4, r2, #6
 8001b40:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001b44:	018b      	lsls	r3, r1, #6
 8001b46:	1a5b      	subs	r3, r3, r1
 8001b48:	eb64 0402 	sbc.w	r4, r4, r2
 8001b4c:	f04f 0100 	mov.w	r1, #0
 8001b50:	f04f 0200 	mov.w	r2, #0
 8001b54:	00e2      	lsls	r2, r4, #3
 8001b56:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001b5a:	00d9      	lsls	r1, r3, #3
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	4614      	mov	r4, r2
 8001b60:	195b      	adds	r3, r3, r5
 8001b62:	eb44 0406 	adc.w	r4, r4, r6
 8001b66:	f04f 0100 	mov.w	r1, #0
 8001b6a:	f04f 0200 	mov.w	r2, #0
 8001b6e:	0262      	lsls	r2, r4, #9
 8001b70:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001b74:	0259      	lsls	r1, r3, #9
 8001b76:	460b      	mov	r3, r1
 8001b78:	4614      	mov	r4, r2
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	4621      	mov	r1, r4
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	f04f 0400 	mov.w	r4, #0
 8001b84:	461a      	mov	r2, r3
 8001b86:	4623      	mov	r3, r4
 8001b88:	f7fe fb3e 	bl	8000208 <__aeabi_uldivmod>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	460c      	mov	r4, r1
 8001b90:	617b      	str	r3, [r7, #20]
 8001b92:	e049      	b.n	8001c28 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b94:	4b2e      	ldr	r3, [pc, #184]	; (8001c50 <HAL_RCC_GetSysClockFreq+0x334>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	099b      	lsrs	r3, r3, #6
 8001b9a:	f04f 0400 	mov.w	r4, #0
 8001b9e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001ba2:	f04f 0200 	mov.w	r2, #0
 8001ba6:	ea03 0501 	and.w	r5, r3, r1
 8001baa:	ea04 0602 	and.w	r6, r4, r2
 8001bae:	4629      	mov	r1, r5
 8001bb0:	4632      	mov	r2, r6
 8001bb2:	f04f 0300 	mov.w	r3, #0
 8001bb6:	f04f 0400 	mov.w	r4, #0
 8001bba:	0154      	lsls	r4, r2, #5
 8001bbc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001bc0:	014b      	lsls	r3, r1, #5
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4622      	mov	r2, r4
 8001bc6:	1b49      	subs	r1, r1, r5
 8001bc8:	eb62 0206 	sbc.w	r2, r2, r6
 8001bcc:	f04f 0300 	mov.w	r3, #0
 8001bd0:	f04f 0400 	mov.w	r4, #0
 8001bd4:	0194      	lsls	r4, r2, #6
 8001bd6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001bda:	018b      	lsls	r3, r1, #6
 8001bdc:	1a5b      	subs	r3, r3, r1
 8001bde:	eb64 0402 	sbc.w	r4, r4, r2
 8001be2:	f04f 0100 	mov.w	r1, #0
 8001be6:	f04f 0200 	mov.w	r2, #0
 8001bea:	00e2      	lsls	r2, r4, #3
 8001bec:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001bf0:	00d9      	lsls	r1, r3, #3
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	4614      	mov	r4, r2
 8001bf6:	195b      	adds	r3, r3, r5
 8001bf8:	eb44 0406 	adc.w	r4, r4, r6
 8001bfc:	f04f 0100 	mov.w	r1, #0
 8001c00:	f04f 0200 	mov.w	r2, #0
 8001c04:	02a2      	lsls	r2, r4, #10
 8001c06:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001c0a:	0299      	lsls	r1, r3, #10
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	4614      	mov	r4, r2
 8001c10:	4618      	mov	r0, r3
 8001c12:	4621      	mov	r1, r4
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	f04f 0400 	mov.w	r4, #0
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	4623      	mov	r3, r4
 8001c1e:	f7fe faf3 	bl	8000208 <__aeabi_uldivmod>
 8001c22:	4603      	mov	r3, r0
 8001c24:	460c      	mov	r4, r1
 8001c26:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001c28:	4b09      	ldr	r3, [pc, #36]	; (8001c50 <HAL_RCC_GetSysClockFreq+0x334>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	0f1b      	lsrs	r3, r3, #28
 8001c2e:	f003 0307 	and.w	r3, r3, #7
 8001c32:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8001c34:	697a      	ldr	r2, [r7, #20]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c3c:	613b      	str	r3, [r7, #16]
      break;
 8001c3e:	e002      	b.n	8001c46 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c40:	4b04      	ldr	r3, [pc, #16]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x338>)
 8001c42:	613b      	str	r3, [r7, #16]
      break;
 8001c44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c46:	693b      	ldr	r3, [r7, #16]
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	371c      	adds	r7, #28
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c50:	40023800 	.word	0x40023800
 8001c54:	00f42400 	.word	0x00f42400
 8001c58:	007a1200 	.word	0x007a1200

08001c5c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c64:	2300      	movs	r3, #0
 8001c66:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0301 	and.w	r3, r3, #1
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	f000 8083 	beq.w	8001d7c <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001c76:	4b95      	ldr	r3, [pc, #596]	; (8001ecc <HAL_RCC_OscConfig+0x270>)
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	f003 030c 	and.w	r3, r3, #12
 8001c7e:	2b04      	cmp	r3, #4
 8001c80:	d019      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001c82:	4b92      	ldr	r3, [pc, #584]	; (8001ecc <HAL_RCC_OscConfig+0x270>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001c8a:	2b08      	cmp	r3, #8
 8001c8c:	d106      	bne.n	8001c9c <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001c8e:	4b8f      	ldr	r3, [pc, #572]	; (8001ecc <HAL_RCC_OscConfig+0x270>)
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c9a:	d00c      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c9c:	4b8b      	ldr	r3, [pc, #556]	; (8001ecc <HAL_RCC_OscConfig+0x270>)
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001ca4:	2b0c      	cmp	r3, #12
 8001ca6:	d112      	bne.n	8001cce <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ca8:	4b88      	ldr	r3, [pc, #544]	; (8001ecc <HAL_RCC_OscConfig+0x270>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001cb4:	d10b      	bne.n	8001cce <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cb6:	4b85      	ldr	r3, [pc, #532]	; (8001ecc <HAL_RCC_OscConfig+0x270>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d05b      	beq.n	8001d7a <HAL_RCC_OscConfig+0x11e>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d157      	bne.n	8001d7a <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e216      	b.n	80020fc <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cd6:	d106      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x8a>
 8001cd8:	4b7c      	ldr	r3, [pc, #496]	; (8001ecc <HAL_RCC_OscConfig+0x270>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a7b      	ldr	r2, [pc, #492]	; (8001ecc <HAL_RCC_OscConfig+0x270>)
 8001cde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ce2:	6013      	str	r3, [r2, #0]
 8001ce4:	e01d      	b.n	8001d22 <HAL_RCC_OscConfig+0xc6>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cee:	d10c      	bne.n	8001d0a <HAL_RCC_OscConfig+0xae>
 8001cf0:	4b76      	ldr	r3, [pc, #472]	; (8001ecc <HAL_RCC_OscConfig+0x270>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a75      	ldr	r2, [pc, #468]	; (8001ecc <HAL_RCC_OscConfig+0x270>)
 8001cf6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cfa:	6013      	str	r3, [r2, #0]
 8001cfc:	4b73      	ldr	r3, [pc, #460]	; (8001ecc <HAL_RCC_OscConfig+0x270>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a72      	ldr	r2, [pc, #456]	; (8001ecc <HAL_RCC_OscConfig+0x270>)
 8001d02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d06:	6013      	str	r3, [r2, #0]
 8001d08:	e00b      	b.n	8001d22 <HAL_RCC_OscConfig+0xc6>
 8001d0a:	4b70      	ldr	r3, [pc, #448]	; (8001ecc <HAL_RCC_OscConfig+0x270>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a6f      	ldr	r2, [pc, #444]	; (8001ecc <HAL_RCC_OscConfig+0x270>)
 8001d10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d14:	6013      	str	r3, [r2, #0]
 8001d16:	4b6d      	ldr	r3, [pc, #436]	; (8001ecc <HAL_RCC_OscConfig+0x270>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a6c      	ldr	r2, [pc, #432]	; (8001ecc <HAL_RCC_OscConfig+0x270>)
 8001d1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d20:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d013      	beq.n	8001d52 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d2a:	f7ff fa73 	bl	8001214 <HAL_GetTick>
 8001d2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d30:	e008      	b.n	8001d44 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d32:	f7ff fa6f 	bl	8001214 <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	2b64      	cmp	r3, #100	; 0x64
 8001d3e:	d901      	bls.n	8001d44 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e1db      	b.n	80020fc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d44:	4b61      	ldr	r3, [pc, #388]	; (8001ecc <HAL_RCC_OscConfig+0x270>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d0f0      	beq.n	8001d32 <HAL_RCC_OscConfig+0xd6>
 8001d50:	e014      	b.n	8001d7c <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d52:	f7ff fa5f 	bl	8001214 <HAL_GetTick>
 8001d56:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d58:	e008      	b.n	8001d6c <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d5a:	f7ff fa5b 	bl	8001214 <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	2b64      	cmp	r3, #100	; 0x64
 8001d66:	d901      	bls.n	8001d6c <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e1c7      	b.n	80020fc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d6c:	4b57      	ldr	r3, [pc, #348]	; (8001ecc <HAL_RCC_OscConfig+0x270>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d1f0      	bne.n	8001d5a <HAL_RCC_OscConfig+0xfe>
 8001d78:	e000      	b.n	8001d7c <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d7a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0302 	and.w	r3, r3, #2
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d06f      	beq.n	8001e68 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001d88:	4b50      	ldr	r3, [pc, #320]	; (8001ecc <HAL_RCC_OscConfig+0x270>)
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f003 030c 	and.w	r3, r3, #12
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d017      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001d94:	4b4d      	ldr	r3, [pc, #308]	; (8001ecc <HAL_RCC_OscConfig+0x270>)
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001d9c:	2b08      	cmp	r3, #8
 8001d9e:	d105      	bne.n	8001dac <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001da0:	4b4a      	ldr	r3, [pc, #296]	; (8001ecc <HAL_RCC_OscConfig+0x270>)
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d00b      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dac:	4b47      	ldr	r3, [pc, #284]	; (8001ecc <HAL_RCC_OscConfig+0x270>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001db4:	2b0c      	cmp	r3, #12
 8001db6:	d11c      	bne.n	8001df2 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001db8:	4b44      	ldr	r3, [pc, #272]	; (8001ecc <HAL_RCC_OscConfig+0x270>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d116      	bne.n	8001df2 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dc4:	4b41      	ldr	r3, [pc, #260]	; (8001ecc <HAL_RCC_OscConfig+0x270>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0302 	and.w	r3, r3, #2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d005      	beq.n	8001ddc <HAL_RCC_OscConfig+0x180>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d001      	beq.n	8001ddc <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e18f      	b.n	80020fc <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ddc:	4b3b      	ldr	r3, [pc, #236]	; (8001ecc <HAL_RCC_OscConfig+0x270>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	00db      	lsls	r3, r3, #3
 8001dea:	4938      	ldr	r1, [pc, #224]	; (8001ecc <HAL_RCC_OscConfig+0x270>)
 8001dec:	4313      	orrs	r3, r2
 8001dee:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001df0:	e03a      	b.n	8001e68 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d020      	beq.n	8001e3c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dfa:	4b35      	ldr	r3, [pc, #212]	; (8001ed0 <HAL_RCC_OscConfig+0x274>)
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e00:	f7ff fa08 	bl	8001214 <HAL_GetTick>
 8001e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e06:	e008      	b.n	8001e1a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e08:	f7ff fa04 	bl	8001214 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e170      	b.n	80020fc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e1a:	4b2c      	ldr	r3, [pc, #176]	; (8001ecc <HAL_RCC_OscConfig+0x270>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d0f0      	beq.n	8001e08 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e26:	4b29      	ldr	r3, [pc, #164]	; (8001ecc <HAL_RCC_OscConfig+0x270>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	691b      	ldr	r3, [r3, #16]
 8001e32:	00db      	lsls	r3, r3, #3
 8001e34:	4925      	ldr	r1, [pc, #148]	; (8001ecc <HAL_RCC_OscConfig+0x270>)
 8001e36:	4313      	orrs	r3, r2
 8001e38:	600b      	str	r3, [r1, #0]
 8001e3a:	e015      	b.n	8001e68 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e3c:	4b24      	ldr	r3, [pc, #144]	; (8001ed0 <HAL_RCC_OscConfig+0x274>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e42:	f7ff f9e7 	bl	8001214 <HAL_GetTick>
 8001e46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e48:	e008      	b.n	8001e5c <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e4a:	f7ff f9e3 	bl	8001214 <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d901      	bls.n	8001e5c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e14f      	b.n	80020fc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e5c:	4b1b      	ldr	r3, [pc, #108]	; (8001ecc <HAL_RCC_OscConfig+0x270>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0302 	and.w	r3, r3, #2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d1f0      	bne.n	8001e4a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0308 	and.w	r3, r3, #8
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d037      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	695b      	ldr	r3, [r3, #20]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d016      	beq.n	8001eaa <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e7c:	4b15      	ldr	r3, [pc, #84]	; (8001ed4 <HAL_RCC_OscConfig+0x278>)
 8001e7e:	2201      	movs	r2, #1
 8001e80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e82:	f7ff f9c7 	bl	8001214 <HAL_GetTick>
 8001e86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e88:	e008      	b.n	8001e9c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e8a:	f7ff f9c3 	bl	8001214 <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d901      	bls.n	8001e9c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e12f      	b.n	80020fc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e9c:	4b0b      	ldr	r3, [pc, #44]	; (8001ecc <HAL_RCC_OscConfig+0x270>)
 8001e9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ea0:	f003 0302 	and.w	r3, r3, #2
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d0f0      	beq.n	8001e8a <HAL_RCC_OscConfig+0x22e>
 8001ea8:	e01c      	b.n	8001ee4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eaa:	4b0a      	ldr	r3, [pc, #40]	; (8001ed4 <HAL_RCC_OscConfig+0x278>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eb0:	f7ff f9b0 	bl	8001214 <HAL_GetTick>
 8001eb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eb6:	e00f      	b.n	8001ed8 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001eb8:	f7ff f9ac 	bl	8001214 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d908      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e118      	b.n	80020fc <HAL_RCC_OscConfig+0x4a0>
 8001eca:	bf00      	nop
 8001ecc:	40023800 	.word	0x40023800
 8001ed0:	42470000 	.word	0x42470000
 8001ed4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ed8:	4b8a      	ldr	r3, [pc, #552]	; (8002104 <HAL_RCC_OscConfig+0x4a8>)
 8001eda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001edc:	f003 0302 	and.w	r3, r3, #2
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d1e9      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0304 	and.w	r3, r3, #4
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	f000 8097 	beq.w	8002020 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ef6:	4b83      	ldr	r3, [pc, #524]	; (8002104 <HAL_RCC_OscConfig+0x4a8>)
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d10f      	bne.n	8001f22 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f02:	2300      	movs	r3, #0
 8001f04:	60fb      	str	r3, [r7, #12]
 8001f06:	4b7f      	ldr	r3, [pc, #508]	; (8002104 <HAL_RCC_OscConfig+0x4a8>)
 8001f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0a:	4a7e      	ldr	r2, [pc, #504]	; (8002104 <HAL_RCC_OscConfig+0x4a8>)
 8001f0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f10:	6413      	str	r3, [r2, #64]	; 0x40
 8001f12:	4b7c      	ldr	r3, [pc, #496]	; (8002104 <HAL_RCC_OscConfig+0x4a8>)
 8001f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f22:	4b79      	ldr	r3, [pc, #484]	; (8002108 <HAL_RCC_OscConfig+0x4ac>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d118      	bne.n	8001f60 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f2e:	4b76      	ldr	r3, [pc, #472]	; (8002108 <HAL_RCC_OscConfig+0x4ac>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a75      	ldr	r2, [pc, #468]	; (8002108 <HAL_RCC_OscConfig+0x4ac>)
 8001f34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f3a:	f7ff f96b 	bl	8001214 <HAL_GetTick>
 8001f3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f40:	e008      	b.n	8001f54 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f42:	f7ff f967 	bl	8001214 <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d901      	bls.n	8001f54 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e0d3      	b.n	80020fc <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f54:	4b6c      	ldr	r3, [pc, #432]	; (8002108 <HAL_RCC_OscConfig+0x4ac>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d0f0      	beq.n	8001f42 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d106      	bne.n	8001f76 <HAL_RCC_OscConfig+0x31a>
 8001f68:	4b66      	ldr	r3, [pc, #408]	; (8002104 <HAL_RCC_OscConfig+0x4a8>)
 8001f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f6c:	4a65      	ldr	r2, [pc, #404]	; (8002104 <HAL_RCC_OscConfig+0x4a8>)
 8001f6e:	f043 0301 	orr.w	r3, r3, #1
 8001f72:	6713      	str	r3, [r2, #112]	; 0x70
 8001f74:	e01c      	b.n	8001fb0 <HAL_RCC_OscConfig+0x354>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	2b05      	cmp	r3, #5
 8001f7c:	d10c      	bne.n	8001f98 <HAL_RCC_OscConfig+0x33c>
 8001f7e:	4b61      	ldr	r3, [pc, #388]	; (8002104 <HAL_RCC_OscConfig+0x4a8>)
 8001f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f82:	4a60      	ldr	r2, [pc, #384]	; (8002104 <HAL_RCC_OscConfig+0x4a8>)
 8001f84:	f043 0304 	orr.w	r3, r3, #4
 8001f88:	6713      	str	r3, [r2, #112]	; 0x70
 8001f8a:	4b5e      	ldr	r3, [pc, #376]	; (8002104 <HAL_RCC_OscConfig+0x4a8>)
 8001f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f8e:	4a5d      	ldr	r2, [pc, #372]	; (8002104 <HAL_RCC_OscConfig+0x4a8>)
 8001f90:	f043 0301 	orr.w	r3, r3, #1
 8001f94:	6713      	str	r3, [r2, #112]	; 0x70
 8001f96:	e00b      	b.n	8001fb0 <HAL_RCC_OscConfig+0x354>
 8001f98:	4b5a      	ldr	r3, [pc, #360]	; (8002104 <HAL_RCC_OscConfig+0x4a8>)
 8001f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f9c:	4a59      	ldr	r2, [pc, #356]	; (8002104 <HAL_RCC_OscConfig+0x4a8>)
 8001f9e:	f023 0301 	bic.w	r3, r3, #1
 8001fa2:	6713      	str	r3, [r2, #112]	; 0x70
 8001fa4:	4b57      	ldr	r3, [pc, #348]	; (8002104 <HAL_RCC_OscConfig+0x4a8>)
 8001fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fa8:	4a56      	ldr	r2, [pc, #344]	; (8002104 <HAL_RCC_OscConfig+0x4a8>)
 8001faa:	f023 0304 	bic.w	r3, r3, #4
 8001fae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d015      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fb8:	f7ff f92c 	bl	8001214 <HAL_GetTick>
 8001fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fbe:	e00a      	b.n	8001fd6 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fc0:	f7ff f928 	bl	8001214 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e092      	b.n	80020fc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fd6:	4b4b      	ldr	r3, [pc, #300]	; (8002104 <HAL_RCC_OscConfig+0x4a8>)
 8001fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d0ee      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x364>
 8001fe2:	e014      	b.n	800200e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fe4:	f7ff f916 	bl	8001214 <HAL_GetTick>
 8001fe8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fea:	e00a      	b.n	8002002 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fec:	f7ff f912 	bl	8001214 <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e07c      	b.n	80020fc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002002:	4b40      	ldr	r3, [pc, #256]	; (8002104 <HAL_RCC_OscConfig+0x4a8>)
 8002004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	2b00      	cmp	r3, #0
 800200c:	d1ee      	bne.n	8001fec <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800200e:	7dfb      	ldrb	r3, [r7, #23]
 8002010:	2b01      	cmp	r3, #1
 8002012:	d105      	bne.n	8002020 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002014:	4b3b      	ldr	r3, [pc, #236]	; (8002104 <HAL_RCC_OscConfig+0x4a8>)
 8002016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002018:	4a3a      	ldr	r2, [pc, #232]	; (8002104 <HAL_RCC_OscConfig+0x4a8>)
 800201a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800201e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	699b      	ldr	r3, [r3, #24]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d068      	beq.n	80020fa <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002028:	4b36      	ldr	r3, [pc, #216]	; (8002104 <HAL_RCC_OscConfig+0x4a8>)
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f003 030c 	and.w	r3, r3, #12
 8002030:	2b08      	cmp	r3, #8
 8002032:	d060      	beq.n	80020f6 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	2b02      	cmp	r3, #2
 800203a:	d145      	bne.n	80020c8 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800203c:	4b33      	ldr	r3, [pc, #204]	; (800210c <HAL_RCC_OscConfig+0x4b0>)
 800203e:	2200      	movs	r2, #0
 8002040:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002042:	f7ff f8e7 	bl	8001214 <HAL_GetTick>
 8002046:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002048:	e008      	b.n	800205c <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800204a:	f7ff f8e3 	bl	8001214 <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	2b02      	cmp	r3, #2
 8002056:	d901      	bls.n	800205c <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	e04f      	b.n	80020fc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800205c:	4b29      	ldr	r3, [pc, #164]	; (8002104 <HAL_RCC_OscConfig+0x4a8>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d1f0      	bne.n	800204a <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	69da      	ldr	r2, [r3, #28]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a1b      	ldr	r3, [r3, #32]
 8002070:	431a      	orrs	r2, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002076:	019b      	lsls	r3, r3, #6
 8002078:	431a      	orrs	r2, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800207e:	085b      	lsrs	r3, r3, #1
 8002080:	3b01      	subs	r3, #1
 8002082:	041b      	lsls	r3, r3, #16
 8002084:	431a      	orrs	r2, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800208a:	061b      	lsls	r3, r3, #24
 800208c:	431a      	orrs	r2, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002092:	071b      	lsls	r3, r3, #28
 8002094:	491b      	ldr	r1, [pc, #108]	; (8002104 <HAL_RCC_OscConfig+0x4a8>)
 8002096:	4313      	orrs	r3, r2
 8002098:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800209a:	4b1c      	ldr	r3, [pc, #112]	; (800210c <HAL_RCC_OscConfig+0x4b0>)
 800209c:	2201      	movs	r2, #1
 800209e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a0:	f7ff f8b8 	bl	8001214 <HAL_GetTick>
 80020a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020a6:	e008      	b.n	80020ba <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020a8:	f7ff f8b4 	bl	8001214 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e020      	b.n	80020fc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020ba:	4b12      	ldr	r3, [pc, #72]	; (8002104 <HAL_RCC_OscConfig+0x4a8>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d0f0      	beq.n	80020a8 <HAL_RCC_OscConfig+0x44c>
 80020c6:	e018      	b.n	80020fa <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020c8:	4b10      	ldr	r3, [pc, #64]	; (800210c <HAL_RCC_OscConfig+0x4b0>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ce:	f7ff f8a1 	bl	8001214 <HAL_GetTick>
 80020d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020d4:	e008      	b.n	80020e8 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020d6:	f7ff f89d 	bl	8001214 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d901      	bls.n	80020e8 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e009      	b.n	80020fc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020e8:	4b06      	ldr	r3, [pc, #24]	; (8002104 <HAL_RCC_OscConfig+0x4a8>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d1f0      	bne.n	80020d6 <HAL_RCC_OscConfig+0x47a>
 80020f4:	e001      	b.n	80020fa <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e000      	b.n	80020fc <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80020fa:	2300      	movs	r3, #0
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3718      	adds	r7, #24
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	40023800 	.word	0x40023800
 8002108:	40007000 	.word	0x40007000
 800210c:	42470060 	.word	0x42470060

08002110 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d101      	bne.n	8002122 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e01d      	b.n	800215e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002128:	b2db      	uxtb	r3, r3
 800212a:	2b00      	cmp	r3, #0
 800212c:	d106      	bne.n	800213c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f7fe ff76 	bl	8001028 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2202      	movs	r2, #2
 8002140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	3304      	adds	r3, #4
 800214c:	4619      	mov	r1, r3
 800214e:	4610      	mov	r0, r2
 8002150:	f000 f8e4 	bl	800231c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002166:	b480      	push	{r7}
 8002168:	b085      	sub	sp, #20
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2202      	movs	r2, #2
 8002172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	f003 0307 	and.w	r3, r3, #7
 8002180:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2b06      	cmp	r3, #6
 8002186:	d007      	beq.n	8002198 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f042 0201 	orr.w	r2, r2, #1
 8002196:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3714      	adds	r7, #20
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr

080021ae <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80021ae:	b580      	push	{r7, lr}
 80021b0:	b084      	sub	sp, #16
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
 80021b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d101      	bne.n	80021c6 <HAL_TIM_ConfigClockSource+0x18>
 80021c2:	2302      	movs	r3, #2
 80021c4:	e0a6      	b.n	8002314 <HAL_TIM_ConfigClockSource+0x166>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2201      	movs	r2, #1
 80021ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2202      	movs	r2, #2
 80021d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80021e4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80021ec:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68fa      	ldr	r2, [r7, #12]
 80021f4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2b40      	cmp	r3, #64	; 0x40
 80021fc:	d067      	beq.n	80022ce <HAL_TIM_ConfigClockSource+0x120>
 80021fe:	2b40      	cmp	r3, #64	; 0x40
 8002200:	d80b      	bhi.n	800221a <HAL_TIM_ConfigClockSource+0x6c>
 8002202:	2b10      	cmp	r3, #16
 8002204:	d073      	beq.n	80022ee <HAL_TIM_ConfigClockSource+0x140>
 8002206:	2b10      	cmp	r3, #16
 8002208:	d802      	bhi.n	8002210 <HAL_TIM_ConfigClockSource+0x62>
 800220a:	2b00      	cmp	r3, #0
 800220c:	d06f      	beq.n	80022ee <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800220e:	e078      	b.n	8002302 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002210:	2b20      	cmp	r3, #32
 8002212:	d06c      	beq.n	80022ee <HAL_TIM_ConfigClockSource+0x140>
 8002214:	2b30      	cmp	r3, #48	; 0x30
 8002216:	d06a      	beq.n	80022ee <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002218:	e073      	b.n	8002302 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800221a:	2b70      	cmp	r3, #112	; 0x70
 800221c:	d00d      	beq.n	800223a <HAL_TIM_ConfigClockSource+0x8c>
 800221e:	2b70      	cmp	r3, #112	; 0x70
 8002220:	d804      	bhi.n	800222c <HAL_TIM_ConfigClockSource+0x7e>
 8002222:	2b50      	cmp	r3, #80	; 0x50
 8002224:	d033      	beq.n	800228e <HAL_TIM_ConfigClockSource+0xe0>
 8002226:	2b60      	cmp	r3, #96	; 0x60
 8002228:	d041      	beq.n	80022ae <HAL_TIM_ConfigClockSource+0x100>
      break;
 800222a:	e06a      	b.n	8002302 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800222c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002230:	d066      	beq.n	8002300 <HAL_TIM_ConfigClockSource+0x152>
 8002232:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002236:	d017      	beq.n	8002268 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002238:	e063      	b.n	8002302 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6818      	ldr	r0, [r3, #0]
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	6899      	ldr	r1, [r3, #8]
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685a      	ldr	r2, [r3, #4]
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	f000 f981 	bl	8002550 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800225c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	609a      	str	r2, [r3, #8]
      break;
 8002266:	e04c      	b.n	8002302 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6818      	ldr	r0, [r3, #0]
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	6899      	ldr	r1, [r3, #8]
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685a      	ldr	r2, [r3, #4]
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	f000 f96a 	bl	8002550 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	689a      	ldr	r2, [r3, #8]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800228a:	609a      	str	r2, [r3, #8]
      break;
 800228c:	e039      	b.n	8002302 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6818      	ldr	r0, [r3, #0]
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	6859      	ldr	r1, [r3, #4]
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	461a      	mov	r2, r3
 800229c:	f000 f8de 	bl	800245c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2150      	movs	r1, #80	; 0x50
 80022a6:	4618      	mov	r0, r3
 80022a8:	f000 f937 	bl	800251a <TIM_ITRx_SetConfig>
      break;
 80022ac:	e029      	b.n	8002302 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6818      	ldr	r0, [r3, #0]
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	6859      	ldr	r1, [r3, #4]
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	461a      	mov	r2, r3
 80022bc:	f000 f8fd 	bl	80024ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2160      	movs	r1, #96	; 0x60
 80022c6:	4618      	mov	r0, r3
 80022c8:	f000 f927 	bl	800251a <TIM_ITRx_SetConfig>
      break;
 80022cc:	e019      	b.n	8002302 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6818      	ldr	r0, [r3, #0]
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	6859      	ldr	r1, [r3, #4]
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	461a      	mov	r2, r3
 80022dc:	f000 f8be 	bl	800245c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2140      	movs	r1, #64	; 0x40
 80022e6:	4618      	mov	r0, r3
 80022e8:	f000 f917 	bl	800251a <TIM_ITRx_SetConfig>
      break;
 80022ec:	e009      	b.n	8002302 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4619      	mov	r1, r3
 80022f8:	4610      	mov	r0, r2
 80022fa:	f000 f90e 	bl	800251a <TIM_ITRx_SetConfig>
      break;
 80022fe:	e000      	b.n	8002302 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002300:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2201      	movs	r2, #1
 8002306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002312:	2300      	movs	r3, #0
}
 8002314:	4618      	mov	r0, r3
 8002316:	3710      	adds	r7, #16
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}

0800231c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4a40      	ldr	r2, [pc, #256]	; (8002430 <TIM_Base_SetConfig+0x114>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d013      	beq.n	800235c <TIM_Base_SetConfig+0x40>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800233a:	d00f      	beq.n	800235c <TIM_Base_SetConfig+0x40>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	4a3d      	ldr	r2, [pc, #244]	; (8002434 <TIM_Base_SetConfig+0x118>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d00b      	beq.n	800235c <TIM_Base_SetConfig+0x40>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	4a3c      	ldr	r2, [pc, #240]	; (8002438 <TIM_Base_SetConfig+0x11c>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d007      	beq.n	800235c <TIM_Base_SetConfig+0x40>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	4a3b      	ldr	r2, [pc, #236]	; (800243c <TIM_Base_SetConfig+0x120>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d003      	beq.n	800235c <TIM_Base_SetConfig+0x40>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	4a3a      	ldr	r2, [pc, #232]	; (8002440 <TIM_Base_SetConfig+0x124>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d108      	bne.n	800236e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002362:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	4313      	orrs	r3, r2
 800236c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a2f      	ldr	r2, [pc, #188]	; (8002430 <TIM_Base_SetConfig+0x114>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d02b      	beq.n	80023ce <TIM_Base_SetConfig+0xb2>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800237c:	d027      	beq.n	80023ce <TIM_Base_SetConfig+0xb2>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a2c      	ldr	r2, [pc, #176]	; (8002434 <TIM_Base_SetConfig+0x118>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d023      	beq.n	80023ce <TIM_Base_SetConfig+0xb2>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a2b      	ldr	r2, [pc, #172]	; (8002438 <TIM_Base_SetConfig+0x11c>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d01f      	beq.n	80023ce <TIM_Base_SetConfig+0xb2>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a2a      	ldr	r2, [pc, #168]	; (800243c <TIM_Base_SetConfig+0x120>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d01b      	beq.n	80023ce <TIM_Base_SetConfig+0xb2>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a29      	ldr	r2, [pc, #164]	; (8002440 <TIM_Base_SetConfig+0x124>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d017      	beq.n	80023ce <TIM_Base_SetConfig+0xb2>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a28      	ldr	r2, [pc, #160]	; (8002444 <TIM_Base_SetConfig+0x128>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d013      	beq.n	80023ce <TIM_Base_SetConfig+0xb2>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a27      	ldr	r2, [pc, #156]	; (8002448 <TIM_Base_SetConfig+0x12c>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d00f      	beq.n	80023ce <TIM_Base_SetConfig+0xb2>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a26      	ldr	r2, [pc, #152]	; (800244c <TIM_Base_SetConfig+0x130>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d00b      	beq.n	80023ce <TIM_Base_SetConfig+0xb2>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a25      	ldr	r2, [pc, #148]	; (8002450 <TIM_Base_SetConfig+0x134>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d007      	beq.n	80023ce <TIM_Base_SetConfig+0xb2>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a24      	ldr	r2, [pc, #144]	; (8002454 <TIM_Base_SetConfig+0x138>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d003      	beq.n	80023ce <TIM_Base_SetConfig+0xb2>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a23      	ldr	r2, [pc, #140]	; (8002458 <TIM_Base_SetConfig+0x13c>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d108      	bne.n	80023e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	68fa      	ldr	r2, [r7, #12]
 80023dc:	4313      	orrs	r3, r2
 80023de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	695b      	ldr	r3, [r3, #20]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	68fa      	ldr	r2, [r7, #12]
 80023f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	689a      	ldr	r2, [r3, #8]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4a0a      	ldr	r2, [pc, #40]	; (8002430 <TIM_Base_SetConfig+0x114>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d003      	beq.n	8002414 <TIM_Base_SetConfig+0xf8>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	4a0c      	ldr	r2, [pc, #48]	; (8002440 <TIM_Base_SetConfig+0x124>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d103      	bne.n	800241c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	691a      	ldr	r2, [r3, #16]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2201      	movs	r2, #1
 8002420:	615a      	str	r2, [r3, #20]
}
 8002422:	bf00      	nop
 8002424:	3714      	adds	r7, #20
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	40010000 	.word	0x40010000
 8002434:	40000400 	.word	0x40000400
 8002438:	40000800 	.word	0x40000800
 800243c:	40000c00 	.word	0x40000c00
 8002440:	40010400 	.word	0x40010400
 8002444:	40014000 	.word	0x40014000
 8002448:	40014400 	.word	0x40014400
 800244c:	40014800 	.word	0x40014800
 8002450:	40001800 	.word	0x40001800
 8002454:	40001c00 	.word	0x40001c00
 8002458:	40002000 	.word	0x40002000

0800245c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800245c:	b480      	push	{r7}
 800245e:	b087      	sub	sp, #28
 8002460:	af00      	add	r7, sp, #0
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6a1b      	ldr	r3, [r3, #32]
 800246c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6a1b      	ldr	r3, [r3, #32]
 8002472:	f023 0201 	bic.w	r2, r3, #1
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	699b      	ldr	r3, [r3, #24]
 800247e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002486:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	011b      	lsls	r3, r3, #4
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	4313      	orrs	r3, r2
 8002490:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	f023 030a 	bic.w	r3, r3, #10
 8002498:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800249a:	697a      	ldr	r2, [r7, #20]
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	4313      	orrs	r3, r2
 80024a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	693a      	ldr	r2, [r7, #16]
 80024a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	697a      	ldr	r2, [r7, #20]
 80024ac:	621a      	str	r2, [r3, #32]
}
 80024ae:	bf00      	nop
 80024b0:	371c      	adds	r7, #28
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr

080024ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024ba:	b480      	push	{r7}
 80024bc:	b087      	sub	sp, #28
 80024be:	af00      	add	r7, sp, #0
 80024c0:	60f8      	str	r0, [r7, #12]
 80024c2:	60b9      	str	r1, [r7, #8]
 80024c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6a1b      	ldr	r3, [r3, #32]
 80024ca:	f023 0210 	bic.w	r2, r3, #16
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	699b      	ldr	r3, [r3, #24]
 80024d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6a1b      	ldr	r3, [r3, #32]
 80024dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80024e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	031b      	lsls	r3, r3, #12
 80024ea:	697a      	ldr	r2, [r7, #20]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80024f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	011b      	lsls	r3, r3, #4
 80024fc:	693a      	ldr	r2, [r7, #16]
 80024fe:	4313      	orrs	r3, r2
 8002500:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	697a      	ldr	r2, [r7, #20]
 8002506:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	693a      	ldr	r2, [r7, #16]
 800250c:	621a      	str	r2, [r3, #32]
}
 800250e:	bf00      	nop
 8002510:	371c      	adds	r7, #28
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr

0800251a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800251a:	b480      	push	{r7}
 800251c:	b085      	sub	sp, #20
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
 8002522:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002530:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002532:	683a      	ldr	r2, [r7, #0]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	4313      	orrs	r3, r2
 8002538:	f043 0307 	orr.w	r3, r3, #7
 800253c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	68fa      	ldr	r2, [r7, #12]
 8002542:	609a      	str	r2, [r3, #8]
}
 8002544:	bf00      	nop
 8002546:	3714      	adds	r7, #20
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002550:	b480      	push	{r7}
 8002552:	b087      	sub	sp, #28
 8002554:	af00      	add	r7, sp, #0
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	60b9      	str	r1, [r7, #8]
 800255a:	607a      	str	r2, [r7, #4]
 800255c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800256a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	021a      	lsls	r2, r3, #8
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	431a      	orrs	r2, r3
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	4313      	orrs	r3, r2
 8002578:	697a      	ldr	r2, [r7, #20]
 800257a:	4313      	orrs	r3, r2
 800257c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	697a      	ldr	r2, [r7, #20]
 8002582:	609a      	str	r2, [r3, #8]
}
 8002584:	bf00      	nop
 8002586:	371c      	adds	r7, #28
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002590:	b480      	push	{r7}
 8002592:	b085      	sub	sp, #20
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d101      	bne.n	80025a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80025a4:	2302      	movs	r3, #2
 80025a6:	e05a      	b.n	800265e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2202      	movs	r2, #2
 80025b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	68fa      	ldr	r2, [r7, #12]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	68fa      	ldr	r2, [r7, #12]
 80025e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a21      	ldr	r2, [pc, #132]	; (800266c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d022      	beq.n	8002632 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025f4:	d01d      	beq.n	8002632 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a1d      	ldr	r2, [pc, #116]	; (8002670 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d018      	beq.n	8002632 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a1b      	ldr	r2, [pc, #108]	; (8002674 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d013      	beq.n	8002632 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a1a      	ldr	r2, [pc, #104]	; (8002678 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d00e      	beq.n	8002632 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a18      	ldr	r2, [pc, #96]	; (800267c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d009      	beq.n	8002632 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a17      	ldr	r2, [pc, #92]	; (8002680 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d004      	beq.n	8002632 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a15      	ldr	r2, [pc, #84]	; (8002684 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d10c      	bne.n	800264c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002638:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	68ba      	ldr	r2, [r7, #8]
 8002640:	4313      	orrs	r3, r2
 8002642:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	68ba      	ldr	r2, [r7, #8]
 800264a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	3714      	adds	r7, #20
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	40010000 	.word	0x40010000
 8002670:	40000400 	.word	0x40000400
 8002674:	40000800 	.word	0x40000800
 8002678:	40000c00 	.word	0x40000c00
 800267c:	40010400 	.word	0x40010400
 8002680:	40014000 	.word	0x40014000
 8002684:	40001800 	.word	0x40001800

08002688 <__libc_init_array>:
 8002688:	b570      	push	{r4, r5, r6, lr}
 800268a:	4e0d      	ldr	r6, [pc, #52]	; (80026c0 <__libc_init_array+0x38>)
 800268c:	4c0d      	ldr	r4, [pc, #52]	; (80026c4 <__libc_init_array+0x3c>)
 800268e:	1ba4      	subs	r4, r4, r6
 8002690:	10a4      	asrs	r4, r4, #2
 8002692:	2500      	movs	r5, #0
 8002694:	42a5      	cmp	r5, r4
 8002696:	d109      	bne.n	80026ac <__libc_init_array+0x24>
 8002698:	4e0b      	ldr	r6, [pc, #44]	; (80026c8 <__libc_init_array+0x40>)
 800269a:	4c0c      	ldr	r4, [pc, #48]	; (80026cc <__libc_init_array+0x44>)
 800269c:	f000 f820 	bl	80026e0 <_init>
 80026a0:	1ba4      	subs	r4, r4, r6
 80026a2:	10a4      	asrs	r4, r4, #2
 80026a4:	2500      	movs	r5, #0
 80026a6:	42a5      	cmp	r5, r4
 80026a8:	d105      	bne.n	80026b6 <__libc_init_array+0x2e>
 80026aa:	bd70      	pop	{r4, r5, r6, pc}
 80026ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80026b0:	4798      	blx	r3
 80026b2:	3501      	adds	r5, #1
 80026b4:	e7ee      	b.n	8002694 <__libc_init_array+0xc>
 80026b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80026ba:	4798      	blx	r3
 80026bc:	3501      	adds	r5, #1
 80026be:	e7f2      	b.n	80026a6 <__libc_init_array+0x1e>
 80026c0:	08002710 	.word	0x08002710
 80026c4:	08002710 	.word	0x08002710
 80026c8:	08002710 	.word	0x08002710
 80026cc:	08002714 	.word	0x08002714

080026d0 <memset>:
 80026d0:	4402      	add	r2, r0
 80026d2:	4603      	mov	r3, r0
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d100      	bne.n	80026da <memset+0xa>
 80026d8:	4770      	bx	lr
 80026da:	f803 1b01 	strb.w	r1, [r3], #1
 80026de:	e7f9      	b.n	80026d4 <memset+0x4>

080026e0 <_init>:
 80026e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026e2:	bf00      	nop
 80026e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026e6:	bc08      	pop	{r3}
 80026e8:	469e      	mov	lr, r3
 80026ea:	4770      	bx	lr

080026ec <_fini>:
 80026ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026ee:	bf00      	nop
 80026f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026f2:	bc08      	pop	{r3}
 80026f4:	469e      	mov	lr, r3
 80026f6:	4770      	bx	lr
