
ds18d20_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e98  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800205c  0800205c  0001205c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800206c  0800206c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800206c  0800206c  0001206c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002074  08002074  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002074  08002074  00012074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002078  08002078  00012078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800207c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  2000000c  08002088  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000006c  08002088  0002006c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008fd9  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000016fe  00000000  00000000  00029015  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009e0  00000000  00000000  0002a718  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000908  00000000  00000000  0002b0f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020b94  00000000  00000000  0002ba00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007d64  00000000  00000000  0004c594  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c89f5  00000000  00000000  000542f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011cced  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000284c  00000000  00000000  0011cd68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002044 	.word	0x08002044

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08002044 	.word	0x08002044

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <MX_TIM1_Init>:
 *
 * @Note              -  this is generated with MX cube and modified to meet requirements

 */
uint8_t MX_TIM1_Init(TIM_HandleTypeDef *htim1)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b088      	sub	sp, #32
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800050c:	f107 0310 	add.w	r3, r7, #16
 8000510:	2200      	movs	r2, #0
 8000512:	601a      	str	r2, [r3, #0]
 8000514:	605a      	str	r2, [r3, #4]
 8000516:	609a      	str	r2, [r3, #8]
 8000518:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800051a:	f107 0308 	add.w	r3, r7, #8
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
 8000522:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1->Instance = TIM1;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	4a1f      	ldr	r2, [pc, #124]	; (80005a4 <MX_TIM1_Init+0xa0>)
 8000528:	601a      	str	r2, [r3, #0]
  htim1->Init.Prescaler = 84-1;
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	2253      	movs	r2, #83	; 0x53
 800052e:	605a      	str	r2, [r3, #4]
  htim1->Init.CounterMode = TIM_COUNTERMODE_UP;
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	2200      	movs	r2, #0
 8000534:	609a      	str	r2, [r3, #8]
  htim1->Init.Period = 0xffff-1;
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800053c:	60da      	str	r2, [r3, #12]
  htim1->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	2200      	movs	r2, #0
 8000542:	611a      	str	r2, [r3, #16]
  htim1->Init.RepetitionCounter = 0;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	2200      	movs	r2, #0
 8000548:	615a      	str	r2, [r3, #20]
  htim1->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	2200      	movs	r2, #0
 800054e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(htim1) != HAL_OK)
 8000550:	6878      	ldr	r0, [r7, #4]
 8000552:	f001 fa8f 	bl	8001a74 <HAL_TIM_Base_Init>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <MX_TIM1_Init+0x5c>
  {
    return 0;
 800055c:	2300      	movs	r3, #0
 800055e:	e01d      	b.n	800059c <MX_TIM1_Init+0x98>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000560:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000564:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(htim1, &sClockSourceConfig) != HAL_OK)
 8000566:	f107 0310 	add.w	r3, r7, #16
 800056a:	4619      	mov	r1, r3
 800056c:	6878      	ldr	r0, [r7, #4]
 800056e:	f001 fad0 	bl	8001b12 <HAL_TIM_ConfigClockSource>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <MX_TIM1_Init+0x78>
  {
	  return 0;
 8000578:	2300      	movs	r3, #0
 800057a:	e00f      	b.n	800059c <MX_TIM1_Init+0x98>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800057c:	2300      	movs	r3, #0
 800057e:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000580:	2300      	movs	r3, #0
 8000582:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(htim1, &sMasterConfig) != HAL_OK)
 8000584:	f107 0308 	add.w	r3, r7, #8
 8000588:	4619      	mov	r1, r3
 800058a:	6878      	ldr	r0, [r7, #4]
 800058c:	f001 fcb2 	bl	8001ef4 <HAL_TIMEx_MasterConfigSynchronization>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <MX_TIM1_Init+0x96>
  {
	  return 0;
 8000596:	2300      	movs	r3, #0
 8000598:	e000      	b.n	800059c <MX_TIM1_Init+0x98>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  return 1;
 800059a:	2301      	movs	r3, #1
}
 800059c:	4618      	mov	r0, r3
 800059e:	3720      	adds	r7, #32
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	40010000 	.word	0x40010000

080005a8 <delay_us>:
 *
 * @Note              -  tested with salea logic analyzer, works good enough (1-3 microseconds variability)

 */
void delay_us (uint32_t u_seconds)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b093      	sub	sp, #76	; 0x4c
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef htim1;
	htim1.Instance = TIM1;
 80005b0:	4b08      	ldr	r3, [pc, #32]	; (80005d4 <delay_us+0x2c>)
 80005b2:	60bb      	str	r3, [r7, #8]

	__HAL_TIM_SET_COUNTER(&htim1, 0);			//this func starts counter at 0 and waits until its greater than u_seconds parameter
 80005b4:	68bb      	ldr	r3, [r7, #8]
 80005b6:	2200      	movs	r2, #0
 80005b8:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim1) < u_seconds);
 80005ba:	bf00      	nop
 80005bc:	68bb      	ldr	r3, [r7, #8]
 80005be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005c0:	687a      	ldr	r2, [r7, #4]
 80005c2:	429a      	cmp	r2, r3
 80005c4:	d8fa      	bhi.n	80005bc <delay_us+0x14>
}
 80005c6:	bf00      	nop
 80005c8:	374c      	adds	r7, #76	; 0x4c
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	40010000 	.word	0x40010000

080005d8 <ds18b20_init_phase>:
 *
 * @Note              -  none

 */
uint8_t ds18b20_init_phase(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
	uint8_t response = 0;
 80005de:	2300      	movs	r3, #0
 80005e0:	71fb      	strb	r3, [r7, #7]

	set_pin_as_out(DS18B20_PORT, DS18B20_PIN);
 80005e2:	2103      	movs	r1, #3
 80005e4:	4811      	ldr	r0, [pc, #68]	; (800062c <ds18b20_init_phase+0x54>)
 80005e6:	f000 f823 	bl	8000630 <set_pin_as_out>

	write_pin(DS18B20_PORT, DS18B20_PIN, 0);	//pull data line to LOW for 480-950 microseconds (RESET signal)
 80005ea:	2200      	movs	r2, #0
 80005ec:	2103      	movs	r1, #3
 80005ee:	480f      	ldr	r0, [pc, #60]	; (800062c <ds18b20_init_phase+0x54>)
 80005f0:	f000 f856 	bl	80006a0 <write_pin>
	delay_us(550);
 80005f4:	f240 2026 	movw	r0, #550	; 0x226
 80005f8:	f7ff ffd6 	bl	80005a8 <delay_us>

	set_pin_as_in(DS18B20_PORT, DS18B20_PIN);
 80005fc:	2103      	movs	r1, #3
 80005fe:	480b      	ldr	r0, [pc, #44]	; (800062c <ds18b20_init_phase+0x54>)
 8000600:	f000 f837 	bl	8000672 <set_pin_as_in>
	delay_us(80);
 8000604:	2050      	movs	r0, #80	; 0x50
 8000606:	f7ff ffcf 	bl	80005a8 <delay_us>

	if(!read_pin(DS18B20_PORT, DS18B20_PIN))	//scan for PRESENCE signal (LOW data line)
 800060a:	2103      	movs	r1, #3
 800060c:	4807      	ldr	r0, [pc, #28]	; (800062c <ds18b20_init_phase+0x54>)
 800060e:	f000 f86c 	bl	80006ea <read_pin>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d101      	bne.n	800061c <ds18b20_init_phase+0x44>
	{
		response = 1;
 8000618:	2301      	movs	r3, #1
 800061a:	71fb      	strb	r3, [r7, #7]
	}

	delay_us(200);
 800061c:	20c8      	movs	r0, #200	; 0xc8
 800061e:	f7ff ffc3 	bl	80005a8 <delay_us>
	return response;
 8000622:	79fb      	ldrb	r3, [r7, #7]
}
 8000624:	4618      	mov	r0, r3
 8000626:	3708      	adds	r7, #8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	40020800 	.word	0x40020800

08000630 <set_pin_as_out>:
 *
 * @Note              -  none

 */
void set_pin_as_out(GPIO_TypeDef *gpio_port, uint8_t gpio_pin)
{
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
 8000638:	460b      	mov	r3, r1
 800063a:	70fb      	strb	r3, [r7, #3]
	//reset then set mode as output
	gpio_port->MODER &= ~(0x3 << (2 * gpio_pin));
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	78fa      	ldrb	r2, [r7, #3]
 8000642:	0052      	lsls	r2, r2, #1
 8000644:	2103      	movs	r1, #3
 8000646:	fa01 f202 	lsl.w	r2, r1, r2
 800064a:	43d2      	mvns	r2, r2
 800064c:	401a      	ands	r2, r3
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	601a      	str	r2, [r3, #0]
	gpio_port->MODER |= (1 << (2 * gpio_pin));
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	78fa      	ldrb	r2, [r7, #3]
 8000658:	0052      	lsls	r2, r2, #1
 800065a:	2101      	movs	r1, #1
 800065c:	fa01 f202 	lsl.w	r2, r1, r2
 8000660:	431a      	orrs	r2, r3
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	601a      	str	r2, [r3, #0]
}
 8000666:	bf00      	nop
 8000668:	370c      	adds	r7, #12
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr

08000672 <set_pin_as_in>:
 *
 * @Note              -  none

 */
void set_pin_as_in(GPIO_TypeDef *gpio_port, uint8_t gpio_pin)
{
 8000672:	b480      	push	{r7}
 8000674:	b083      	sub	sp, #12
 8000676:	af00      	add	r7, sp, #0
 8000678:	6078      	str	r0, [r7, #4]
 800067a:	460b      	mov	r3, r1
 800067c:	70fb      	strb	r3, [r7, #3]
	//set pin as in
	gpio_port->MODER &= ~(0x3 << (2 * gpio_pin));
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	78fa      	ldrb	r2, [r7, #3]
 8000684:	0052      	lsls	r2, r2, #1
 8000686:	2103      	movs	r1, #3
 8000688:	fa01 f202 	lsl.w	r2, r1, r2
 800068c:	43d2      	mvns	r2, r2
 800068e:	401a      	ands	r2, r3
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	601a      	str	r2, [r3, #0]
}
 8000694:	bf00      	nop
 8000696:	370c      	adds	r7, #12
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr

080006a0 <write_pin>:
 *
 * @Note              -  none

 */
void write_pin(GPIO_TypeDef *gpio_port, uint8_t gpio_pin, uint8_t value)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	460b      	mov	r3, r1
 80006aa:	70fb      	strb	r3, [r7, #3]
 80006ac:	4613      	mov	r3, r2
 80006ae:	70bb      	strb	r3, [r7, #2]
	if(value == 1)
 80006b0:	78bb      	ldrb	r3, [r7, #2]
 80006b2:	2b01      	cmp	r3, #1
 80006b4:	d109      	bne.n	80006ca <write_pin+0x2a>
	{
		gpio_port->ODR |= (1 << gpio_pin);
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	695b      	ldr	r3, [r3, #20]
 80006ba:	78fa      	ldrb	r2, [r7, #3]
 80006bc:	2101      	movs	r1, #1
 80006be:	fa01 f202 	lsl.w	r2, r1, r2
 80006c2:	431a      	orrs	r2, r3
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	615a      	str	r2, [r3, #20]
	}
	else
	{
		gpio_port->ODR &= ~(1 << gpio_pin);
	}
}
 80006c8:	e009      	b.n	80006de <write_pin+0x3e>
		gpio_port->ODR &= ~(1 << gpio_pin);
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	695b      	ldr	r3, [r3, #20]
 80006ce:	78fa      	ldrb	r2, [r7, #3]
 80006d0:	2101      	movs	r1, #1
 80006d2:	fa01 f202 	lsl.w	r2, r1, r2
 80006d6:	43d2      	mvns	r2, r2
 80006d8:	401a      	ands	r2, r3
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	615a      	str	r2, [r3, #20]
}
 80006de:	bf00      	nop
 80006e0:	370c      	adds	r7, #12
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr

080006ea <read_pin>:
 *
 * @Note              -  none

 */
uint8_t read_pin(GPIO_TypeDef *gpio_port, uint8_t gpio_pin)
{
 80006ea:	b480      	push	{r7}
 80006ec:	b085      	sub	sp, #20
 80006ee:	af00      	add	r7, sp, #0
 80006f0:	6078      	str	r0, [r7, #4]
 80006f2:	460b      	mov	r3, r1
 80006f4:	70fb      	strb	r3, [r7, #3]
	uint8_t value = (uint8_t)((gpio_port->IDR >> gpio_pin) & 0x00000001);
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	691a      	ldr	r2, [r3, #16]
 80006fa:	78fb      	ldrb	r3, [r7, #3]
 80006fc:	fa22 f303 	lsr.w	r3, r2, r3
 8000700:	b2db      	uxtb	r3, r3
 8000702:	f003 0301 	and.w	r3, r3, #1
 8000706:	73fb      	strb	r3, [r7, #15]
	return value;
 8000708:	7bfb      	ldrb	r3, [r7, #15]
}
 800070a:	4618      	mov	r0, r3
 800070c:	3714      	adds	r7, #20
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr
	...

08000718 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800071c:	f000 f9c6 	bl	8000aac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000720:	f000 f814 	bl	800074c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000724:	f000 f880 	bl	8000828 <MX_GPIO_Init>
  if(!MX_TIM1_Init(&htim1))
 8000728:	4807      	ldr	r0, [pc, #28]	; (8000748 <main+0x30>)
 800072a:	f7ff feeb 	bl	8000504 <MX_TIM1_Init>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d101      	bne.n	8000738 <main+0x20>
  {
	  Error_Handler();
 8000734:	f000 f8fe 	bl	8000934 <Error_Handler>
  }


  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8000738:	4803      	ldr	r0, [pc, #12]	; (8000748 <main+0x30>)
 800073a:	f001 f9c6 	bl	8001aca <HAL_TIM_Base_Start>

  sd18b20_gpio_init();
 800073e:	f000 f8e3 	bl	8000908 <sd18b20_gpio_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  ds18b20_init_phase();
 8000742:	f7ff ff49 	bl	80005d8 <ds18b20_init_phase>

  while (1)
 8000746:	e7fe      	b.n	8000746 <main+0x2e>
 8000748:	20000028 	.word	0x20000028

0800074c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b094      	sub	sp, #80	; 0x50
 8000750:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000752:	f107 031c 	add.w	r3, r7, #28
 8000756:	2234      	movs	r2, #52	; 0x34
 8000758:	2100      	movs	r1, #0
 800075a:	4618      	mov	r0, r3
 800075c:	f001 fc6a 	bl	8002034 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000760:	f107 0308 	add.w	r3, r7, #8
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]
 800076c:	60da      	str	r2, [r3, #12]
 800076e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000770:	2300      	movs	r3, #0
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	4b2a      	ldr	r3, [pc, #168]	; (8000820 <SystemClock_Config+0xd4>)
 8000776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000778:	4a29      	ldr	r2, [pc, #164]	; (8000820 <SystemClock_Config+0xd4>)
 800077a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800077e:	6413      	str	r3, [r2, #64]	; 0x40
 8000780:	4b27      	ldr	r3, [pc, #156]	; (8000820 <SystemClock_Config+0xd4>)
 8000782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000784:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800078c:	2300      	movs	r3, #0
 800078e:	603b      	str	r3, [r7, #0]
 8000790:	4b24      	ldr	r3, [pc, #144]	; (8000824 <SystemClock_Config+0xd8>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000798:	4a22      	ldr	r2, [pc, #136]	; (8000824 <SystemClock_Config+0xd8>)
 800079a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800079e:	6013      	str	r3, [r2, #0]
 80007a0:	4b20      	ldr	r3, [pc, #128]	; (8000824 <SystemClock_Config+0xd8>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007a8:	603b      	str	r3, [r7, #0]
 80007aa:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007ac:	2302      	movs	r3, #2
 80007ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007b0:	2301      	movs	r3, #1
 80007b2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007b4:	2310      	movs	r3, #16
 80007b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b8:	2302      	movs	r3, #2
 80007ba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007bc:	2300      	movs	r3, #0
 80007be:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80007c0:	2310      	movs	r3, #16
 80007c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007c4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80007c8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007ca:	2304      	movs	r3, #4
 80007cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007ce:	2302      	movs	r3, #2
 80007d0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007d2:	2302      	movs	r3, #2
 80007d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d6:	f107 031c 	add.w	r3, r7, #28
 80007da:	4618      	mov	r0, r3
 80007dc:	f000 fef0 	bl	80015c0 <HAL_RCC_OscConfig>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80007e6:	f000 f8a5 	bl	8000934 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ea:	230f      	movs	r3, #15
 80007ec:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ee:	2302      	movs	r3, #2
 80007f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f2:	2300      	movs	r3, #0
 80007f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000800:	f107 0308 	add.w	r3, r7, #8
 8000804:	2102      	movs	r1, #2
 8000806:	4618      	mov	r0, r3
 8000808:	f000 fc54 	bl	80010b4 <HAL_RCC_ClockConfig>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000812:	f000 f88f 	bl	8000934 <Error_Handler>
  }
}
 8000816:	bf00      	nop
 8000818:	3750      	adds	r7, #80	; 0x50
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40023800 	.word	0x40023800
 8000824:	40007000 	.word	0x40007000

08000828 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b08a      	sub	sp, #40	; 0x28
 800082c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082e:	f107 0314 	add.w	r3, r7, #20
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	605a      	str	r2, [r3, #4]
 8000838:	609a      	str	r2, [r3, #8]
 800083a:	60da      	str	r2, [r3, #12]
 800083c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	613b      	str	r3, [r7, #16]
 8000842:	4b2d      	ldr	r3, [pc, #180]	; (80008f8 <MX_GPIO_Init+0xd0>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a2c      	ldr	r2, [pc, #176]	; (80008f8 <MX_GPIO_Init+0xd0>)
 8000848:	f043 0304 	orr.w	r3, r3, #4
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b2a      	ldr	r3, [pc, #168]	; (80008f8 <MX_GPIO_Init+0xd0>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0304 	and.w	r3, r3, #4
 8000856:	613b      	str	r3, [r7, #16]
 8000858:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	4b26      	ldr	r3, [pc, #152]	; (80008f8 <MX_GPIO_Init+0xd0>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a25      	ldr	r2, [pc, #148]	; (80008f8 <MX_GPIO_Init+0xd0>)
 8000864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b23      	ldr	r3, [pc, #140]	; (80008f8 <MX_GPIO_Init+0xd0>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	60bb      	str	r3, [r7, #8]
 800087a:	4b1f      	ldr	r3, [pc, #124]	; (80008f8 <MX_GPIO_Init+0xd0>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a1e      	ldr	r2, [pc, #120]	; (80008f8 <MX_GPIO_Init+0xd0>)
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b1c      	ldr	r3, [pc, #112]	; (80008f8 <MX_GPIO_Init+0xd0>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	4b18      	ldr	r3, [pc, #96]	; (80008f8 <MX_GPIO_Init+0xd0>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a17      	ldr	r2, [pc, #92]	; (80008f8 <MX_GPIO_Init+0xd0>)
 800089c:	f043 0302 	orr.w	r3, r3, #2
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b15      	ldr	r3, [pc, #84]	; (80008f8 <MX_GPIO_Init+0xd0>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0302 	and.w	r3, r3, #2
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2120      	movs	r1, #32
 80008b2:	4812      	ldr	r0, [pc, #72]	; (80008fc <MX_GPIO_Init+0xd4>)
 80008b4:	f000 fbe4 	bl	8001080 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008be:	4b10      	ldr	r3, [pc, #64]	; (8000900 <MX_GPIO_Init+0xd8>)
 80008c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008c6:	f107 0314 	add.w	r3, r7, #20
 80008ca:	4619      	mov	r1, r3
 80008cc:	480d      	ldr	r0, [pc, #52]	; (8000904 <MX_GPIO_Init+0xdc>)
 80008ce:	f000 fa45 	bl	8000d5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80008d2:	2320      	movs	r3, #32
 80008d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d6:	2301      	movs	r3, #1
 80008d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008de:	2300      	movs	r3, #0
 80008e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e2:	f107 0314 	add.w	r3, r7, #20
 80008e6:	4619      	mov	r1, r3
 80008e8:	4804      	ldr	r0, [pc, #16]	; (80008fc <MX_GPIO_Init+0xd4>)
 80008ea:	f000 fa37 	bl	8000d5c <HAL_GPIO_Init>

}
 80008ee:	bf00      	nop
 80008f0:	3728      	adds	r7, #40	; 0x28
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40023800 	.word	0x40023800
 80008fc:	40020000 	.word	0x40020000
 8000900:	10210000 	.word	0x10210000
 8000904:	40020800 	.word	0x40020800

08000908 <sd18b20_gpio_init>:
 *
 * @Note              -  none

 */
void sd18b20_gpio_init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b086      	sub	sp, #24
 800090c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef ds_gpio;

	ds_gpio.Pin = DS18B20_PIN;
 800090e:	2303      	movs	r3, #3
 8000910:	607b      	str	r3, [r7, #4]
	ds_gpio.Mode = GPIO_MODE_OUTPUT_OD;
 8000912:	2311      	movs	r3, #17
 8000914:	60bb      	str	r3, [r7, #8]
	ds_gpio.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	60fb      	str	r3, [r7, #12]
	ds_gpio.Speed = GPIO_SPEED_FREQ_LOW;
 800091a:	2300      	movs	r3, #0
 800091c:	613b      	str	r3, [r7, #16]

	HAL_GPIO_Init(DS18B20_PORT, &ds_gpio);
 800091e:	1d3b      	adds	r3, r7, #4
 8000920:	4619      	mov	r1, r3
 8000922:	4803      	ldr	r0, [pc, #12]	; (8000930 <sd18b20_gpio_init+0x28>)
 8000924:	f000 fa1a 	bl	8000d5c <HAL_GPIO_Init>

}
 8000928:	bf00      	nop
 800092a:	3718      	adds	r7, #24
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	40020800 	.word	0x40020800

08000934 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	while(1);
 8000938:	e7fe      	b.n	8000938 <Error_Handler+0x4>
	...

0800093c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	607b      	str	r3, [r7, #4]
 8000946:	4b10      	ldr	r3, [pc, #64]	; (8000988 <HAL_MspInit+0x4c>)
 8000948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094a:	4a0f      	ldr	r2, [pc, #60]	; (8000988 <HAL_MspInit+0x4c>)
 800094c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000950:	6453      	str	r3, [r2, #68]	; 0x44
 8000952:	4b0d      	ldr	r3, [pc, #52]	; (8000988 <HAL_MspInit+0x4c>)
 8000954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000956:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	603b      	str	r3, [r7, #0]
 8000962:	4b09      	ldr	r3, [pc, #36]	; (8000988 <HAL_MspInit+0x4c>)
 8000964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000966:	4a08      	ldr	r2, [pc, #32]	; (8000988 <HAL_MspInit+0x4c>)
 8000968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800096c:	6413      	str	r3, [r2, #64]	; 0x40
 800096e:	4b06      	ldr	r3, [pc, #24]	; (8000988 <HAL_MspInit+0x4c>)
 8000970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000976:	603b      	str	r3, [r7, #0]
 8000978:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800097a:	2007      	movs	r0, #7
 800097c:	f000 f9ba 	bl	8000cf4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000980:	bf00      	nop
 8000982:	3708      	adds	r7, #8
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	40023800 	.word	0x40023800

0800098c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800098c:	b480      	push	{r7}
 800098e:	b085      	sub	sp, #20
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a0b      	ldr	r2, [pc, #44]	; (80009c8 <HAL_TIM_Base_MspInit+0x3c>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d10d      	bne.n	80009ba <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	60fb      	str	r3, [r7, #12]
 80009a2:	4b0a      	ldr	r3, [pc, #40]	; (80009cc <HAL_TIM_Base_MspInit+0x40>)
 80009a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a6:	4a09      	ldr	r2, [pc, #36]	; (80009cc <HAL_TIM_Base_MspInit+0x40>)
 80009a8:	f043 0301 	orr.w	r3, r3, #1
 80009ac:	6453      	str	r3, [r2, #68]	; 0x44
 80009ae:	4b07      	ldr	r3, [pc, #28]	; (80009cc <HAL_TIM_Base_MspInit+0x40>)
 80009b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b2:	f003 0301 	and.w	r3, r3, #1
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80009ba:	bf00      	nop
 80009bc:	3714      	adds	r7, #20
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	40010000 	.word	0x40010000
 80009cc:	40023800 	.word	0x40023800

080009d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr

080009de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009e2:	e7fe      	b.n	80009e2 <HardFault_Handler+0x4>

080009e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009e8:	e7fe      	b.n	80009e8 <MemManage_Handler+0x4>

080009ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ea:	b480      	push	{r7}
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ee:	e7fe      	b.n	80009ee <BusFault_Handler+0x4>

080009f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009f4:	e7fe      	b.n	80009f4 <UsageFault_Handler+0x4>

080009f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009f6:	b480      	push	{r7}
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr

08000a04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr

08000a12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a12:	b480      	push	{r7}
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a16:	bf00      	nop
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr

08000a20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a24:	f000 f894 	bl	8000b50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a28:	bf00      	nop
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a30:	4b08      	ldr	r3, [pc, #32]	; (8000a54 <SystemInit+0x28>)
 8000a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a36:	4a07      	ldr	r2, [pc, #28]	; (8000a54 <SystemInit+0x28>)
 8000a38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a40:	4b04      	ldr	r3, [pc, #16]	; (8000a54 <SystemInit+0x28>)
 8000a42:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a46:	609a      	str	r2, [r3, #8]
#endif
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	e000ed00 	.word	0xe000ed00

08000a58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a90 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000a5c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000a5e:	e003      	b.n	8000a68 <LoopCopyDataInit>

08000a60 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000a60:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000a62:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000a64:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000a66:	3104      	adds	r1, #4

08000a68 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000a68:	480b      	ldr	r0, [pc, #44]	; (8000a98 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000a6a:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000a6c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000a6e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000a70:	d3f6      	bcc.n	8000a60 <CopyDataInit>
  ldr  r2, =_sbss
 8000a72:	4a0b      	ldr	r2, [pc, #44]	; (8000aa0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000a74:	e002      	b.n	8000a7c <LoopFillZerobss>

08000a76 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000a76:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000a78:	f842 3b04 	str.w	r3, [r2], #4

08000a7c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000a7c:	4b09      	ldr	r3, [pc, #36]	; (8000aa4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000a7e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000a80:	d3f9      	bcc.n	8000a76 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a82:	f7ff ffd3 	bl	8000a2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a86:	f001 fab1 	bl	8001fec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a8a:	f7ff fe45 	bl	8000718 <main>
  bx  lr    
 8000a8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a90:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000a94:	0800207c 	.word	0x0800207c
  ldr  r0, =_sdata
 8000a98:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000a9c:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000aa0:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000aa4:	2000006c 	.word	0x2000006c

08000aa8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000aa8:	e7fe      	b.n	8000aa8 <ADC_IRQHandler>
	...

08000aac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ab0:	4b0e      	ldr	r3, [pc, #56]	; (8000aec <HAL_Init+0x40>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a0d      	ldr	r2, [pc, #52]	; (8000aec <HAL_Init+0x40>)
 8000ab6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000aba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000abc:	4b0b      	ldr	r3, [pc, #44]	; (8000aec <HAL_Init+0x40>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a0a      	ldr	r2, [pc, #40]	; (8000aec <HAL_Init+0x40>)
 8000ac2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ac6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ac8:	4b08      	ldr	r3, [pc, #32]	; (8000aec <HAL_Init+0x40>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a07      	ldr	r2, [pc, #28]	; (8000aec <HAL_Init+0x40>)
 8000ace:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ad2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ad4:	2003      	movs	r0, #3
 8000ad6:	f000 f90d 	bl	8000cf4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ada:	2000      	movs	r0, #0
 8000adc:	f000 f808 	bl	8000af0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ae0:	f7ff ff2c 	bl	800093c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ae4:	2300      	movs	r3, #0
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40023c00 	.word	0x40023c00

08000af0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000af8:	4b12      	ldr	r3, [pc, #72]	; (8000b44 <HAL_InitTick+0x54>)
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	4b12      	ldr	r3, [pc, #72]	; (8000b48 <HAL_InitTick+0x58>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	4619      	mov	r1, r3
 8000b02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f000 f917 	bl	8000d42 <HAL_SYSTICK_Config>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	e00e      	b.n	8000b3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	2b0f      	cmp	r3, #15
 8000b22:	d80a      	bhi.n	8000b3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b24:	2200      	movs	r2, #0
 8000b26:	6879      	ldr	r1, [r7, #4]
 8000b28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b2c:	f000 f8ed 	bl	8000d0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b30:	4a06      	ldr	r2, [pc, #24]	; (8000b4c <HAL_InitTick+0x5c>)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b36:	2300      	movs	r3, #0
 8000b38:	e000      	b.n	8000b3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b3a:	2301      	movs	r3, #1
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	20000000 	.word	0x20000000
 8000b48:	20000008 	.word	0x20000008
 8000b4c:	20000004 	.word	0x20000004

08000b50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b54:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <HAL_IncTick+0x20>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	461a      	mov	r2, r3
 8000b5a:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <HAL_IncTick+0x24>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4413      	add	r3, r2
 8000b60:	4a04      	ldr	r2, [pc, #16]	; (8000b74 <HAL_IncTick+0x24>)
 8000b62:	6013      	str	r3, [r2, #0]
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	20000008 	.word	0x20000008
 8000b74:	20000068 	.word	0x20000068

08000b78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b7c:	4b03      	ldr	r3, [pc, #12]	; (8000b8c <HAL_GetTick+0x14>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	20000068 	.word	0x20000068

08000b90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	f003 0307 	and.w	r3, r3, #7
 8000b9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ba0:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba2:	68db      	ldr	r3, [r3, #12]
 8000ba4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ba6:	68ba      	ldr	r2, [r7, #8]
 8000ba8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bac:	4013      	ands	r3, r2
 8000bae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bc2:	4a04      	ldr	r2, [pc, #16]	; (8000bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	60d3      	str	r3, [r2, #12]
}
 8000bc8:	bf00      	nop
 8000bca:	3714      	adds	r7, #20
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr
 8000bd4:	e000ed00 	.word	0xe000ed00

08000bd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bdc:	4b04      	ldr	r3, [pc, #16]	; (8000bf0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bde:	68db      	ldr	r3, [r3, #12]
 8000be0:	0a1b      	lsrs	r3, r3, #8
 8000be2:	f003 0307 	and.w	r3, r3, #7
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	6039      	str	r1, [r7, #0]
 8000bfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	db0a      	blt.n	8000c1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	b2da      	uxtb	r2, r3
 8000c0c:	490c      	ldr	r1, [pc, #48]	; (8000c40 <__NVIC_SetPriority+0x4c>)
 8000c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c12:	0112      	lsls	r2, r2, #4
 8000c14:	b2d2      	uxtb	r2, r2
 8000c16:	440b      	add	r3, r1
 8000c18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c1c:	e00a      	b.n	8000c34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	b2da      	uxtb	r2, r3
 8000c22:	4908      	ldr	r1, [pc, #32]	; (8000c44 <__NVIC_SetPriority+0x50>)
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	f003 030f 	and.w	r3, r3, #15
 8000c2a:	3b04      	subs	r3, #4
 8000c2c:	0112      	lsls	r2, r2, #4
 8000c2e:	b2d2      	uxtb	r2, r2
 8000c30:	440b      	add	r3, r1
 8000c32:	761a      	strb	r2, [r3, #24]
}
 8000c34:	bf00      	nop
 8000c36:	370c      	adds	r7, #12
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr
 8000c40:	e000e100 	.word	0xe000e100
 8000c44:	e000ed00 	.word	0xe000ed00

08000c48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b089      	sub	sp, #36	; 0x24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	60f8      	str	r0, [r7, #12]
 8000c50:	60b9      	str	r1, [r7, #8]
 8000c52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	f003 0307 	and.w	r3, r3, #7
 8000c5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c5c:	69fb      	ldr	r3, [r7, #28]
 8000c5e:	f1c3 0307 	rsb	r3, r3, #7
 8000c62:	2b04      	cmp	r3, #4
 8000c64:	bf28      	it	cs
 8000c66:	2304      	movcs	r3, #4
 8000c68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	3304      	adds	r3, #4
 8000c6e:	2b06      	cmp	r3, #6
 8000c70:	d902      	bls.n	8000c78 <NVIC_EncodePriority+0x30>
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	3b03      	subs	r3, #3
 8000c76:	e000      	b.n	8000c7a <NVIC_EncodePriority+0x32>
 8000c78:	2300      	movs	r3, #0
 8000c7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c80:	69bb      	ldr	r3, [r7, #24]
 8000c82:	fa02 f303 	lsl.w	r3, r2, r3
 8000c86:	43da      	mvns	r2, r3
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	401a      	ands	r2, r3
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c90:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	fa01 f303 	lsl.w	r3, r1, r3
 8000c9a:	43d9      	mvns	r1, r3
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca0:	4313      	orrs	r3, r2
         );
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3724      	adds	r7, #36	; 0x24
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
	...

08000cb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	3b01      	subs	r3, #1
 8000cbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cc0:	d301      	bcc.n	8000cc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e00f      	b.n	8000ce6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cc6:	4a0a      	ldr	r2, [pc, #40]	; (8000cf0 <SysTick_Config+0x40>)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	3b01      	subs	r3, #1
 8000ccc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cce:	210f      	movs	r1, #15
 8000cd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cd4:	f7ff ff8e 	bl	8000bf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cd8:	4b05      	ldr	r3, [pc, #20]	; (8000cf0 <SysTick_Config+0x40>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cde:	4b04      	ldr	r3, [pc, #16]	; (8000cf0 <SysTick_Config+0x40>)
 8000ce0:	2207      	movs	r2, #7
 8000ce2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ce4:	2300      	movs	r3, #0
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	e000e010 	.word	0xe000e010

08000cf4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	f7ff ff47 	bl	8000b90 <__NVIC_SetPriorityGrouping>
}
 8000d02:	bf00      	nop
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b086      	sub	sp, #24
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	4603      	mov	r3, r0
 8000d12:	60b9      	str	r1, [r7, #8]
 8000d14:	607a      	str	r2, [r7, #4]
 8000d16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d1c:	f7ff ff5c 	bl	8000bd8 <__NVIC_GetPriorityGrouping>
 8000d20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d22:	687a      	ldr	r2, [r7, #4]
 8000d24:	68b9      	ldr	r1, [r7, #8]
 8000d26:	6978      	ldr	r0, [r7, #20]
 8000d28:	f7ff ff8e 	bl	8000c48 <NVIC_EncodePriority>
 8000d2c:	4602      	mov	r2, r0
 8000d2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d32:	4611      	mov	r1, r2
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff ff5d 	bl	8000bf4 <__NVIC_SetPriority>
}
 8000d3a:	bf00      	nop
 8000d3c:	3718      	adds	r7, #24
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d42:	b580      	push	{r7, lr}
 8000d44:	b082      	sub	sp, #8
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d4a:	6878      	ldr	r0, [r7, #4]
 8000d4c:	f7ff ffb0 	bl	8000cb0 <SysTick_Config>
 8000d50:	4603      	mov	r3, r0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
	...

08000d5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b089      	sub	sp, #36	; 0x24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d66:	2300      	movs	r3, #0
 8000d68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d72:	2300      	movs	r3, #0
 8000d74:	61fb      	str	r3, [r7, #28]
 8000d76:	e165      	b.n	8001044 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d78:	2201      	movs	r2, #1
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	697a      	ldr	r2, [r7, #20]
 8000d88:	4013      	ands	r3, r2
 8000d8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d8c:	693a      	ldr	r2, [r7, #16]
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	429a      	cmp	r2, r3
 8000d92:	f040 8154 	bne.w	800103e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d00b      	beq.n	8000db6 <HAL_GPIO_Init+0x5a>
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	2b02      	cmp	r3, #2
 8000da4:	d007      	beq.n	8000db6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000daa:	2b11      	cmp	r3, #17
 8000dac:	d003      	beq.n	8000db6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	2b12      	cmp	r3, #18
 8000db4:	d130      	bne.n	8000e18 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	005b      	lsls	r3, r3, #1
 8000dc0:	2203      	movs	r2, #3
 8000dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc6:	43db      	mvns	r3, r3
 8000dc8:	69ba      	ldr	r2, [r7, #24]
 8000dca:	4013      	ands	r3, r2
 8000dcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	68da      	ldr	r2, [r3, #12]
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	005b      	lsls	r3, r3, #1
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	69ba      	ldr	r2, [r7, #24]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	69ba      	ldr	r2, [r7, #24]
 8000de4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dec:	2201      	movs	r2, #1
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	43db      	mvns	r3, r3
 8000df6:	69ba      	ldr	r2, [r7, #24]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	091b      	lsrs	r3, r3, #4
 8000e02:	f003 0201 	and.w	r2, r3, #1
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	2203      	movs	r2, #3
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	69ba      	ldr	r2, [r7, #24]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	689a      	ldr	r2, [r3, #8]
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	69ba      	ldr	r2, [r7, #24]
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	2b02      	cmp	r3, #2
 8000e4e:	d003      	beq.n	8000e58 <HAL_GPIO_Init+0xfc>
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	2b12      	cmp	r3, #18
 8000e56:	d123      	bne.n	8000ea0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	08da      	lsrs	r2, r3, #3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	3208      	adds	r2, #8
 8000e60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	f003 0307 	and.w	r3, r3, #7
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	220f      	movs	r2, #15
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	43db      	mvns	r3, r3
 8000e76:	69ba      	ldr	r2, [r7, #24]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	691a      	ldr	r2, [r3, #16]
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	f003 0307 	and.w	r3, r3, #7
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	08da      	lsrs	r2, r3, #3
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	3208      	adds	r2, #8
 8000e9a:	69b9      	ldr	r1, [r7, #24]
 8000e9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	2203      	movs	r2, #3
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	43db      	mvns	r3, r3
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f003 0203 	and.w	r2, r3, #3
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	f000 80ae 	beq.w	800103e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	4b5c      	ldr	r3, [pc, #368]	; (8001058 <HAL_GPIO_Init+0x2fc>)
 8000ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eea:	4a5b      	ldr	r2, [pc, #364]	; (8001058 <HAL_GPIO_Init+0x2fc>)
 8000eec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ef0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ef2:	4b59      	ldr	r3, [pc, #356]	; (8001058 <HAL_GPIO_Init+0x2fc>)
 8000ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000efe:	4a57      	ldr	r2, [pc, #348]	; (800105c <HAL_GPIO_Init+0x300>)
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	089b      	lsrs	r3, r3, #2
 8000f04:	3302      	adds	r3, #2
 8000f06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	f003 0303 	and.w	r3, r3, #3
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	220f      	movs	r2, #15
 8000f16:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1a:	43db      	mvns	r3, r3
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	4013      	ands	r3, r2
 8000f20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a4e      	ldr	r2, [pc, #312]	; (8001060 <HAL_GPIO_Init+0x304>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d025      	beq.n	8000f76 <HAL_GPIO_Init+0x21a>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4a4d      	ldr	r2, [pc, #308]	; (8001064 <HAL_GPIO_Init+0x308>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d01f      	beq.n	8000f72 <HAL_GPIO_Init+0x216>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4a4c      	ldr	r2, [pc, #304]	; (8001068 <HAL_GPIO_Init+0x30c>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d019      	beq.n	8000f6e <HAL_GPIO_Init+0x212>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4a4b      	ldr	r2, [pc, #300]	; (800106c <HAL_GPIO_Init+0x310>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d013      	beq.n	8000f6a <HAL_GPIO_Init+0x20e>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a4a      	ldr	r2, [pc, #296]	; (8001070 <HAL_GPIO_Init+0x314>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d00d      	beq.n	8000f66 <HAL_GPIO_Init+0x20a>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a49      	ldr	r2, [pc, #292]	; (8001074 <HAL_GPIO_Init+0x318>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d007      	beq.n	8000f62 <HAL_GPIO_Init+0x206>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a48      	ldr	r2, [pc, #288]	; (8001078 <HAL_GPIO_Init+0x31c>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d101      	bne.n	8000f5e <HAL_GPIO_Init+0x202>
 8000f5a:	2306      	movs	r3, #6
 8000f5c:	e00c      	b.n	8000f78 <HAL_GPIO_Init+0x21c>
 8000f5e:	2307      	movs	r3, #7
 8000f60:	e00a      	b.n	8000f78 <HAL_GPIO_Init+0x21c>
 8000f62:	2305      	movs	r3, #5
 8000f64:	e008      	b.n	8000f78 <HAL_GPIO_Init+0x21c>
 8000f66:	2304      	movs	r3, #4
 8000f68:	e006      	b.n	8000f78 <HAL_GPIO_Init+0x21c>
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	e004      	b.n	8000f78 <HAL_GPIO_Init+0x21c>
 8000f6e:	2302      	movs	r3, #2
 8000f70:	e002      	b.n	8000f78 <HAL_GPIO_Init+0x21c>
 8000f72:	2301      	movs	r3, #1
 8000f74:	e000      	b.n	8000f78 <HAL_GPIO_Init+0x21c>
 8000f76:	2300      	movs	r3, #0
 8000f78:	69fa      	ldr	r2, [r7, #28]
 8000f7a:	f002 0203 	and.w	r2, r2, #3
 8000f7e:	0092      	lsls	r2, r2, #2
 8000f80:	4093      	lsls	r3, r2
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f88:	4934      	ldr	r1, [pc, #208]	; (800105c <HAL_GPIO_Init+0x300>)
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	089b      	lsrs	r3, r3, #2
 8000f8e:	3302      	adds	r3, #2
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f96:	4b39      	ldr	r3, [pc, #228]	; (800107c <HAL_GPIO_Init+0x320>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	43db      	mvns	r3, r3
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d003      	beq.n	8000fba <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fba:	4a30      	ldr	r2, [pc, #192]	; (800107c <HAL_GPIO_Init+0x320>)
 8000fbc:	69bb      	ldr	r3, [r7, #24]
 8000fbe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000fc0:	4b2e      	ldr	r3, [pc, #184]	; (800107c <HAL_GPIO_Init+0x320>)
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d003      	beq.n	8000fe4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fe4:	4a25      	ldr	r2, [pc, #148]	; (800107c <HAL_GPIO_Init+0x320>)
 8000fe6:	69bb      	ldr	r3, [r7, #24]
 8000fe8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fea:	4b24      	ldr	r3, [pc, #144]	; (800107c <HAL_GPIO_Init+0x320>)
 8000fec:	689b      	ldr	r3, [r3, #8]
 8000fee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	43db      	mvns	r3, r3
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001002:	2b00      	cmp	r3, #0
 8001004:	d003      	beq.n	800100e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	4313      	orrs	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800100e:	4a1b      	ldr	r2, [pc, #108]	; (800107c <HAL_GPIO_Init+0x320>)
 8001010:	69bb      	ldr	r3, [r7, #24]
 8001012:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001014:	4b19      	ldr	r3, [pc, #100]	; (800107c <HAL_GPIO_Init+0x320>)
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	43db      	mvns	r3, r3
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	4013      	ands	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800102c:	2b00      	cmp	r3, #0
 800102e:	d003      	beq.n	8001038 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	4313      	orrs	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001038:	4a10      	ldr	r2, [pc, #64]	; (800107c <HAL_GPIO_Init+0x320>)
 800103a:	69bb      	ldr	r3, [r7, #24]
 800103c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	3301      	adds	r3, #1
 8001042:	61fb      	str	r3, [r7, #28]
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	2b0f      	cmp	r3, #15
 8001048:	f67f ae96 	bls.w	8000d78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800104c:	bf00      	nop
 800104e:	3724      	adds	r7, #36	; 0x24
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr
 8001058:	40023800 	.word	0x40023800
 800105c:	40013800 	.word	0x40013800
 8001060:	40020000 	.word	0x40020000
 8001064:	40020400 	.word	0x40020400
 8001068:	40020800 	.word	0x40020800
 800106c:	40020c00 	.word	0x40020c00
 8001070:	40021000 	.word	0x40021000
 8001074:	40021400 	.word	0x40021400
 8001078:	40021800 	.word	0x40021800
 800107c:	40013c00 	.word	0x40013c00

08001080 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	460b      	mov	r3, r1
 800108a:	807b      	strh	r3, [r7, #2]
 800108c:	4613      	mov	r3, r2
 800108e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001090:	787b      	ldrb	r3, [r7, #1]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d003      	beq.n	800109e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001096:	887a      	ldrh	r2, [r7, #2]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800109c:	e003      	b.n	80010a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800109e:	887b      	ldrh	r3, [r7, #2]
 80010a0:	041a      	lsls	r2, r3, #16
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	619a      	str	r2, [r3, #24]
}
 80010a6:	bf00      	nop
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
	...

080010b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d101      	bne.n	80010c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010c4:	2301      	movs	r3, #1
 80010c6:	e0cc      	b.n	8001262 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80010c8:	4b68      	ldr	r3, [pc, #416]	; (800126c <HAL_RCC_ClockConfig+0x1b8>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f003 030f 	and.w	r3, r3, #15
 80010d0:	683a      	ldr	r2, [r7, #0]
 80010d2:	429a      	cmp	r2, r3
 80010d4:	d90c      	bls.n	80010f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010d6:	4b65      	ldr	r3, [pc, #404]	; (800126c <HAL_RCC_ClockConfig+0x1b8>)
 80010d8:	683a      	ldr	r2, [r7, #0]
 80010da:	b2d2      	uxtb	r2, r2
 80010dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010de:	4b63      	ldr	r3, [pc, #396]	; (800126c <HAL_RCC_ClockConfig+0x1b8>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f003 030f 	and.w	r3, r3, #15
 80010e6:	683a      	ldr	r2, [r7, #0]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d001      	beq.n	80010f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80010ec:	2301      	movs	r3, #1
 80010ee:	e0b8      	b.n	8001262 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f003 0302 	and.w	r3, r3, #2
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d020      	beq.n	800113e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f003 0304 	and.w	r3, r3, #4
 8001104:	2b00      	cmp	r3, #0
 8001106:	d005      	beq.n	8001114 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001108:	4b59      	ldr	r3, [pc, #356]	; (8001270 <HAL_RCC_ClockConfig+0x1bc>)
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	4a58      	ldr	r2, [pc, #352]	; (8001270 <HAL_RCC_ClockConfig+0x1bc>)
 800110e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001112:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f003 0308 	and.w	r3, r3, #8
 800111c:	2b00      	cmp	r3, #0
 800111e:	d005      	beq.n	800112c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001120:	4b53      	ldr	r3, [pc, #332]	; (8001270 <HAL_RCC_ClockConfig+0x1bc>)
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	4a52      	ldr	r2, [pc, #328]	; (8001270 <HAL_RCC_ClockConfig+0x1bc>)
 8001126:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800112a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800112c:	4b50      	ldr	r3, [pc, #320]	; (8001270 <HAL_RCC_ClockConfig+0x1bc>)
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	494d      	ldr	r1, [pc, #308]	; (8001270 <HAL_RCC_ClockConfig+0x1bc>)
 800113a:	4313      	orrs	r3, r2
 800113c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	2b00      	cmp	r3, #0
 8001148:	d044      	beq.n	80011d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	2b01      	cmp	r3, #1
 8001150:	d107      	bne.n	8001162 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001152:	4b47      	ldr	r3, [pc, #284]	; (8001270 <HAL_RCC_ClockConfig+0x1bc>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800115a:	2b00      	cmp	r3, #0
 800115c:	d119      	bne.n	8001192 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	e07f      	b.n	8001262 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	2b02      	cmp	r3, #2
 8001168:	d003      	beq.n	8001172 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800116e:	2b03      	cmp	r3, #3
 8001170:	d107      	bne.n	8001182 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001172:	4b3f      	ldr	r3, [pc, #252]	; (8001270 <HAL_RCC_ClockConfig+0x1bc>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d109      	bne.n	8001192 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e06f      	b.n	8001262 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001182:	4b3b      	ldr	r3, [pc, #236]	; (8001270 <HAL_RCC_ClockConfig+0x1bc>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f003 0302 	and.w	r3, r3, #2
 800118a:	2b00      	cmp	r3, #0
 800118c:	d101      	bne.n	8001192 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	e067      	b.n	8001262 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001192:	4b37      	ldr	r3, [pc, #220]	; (8001270 <HAL_RCC_ClockConfig+0x1bc>)
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	f023 0203 	bic.w	r2, r3, #3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	4934      	ldr	r1, [pc, #208]	; (8001270 <HAL_RCC_ClockConfig+0x1bc>)
 80011a0:	4313      	orrs	r3, r2
 80011a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011a4:	f7ff fce8 	bl	8000b78 <HAL_GetTick>
 80011a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011aa:	e00a      	b.n	80011c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011ac:	f7ff fce4 	bl	8000b78 <HAL_GetTick>
 80011b0:	4602      	mov	r2, r0
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d901      	bls.n	80011c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011be:	2303      	movs	r3, #3
 80011c0:	e04f      	b.n	8001262 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011c2:	4b2b      	ldr	r3, [pc, #172]	; (8001270 <HAL_RCC_ClockConfig+0x1bc>)
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	f003 020c 	and.w	r2, r3, #12
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d1eb      	bne.n	80011ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80011d4:	4b25      	ldr	r3, [pc, #148]	; (800126c <HAL_RCC_ClockConfig+0x1b8>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f003 030f 	and.w	r3, r3, #15
 80011dc:	683a      	ldr	r2, [r7, #0]
 80011de:	429a      	cmp	r2, r3
 80011e0:	d20c      	bcs.n	80011fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011e2:	4b22      	ldr	r3, [pc, #136]	; (800126c <HAL_RCC_ClockConfig+0x1b8>)
 80011e4:	683a      	ldr	r2, [r7, #0]
 80011e6:	b2d2      	uxtb	r2, r2
 80011e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011ea:	4b20      	ldr	r3, [pc, #128]	; (800126c <HAL_RCC_ClockConfig+0x1b8>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f003 030f 	and.w	r3, r3, #15
 80011f2:	683a      	ldr	r2, [r7, #0]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d001      	beq.n	80011fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80011f8:	2301      	movs	r3, #1
 80011fa:	e032      	b.n	8001262 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f003 0304 	and.w	r3, r3, #4
 8001204:	2b00      	cmp	r3, #0
 8001206:	d008      	beq.n	800121a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001208:	4b19      	ldr	r3, [pc, #100]	; (8001270 <HAL_RCC_ClockConfig+0x1bc>)
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	4916      	ldr	r1, [pc, #88]	; (8001270 <HAL_RCC_ClockConfig+0x1bc>)
 8001216:	4313      	orrs	r3, r2
 8001218:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 0308 	and.w	r3, r3, #8
 8001222:	2b00      	cmp	r3, #0
 8001224:	d009      	beq.n	800123a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001226:	4b12      	ldr	r3, [pc, #72]	; (8001270 <HAL_RCC_ClockConfig+0x1bc>)
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	691b      	ldr	r3, [r3, #16]
 8001232:	00db      	lsls	r3, r3, #3
 8001234:	490e      	ldr	r1, [pc, #56]	; (8001270 <HAL_RCC_ClockConfig+0x1bc>)
 8001236:	4313      	orrs	r3, r2
 8001238:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800123a:	f000 f821 	bl	8001280 <HAL_RCC_GetSysClockFreq>
 800123e:	4601      	mov	r1, r0
 8001240:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <HAL_RCC_ClockConfig+0x1bc>)
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	091b      	lsrs	r3, r3, #4
 8001246:	f003 030f 	and.w	r3, r3, #15
 800124a:	4a0a      	ldr	r2, [pc, #40]	; (8001274 <HAL_RCC_ClockConfig+0x1c0>)
 800124c:	5cd3      	ldrb	r3, [r2, r3]
 800124e:	fa21 f303 	lsr.w	r3, r1, r3
 8001252:	4a09      	ldr	r2, [pc, #36]	; (8001278 <HAL_RCC_ClockConfig+0x1c4>)
 8001254:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001256:	4b09      	ldr	r3, [pc, #36]	; (800127c <HAL_RCC_ClockConfig+0x1c8>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff fc48 	bl	8000af0 <HAL_InitTick>

  return HAL_OK;
 8001260:	2300      	movs	r3, #0
}
 8001262:	4618      	mov	r0, r3
 8001264:	3710      	adds	r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40023c00 	.word	0x40023c00
 8001270:	40023800 	.word	0x40023800
 8001274:	0800205c 	.word	0x0800205c
 8001278:	20000000 	.word	0x20000000
 800127c:	20000004 	.word	0x20000004

08001280 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001282:	b087      	sub	sp, #28
 8001284:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001286:	2300      	movs	r3, #0
 8001288:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 800128a:	2300      	movs	r3, #0
 800128c:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800128e:	2300      	movs	r3, #0
 8001290:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8001292:	2300      	movs	r3, #0
 8001294:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001296:	2300      	movs	r3, #0
 8001298:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800129a:	4bc6      	ldr	r3, [pc, #792]	; (80015b4 <HAL_RCC_GetSysClockFreq+0x334>)
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	f003 030c 	and.w	r3, r3, #12
 80012a2:	2b0c      	cmp	r3, #12
 80012a4:	f200 817e 	bhi.w	80015a4 <HAL_RCC_GetSysClockFreq+0x324>
 80012a8:	a201      	add	r2, pc, #4	; (adr r2, 80012b0 <HAL_RCC_GetSysClockFreq+0x30>)
 80012aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012ae:	bf00      	nop
 80012b0:	080012e5 	.word	0x080012e5
 80012b4:	080015a5 	.word	0x080015a5
 80012b8:	080015a5 	.word	0x080015a5
 80012bc:	080015a5 	.word	0x080015a5
 80012c0:	080012eb 	.word	0x080012eb
 80012c4:	080015a5 	.word	0x080015a5
 80012c8:	080015a5 	.word	0x080015a5
 80012cc:	080015a5 	.word	0x080015a5
 80012d0:	080012f1 	.word	0x080012f1
 80012d4:	080015a5 	.word	0x080015a5
 80012d8:	080015a5 	.word	0x080015a5
 80012dc:	080015a5 	.word	0x080015a5
 80012e0:	0800144d 	.word	0x0800144d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80012e4:	4bb4      	ldr	r3, [pc, #720]	; (80015b8 <HAL_RCC_GetSysClockFreq+0x338>)
 80012e6:	613b      	str	r3, [r7, #16]
       break;
 80012e8:	e15f      	b.n	80015aa <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80012ea:	4bb4      	ldr	r3, [pc, #720]	; (80015bc <HAL_RCC_GetSysClockFreq+0x33c>)
 80012ec:	613b      	str	r3, [r7, #16]
      break;
 80012ee:	e15c      	b.n	80015aa <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80012f0:	4bb0      	ldr	r3, [pc, #704]	; (80015b4 <HAL_RCC_GetSysClockFreq+0x334>)
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80012f8:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80012fa:	4bae      	ldr	r3, [pc, #696]	; (80015b4 <HAL_RCC_GetSysClockFreq+0x334>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d04a      	beq.n	800139c <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001306:	4bab      	ldr	r3, [pc, #684]	; (80015b4 <HAL_RCC_GetSysClockFreq+0x334>)
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	099b      	lsrs	r3, r3, #6
 800130c:	f04f 0400 	mov.w	r4, #0
 8001310:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001314:	f04f 0200 	mov.w	r2, #0
 8001318:	ea03 0501 	and.w	r5, r3, r1
 800131c:	ea04 0602 	and.w	r6, r4, r2
 8001320:	4629      	mov	r1, r5
 8001322:	4632      	mov	r2, r6
 8001324:	f04f 0300 	mov.w	r3, #0
 8001328:	f04f 0400 	mov.w	r4, #0
 800132c:	0154      	lsls	r4, r2, #5
 800132e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001332:	014b      	lsls	r3, r1, #5
 8001334:	4619      	mov	r1, r3
 8001336:	4622      	mov	r2, r4
 8001338:	1b49      	subs	r1, r1, r5
 800133a:	eb62 0206 	sbc.w	r2, r2, r6
 800133e:	f04f 0300 	mov.w	r3, #0
 8001342:	f04f 0400 	mov.w	r4, #0
 8001346:	0194      	lsls	r4, r2, #6
 8001348:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800134c:	018b      	lsls	r3, r1, #6
 800134e:	1a5b      	subs	r3, r3, r1
 8001350:	eb64 0402 	sbc.w	r4, r4, r2
 8001354:	f04f 0100 	mov.w	r1, #0
 8001358:	f04f 0200 	mov.w	r2, #0
 800135c:	00e2      	lsls	r2, r4, #3
 800135e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001362:	00d9      	lsls	r1, r3, #3
 8001364:	460b      	mov	r3, r1
 8001366:	4614      	mov	r4, r2
 8001368:	195b      	adds	r3, r3, r5
 800136a:	eb44 0406 	adc.w	r4, r4, r6
 800136e:	f04f 0100 	mov.w	r1, #0
 8001372:	f04f 0200 	mov.w	r2, #0
 8001376:	0262      	lsls	r2, r4, #9
 8001378:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800137c:	0259      	lsls	r1, r3, #9
 800137e:	460b      	mov	r3, r1
 8001380:	4614      	mov	r4, r2
 8001382:	4618      	mov	r0, r3
 8001384:	4621      	mov	r1, r4
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	f04f 0400 	mov.w	r4, #0
 800138c:	461a      	mov	r2, r3
 800138e:	4623      	mov	r3, r4
 8001390:	f7fe ff38 	bl	8000204 <__aeabi_uldivmod>
 8001394:	4603      	mov	r3, r0
 8001396:	460c      	mov	r4, r1
 8001398:	617b      	str	r3, [r7, #20]
 800139a:	e049      	b.n	8001430 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800139c:	4b85      	ldr	r3, [pc, #532]	; (80015b4 <HAL_RCC_GetSysClockFreq+0x334>)
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	099b      	lsrs	r3, r3, #6
 80013a2:	f04f 0400 	mov.w	r4, #0
 80013a6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80013aa:	f04f 0200 	mov.w	r2, #0
 80013ae:	ea03 0501 	and.w	r5, r3, r1
 80013b2:	ea04 0602 	and.w	r6, r4, r2
 80013b6:	4629      	mov	r1, r5
 80013b8:	4632      	mov	r2, r6
 80013ba:	f04f 0300 	mov.w	r3, #0
 80013be:	f04f 0400 	mov.w	r4, #0
 80013c2:	0154      	lsls	r4, r2, #5
 80013c4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80013c8:	014b      	lsls	r3, r1, #5
 80013ca:	4619      	mov	r1, r3
 80013cc:	4622      	mov	r2, r4
 80013ce:	1b49      	subs	r1, r1, r5
 80013d0:	eb62 0206 	sbc.w	r2, r2, r6
 80013d4:	f04f 0300 	mov.w	r3, #0
 80013d8:	f04f 0400 	mov.w	r4, #0
 80013dc:	0194      	lsls	r4, r2, #6
 80013de:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80013e2:	018b      	lsls	r3, r1, #6
 80013e4:	1a5b      	subs	r3, r3, r1
 80013e6:	eb64 0402 	sbc.w	r4, r4, r2
 80013ea:	f04f 0100 	mov.w	r1, #0
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	00e2      	lsls	r2, r4, #3
 80013f4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80013f8:	00d9      	lsls	r1, r3, #3
 80013fa:	460b      	mov	r3, r1
 80013fc:	4614      	mov	r4, r2
 80013fe:	195b      	adds	r3, r3, r5
 8001400:	eb44 0406 	adc.w	r4, r4, r6
 8001404:	f04f 0100 	mov.w	r1, #0
 8001408:	f04f 0200 	mov.w	r2, #0
 800140c:	02a2      	lsls	r2, r4, #10
 800140e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001412:	0299      	lsls	r1, r3, #10
 8001414:	460b      	mov	r3, r1
 8001416:	4614      	mov	r4, r2
 8001418:	4618      	mov	r0, r3
 800141a:	4621      	mov	r1, r4
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	f04f 0400 	mov.w	r4, #0
 8001422:	461a      	mov	r2, r3
 8001424:	4623      	mov	r3, r4
 8001426:	f7fe feed 	bl	8000204 <__aeabi_uldivmod>
 800142a:	4603      	mov	r3, r0
 800142c:	460c      	mov	r4, r1
 800142e:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001430:	4b60      	ldr	r3, [pc, #384]	; (80015b4 <HAL_RCC_GetSysClockFreq+0x334>)
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	0c1b      	lsrs	r3, r3, #16
 8001436:	f003 0303 	and.w	r3, r3, #3
 800143a:	3301      	adds	r3, #1
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8001440:	697a      	ldr	r2, [r7, #20]
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	fbb2 f3f3 	udiv	r3, r2, r3
 8001448:	613b      	str	r3, [r7, #16]
      break;
 800144a:	e0ae      	b.n	80015aa <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800144c:	4b59      	ldr	r3, [pc, #356]	; (80015b4 <HAL_RCC_GetSysClockFreq+0x334>)
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001454:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001456:	4b57      	ldr	r3, [pc, #348]	; (80015b4 <HAL_RCC_GetSysClockFreq+0x334>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d04a      	beq.n	80014f8 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001462:	4b54      	ldr	r3, [pc, #336]	; (80015b4 <HAL_RCC_GetSysClockFreq+0x334>)
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	099b      	lsrs	r3, r3, #6
 8001468:	f04f 0400 	mov.w	r4, #0
 800146c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001470:	f04f 0200 	mov.w	r2, #0
 8001474:	ea03 0501 	and.w	r5, r3, r1
 8001478:	ea04 0602 	and.w	r6, r4, r2
 800147c:	4629      	mov	r1, r5
 800147e:	4632      	mov	r2, r6
 8001480:	f04f 0300 	mov.w	r3, #0
 8001484:	f04f 0400 	mov.w	r4, #0
 8001488:	0154      	lsls	r4, r2, #5
 800148a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800148e:	014b      	lsls	r3, r1, #5
 8001490:	4619      	mov	r1, r3
 8001492:	4622      	mov	r2, r4
 8001494:	1b49      	subs	r1, r1, r5
 8001496:	eb62 0206 	sbc.w	r2, r2, r6
 800149a:	f04f 0300 	mov.w	r3, #0
 800149e:	f04f 0400 	mov.w	r4, #0
 80014a2:	0194      	lsls	r4, r2, #6
 80014a4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80014a8:	018b      	lsls	r3, r1, #6
 80014aa:	1a5b      	subs	r3, r3, r1
 80014ac:	eb64 0402 	sbc.w	r4, r4, r2
 80014b0:	f04f 0100 	mov.w	r1, #0
 80014b4:	f04f 0200 	mov.w	r2, #0
 80014b8:	00e2      	lsls	r2, r4, #3
 80014ba:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80014be:	00d9      	lsls	r1, r3, #3
 80014c0:	460b      	mov	r3, r1
 80014c2:	4614      	mov	r4, r2
 80014c4:	195b      	adds	r3, r3, r5
 80014c6:	eb44 0406 	adc.w	r4, r4, r6
 80014ca:	f04f 0100 	mov.w	r1, #0
 80014ce:	f04f 0200 	mov.w	r2, #0
 80014d2:	0262      	lsls	r2, r4, #9
 80014d4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80014d8:	0259      	lsls	r1, r3, #9
 80014da:	460b      	mov	r3, r1
 80014dc:	4614      	mov	r4, r2
 80014de:	4618      	mov	r0, r3
 80014e0:	4621      	mov	r1, r4
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	f04f 0400 	mov.w	r4, #0
 80014e8:	461a      	mov	r2, r3
 80014ea:	4623      	mov	r3, r4
 80014ec:	f7fe fe8a 	bl	8000204 <__aeabi_uldivmod>
 80014f0:	4603      	mov	r3, r0
 80014f2:	460c      	mov	r4, r1
 80014f4:	617b      	str	r3, [r7, #20]
 80014f6:	e049      	b.n	800158c <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014f8:	4b2e      	ldr	r3, [pc, #184]	; (80015b4 <HAL_RCC_GetSysClockFreq+0x334>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	099b      	lsrs	r3, r3, #6
 80014fe:	f04f 0400 	mov.w	r4, #0
 8001502:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001506:	f04f 0200 	mov.w	r2, #0
 800150a:	ea03 0501 	and.w	r5, r3, r1
 800150e:	ea04 0602 	and.w	r6, r4, r2
 8001512:	4629      	mov	r1, r5
 8001514:	4632      	mov	r2, r6
 8001516:	f04f 0300 	mov.w	r3, #0
 800151a:	f04f 0400 	mov.w	r4, #0
 800151e:	0154      	lsls	r4, r2, #5
 8001520:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001524:	014b      	lsls	r3, r1, #5
 8001526:	4619      	mov	r1, r3
 8001528:	4622      	mov	r2, r4
 800152a:	1b49      	subs	r1, r1, r5
 800152c:	eb62 0206 	sbc.w	r2, r2, r6
 8001530:	f04f 0300 	mov.w	r3, #0
 8001534:	f04f 0400 	mov.w	r4, #0
 8001538:	0194      	lsls	r4, r2, #6
 800153a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800153e:	018b      	lsls	r3, r1, #6
 8001540:	1a5b      	subs	r3, r3, r1
 8001542:	eb64 0402 	sbc.w	r4, r4, r2
 8001546:	f04f 0100 	mov.w	r1, #0
 800154a:	f04f 0200 	mov.w	r2, #0
 800154e:	00e2      	lsls	r2, r4, #3
 8001550:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001554:	00d9      	lsls	r1, r3, #3
 8001556:	460b      	mov	r3, r1
 8001558:	4614      	mov	r4, r2
 800155a:	195b      	adds	r3, r3, r5
 800155c:	eb44 0406 	adc.w	r4, r4, r6
 8001560:	f04f 0100 	mov.w	r1, #0
 8001564:	f04f 0200 	mov.w	r2, #0
 8001568:	02a2      	lsls	r2, r4, #10
 800156a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800156e:	0299      	lsls	r1, r3, #10
 8001570:	460b      	mov	r3, r1
 8001572:	4614      	mov	r4, r2
 8001574:	4618      	mov	r0, r3
 8001576:	4621      	mov	r1, r4
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f04f 0400 	mov.w	r4, #0
 800157e:	461a      	mov	r2, r3
 8001580:	4623      	mov	r3, r4
 8001582:	f7fe fe3f 	bl	8000204 <__aeabi_uldivmod>
 8001586:	4603      	mov	r3, r0
 8001588:	460c      	mov	r4, r1
 800158a:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800158c:	4b09      	ldr	r3, [pc, #36]	; (80015b4 <HAL_RCC_GetSysClockFreq+0x334>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	0f1b      	lsrs	r3, r3, #28
 8001592:	f003 0307 	and.w	r3, r3, #7
 8001596:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8001598:	697a      	ldr	r2, [r7, #20]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	fbb2 f3f3 	udiv	r3, r2, r3
 80015a0:	613b      	str	r3, [r7, #16]
      break;
 80015a2:	e002      	b.n	80015aa <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80015a4:	4b04      	ldr	r3, [pc, #16]	; (80015b8 <HAL_RCC_GetSysClockFreq+0x338>)
 80015a6:	613b      	str	r3, [r7, #16]
      break;
 80015a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015aa:	693b      	ldr	r3, [r7, #16]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	371c      	adds	r7, #28
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015b4:	40023800 	.word	0x40023800
 80015b8:	00f42400 	.word	0x00f42400
 80015bc:	007a1200 	.word	0x007a1200

080015c0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b086      	sub	sp, #24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80015c8:	2300      	movs	r3, #0
 80015ca:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0301 	and.w	r3, r3, #1
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	f000 8083 	beq.w	80016e0 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80015da:	4b95      	ldr	r3, [pc, #596]	; (8001830 <HAL_RCC_OscConfig+0x270>)
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	f003 030c 	and.w	r3, r3, #12
 80015e2:	2b04      	cmp	r3, #4
 80015e4:	d019      	beq.n	800161a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80015e6:	4b92      	ldr	r3, [pc, #584]	; (8001830 <HAL_RCC_OscConfig+0x270>)
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80015ee:	2b08      	cmp	r3, #8
 80015f0:	d106      	bne.n	8001600 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80015f2:	4b8f      	ldr	r3, [pc, #572]	; (8001830 <HAL_RCC_OscConfig+0x270>)
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015fe:	d00c      	beq.n	800161a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001600:	4b8b      	ldr	r3, [pc, #556]	; (8001830 <HAL_RCC_OscConfig+0x270>)
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001608:	2b0c      	cmp	r3, #12
 800160a:	d112      	bne.n	8001632 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800160c:	4b88      	ldr	r3, [pc, #544]	; (8001830 <HAL_RCC_OscConfig+0x270>)
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001614:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001618:	d10b      	bne.n	8001632 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800161a:	4b85      	ldr	r3, [pc, #532]	; (8001830 <HAL_RCC_OscConfig+0x270>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d05b      	beq.n	80016de <HAL_RCC_OscConfig+0x11e>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d157      	bne.n	80016de <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e216      	b.n	8001a60 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800163a:	d106      	bne.n	800164a <HAL_RCC_OscConfig+0x8a>
 800163c:	4b7c      	ldr	r3, [pc, #496]	; (8001830 <HAL_RCC_OscConfig+0x270>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a7b      	ldr	r2, [pc, #492]	; (8001830 <HAL_RCC_OscConfig+0x270>)
 8001642:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001646:	6013      	str	r3, [r2, #0]
 8001648:	e01d      	b.n	8001686 <HAL_RCC_OscConfig+0xc6>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001652:	d10c      	bne.n	800166e <HAL_RCC_OscConfig+0xae>
 8001654:	4b76      	ldr	r3, [pc, #472]	; (8001830 <HAL_RCC_OscConfig+0x270>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a75      	ldr	r2, [pc, #468]	; (8001830 <HAL_RCC_OscConfig+0x270>)
 800165a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800165e:	6013      	str	r3, [r2, #0]
 8001660:	4b73      	ldr	r3, [pc, #460]	; (8001830 <HAL_RCC_OscConfig+0x270>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a72      	ldr	r2, [pc, #456]	; (8001830 <HAL_RCC_OscConfig+0x270>)
 8001666:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800166a:	6013      	str	r3, [r2, #0]
 800166c:	e00b      	b.n	8001686 <HAL_RCC_OscConfig+0xc6>
 800166e:	4b70      	ldr	r3, [pc, #448]	; (8001830 <HAL_RCC_OscConfig+0x270>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a6f      	ldr	r2, [pc, #444]	; (8001830 <HAL_RCC_OscConfig+0x270>)
 8001674:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001678:	6013      	str	r3, [r2, #0]
 800167a:	4b6d      	ldr	r3, [pc, #436]	; (8001830 <HAL_RCC_OscConfig+0x270>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a6c      	ldr	r2, [pc, #432]	; (8001830 <HAL_RCC_OscConfig+0x270>)
 8001680:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001684:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d013      	beq.n	80016b6 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800168e:	f7ff fa73 	bl	8000b78 <HAL_GetTick>
 8001692:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001694:	e008      	b.n	80016a8 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001696:	f7ff fa6f 	bl	8000b78 <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	2b64      	cmp	r3, #100	; 0x64
 80016a2:	d901      	bls.n	80016a8 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80016a4:	2303      	movs	r3, #3
 80016a6:	e1db      	b.n	8001a60 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016a8:	4b61      	ldr	r3, [pc, #388]	; (8001830 <HAL_RCC_OscConfig+0x270>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d0f0      	beq.n	8001696 <HAL_RCC_OscConfig+0xd6>
 80016b4:	e014      	b.n	80016e0 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b6:	f7ff fa5f 	bl	8000b78 <HAL_GetTick>
 80016ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016bc:	e008      	b.n	80016d0 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016be:	f7ff fa5b 	bl	8000b78 <HAL_GetTick>
 80016c2:	4602      	mov	r2, r0
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	2b64      	cmp	r3, #100	; 0x64
 80016ca:	d901      	bls.n	80016d0 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80016cc:	2303      	movs	r3, #3
 80016ce:	e1c7      	b.n	8001a60 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016d0:	4b57      	ldr	r3, [pc, #348]	; (8001830 <HAL_RCC_OscConfig+0x270>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d1f0      	bne.n	80016be <HAL_RCC_OscConfig+0xfe>
 80016dc:	e000      	b.n	80016e0 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016de:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0302 	and.w	r3, r3, #2
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d06f      	beq.n	80017cc <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80016ec:	4b50      	ldr	r3, [pc, #320]	; (8001830 <HAL_RCC_OscConfig+0x270>)
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	f003 030c 	and.w	r3, r3, #12
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d017      	beq.n	8001728 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80016f8:	4b4d      	ldr	r3, [pc, #308]	; (8001830 <HAL_RCC_OscConfig+0x270>)
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001700:	2b08      	cmp	r3, #8
 8001702:	d105      	bne.n	8001710 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001704:	4b4a      	ldr	r3, [pc, #296]	; (8001830 <HAL_RCC_OscConfig+0x270>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800170c:	2b00      	cmp	r3, #0
 800170e:	d00b      	beq.n	8001728 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001710:	4b47      	ldr	r3, [pc, #284]	; (8001830 <HAL_RCC_OscConfig+0x270>)
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001718:	2b0c      	cmp	r3, #12
 800171a:	d11c      	bne.n	8001756 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800171c:	4b44      	ldr	r3, [pc, #272]	; (8001830 <HAL_RCC_OscConfig+0x270>)
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d116      	bne.n	8001756 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001728:	4b41      	ldr	r3, [pc, #260]	; (8001830 <HAL_RCC_OscConfig+0x270>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0302 	and.w	r3, r3, #2
 8001730:	2b00      	cmp	r3, #0
 8001732:	d005      	beq.n	8001740 <HAL_RCC_OscConfig+0x180>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d001      	beq.n	8001740 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e18f      	b.n	8001a60 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001740:	4b3b      	ldr	r3, [pc, #236]	; (8001830 <HAL_RCC_OscConfig+0x270>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	691b      	ldr	r3, [r3, #16]
 800174c:	00db      	lsls	r3, r3, #3
 800174e:	4938      	ldr	r1, [pc, #224]	; (8001830 <HAL_RCC_OscConfig+0x270>)
 8001750:	4313      	orrs	r3, r2
 8001752:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001754:	e03a      	b.n	80017cc <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d020      	beq.n	80017a0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800175e:	4b35      	ldr	r3, [pc, #212]	; (8001834 <HAL_RCC_OscConfig+0x274>)
 8001760:	2201      	movs	r2, #1
 8001762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001764:	f7ff fa08 	bl	8000b78 <HAL_GetTick>
 8001768:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800176a:	e008      	b.n	800177e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800176c:	f7ff fa04 	bl	8000b78 <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	2b02      	cmp	r3, #2
 8001778:	d901      	bls.n	800177e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e170      	b.n	8001a60 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800177e:	4b2c      	ldr	r3, [pc, #176]	; (8001830 <HAL_RCC_OscConfig+0x270>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	2b00      	cmp	r3, #0
 8001788:	d0f0      	beq.n	800176c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800178a:	4b29      	ldr	r3, [pc, #164]	; (8001830 <HAL_RCC_OscConfig+0x270>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	691b      	ldr	r3, [r3, #16]
 8001796:	00db      	lsls	r3, r3, #3
 8001798:	4925      	ldr	r1, [pc, #148]	; (8001830 <HAL_RCC_OscConfig+0x270>)
 800179a:	4313      	orrs	r3, r2
 800179c:	600b      	str	r3, [r1, #0]
 800179e:	e015      	b.n	80017cc <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017a0:	4b24      	ldr	r3, [pc, #144]	; (8001834 <HAL_RCC_OscConfig+0x274>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a6:	f7ff f9e7 	bl	8000b78 <HAL_GetTick>
 80017aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ac:	e008      	b.n	80017c0 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017ae:	f7ff f9e3 	bl	8000b78 <HAL_GetTick>
 80017b2:	4602      	mov	r2, r0
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d901      	bls.n	80017c0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80017bc:	2303      	movs	r3, #3
 80017be:	e14f      	b.n	8001a60 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017c0:	4b1b      	ldr	r3, [pc, #108]	; (8001830 <HAL_RCC_OscConfig+0x270>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0302 	and.w	r3, r3, #2
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d1f0      	bne.n	80017ae <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0308 	and.w	r3, r3, #8
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d037      	beq.n	8001848 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	695b      	ldr	r3, [r3, #20]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d016      	beq.n	800180e <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017e0:	4b15      	ldr	r3, [pc, #84]	; (8001838 <HAL_RCC_OscConfig+0x278>)
 80017e2:	2201      	movs	r2, #1
 80017e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017e6:	f7ff f9c7 	bl	8000b78 <HAL_GetTick>
 80017ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ec:	e008      	b.n	8001800 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017ee:	f7ff f9c3 	bl	8000b78 <HAL_GetTick>
 80017f2:	4602      	mov	r2, r0
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d901      	bls.n	8001800 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80017fc:	2303      	movs	r3, #3
 80017fe:	e12f      	b.n	8001a60 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001800:	4b0b      	ldr	r3, [pc, #44]	; (8001830 <HAL_RCC_OscConfig+0x270>)
 8001802:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001804:	f003 0302 	and.w	r3, r3, #2
 8001808:	2b00      	cmp	r3, #0
 800180a:	d0f0      	beq.n	80017ee <HAL_RCC_OscConfig+0x22e>
 800180c:	e01c      	b.n	8001848 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800180e:	4b0a      	ldr	r3, [pc, #40]	; (8001838 <HAL_RCC_OscConfig+0x278>)
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001814:	f7ff f9b0 	bl	8000b78 <HAL_GetTick>
 8001818:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800181a:	e00f      	b.n	800183c <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800181c:	f7ff f9ac 	bl	8000b78 <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2b02      	cmp	r3, #2
 8001828:	d908      	bls.n	800183c <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e118      	b.n	8001a60 <HAL_RCC_OscConfig+0x4a0>
 800182e:	bf00      	nop
 8001830:	40023800 	.word	0x40023800
 8001834:	42470000 	.word	0x42470000
 8001838:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800183c:	4b8a      	ldr	r3, [pc, #552]	; (8001a68 <HAL_RCC_OscConfig+0x4a8>)
 800183e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001840:	f003 0302 	and.w	r3, r3, #2
 8001844:	2b00      	cmp	r3, #0
 8001846:	d1e9      	bne.n	800181c <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0304 	and.w	r3, r3, #4
 8001850:	2b00      	cmp	r3, #0
 8001852:	f000 8097 	beq.w	8001984 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001856:	2300      	movs	r3, #0
 8001858:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800185a:	4b83      	ldr	r3, [pc, #524]	; (8001a68 <HAL_RCC_OscConfig+0x4a8>)
 800185c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d10f      	bne.n	8001886 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	4b7f      	ldr	r3, [pc, #508]	; (8001a68 <HAL_RCC_OscConfig+0x4a8>)
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	4a7e      	ldr	r2, [pc, #504]	; (8001a68 <HAL_RCC_OscConfig+0x4a8>)
 8001870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001874:	6413      	str	r3, [r2, #64]	; 0x40
 8001876:	4b7c      	ldr	r3, [pc, #496]	; (8001a68 <HAL_RCC_OscConfig+0x4a8>)
 8001878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001882:	2301      	movs	r3, #1
 8001884:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001886:	4b79      	ldr	r3, [pc, #484]	; (8001a6c <HAL_RCC_OscConfig+0x4ac>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800188e:	2b00      	cmp	r3, #0
 8001890:	d118      	bne.n	80018c4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001892:	4b76      	ldr	r3, [pc, #472]	; (8001a6c <HAL_RCC_OscConfig+0x4ac>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a75      	ldr	r2, [pc, #468]	; (8001a6c <HAL_RCC_OscConfig+0x4ac>)
 8001898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800189c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800189e:	f7ff f96b 	bl	8000b78 <HAL_GetTick>
 80018a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a4:	e008      	b.n	80018b8 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018a6:	f7ff f967 	bl	8000b78 <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d901      	bls.n	80018b8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e0d3      	b.n	8001a60 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018b8:	4b6c      	ldr	r3, [pc, #432]	; (8001a6c <HAL_RCC_OscConfig+0x4ac>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d0f0      	beq.n	80018a6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d106      	bne.n	80018da <HAL_RCC_OscConfig+0x31a>
 80018cc:	4b66      	ldr	r3, [pc, #408]	; (8001a68 <HAL_RCC_OscConfig+0x4a8>)
 80018ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018d0:	4a65      	ldr	r2, [pc, #404]	; (8001a68 <HAL_RCC_OscConfig+0x4a8>)
 80018d2:	f043 0301 	orr.w	r3, r3, #1
 80018d6:	6713      	str	r3, [r2, #112]	; 0x70
 80018d8:	e01c      	b.n	8001914 <HAL_RCC_OscConfig+0x354>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	2b05      	cmp	r3, #5
 80018e0:	d10c      	bne.n	80018fc <HAL_RCC_OscConfig+0x33c>
 80018e2:	4b61      	ldr	r3, [pc, #388]	; (8001a68 <HAL_RCC_OscConfig+0x4a8>)
 80018e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018e6:	4a60      	ldr	r2, [pc, #384]	; (8001a68 <HAL_RCC_OscConfig+0x4a8>)
 80018e8:	f043 0304 	orr.w	r3, r3, #4
 80018ec:	6713      	str	r3, [r2, #112]	; 0x70
 80018ee:	4b5e      	ldr	r3, [pc, #376]	; (8001a68 <HAL_RCC_OscConfig+0x4a8>)
 80018f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018f2:	4a5d      	ldr	r2, [pc, #372]	; (8001a68 <HAL_RCC_OscConfig+0x4a8>)
 80018f4:	f043 0301 	orr.w	r3, r3, #1
 80018f8:	6713      	str	r3, [r2, #112]	; 0x70
 80018fa:	e00b      	b.n	8001914 <HAL_RCC_OscConfig+0x354>
 80018fc:	4b5a      	ldr	r3, [pc, #360]	; (8001a68 <HAL_RCC_OscConfig+0x4a8>)
 80018fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001900:	4a59      	ldr	r2, [pc, #356]	; (8001a68 <HAL_RCC_OscConfig+0x4a8>)
 8001902:	f023 0301 	bic.w	r3, r3, #1
 8001906:	6713      	str	r3, [r2, #112]	; 0x70
 8001908:	4b57      	ldr	r3, [pc, #348]	; (8001a68 <HAL_RCC_OscConfig+0x4a8>)
 800190a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800190c:	4a56      	ldr	r2, [pc, #344]	; (8001a68 <HAL_RCC_OscConfig+0x4a8>)
 800190e:	f023 0304 	bic.w	r3, r3, #4
 8001912:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d015      	beq.n	8001948 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800191c:	f7ff f92c 	bl	8000b78 <HAL_GetTick>
 8001920:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001922:	e00a      	b.n	800193a <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001924:	f7ff f928 	bl	8000b78 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001932:	4293      	cmp	r3, r2
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e092      	b.n	8001a60 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800193a:	4b4b      	ldr	r3, [pc, #300]	; (8001a68 <HAL_RCC_OscConfig+0x4a8>)
 800193c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	2b00      	cmp	r3, #0
 8001944:	d0ee      	beq.n	8001924 <HAL_RCC_OscConfig+0x364>
 8001946:	e014      	b.n	8001972 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001948:	f7ff f916 	bl	8000b78 <HAL_GetTick>
 800194c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800194e:	e00a      	b.n	8001966 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001950:	f7ff f912 	bl	8000b78 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	f241 3288 	movw	r2, #5000	; 0x1388
 800195e:	4293      	cmp	r3, r2
 8001960:	d901      	bls.n	8001966 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e07c      	b.n	8001a60 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001966:	4b40      	ldr	r3, [pc, #256]	; (8001a68 <HAL_RCC_OscConfig+0x4a8>)
 8001968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800196a:	f003 0302 	and.w	r3, r3, #2
 800196e:	2b00      	cmp	r3, #0
 8001970:	d1ee      	bne.n	8001950 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001972:	7dfb      	ldrb	r3, [r7, #23]
 8001974:	2b01      	cmp	r3, #1
 8001976:	d105      	bne.n	8001984 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001978:	4b3b      	ldr	r3, [pc, #236]	; (8001a68 <HAL_RCC_OscConfig+0x4a8>)
 800197a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197c:	4a3a      	ldr	r2, [pc, #232]	; (8001a68 <HAL_RCC_OscConfig+0x4a8>)
 800197e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001982:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d068      	beq.n	8001a5e <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800198c:	4b36      	ldr	r3, [pc, #216]	; (8001a68 <HAL_RCC_OscConfig+0x4a8>)
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	f003 030c 	and.w	r3, r3, #12
 8001994:	2b08      	cmp	r3, #8
 8001996:	d060      	beq.n	8001a5a <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	2b02      	cmp	r3, #2
 800199e:	d145      	bne.n	8001a2c <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019a0:	4b33      	ldr	r3, [pc, #204]	; (8001a70 <HAL_RCC_OscConfig+0x4b0>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a6:	f7ff f8e7 	bl	8000b78 <HAL_GetTick>
 80019aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019ac:	e008      	b.n	80019c0 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019ae:	f7ff f8e3 	bl	8000b78 <HAL_GetTick>
 80019b2:	4602      	mov	r2, r0
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d901      	bls.n	80019c0 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e04f      	b.n	8001a60 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019c0:	4b29      	ldr	r3, [pc, #164]	; (8001a68 <HAL_RCC_OscConfig+0x4a8>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d1f0      	bne.n	80019ae <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	69da      	ldr	r2, [r3, #28]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6a1b      	ldr	r3, [r3, #32]
 80019d4:	431a      	orrs	r2, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019da:	019b      	lsls	r3, r3, #6
 80019dc:	431a      	orrs	r2, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e2:	085b      	lsrs	r3, r3, #1
 80019e4:	3b01      	subs	r3, #1
 80019e6:	041b      	lsls	r3, r3, #16
 80019e8:	431a      	orrs	r2, r3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ee:	061b      	lsls	r3, r3, #24
 80019f0:	431a      	orrs	r2, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	071b      	lsls	r3, r3, #28
 80019f8:	491b      	ldr	r1, [pc, #108]	; (8001a68 <HAL_RCC_OscConfig+0x4a8>)
 80019fa:	4313      	orrs	r3, r2
 80019fc:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019fe:	4b1c      	ldr	r3, [pc, #112]	; (8001a70 <HAL_RCC_OscConfig+0x4b0>)
 8001a00:	2201      	movs	r2, #1
 8001a02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a04:	f7ff f8b8 	bl	8000b78 <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a0c:	f7ff f8b4 	bl	8000b78 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e020      	b.n	8001a60 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a1e:	4b12      	ldr	r3, [pc, #72]	; (8001a68 <HAL_RCC_OscConfig+0x4a8>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d0f0      	beq.n	8001a0c <HAL_RCC_OscConfig+0x44c>
 8001a2a:	e018      	b.n	8001a5e <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a2c:	4b10      	ldr	r3, [pc, #64]	; (8001a70 <HAL_RCC_OscConfig+0x4b0>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a32:	f7ff f8a1 	bl	8000b78 <HAL_GetTick>
 8001a36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a38:	e008      	b.n	8001a4c <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a3a:	f7ff f89d 	bl	8000b78 <HAL_GetTick>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d901      	bls.n	8001a4c <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e009      	b.n	8001a60 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a4c:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <HAL_RCC_OscConfig+0x4a8>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d1f0      	bne.n	8001a3a <HAL_RCC_OscConfig+0x47a>
 8001a58:	e001      	b.n	8001a5e <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e000      	b.n	8001a60 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8001a5e:	2300      	movs	r3, #0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3718      	adds	r7, #24
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40023800 	.word	0x40023800
 8001a6c:	40007000 	.word	0x40007000
 8001a70:	42470060 	.word	0x42470060

08001a74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d101      	bne.n	8001a86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e01d      	b.n	8001ac2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d106      	bne.n	8001aa0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f7fe ff76 	bl	800098c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2202      	movs	r2, #2
 8001aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	3304      	adds	r3, #4
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4610      	mov	r0, r2
 8001ab4:	f000 f8e4 	bl	8001c80 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2201      	movs	r2, #1
 8001abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ac0:	2300      	movs	r3, #0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001aca:	b480      	push	{r7}
 8001acc:	b085      	sub	sp, #20
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2202      	movs	r2, #2
 8001ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f003 0307 	and.w	r3, r3, #7
 8001ae4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2b06      	cmp	r3, #6
 8001aea:	d007      	beq.n	8001afc <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f042 0201 	orr.w	r2, r2, #1
 8001afa:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8001b04:	2300      	movs	r3, #0
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3714      	adds	r7, #20
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr

08001b12 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b084      	sub	sp, #16
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
 8001b1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d101      	bne.n	8001b2a <HAL_TIM_ConfigClockSource+0x18>
 8001b26:	2302      	movs	r3, #2
 8001b28:	e0a6      	b.n	8001c78 <HAL_TIM_ConfigClockSource+0x166>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2202      	movs	r2, #2
 8001b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001b48:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001b50:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	68fa      	ldr	r2, [r7, #12]
 8001b58:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2b40      	cmp	r3, #64	; 0x40
 8001b60:	d067      	beq.n	8001c32 <HAL_TIM_ConfigClockSource+0x120>
 8001b62:	2b40      	cmp	r3, #64	; 0x40
 8001b64:	d80b      	bhi.n	8001b7e <HAL_TIM_ConfigClockSource+0x6c>
 8001b66:	2b10      	cmp	r3, #16
 8001b68:	d073      	beq.n	8001c52 <HAL_TIM_ConfigClockSource+0x140>
 8001b6a:	2b10      	cmp	r3, #16
 8001b6c:	d802      	bhi.n	8001b74 <HAL_TIM_ConfigClockSource+0x62>
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d06f      	beq.n	8001c52 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8001b72:	e078      	b.n	8001c66 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001b74:	2b20      	cmp	r3, #32
 8001b76:	d06c      	beq.n	8001c52 <HAL_TIM_ConfigClockSource+0x140>
 8001b78:	2b30      	cmp	r3, #48	; 0x30
 8001b7a:	d06a      	beq.n	8001c52 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8001b7c:	e073      	b.n	8001c66 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001b7e:	2b70      	cmp	r3, #112	; 0x70
 8001b80:	d00d      	beq.n	8001b9e <HAL_TIM_ConfigClockSource+0x8c>
 8001b82:	2b70      	cmp	r3, #112	; 0x70
 8001b84:	d804      	bhi.n	8001b90 <HAL_TIM_ConfigClockSource+0x7e>
 8001b86:	2b50      	cmp	r3, #80	; 0x50
 8001b88:	d033      	beq.n	8001bf2 <HAL_TIM_ConfigClockSource+0xe0>
 8001b8a:	2b60      	cmp	r3, #96	; 0x60
 8001b8c:	d041      	beq.n	8001c12 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8001b8e:	e06a      	b.n	8001c66 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001b90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b94:	d066      	beq.n	8001c64 <HAL_TIM_ConfigClockSource+0x152>
 8001b96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b9a:	d017      	beq.n	8001bcc <HAL_TIM_ConfigClockSource+0xba>
      break;
 8001b9c:	e063      	b.n	8001c66 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6818      	ldr	r0, [r3, #0]
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	6899      	ldr	r1, [r3, #8]
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685a      	ldr	r2, [r3, #4]
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	f000 f981 	bl	8001eb4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001bc0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	68fa      	ldr	r2, [r7, #12]
 8001bc8:	609a      	str	r2, [r3, #8]
      break;
 8001bca:	e04c      	b.n	8001c66 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6818      	ldr	r0, [r3, #0]
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	6899      	ldr	r1, [r3, #8]
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685a      	ldr	r2, [r3, #4]
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	f000 f96a 	bl	8001eb4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	689a      	ldr	r2, [r3, #8]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001bee:	609a      	str	r2, [r3, #8]
      break;
 8001bf0:	e039      	b.n	8001c66 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6818      	ldr	r0, [r3, #0]
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	6859      	ldr	r1, [r3, #4]
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	461a      	mov	r2, r3
 8001c00:	f000 f8de 	bl	8001dc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2150      	movs	r1, #80	; 0x50
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f000 f937 	bl	8001e7e <TIM_ITRx_SetConfig>
      break;
 8001c10:	e029      	b.n	8001c66 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6818      	ldr	r0, [r3, #0]
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	6859      	ldr	r1, [r3, #4]
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	461a      	mov	r2, r3
 8001c20:	f000 f8fd 	bl	8001e1e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2160      	movs	r1, #96	; 0x60
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f000 f927 	bl	8001e7e <TIM_ITRx_SetConfig>
      break;
 8001c30:	e019      	b.n	8001c66 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6818      	ldr	r0, [r3, #0]
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	6859      	ldr	r1, [r3, #4]
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	461a      	mov	r2, r3
 8001c40:	f000 f8be 	bl	8001dc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2140      	movs	r1, #64	; 0x40
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f000 f917 	bl	8001e7e <TIM_ITRx_SetConfig>
      break;
 8001c50:	e009      	b.n	8001c66 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	4610      	mov	r0, r2
 8001c5e:	f000 f90e 	bl	8001e7e <TIM_ITRx_SetConfig>
      break;
 8001c62:	e000      	b.n	8001c66 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8001c64:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2201      	movs	r2, #1
 8001c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001c76:	2300      	movs	r3, #0
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3710      	adds	r7, #16
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	4a40      	ldr	r2, [pc, #256]	; (8001d94 <TIM_Base_SetConfig+0x114>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d013      	beq.n	8001cc0 <TIM_Base_SetConfig+0x40>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c9e:	d00f      	beq.n	8001cc0 <TIM_Base_SetConfig+0x40>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4a3d      	ldr	r2, [pc, #244]	; (8001d98 <TIM_Base_SetConfig+0x118>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d00b      	beq.n	8001cc0 <TIM_Base_SetConfig+0x40>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	4a3c      	ldr	r2, [pc, #240]	; (8001d9c <TIM_Base_SetConfig+0x11c>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d007      	beq.n	8001cc0 <TIM_Base_SetConfig+0x40>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	4a3b      	ldr	r2, [pc, #236]	; (8001da0 <TIM_Base_SetConfig+0x120>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d003      	beq.n	8001cc0 <TIM_Base_SetConfig+0x40>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	4a3a      	ldr	r2, [pc, #232]	; (8001da4 <TIM_Base_SetConfig+0x124>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d108      	bne.n	8001cd2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	68fa      	ldr	r2, [r7, #12]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a2f      	ldr	r2, [pc, #188]	; (8001d94 <TIM_Base_SetConfig+0x114>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d02b      	beq.n	8001d32 <TIM_Base_SetConfig+0xb2>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ce0:	d027      	beq.n	8001d32 <TIM_Base_SetConfig+0xb2>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a2c      	ldr	r2, [pc, #176]	; (8001d98 <TIM_Base_SetConfig+0x118>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d023      	beq.n	8001d32 <TIM_Base_SetConfig+0xb2>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a2b      	ldr	r2, [pc, #172]	; (8001d9c <TIM_Base_SetConfig+0x11c>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d01f      	beq.n	8001d32 <TIM_Base_SetConfig+0xb2>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a2a      	ldr	r2, [pc, #168]	; (8001da0 <TIM_Base_SetConfig+0x120>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d01b      	beq.n	8001d32 <TIM_Base_SetConfig+0xb2>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a29      	ldr	r2, [pc, #164]	; (8001da4 <TIM_Base_SetConfig+0x124>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d017      	beq.n	8001d32 <TIM_Base_SetConfig+0xb2>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a28      	ldr	r2, [pc, #160]	; (8001da8 <TIM_Base_SetConfig+0x128>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d013      	beq.n	8001d32 <TIM_Base_SetConfig+0xb2>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a27      	ldr	r2, [pc, #156]	; (8001dac <TIM_Base_SetConfig+0x12c>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d00f      	beq.n	8001d32 <TIM_Base_SetConfig+0xb2>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a26      	ldr	r2, [pc, #152]	; (8001db0 <TIM_Base_SetConfig+0x130>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d00b      	beq.n	8001d32 <TIM_Base_SetConfig+0xb2>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a25      	ldr	r2, [pc, #148]	; (8001db4 <TIM_Base_SetConfig+0x134>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d007      	beq.n	8001d32 <TIM_Base_SetConfig+0xb2>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a24      	ldr	r2, [pc, #144]	; (8001db8 <TIM_Base_SetConfig+0x138>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d003      	beq.n	8001d32 <TIM_Base_SetConfig+0xb2>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a23      	ldr	r2, [pc, #140]	; (8001dbc <TIM_Base_SetConfig+0x13c>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d108      	bne.n	8001d44 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	68fa      	ldr	r2, [r7, #12]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	695b      	ldr	r3, [r3, #20]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	68fa      	ldr	r2, [r7, #12]
 8001d56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	689a      	ldr	r2, [r3, #8]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4a0a      	ldr	r2, [pc, #40]	; (8001d94 <TIM_Base_SetConfig+0x114>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d003      	beq.n	8001d78 <TIM_Base_SetConfig+0xf8>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	4a0c      	ldr	r2, [pc, #48]	; (8001da4 <TIM_Base_SetConfig+0x124>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d103      	bne.n	8001d80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	691a      	ldr	r2, [r3, #16]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	615a      	str	r2, [r3, #20]
}
 8001d86:	bf00      	nop
 8001d88:	3714      	adds	r7, #20
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	40010000 	.word	0x40010000
 8001d98:	40000400 	.word	0x40000400
 8001d9c:	40000800 	.word	0x40000800
 8001da0:	40000c00 	.word	0x40000c00
 8001da4:	40010400 	.word	0x40010400
 8001da8:	40014000 	.word	0x40014000
 8001dac:	40014400 	.word	0x40014400
 8001db0:	40014800 	.word	0x40014800
 8001db4:	40001800 	.word	0x40001800
 8001db8:	40001c00 	.word	0x40001c00
 8001dbc:	40002000 	.word	0x40002000

08001dc0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b087      	sub	sp, #28
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	6a1b      	ldr	r3, [r3, #32]
 8001dd0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	6a1b      	ldr	r3, [r3, #32]
 8001dd6:	f023 0201 	bic.w	r2, r3, #1
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	699b      	ldr	r3, [r3, #24]
 8001de2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001dea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	011b      	lsls	r3, r3, #4
 8001df0:	693a      	ldr	r2, [r7, #16]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	f023 030a 	bic.w	r3, r3, #10
 8001dfc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001dfe:	697a      	ldr	r2, [r7, #20]
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	693a      	ldr	r2, [r7, #16]
 8001e0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	697a      	ldr	r2, [r7, #20]
 8001e10:	621a      	str	r2, [r3, #32]
}
 8001e12:	bf00      	nop
 8001e14:	371c      	adds	r7, #28
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr

08001e1e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	b087      	sub	sp, #28
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	60f8      	str	r0, [r7, #12]
 8001e26:	60b9      	str	r1, [r7, #8]
 8001e28:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	6a1b      	ldr	r3, [r3, #32]
 8001e2e:	f023 0210 	bic.w	r2, r3, #16
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	699b      	ldr	r3, [r3, #24]
 8001e3a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	6a1b      	ldr	r3, [r3, #32]
 8001e40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001e48:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	031b      	lsls	r3, r3, #12
 8001e4e:	697a      	ldr	r2, [r7, #20]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001e5a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	011b      	lsls	r3, r3, #4
 8001e60:	693a      	ldr	r2, [r7, #16]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	697a      	ldr	r2, [r7, #20]
 8001e6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	693a      	ldr	r2, [r7, #16]
 8001e70:	621a      	str	r2, [r3, #32]
}
 8001e72:	bf00      	nop
 8001e74:	371c      	adds	r7, #28
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr

08001e7e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	b085      	sub	sp, #20
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
 8001e86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e94:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001e96:	683a      	ldr	r2, [r7, #0]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	f043 0307 	orr.w	r3, r3, #7
 8001ea0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	68fa      	ldr	r2, [r7, #12]
 8001ea6:	609a      	str	r2, [r3, #8]
}
 8001ea8:	bf00      	nop
 8001eaa:	3714      	adds	r7, #20
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b087      	sub	sp, #28
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	607a      	str	r2, [r7, #4]
 8001ec0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001ece:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	021a      	lsls	r2, r3, #8
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	431a      	orrs	r2, r3
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	697a      	ldr	r2, [r7, #20]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	697a      	ldr	r2, [r7, #20]
 8001ee6:	609a      	str	r2, [r3, #8]
}
 8001ee8:	bf00      	nop
 8001eea:	371c      	adds	r7, #28
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b085      	sub	sp, #20
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d101      	bne.n	8001f0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001f08:	2302      	movs	r3, #2
 8001f0a:	e05a      	b.n	8001fc2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2202      	movs	r2, #2
 8001f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	68fa      	ldr	r2, [r7, #12]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	68fa      	ldr	r2, [r7, #12]
 8001f44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a21      	ldr	r2, [pc, #132]	; (8001fd0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d022      	beq.n	8001f96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f58:	d01d      	beq.n	8001f96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a1d      	ldr	r2, [pc, #116]	; (8001fd4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d018      	beq.n	8001f96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a1b      	ldr	r2, [pc, #108]	; (8001fd8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d013      	beq.n	8001f96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a1a      	ldr	r2, [pc, #104]	; (8001fdc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d00e      	beq.n	8001f96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a18      	ldr	r2, [pc, #96]	; (8001fe0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d009      	beq.n	8001f96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a17      	ldr	r2, [pc, #92]	; (8001fe4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d004      	beq.n	8001f96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a15      	ldr	r2, [pc, #84]	; (8001fe8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d10c      	bne.n	8001fb0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	68ba      	ldr	r2, [r7, #8]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	68ba      	ldr	r2, [r7, #8]
 8001fae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3714      	adds	r7, #20
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	40010000 	.word	0x40010000
 8001fd4:	40000400 	.word	0x40000400
 8001fd8:	40000800 	.word	0x40000800
 8001fdc:	40000c00 	.word	0x40000c00
 8001fe0:	40010400 	.word	0x40010400
 8001fe4:	40014000 	.word	0x40014000
 8001fe8:	40001800 	.word	0x40001800

08001fec <__libc_init_array>:
 8001fec:	b570      	push	{r4, r5, r6, lr}
 8001fee:	4e0d      	ldr	r6, [pc, #52]	; (8002024 <__libc_init_array+0x38>)
 8001ff0:	4c0d      	ldr	r4, [pc, #52]	; (8002028 <__libc_init_array+0x3c>)
 8001ff2:	1ba4      	subs	r4, r4, r6
 8001ff4:	10a4      	asrs	r4, r4, #2
 8001ff6:	2500      	movs	r5, #0
 8001ff8:	42a5      	cmp	r5, r4
 8001ffa:	d109      	bne.n	8002010 <__libc_init_array+0x24>
 8001ffc:	4e0b      	ldr	r6, [pc, #44]	; (800202c <__libc_init_array+0x40>)
 8001ffe:	4c0c      	ldr	r4, [pc, #48]	; (8002030 <__libc_init_array+0x44>)
 8002000:	f000 f820 	bl	8002044 <_init>
 8002004:	1ba4      	subs	r4, r4, r6
 8002006:	10a4      	asrs	r4, r4, #2
 8002008:	2500      	movs	r5, #0
 800200a:	42a5      	cmp	r5, r4
 800200c:	d105      	bne.n	800201a <__libc_init_array+0x2e>
 800200e:	bd70      	pop	{r4, r5, r6, pc}
 8002010:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002014:	4798      	blx	r3
 8002016:	3501      	adds	r5, #1
 8002018:	e7ee      	b.n	8001ff8 <__libc_init_array+0xc>
 800201a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800201e:	4798      	blx	r3
 8002020:	3501      	adds	r5, #1
 8002022:	e7f2      	b.n	800200a <__libc_init_array+0x1e>
 8002024:	08002074 	.word	0x08002074
 8002028:	08002074 	.word	0x08002074
 800202c:	08002074 	.word	0x08002074
 8002030:	08002078 	.word	0x08002078

08002034 <memset>:
 8002034:	4402      	add	r2, r0
 8002036:	4603      	mov	r3, r0
 8002038:	4293      	cmp	r3, r2
 800203a:	d100      	bne.n	800203e <memset+0xa>
 800203c:	4770      	bx	lr
 800203e:	f803 1b01 	strb.w	r1, [r3], #1
 8002042:	e7f9      	b.n	8002038 <memset+0x4>

08002044 <_init>:
 8002044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002046:	bf00      	nop
 8002048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800204a:	bc08      	pop	{r3}
 800204c:	469e      	mov	lr, r3
 800204e:	4770      	bx	lr

08002050 <_fini>:
 8002050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002052:	bf00      	nop
 8002054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002056:	bc08      	pop	{r3}
 8002058:	469e      	mov	lr, r3
 800205a:	4770      	bx	lr
